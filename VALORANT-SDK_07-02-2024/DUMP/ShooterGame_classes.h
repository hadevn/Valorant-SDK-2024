// Class ShooterGame.BaseGameDataEventReceiver
// Size: 0x30 (Inherited: 0x30)
struct UBaseGameDataEventReceiver : UObject {
};

// Class ShooterGame.AbilityRechargeComponent
// Size: 0x108 (Inherited: 0xe8)
struct UAbilityRechargeComponent : UActorComponent {
	int32_t MaxCharges; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate AuthOnAbilityRecharged; // 0xf0(0x10)
	int32_t CurrentCharges; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_CurrentCharges(); // Function ShooterGame.AbilityRechargeComponent.OnRep_CurrentCharges // (Final|Native|Private) // @ game+0x3636bc0
	int32_t GetCurrentCharges(); // Function ShooterGame.AbilityRechargeComponent.GetCurrentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635e50
	void AuthSetMaxCharges(int32_t NumMaxCharges); // Function ShooterGame.AbilityRechargeComponent.AuthSetMaxCharges // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthResetCharges(); // Function ShooterGame.AbilityRechargeComponent.AuthResetCharges // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36355e0
};

// Class ShooterGame.AbilityRechargeCooldownComponent
// Size: 0x130 (Inherited: 0xe8)
struct UAbilityRechargeCooldownComponent : UActorComponent {
	struct FMulticastInlineDelegate OnClientCooldownStateChanged; // 0xe8(0x10)
	struct UEquipmentChargeComponent* EquipmentChargeComponent; // 0xf8(0x08)
	char pad_100[0x10]; // 0x100(0x10)
	float CooldownSeconds; // 0x110(0x04)
	float TempChargeCooldownSeconds; // 0x114(0x04)
	char pad_118[0x8]; // 0x118(0x08)
	float CooldownFinishTimestamp; // 0x120(0x04)
	float TempChargeCooldownFinishTimestamp; // 0x124(0x04)
	int32_t ChargesInUse; // 0x128(0x04)
	bool bCooldownPaused; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)

	void SetNumberOfChargesInUse(int32_t NewChargesInUse); // Function ShooterGame.AbilityRechargeCooldownComponent.SetNumberOfChargesInUse // (Final|Native|Public|BlueprintCallable) // @ game+0x3636c90
	void SetCooldownPaused(bool Paused); // Function ShooterGame.AbilityRechargeCooldownComponent.SetCooldownPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3636c00
	void OnGamePhaseChanged(enum class EAresGamePhase NewGamePhase, int32_t RoundNumberEnded); // Function ShooterGame.AbilityRechargeCooldownComponent.OnGamePhaseChanged // (Native|Event|Public|BlueprintEvent) // @ game+0x3636ae0
	void OnChargesChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.AbilityRechargeCooldownComponent.OnChargesChanged // (Final|Native|Private) // @ game+0x3636a50
	void OnChargeConsumed(struct UResourceComponent* ResourceComponent, int32_t UnitsConsumed); // Function ShooterGame.AbilityRechargeCooldownComponent.OnChargeConsumed // (Final|Native|Private) // @ game+0x3636980
	void OnCharacterRespawn(struct AShooterCharacter* Character); // Function ShooterGame.AbilityRechargeCooldownComponent.OnCharacterRespawn // (Native|Event|Public|BlueprintEvent) // @ game+0x36368f0
	void MulticastUpdateCooldownValues(float ServerWorldTime, float NewCooldownFinishTimestamp, float NewTempChargeCooldownFinishTimestamp, int32_t NewChargesInUse, bool bNewCooldownPaused); // Function ShooterGame.AbilityRechargeCooldownComponent.MulticastUpdateCooldownValues // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3636730
	bool IsInTempChargeCooldown(); // Function ShooterGame.AbilityRechargeCooldownComponent.IsInTempChargeCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636670
	bool IsInCooldown(); // Function ShooterGame.AbilityRechargeCooldownComponent.IsInCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636640
	bool IsCooldownPaused(); // Function ShooterGame.AbilityRechargeCooldownComponent.IsCooldownPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636610
	float GetTempChargeCooldownSeconds(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetTempChargeCooldownSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36360d0
	float GetTempChargeCooldownRemainingSeconds(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetTempChargeCooldownRemainingSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36360a0
	float GetTempChargeCooldownFinishTimestamp(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetTempChargeCooldownFinishTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636070
	int32_t GetNumberOfChargesInUse(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetNumberOfChargesInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636020
	float GetCooldownSeconds(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetCooldownSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635e20
	float GetCooldownRemainingSeconds(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetCooldownRemainingSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635df0
	float GetCooldownFinishTimestamp(); // Function ShooterGame.AbilityRechargeCooldownComponent.GetCooldownFinishTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635dc0
	void ConfigureCooldown(struct FAgentAbilityCooldown AbilityConfig); // Function ShooterGame.AbilityRechargeCooldownComponent.ConfigureCooldown // (Native|Event|Public|BlueprintEvent) // @ game+0x3635b00
	void ClientUpdateCooldownValues(float ServerWorldTime, float NewCooldownFinishTimestamp, float NewTempChargeCooldownFinishTimestamp, int32_t NewChargesInUse, bool bNewCooldownPaused); // Function ShooterGame.AbilityRechargeCooldownComponent.ClientUpdateCooldownValues // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3635940
	void ClientInitialize(struct FAgentAbilityCooldown AbilityConfig); // Function ShooterGame.AbilityRechargeCooldownComponent.ClientInitialize // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3635810
	void ClearAllChargesInUse(); // Function ShooterGame.AbilityRechargeCooldownComponent.ClearAllChargesInUse // (Final|Native|Public|BlueprintCallable) // @ game+0x36357f0
	void AuthUpdateCooldownValuesForClients(); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthUpdateCooldownValuesForClients // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x36355e0
	void AuthStartTempChargeCooldown(); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthStartTempChargeCooldown // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635690
	void AuthStartCooldown(float CooldownPercentCredit); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthStartCooldown // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635610
	void AuthReclaimInUseCharge(struct UEquippableEventBase* Event); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthReclaimInUseCharge // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x36354c0
	void AuthInUseAbilityUsed(struct UEquippableEventBase* Event); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthInUseAbilityUsed // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x3635310
	void AuthInUseAbilitySubobjectDestroyed(struct UEquippableEventBase* Event); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthInUseAbilitySubobjectDestroyed // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x3635280
	void AuthInitialize(struct FAgentAbilityCooldown AbilityConfig); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthInitialize // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36353a0
	void AuthFreeUpInUseCharge(bool bChargeRecalled); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthFreeUpInUseCharge // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthClearAllCooldownTimers(); // Function ShooterGame.AbilityRechargeCooldownComponent.AuthClearAllCooldownTimers // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.ResourceComponent
// Size: 0x138 (Inherited: 0xe8)
struct UResourceComponent : UActorComponent {
	struct FMulticastInlineDelegate OnResourceChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnResourceConsumed; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnPreResourceConsumed; // 0x108(0x10)
	char pad_118[0x4]; // 0x118(0x04)
	int32_t PredictedResourceAmount; // 0x11c(0x04)
	int32_t AuthResourceAmount; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x128(0x08)
	struct UValueDisagreementTimer* CurrentStateDisagreementTimerClassOverride; // 0x130(0x08)

	int32_t Replenish(int32_t Units); // Function ShooterGame.ResourceComponent.Replenish // (Native|Public|BlueprintCallable) // @ game+0x3ac50d0
	void OnRep_AuthResourceAmount(); // Function ShooterGame.ResourceComponent.OnRep_AuthResourceAmount // (Final|Native|Private) // @ game+0x3ac4000
	void NotifyResourceChanged(); // Function ShooterGame.ResourceComponent.NotifyResourceChanged // (Native|Public|BlueprintCallable) // @ game+0x3ac3e90
	bool IsEmpty(); // Function ShooterGame.ResourceComponent.IsEmpty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37dee50
	int32_t GetMaxUnitsConsumable(); // Function ShooterGame.ResourceComponent.GetMaxUnitsConsumable // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949e20
	int32_t GetDisplayChargeCount(); // Function ShooterGame.ResourceComponent.GetDisplayChargeCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ac3a70
	bool Consume(int32_t Units); // Function ShooterGame.ResourceComponent.Consume // (Native|Public|BlueprintCallable) // @ game+0x3ac38c0
	bool CanConsume(int32_t Units); // Function ShooterGame.ResourceComponent.CanConsume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ac3800
};

// Class ShooterGame.AbilityResourceComponent
// Size: 0x158 (Inherited: 0x138)
struct UAbilityResourceComponent : UResourceComponent {
	struct UPurchasedItemComponent* PurchasedItemComponent; // 0x138(0x08)
	struct UTexture* ShopImage; // 0x140(0x08)
	int32_t PipCost; // 0x148(0x04)
	int32_t ChargesToGrantOnPipCast; // 0x14c(0x04)
	char pad_150[0x8]; // 0x150(0x08)

	bool UsePipCasting(); // Function ShooterGame.AbilityResourceComponent.UsePipCasting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636d20
	bool HasPipsToCast(); // Function ShooterGame.AbilityResourceComponent.HasPipsToCast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36365e0
	void HandlePipResourceChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.AbilityResourceComponent.HandlePipResourceChanged // (Final|Native|Protected) // @ game+0x3636550
	void HandlePipCastingGameRuleChanged(enum class EGameRuleBoolName GameRule, bool Enabled); // Function ShooterGame.AbilityResourceComponent.HandlePipCastingGameRuleChanged // (Final|Native|Protected) // @ game+0x3636480
	void HandleOwningShooterPlayerStateChanged(struct AShooterPlayerState* NewValue); // Function ShooterGame.AbilityResourceComponent.HandleOwningShooterPlayerStateChanged // (Final|Native|Protected) // @ game+0x36363f0
	void HandleOwningShooterCharacterChanged(struct AAresItem* Item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AbilityResourceComponent.HandleOwningShooterCharacterChanged // (Final|Native|Protected) // @ game+0x36362e0
	void HandleOwningEquippableOwnerChanged(struct AAresItem* Item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AbilityResourceComponent.HandleOwningEquippableOwnerChanged // (Native|Protected) // @ game+0x36361d0
	int32_t GetPipCost(); // Function ShooterGame.AbilityResourceComponent.GetPipCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3636050
	int32_t GetMaxUnitsConsumableWithResource(); // Function ShooterGame.AbilityResourceComponent.GetMaxUnitsConsumableWithResource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635ff0
	int32_t GetMaxUnitsConsumableWithPips(); // Function ShooterGame.AbilityResourceComponent.GetMaxUnitsConsumableWithPips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635fc0
	int32_t GetChargesToGrantOnPipCast(); // Function ShooterGame.AbilityResourceComponent.GetChargesToGrantOnPipCast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635da0
	bool ConsumeWithResource(int32_t Units); // Function ShooterGame.AbilityResourceComponent.ConsumeWithResource // (Final|Native|Public|BlueprintCallable) // @ game+0x3635d00
	bool ConsumeWithPips(int32_t Units); // Function ShooterGame.AbilityResourceComponent.ConsumeWithPips // (Final|Native|Public|BlueprintCallable) // @ game+0x3635c60
	bool CanConsumeWithResource(int32_t Units); // Function ShooterGame.AbilityResourceComponent.CanConsumeWithResource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635750
	bool CanConsumeWithPips(int32_t Units); // Function ShooterGame.AbilityResourceComponent.CanConsumeWithPips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36356b0
};

// Class ShooterGame.AbilityStatisticsDelegateComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UAbilityStatisticsDelegateComponent : UActorComponent {
	int32_t AuthCastIndex; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct UGameStatisticsComponent* AuthGameStatisticsComponent; // 0xf0(0x08)

	struct UGameStatisticsComponent* LocateGameStatisticsComponent(struct AActor* CauserActor); // Function ShooterGame.AbilityStatisticsDelegateComponent.LocateGameStatisticsComponent // (Final|Native|Static|Private) // @ game+0x36366a0
	struct UGameStatisticsComponent* GetGameStatisticsComponentForCauser(struct AActor* CauserActor, int32_t& CastIndex); // Function ShooterGame.AbilityStatisticsDelegateComponent.GetGameStatisticsComponentForCauser // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3635eb0
	void AuthHandleSubActorBegunPlay(struct AActor* Actor); // Function ShooterGame.AbilityStatisticsDelegateComponent.AuthHandleSubActorBegunPlay // (Final|Native|Private) // @ game+0x36351f0
	int32_t AuthFindCastIndexForActor(struct AActor* LookupActor); // Function ShooterGame.AbilityStatisticsDelegateComponent.AuthFindCastIndexForActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x36350d0
	struct UGameStatisticsComponent* AuthCastAbilityForCauser(struct AActor* CauserActor, struct FVector AbilityLocation, int32_t& CastIndex); // Function ShooterGame.AbilityStatisticsDelegateComponent.AuthCastAbilityForCauser // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3634e90
};

// Class ShooterGame.AbilityTrackingComponent
// Size: 0x138 (Inherited: 0xe8)
struct UAbilityTrackingComponent : UActorComponent {
	struct TSet<struct AActor*> TrackedSubobjects; // 0xe8(0x50)

	struct TSet<struct AActor*> GetTrackedSubobjects(); // Function ShooterGame.AbilityTrackingComponent.GetTrackedSubobjects // (Final|Native|Public|BlueprintCallable) // @ game+0x3636100
};

// Class ShooterGame.AbilityTrackingDelegateComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UAbilityTrackingDelegateComponent : UActorComponent {
	struct UAbilityTrackingComponent* AbilityTrackingComponent; // 0xe8(0x08)
};

// Class ShooterGame.AbilityUpgradeComponent
// Size: 0x120 (Inherited: 0xe8)
struct UAbilityUpgradeComponent : UActorComponent {
	struct TArray<int32_t> RankCost; // 0xe8(0x10)
	enum class EUpgradeCostType CostType; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct UTexture* ShopImage; // 0x100(0x08)
	struct FMulticastInlineDelegate OnRankChanged; // 0x108(0x10)
	int32_t CurrentRank; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)

	void OnRep_CurrentRank(); // Function ShooterGame.AbilityUpgradeComponent.OnRep_CurrentRank // (Final|Native|Protected) // @ game+0x3636be0
	int32_t GetMaxRank(); // Function ShooterGame.AbilityUpgradeComponent.GetMaxRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635f90
	int32_t GetCurrentRank(); // Function ShooterGame.AbilityUpgradeComponent.GetCurrentRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635e80
	void CheckUltimateHighWaterMark(int32_t TotalAcquiredUltPoints); // Function ShooterGame.AbilityUpgradeComponent.CheckUltimateHighWaterMark // (Final|Native|Private) // @ game+0x3635550
	void AuthEquippableOwnerChanged(struct AAresItem* Item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AbilityUpgradeComponent.AuthEquippableOwnerChanged // (Final|Native|Private) // @ game+0x3634fc0
};

// Class ShooterGame.BasePowderedToast
// Size: 0xa8 (Inherited: 0x30)
struct UBasePowderedToast : UObject {
	struct FGameplayTag Channel; // 0x30(0x0c)
	struct FGameplayTag PowderedToastMagnitudeTag; // 0x3c(0x0c)
	char pad_48[0x4]; // 0x48(0x04)
	float UnlockPowderedToastMagnitude; // 0x4c(0x04)
	char pad_50[0x38]; // 0x50(0x38)
	struct FGameplayTagContainer RequiredDescriptors; // 0x88(0x20)

	void OnPlayerControllerReadyForSubscribe(struct APawn* Pawn, struct AController* Controller); // Function ShooterGame.BasePowderedToast.OnPlayerControllerReadyForSubscribe // (Final|Native|Private) // @ game+0x37d6640
};

// Class ShooterGame.AbilityUseAchievement
// Size: 0xa8 (Inherited: 0xa8)
struct UAbilityUseAchievement : UBasePowderedToast {
};

// Class ShooterGame.Accolade
// Size: 0x3e8 (Inherited: 0x3d8)
struct AAccolade : AActor {
	struct AShooterPlayerState* OwningPlayer; // 0x3d8(0x08)
	int32_t Progress; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)

	int32_t ConsumeProgress(); // Function ShooterGame.Accolade.ConsumeProgress // (Final|Native|Public) // @ game+0x3635c30
	void AuthRecordProgress(int32_t Amount); // Function ShooterGame.Accolade.AuthRecordProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthAssignPlayer(struct AShooterPlayerState* Player); // Function ShooterGame.Accolade.AuthAssignPlayer // (Final|Native|Public) // @ game+0x3634e00
};

// Class ShooterGame.AccoladeComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UAccoladeComponent : UActorComponent {
};

// Class ShooterGame.AccoladeDebugComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAccoladeDebugComponent : UActorComponent {
	struct UAccoladeManagerComponent* AccoladeManagerComponent; // 0xe8(0x08)
	struct TArray<struct FAccoladeProgressEntry> AccoladeProgressEntries; // 0xf0(0x10)
	char pad_100[0x18]; // 0x100(0x18)

	void ServerShowPlayerAccolades(struct AShooterPlayerState* PlayerState); // Function ShooterGame.AccoladeDebugComponent.ServerShowPlayerAccolades // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x28c8460
};

// Class ShooterGame.AccoladeManagerComponent
// Size: 0x200 (Inherited: 0xe8)
struct UAccoladeManagerComponent : UActorComponent {
	char pad_E8[0x70]; // 0xe8(0x70)
	struct UCharacterDataAsset* CurrentCharacter; // 0x158(0x08)
	struct TMap<struct TSoftClassPtr<UObject>, struct AAccolade*> SpawnedAccolades; // 0x160(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct UAccoladeDataAsset*> AccoladeActorClassToDataAsset; // 0x1b0(0x50)

	void AuthSpawnAccolades(); // Function ShooterGame.AccoladeManagerComponent.AuthSpawnAccolades // (Final|Native|Protected) // @ game+0x2024060
	void AuthSetupOrTeardown(); // Function ShooterGame.AccoladeManagerComponent.AuthSetupOrTeardown // (Final|Native|Protected) // @ game+0x2024060
	void AuthHandleCharacterSwap(struct UCharacterDataAsset* NewCharacter); // Function ShooterGame.AccoladeManagerComponent.AuthHandleCharacterSwap // (Final|Native|Protected) // @ game+0x3634e00
};

// Class ShooterGame.AccountXPBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAccountXPBlueprintLibrary : UBlueprintFunctionLibrary {

	bool AccountXPMatchViewData_Equals(struct FAccountXPMatchViewData& A, struct FAccountXPMatchViewData& B); // Function ShooterGame.AccountXPBlueprintLibrary.AccountXPMatchViewData_Equals // (Final|Native|Static|Private|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x363d930
};

// Class ShooterGame.InitSystem
// Size: 0x80 (Inherited: 0x30)
struct UInitSystem : UObject {
	struct TSet<struct UInitSystem*> Dependencies; // 0x30(0x50)
};

// Class ShooterGame.AccountXPManager
// Size: 0x108 (Inherited: 0x80)
struct UAccountXPManager : UInitSystem {
	struct FMulticastInlineDelegate OnAccountXPPlayerUpdated; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UContentIndex* ContentIndex; // 0xa0(0x08)
	struct URMSManager* RMSManager; // 0xa8(0x08)
	struct UAccountXPService* AccountXPService; // 0xb0(0x08)
	struct UAccountXPViewModel* ViewModel; // 0xb8(0x08)
	int32_t LevelCheatOverride; // 0xc0(0x04)
	char pad_C4[0x44]; // 0xc4(0x44)

	void TriggerRefreshPlayer(); // Function ShooterGame.AccountXPManager.TriggerRefreshPlayer // (Final|Native|Private|BlueprintCallable) // @ game+0x363fa00
	void SetAccountLevelCheat(int32_t Level); // Function ShooterGame.AccountXPManager.SetAccountLevelCheat // (Final|Native|Public) // @ game+0x3635550
	bool IsEnabled(); // Function ShooterGame.AccountXPManager.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363f0c0
	int32_t GetWinOfTheDayAP(); // Function ShooterGame.AccountXPManager.GetWinOfTheDayAP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x363ed70
	struct UAccountXPViewModel* GetViewModel(); // Function ShooterGame.AccountXPManager.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363ed50
	int32_t GetLevelMaxXP(); // Function ShooterGame.AccountXPManager.GetLevelMaxXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x363e990
	struct UAccountXPManager* GET(struct UWorld* FromWorld); // Function ShooterGame.AccountXPManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x363e270
};

// Class ShooterGame.AccountXPService
// Size: 0x38 (Inherited: 0x30)
struct UAccountXPService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.AccountXPViewModel
// Size: 0x90 (Inherited: 0x30)
struct UAccountXPViewModel : UObject {
	struct FMulticastInlineDelegate OnAccountXPLevelChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnAccountXPXPChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnNextTimeFirstWinAvailableChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnHistoryChanged; // 0x60(0x10)
	int32_t Level; // 0x70(0x04)
	int32_t XP; // 0x74(0x04)
	struct FDateTime NextTimeFirstWinAvailable; // 0x78(0x08)
	struct TArray<struct FAccountXPMatch> History; // 0x80(0x10)

	int32_t GetXP(); // Function ShooterGame.AccountXPViewModel.GetXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363eda0
	enum class EAccountXPXPSourceID GetSourceEnum(struct FString StringSource); // Function ShooterGame.AccountXPViewModel.GetSourceEnum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363ec90
	struct FAccountXPMatch GetMatch(struct FGuid MatchID); // Function ShooterGame.AccountXPViewModel.GetMatch // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x363e9c0
	int32_t GetLevel(); // Function ShooterGame.AccountXPViewModel.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ac5960
	float GetCollectiveMultiplier(struct TArray<struct FAccountXPXPMultiplier> Multipliers); // Function ShooterGame.AccountXPViewModel.GetCollectiveMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363e390
	void AddMatch(struct FAccountXPMatch& Match); // Function ShooterGame.AccountXPViewModel.AddMatch // (Final|Native|Public|HasOutParms) // @ game+0x363dc50
};

// Class ShooterGame.AchievementDebugVisualizer
// Size: 0x3d8 (Inherited: 0x3d8)
struct AAchievementDebugVisualizer : AActor {
};

// Class ShooterGame.AchievementsAdapter
// Size: 0xc0 (Inherited: 0x30)
struct UAchievementsAdapter : UObject {
	char pad_30[0x38]; // 0x30(0x38)
	struct TMap<struct TSoftClassPtr<UObject>, struct UPowderedToastDataAsset*> AchievementClassToDataAsset; // 0x68(0x50)
	char pad_B8[0x8]; // 0xb8(0x08)
};

// Class ShooterGame.AchievementsAdapterInterface
// Size: 0x30 (Inherited: 0x30)
struct UAchievementsAdapterInterface : UInterface {
};

// Class ShooterGame.AchievementsAdapterNoOp
// Size: 0x38 (Inherited: 0x30)
struct UAchievementsAdapterNoOp : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.AchievementsManagerSubsystem
// Size: 0x90 (Inherited: 0x38)
struct UAchievementsManagerSubsystem : UGameInstanceSubsystem {
	struct TScriptInterface<IAchievementsAdapterInterface> AchievementsAdapter; // 0x38(0x10)
	struct TArray<struct UBasePowderedToast*> AchievementList; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)
	struct TWeakObjectPtr<struct AActor> AchievementDebugVisualizer; // 0x60(0x08)
	char pad_68[0x28]; // 0x68(0x28)

	void OnQueryAchievementsComplete(bool bWasSuccessful); // Function ShooterGame.AchievementsManagerSubsystem.OnQueryAchievementsComplete // (Final|Native|Private) // @ game+0x363f360
	void OnQueryAchievementAssetLoadingComplete(bool bWasSuccessful); // Function ShooterGame.AchievementsManagerSubsystem.OnQueryAchievementAssetLoadingComplete // (Final|Native|Private) // @ game+0x363f2d0
	void OnLocalPlayerConnectionStatusChanged(struct AAresPlayerStateBase* PlayerState, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AchievementsManagerSubsystem.OnLocalPlayerConnectionStatusChanged // (Final|Native|Private) // @ game+0x363f1c0
	void OnGamePhaseChanged(enum class EAresGamePhase NewGamePhase, int32_t RoundNumber); // Function ShooterGame.AchievementsManagerSubsystem.OnGamePhaseChanged // (Final|Native|Private) // @ game+0x363f0f0
};

// Class ShooterGame.ActionTraits
// Size: 0x128 (Inherited: 0x30)
struct UActionTraits : UObject {
	struct FName ActionName; // 0x30(0x0c)
	struct FName ActionDisplayName; // 0x3c(0x0c)
	struct FText ActionDescription; // 0x48(0x18)
	enum class EActionSettingsContext SettingsContext; // 0x60(0x01)
	enum class EActionBindRestrictions BindRestriction; // 0x61(0x01)
	char pad_62[0x6]; // 0x62(0x06)
	struct TArray<struct FName> SharedInputCategories; // 0x68(0x10)
	struct TMap<enum class EActionChordTapHoldType, struct FActionChordTapHoldConfig> TapHoldConfigs; // 0x78(0x50)
	struct TMap<enum class EActionChordKeyType, enum class EActionChordTapHoldType> TapHoldDefaults; // 0xc8(0x50)
	struct TArray<struct UActionTraits*> DefaultConsoleChildrenActionTraits; // 0x118(0x10)
};

// Class ShooterGame.DefaultActionTraits
// Size: 0x128 (Inherited: 0x128)
struct UDefaultActionTraits : UActionTraits {
};

// Class ShooterGame.GamepadPresetDataAsset
// Size: 0x108 (Inherited: 0x38)
struct UGamepadPresetDataAsset : UDataAsset {
	struct FText PresetMapName; // 0x38(0x18)
	struct FText PresetMapDescription; // 0x50(0x18)
	struct TMap<struct FName, struct FActionChord> KeyMappings; // 0x68(0x50)
	struct TMap<struct FName, struct FGamepadAlternateActionMappingList> AlternateActionMappings; // 0xb8(0x50)
};

// Class ShooterGame.GamepadPresetListAsset
// Size: 0x48 (Inherited: 0x38)
struct UGamepadPresetListAsset : UDataAsset {
	struct TArray<struct UGamepadPresetDataAsset*> KeyMappings; // 0x38(0x10)
};

// Class ShooterGame.ActionBindingsManager
// Size: 0x2b0 (Inherited: 0x80)
struct UActionBindingsManager : UInitSystem {
	struct FMulticastInlineDelegate ActionBindingChanged; // 0x80(0x10)
	char pad_90[0x50]; // 0x90(0x50)
	struct TMap<struct FActionBindSetIdentifier, struct UActionBindSet*> actions; // 0xe0(0x50)
	struct UActionTraitsManager* ActionTraitsManager; // 0x130(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x138(0x08)
	struct UContentIndex* ContentIndex; // 0x140(0x08)
	char pad_148[0x58]; // 0x148(0x58)
	struct FMulticastInlineDelegate OnConflictStatesUpdated; // 0x1a0(0x10)
	char pad_1B0[0xf0]; // 0x1b0(0xf0)
	struct FMulticastInlineDelegate OnPresetUpdated; // 0x2a0(0x10)

	void UpdateContextConflictStates(enum class EActionSettingsContext Context, struct FName Character); // Function ShooterGame.ActionBindingsManager.UpdateContextConflictStates // (Final|Native|Public|BlueprintCallable) // @ game+0x3640080
	void UpdateAllConflictStates(); // Function ShooterGame.ActionBindingsManager.UpdateAllConflictStates // (Final|Native|Public|BlueprintCallable) // @ game+0x3640060
	bool TryGetActionHoldTime(struct FName ActionName, float& OutHoldTime); // Function ShooterGame.ActionBindingsManager.TryGetActionHoldTime // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363ff60
	struct UActionBindSet* TryGetActionBindSet(struct FName ActionName, enum class EActionBindSetAxisDirection AxisDirection); // Function ShooterGame.ActionBindingsManager.TryGetActionBindSet // (Final|Native|Public|BlueprintCallable) // @ game+0x363fa20
	bool TryGetActionBindingV2(struct FName ActionName, enum class EActionBindSetAxisDirection AxisDirection, int32_t BindIndex, struct FActionChord& OutInput, bool bFallbackToNextBindIndex); // Function ShooterGame.ActionBindingsManager.TryGetActionBindingV2 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363fd60
	bool TryGetActionBinding(struct FName ActionName, enum class EActionBindSetAxisDirection AxisDirection, int32_t BindIndex, struct FInputChord& OutInput, bool bFallbackToNextBindIndex); // Function ShooterGame.ActionBindingsManager.TryGetActionBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363fb20
	void SwapConflictingKeys(enum class EActionSettingsContext Context, struct FName Character, struct FKey& ReferenceKey, struct FKey& SwappingKey); // Function ShooterGame.ActionBindingsManager.SwapConflictingKeys // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363f7e0
	void SetPresetIndexForCharacter(struct FName Character, int32_t PresetIndex); // Function ShooterGame.ActionBindingsManager.SetPresetIndexForCharacter // (Final|Native|Public) // @ game+0x363f700
	void ResetGamepadMappings(struct FName CharacterName); // Function ShooterGame.ActionBindingsManager.ResetGamepadMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x363f660
	void ResetCustomBaseLayer(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetCustomBaseLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x363f5e0
	void ResetAllCharacterSpecificBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetAllCharacterSpecificBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x363f560
	void ResetAllBindingsForCharacter(struct FName CharacterName, enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetAllBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x363f470
	void ResetAllBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetAllBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x363f3f0
	bool IsCharacterLayerAllowed(); // Function ShooterGame.ActionBindingsManager.IsCharacterLayerAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363f090
	bool HasPendingCustomBaseBindings(); // Function ShooterGame.ActionBindingsManager.HasPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363f060
	bool HasPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindingsManager.HasPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363efb0
	bool HasPendingBindingsForAnyCharacter(); // Function ShooterGame.ActionBindingsManager.HasPendingBindingsForAnyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363ef80
	bool HasAnyPendingBindings(); // Function ShooterGame.ActionBindingsManager.HasAnyPendingBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363ef50
	void HandleActionBindingChanged(struct UActionBindSet* ActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.ActionBindingsManager.HandleActionBindingChanged // (Final|Native|Protected) // @ game+0x363edd0
	int32_t GetPresetIndexForCharacter(struct FName Character); // Function ShooterGame.ActionBindingsManager.GetPresetIndexForCharacter // (Final|Native|Public) // @ game+0x363ebe0
	bool GetGamepadBindingV2(struct FName ActionName, struct FActionChord& OutActionChord, int32_t GamepadBindIndex); // Function ShooterGame.ActionBindingsManager.GetGamepadBindingV2 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363e800
	bool GetGamepadBinding(struct FName ActionName, struct FInputChord& OutInputChord, int32_t GamepadBindIndex); // Function ShooterGame.ActionBindingsManager.GetGamepadBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x363e640
	void GetConflictsForCharacter(struct FName Character, struct TArray<struct FConflictList>& OutConflicts); // Function ShooterGame.ActionBindingsManager.GetConflictsForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x363e510
	struct UActionBindingsManager* GetActionBindingsManager(struct UObject* WorldContextObject); // Function ShooterGame.ActionBindingsManager.GetActionBindingsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x363e300
	bool DoesCharacterProfileExist(struct FName Character); // Function ShooterGame.ActionBindingsManager.DoesCharacterProfileExist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x363e1c0
	void DeleteCharacterProfile(struct FName Character); // Function ShooterGame.ActionBindingsManager.DeleteCharacterProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x363e120
	void DeleteAllCharacterProfiles(); // Function ShooterGame.ActionBindingsManager.DeleteAllCharacterProfiles // (Final|Native|Public|BlueprintCallable) // @ game+0x363e100
	void CopyCustomBaseToCharacterProfile(struct FName Character); // Function ShooterGame.ActionBindingsManager.CopyCustomBaseToCharacterProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x363e060
	void CopyCustomBaseToAllCharacterProfiles(); // Function ShooterGame.ActionBindingsManager.CopyCustomBaseToAllCharacterProfiles // (Final|Native|Public|BlueprintCallable) // @ game+0x363e040
	bool CharacterHasNonDefaultPreset(struct FName Character); // Function ShooterGame.ActionBindingsManager.CharacterHasNonDefaultPreset // (Final|Native|Public) // @ game+0x363df90
	void ApplyPendingCustomBaseBindings(); // Function ShooterGame.ActionBindingsManager.ApplyPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x363df70
	void ApplyPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindingsManager.ApplyPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x363ded0
	void ApplyGamepadPreset(struct UGamepadPresetDataAsset* Data, struct FName CharacterName, int32_t PresetIndex); // Function ShooterGame.ActionBindingsManager.ApplyGamepadPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x363dda0
	void ApplyAllPendingCharacterBindings(); // Function ShooterGame.ActionBindingsManager.ApplyAllPendingCharacterBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x363dd80
	void ApplyAllPendingBindings(); // Function ShooterGame.ActionBindingsManager.ApplyAllPendingBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x363dd60
	void AddCharacterProfile(struct FName Character, int32_t PresetIndex, bool bCopyFromCustomBase); // Function ShooterGame.ActionBindingsManager.AddCharacterProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x363db20
};

// Class ShooterGame.ActionBindSet
// Size: 0x1a0 (Inherited: 0x30)
struct UActionBindSet : UObject {
	struct FMulticastInlineDelegate ActionBindingChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate ActionBindConflictStateUpdated; // 0x40(0x10)
	char pad_50[0x10]; // 0x50(0x10)
	struct UActionTraits* Traits; // 0x60(0x08)
	struct UActionBindingsManager* ActionBindingsManager; // 0x68(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x70(0x08)
	char pad_78[0x128]; // 0x78(0x128)

	void SetBindingAtDefaultLayerV2(int32_t BindIndex, struct FActionChord& Key); // Function ShooterGame.ActionBindSet.SetBindingAtDefaultLayerV2 // (Final|Native|Public|HasOutParms) // @ game+0x3648ff0
	void SetBindingAtDefaultLayer(int32_t BindIndex, struct FInputChord& Key); // Function ShooterGame.ActionBindSet.SetBindingAtDefaultLayer // (Final|Native|Public|HasOutParms) // @ game+0x3648e90
	void SetBindingAtCustomBaseLayerV2(int32_t BindIndex, struct FActionChord& Key, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.SetBindingAtCustomBaseLayerV2 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3648cd0
	void SetBindingAtCustomBaseLayer(int32_t BindIndex, struct FInputChord& Key, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.SetBindingAtCustomBaseLayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3648af0
	void SetBindingAtCharacterLayerV2(int32_t BindIndex, struct FActionChord& Key, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.SetBindingAtCharacterLayerV2 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36488f0
	void SetBindingAtCharacterLayer(int32_t BindIndex, struct FInputChord& Key, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.SetBindingAtCharacterLayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36486b0
	void ResetCustomBaseLayer(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetCustomBaseLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3648630
	void ResetBinding(enum class EActionBindSetUserLayer LayerID, int32_t BindIndex, enum class EActionBindPendingMode PendingMode, struct FName CharacterPage); // Function ShooterGame.ActionBindSet.ResetBinding // (Final|Native|Protected|BlueprintCallable) // @ game+0x36484b0
	void ResetAllCharacterSpecificBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetAllCharacterSpecificBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x3648430
	void ResetAllBindingsForCharacter(struct FName CharacterName, enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetAllBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3648340
	void ResetAllBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetAllBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x36482c0
	void RemoveBindingAtCustomBaseLayer(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.RemoveBindingAtCustomBaseLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x36481b0
	void RemoveBindingAtCharacterLayer(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.RemoveBindingAtCharacterLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3648030
	bool IsAxisAction(); // Function ShooterGame.ActionBindSet.IsAxisAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3648000
	bool HasPendingCustomBaseBindingsAtIndex(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasPendingCustomBaseBindingsAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647f60
	bool HasPendingCustomBaseBindings(); // Function ShooterGame.ActionBindSet.HasPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647f30
	bool HasPendingBindingsForCharacterAtIndex(int32_t BindIndex, struct FName Character); // Function ShooterGame.ActionBindSet.HasPendingBindingsForCharacterAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647e40
	bool HasPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindSet.HasPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647d90
	bool HasPendingBindingsForAnyCharacterAtIndex(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasPendingBindingsForAnyCharacterAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647cf0
	bool HasPendingBindingsForAnyCharacter(); // Function ShooterGame.ActionBindSet.HasPendingBindingsForAnyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647cc0
	bool HasConflictForAnyCharacter(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasConflictForAnyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647c20
	bool HasConflict(struct FName Character, int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasConflict // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647b30
	bool HasAnyPendingBindingsAtIndex(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasAnyPendingBindingsAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647a90
	bool HasAnyPendingBindings(); // Function ShooterGame.ActionBindSet.HasAnyPendingBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647a60
	bool HasAnyBindingsOnLayer(enum class EActionBindSetUserLayer LayerID, enum class EActionBindPendingMode PendingMode, struct FName CharacterName); // Function ShooterGame.ActionBindSet.HasAnyBindingsOnLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3647930
	struct FActionChord GetFunctionalBindingV2(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetFunctionalBindingV2 // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36477a0
	struct FInputChord GetFunctionalBinding(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetFunctionalBinding // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647610
	struct FActionChord GetBindingV2(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer, bool bTryGetLocalCharacterBinding); // Function ShooterGame.ActionBindSet.GetBindingV2 // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647430
	struct FActionChord GetBindingForCharacterV2(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingForCharacterV2 // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647260
	struct FInputChord GetBindingForCharacter(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3647090
	struct FActionChord GetBindingAtLayerV2(enum class EActionBindSetUserLayer StartLayer, int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtLayerV2 // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646e80
	struct FInputChord GetBindingAtLayer(enum class EActionBindSetUserLayer StartLayer, int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646c70
	struct FActionChord GetBindingAtDefaultLayerV2(int32_t BindIndex); // Function ShooterGame.ActionBindSet.GetBindingAtDefaultLayerV2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646b90
	struct FInputChord GetBindingAtDefaultLayer(int32_t BindIndex); // Function ShooterGame.ActionBindSet.GetBindingAtDefaultLayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646ab0
	struct FActionChord GetBindingAtCustomBaseLayerV2(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtCustomBaseLayerV2 // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646920
	struct FInputChord GetBindingAtCustomBaseLayer(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtCustomBaseLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646790
	struct FActionChord GetBindingAtCharacterLayerV2(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtCharacterLayerV2 // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36465c0
	struct FInputChord GetBindingAtCharacterLayer(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtCharacterLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36463f0
	struct FInputChord GetBinding(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer, bool bTryGetLocalCharacterBinding); // Function ShooterGame.ActionBindSet.GetBinding // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646210
	enum class EActionBindSetAxisDirection GetAxisDirection(); // Function ShooterGame.ActionBindSet.GetAxisDirection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36461e0
	struct FName GetActionName(); // Function ShooterGame.ActionBindSet.GetActionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36461a0
	bool AreBindRestrictionsMetAtCustomBaseLayer(); // Function ShooterGame.ActionBindSet.AreBindRestrictionsMetAtCustomBaseLayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3646170
	void ApplyPendingCustomBaseBindings(); // Function ShooterGame.ActionBindSet.ApplyPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x3646150
	void ApplyPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindSet.ApplyPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x36460b0
	void ApplyAllPendingCharacterBindings(); // Function ShooterGame.ActionBindSet.ApplyAllPendingCharacterBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x3646090
	void ApplyAllPendingBindings(); // Function ShooterGame.ActionBindSet.ApplyAllPendingBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x3646070
};

// Class ShooterGame.ActionTraitsManager
// Size: 0x90 (Inherited: 0x30)
struct UActionTraitsManager : UObject {
	struct TArray<struct UActionTraits*> ActionTraitClasses; // 0x30(0x10)
	char pad_40[0x50]; // 0x40(0x50)

	struct UActionTraits* TryGetActionTraits(struct FName ActionName); // Function ShooterGame.ActionTraitsManager.TryGetActionTraits // (Final|Native|Public|BlueprintCallable) // @ game+0x3649110
};

// Class ShooterGame.ActorCaptureComponent2D
// Size: 0xa10 (Inherited: 0xa00)
struct UActorCaptureComponent2D : USceneCaptureComponent2D {
	struct USceneComponent* RootComponent; // 0xa00(0x08)
	char pad_A08[0x8]; // 0xa08(0x08)

	void SetRootComponent(struct USceneComponent* Component); // Function ShooterGame.ActorCaptureComponent2D.SetRootComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x364f140
	void RemoveComponentFromCapture(struct USceneComponent* AffectedComponent); // Function ShooterGame.ActorCaptureComponent2D.RemoveComponentFromCapture // (Final|Native|Protected) // @ game+0x364eb30
	void HandleComponentTreeChanged(struct USceneComponent* AffectedComponent, bool bAttached); // Function ShooterGame.ActorCaptureComponent2D.HandleComponentTreeChanged // (Final|Native|Protected) // @ game+0x364e870
	void AddComponentToCapture(struct USceneComponent* AffectedComponent); // Function ShooterGame.ActorCaptureComponent2D.AddComponentToCapture // (Final|Native|Protected) // @ game+0x364df60
};

// Class ShooterGame.StateComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UStateComponent : UActorComponent {
	bool bAutoAddToStateMachine; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct UStateMachineComponent* OwningStateMachineComponent; // 0xf0(0x08)

	bool IsCurrentState(); // Function ShooterGame.StateComponent.IsCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c00010
	void CheckStateMachine(struct AActor* Owner); // Function ShooterGame.StateComponent.CheckStateMachine // (Final|Native|Private) // @ game+0x3634e00
};

// Class ShooterGame.EquippableStateComponent
// Size: 0x1f0 (Inherited: 0xf8)
struct UEquippableStateComponent : UStateComponent {
	bool bEquippableUsedState; // 0xf8(0x01)
	bool bRequiresTick; // 0xf9(0x01)
	bool bRequiresReplication; // 0xfa(0x01)
	char pad_FB[0x5]; // 0xfb(0x05)
	struct FItemSlotBlocking EquipBlocking; // 0x100(0x18)
	struct FItemSlotBlocking ActivationInputBlocking; // 0x118(0x18)
	enum class EStateBehaviorOnUnequip UnequipBehavior; // 0x130(0x01)
	enum class EStateBehaviorOnUnpossess UnpossessBehavior; // 0x131(0x01)
	char pad_132[0x6]; // 0x132(0x06)
	struct UStateComponent* UnpossessState; // 0x138(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimerClassOverride; // 0x140(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x148(0x08)
	bool bOverrideFogOfWarWhileInState; // 0x150(0x01)
	char pad_151[0x3]; // 0x151(0x03)
	float FogOfWarAudibleDistance; // 0x154(0x04)
	float FogOfWarOutroTime; // 0x158(0x04)
	float FogOfWarMaxStateDuration; // 0x15c(0x04)
	bool bIsNotClientPredicted; // 0x160(0x01)
	char pad_161[0x8f]; // 0x161(0x8f)

	enum class EReplacementStateType ShouldUseReplacementState(); // Function ShooterGame.EquippableStateComponent.ShouldUseReplacementState // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x38c8eb0
	bool ShouldUseFirstPersonPerspective(); // Function ShooterGame.EquippableStateComponent.ShouldUseFirstPersonPerspective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8e80
	void SetUnpossessState(struct UStateComponent* State); // Function ShooterGame.EquippableStateComponent.SetUnpossessState // (Final|Native|Protected|BlueprintCallable) // @ game+0x38c8df0
	void SetReplacementState(struct UScriptStateComponent* ReplacementState, enum class EReplacementStateType ReplacementCondition); // Function ShooterGame.EquippableStateComponent.SetReplacementState // (Final|Native|Public|BlueprintCallable) // @ game+0x38c8d20
	struct UScriptStateComponent* GetReplacementState(enum class EReplacementStateType ReplacementType); // Function ShooterGame.EquippableStateComponent.GetReplacementState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c84f0
	struct AShooterPlayerController* GetOwningShooterPlayerController(); // Function ShooterGame.EquippableStateComponent.GetOwningShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c84c0
	struct AShooterCharacter* GetOwningShooterCharacter(); // Function ShooterGame.EquippableStateComponent.GetOwningShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8490
	struct UEquippableStateMachineComponent* GetOwningEquippableStateMachineComponent(); // Function ShooterGame.EquippableStateComponent.GetOwningEquippableStateMachineComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8460
	struct AAresEquippable* GetOwningEquippable(); // Function ShooterGame.EquippableStateComponent.GetOwningEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8430
	struct ACharacter* GetOwningCharacter(); // Function ShooterGame.EquippableStateComponent.GetOwningCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8400
	struct AAresPlayerController* GetOwningAresPlayerController(); // Function ShooterGame.EquippableStateComponent.GetOwningAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c83d0
	void AuthSetOverrideFogOfWarWhileInState(bool bNewOverrideFogOfWarWhileInState); // Function ShooterGame.EquippableStateComponent.AuthSetOverrideFogOfWarWhileInState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
};

// Class ShooterGame.ScriptStateComponent
// Size: 0x2e0 (Inherited: 0x1f0)
struct UScriptStateComponent : UEquippableStateComponent {
	char pad_1F0[0x8]; // 0x1f0(0x08)
	struct TArray<struct FEquippableStateBuffInfo> StateBuffs; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnStateEnter; // 0x208(0x10)
	struct FMulticastInlineDelegate OnStateExit; // 0x218(0x10)
	struct FMulticastInlineDelegate OnStateTick; // 0x228(0x10)
	struct TArray<struct FScriptStateEffectInfo> StateEffects; // 0x238(0x10)
	struct UStateComponent* ScriptNextState; // 0x248(0x08)
	struct UStateComponent* ScriptSuppressedState; // 0x250(0x08)
	struct UStateComponent* ScriptDisarmedState; // 0x258(0x08)
	char pad_260[0x4]; // 0x260(0x04)
	struct TWeakObjectPtr<struct UObject> CustomContext; // 0x264(0x08)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TArray<struct FActiveScriptStateEffect> ActiveStateEffects; // 0x270(0x10)
	struct TArray<struct FActiveScriptStateEffect> InterruptableStateEffects; // 0x280(0x10)
	struct FQueuedStateTransition QueuedStateTransition; // 0x290(0x38)
	struct FMulticastInlineDelegate OnStateHandleInputAction; // 0x2c8(0x10)
	struct UStateTransitionContext* CurrentContext; // 0x2d8(0x08)

	void SetSuppressedState(struct UStateComponent* State); // Function ShooterGame.ScriptStateComponent.SetSuppressedState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04a50
	struct UStateTransitionContext* SetNewContext(struct UStateTransitionContext* ContextType); // Function ShooterGame.ScriptStateComponent.SetNewContext // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04820
	void SetDisarmedState(struct UStateComponent* State); // Function ShooterGame.ScriptStateComponent.SetDisarmedState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04790
	void SetDefaultNextState(struct UStateComponent* State); // Function ShooterGame.ScriptStateComponent.SetDefaultNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3883ca0
	void SetCustomContext(struct UObject* NewContext); // Function ShooterGame.ScriptStateComponent.SetCustomContext // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04670
	void SetCurrentContext(struct UStateTransitionContext* NewContext); // Function ShooterGame.ScriptStateComponent.SetCurrentContext // (Final|Native|Public|BlueprintCallable) // @ game+0x37dfc20
	void OnSyncToAuthValues(); // Function ShooterGame.ScriptStateComponent.OnSyncToAuthValues // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void InterruptStateEffects(); // Function ShooterGame.ScriptStateComponent.InterruptStateEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04570
	bool HasQueuedStateTransition(); // Function ShooterGame.ScriptStateComponent.HasQueuedStateTransition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b04530
	void GoToStateWithContext(struct UStateComponent* NewState, struct UStateTransitionContext* Context, float TimeUntilTransition); // Function ShooterGame.ScriptStateComponent.GoToStateWithContext // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04410
	void GoToState(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.ScriptStateComponent.GoToState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b042b0
	void GoToNextState(float TimeUntilTransition); // Function ShooterGame.ScriptStateComponent.GoToNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04210
	struct UStateComponent* GetSuppressedState(); // Function ShooterGame.ScriptStateComponent.GetSuppressedState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b041e0
	struct UStateComponent* GetDisarmedState(); // Function ShooterGame.ScriptStateComponent.GetDisarmedState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3956410
	struct UStateComponent* GetDefaultNextState(); // Function ShooterGame.ScriptStateComponent.GetDefaultNextState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b04150
	struct UStateTransitionContext* GetCurrentContext(); // Function ShooterGame.ScriptStateComponent.GetCurrentContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ef40
};

// Class ShooterGame.RespondToEventStateComponent
// Size: 0x3d0 (Inherited: 0x2e0)
struct URespondToEventStateComponent : UScriptStateComponent {
	struct FMulticastInlineDelegate OnIgnoredResponseOutOfGameplay; // 0x2e0(0x10)
	struct TArray<struct FStateChangeInputResponse> StateChangeInputs; // 0x2f0(0x10)
	struct TArray<struct FTriggerEventInputResponse> TriggerEventInputs; // 0x300(0x10)
	struct FActorContextResponse StateChangeActorEvent; // 0x310(0x30)
	struct TArray<struct FEquippableInventoryEventResponse> StateChangesInventoryEvent; // 0x340(0x10)
	struct FEquippableResourceResponse StateChangeResourceAvailable; // 0x350(0x10)
	char pad_360[0x20]; // 0x360(0x20)
	struct TMap<struct UEquippableEventBase*, struct UStateComponent*> EquippableEventResponses; // 0x380(0x50)

	void UnsubscribeFromInventoryEvents(struct UAresInventory* Inventory); // Function ShooterGame.RespondToEventStateComponent.UnsubscribeFromInventoryEvents // (Final|Native|Private) // @ game+0x3aceb90
	void SubscribeToInventoryEvents(struct UAresInventory* Inventory); // Function ShooterGame.RespondToEventStateComponent.SubscribeToInventoryEvents // (Final|Native|Private) // @ game+0x3aceb00
	void ServerAcknowledgeResyncTimePassed(struct FNetworkedMovementTimestamp PassedResyncStateStartTimestamp); // Function ShooterGame.RespondToEventStateComponent.ServerAcknowledgeResyncTimePassed // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3acea70
	bool RespondsToInput(enum class EAresEquippableInput InputEvent); // Function ShooterGame.RespondToEventStateComponent.RespondsToInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ace9e0
	void ResourceChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.RespondToEventStateComponent.ResourceChanged // (Final|Native|Private) // @ game+0x3ace950
	bool ProcessInventoryEventResponse(struct UAresInventory* Inventory, struct FEquippableInventoryEventResponse& Response); // Function ShooterGame.RespondToEventStateComponent.ProcessInventoryEventResponse // (Final|Native|Private|HasOutParms) // @ game+0x3ace650
	void OnRelevantEquippableEventEmitted(struct UEquippableEventBase* Event); // Function ShooterGame.RespondToEventStateComponent.OnRelevantEquippableEventEmitted // (Final|Native|Protected) // @ game+0x3ace5c0
	void MulticastSetStateStartTimestamp(struct FNetworkedMovementTimestamp NewResyncStateStartTimestamp); // Function ShooterGame.RespondToEventStateComponent.MulticastSetStateStartTimestamp // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3ace530
	void MulticastForceRespondToActorEvent(); // Function ShooterGame.RespondToEventStateComponent.MulticastForceRespondToActorEvent // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x37a3460
	void HandleOwnerSet(struct AAresItem* Item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.RespondToEventStateComponent.HandleOwnerSet // (Final|Native|Private) // @ game+0x3ace160
	void HandleInventoryEvent(struct AAresEquippable* Equippable); // Function ShooterGame.RespondToEventStateComponent.HandleInventoryEvent // (Final|Native|Private) // @ game+0x3ace0d0
	float GetStateElapsedTime(); // Function ShooterGame.RespondToEventStateComponent.GetStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ace0a0
	struct UAresInventory* GetOwningInventory(); // Function ShooterGame.RespondToEventStateComponent.GetOwningInventory // (Final|Native|Private|Const) // @ game+0x3acde50
	void ClearInputResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, enum class EAresActivationInputType ActivationType); // Function ShooterGame.RespondToEventStateComponent.ClearInputResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3acdc00
	void ClearAllInputTriggeredEvents(); // Function ShooterGame.RespondToEventStateComponent.ClearAllInputTriggeredEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x3acdbe0
	void ClearAllInputResponses(); // Function ShooterGame.RespondToEventStateComponent.ClearAllInputResponses // (Final|Native|Public|BlueprintCallable) // @ game+0x3acdbc0
	bool BP_RespondToInput(struct FTriggerInput InputResponse, bool bForceRespond); // Function ShooterGame.RespondToEventStateComponent.BP_RespondToInput // (Native|Event|Protected|BlueprintEvent) // @ game+0x3acdae0
	void BP_ActorEventTriggered(enum class EActorEvent Event); // Function ShooterGame.RespondToEventStateComponent.BP_ActorEventTriggered // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void AddResponseToEquippableEvent(struct UEquippableEventBase* EventType, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddResponseToEquippableEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3acda10
	void AddResponseToAnyEquipped(struct UStateComponent* ChangeToState, struct TArray<struct AAresEquippable*>& Equippables); // Function ShooterGame.RespondToEventStateComponent.AddResponseToAnyEquipped // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3acd920
	void AddResponseToAllUnequipped(struct UStateComponent* ChangeToState, struct TArray<struct AAresEquippable*>& Equippables); // Function ShooterGame.RespondToEventStateComponent.AddResponseToAllUnequipped // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3acd830
	void AddResourceAvailableResponse(struct UResourceComponent* Resource, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddResourceAvailableResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3acd760
	void AddNewInputTriggeredEvent(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct FDelegate Event, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondInSpawnZone); // Function ShooterGame.RespondToEventStateComponent.AddNewInputTriggeredEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3acd550
	void AddNewInputResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed, bool bCanRespondInSpawnZones, enum class EAresActivationInputType ActivationType); // Function ShooterGame.RespondToEventStateComponent.AddNewInputResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3acd2d0
	void AddEquipResponse_Internal(enum class EEquipType EquipType, struct UStateComponent* ChangeToState, struct TArray<struct AAresEquippable*>& Equippables); // Function ShooterGame.RespondToEventStateComponent.AddEquipResponse_Internal // (Final|Native|Public|HasOutParms) // @ game+0x3acd1a0
	void AddEquipResponse(enum class EEquipType EquipType, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddEquipResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3acd0d0
	void AddActorContextResponse(enum class EActorEvent ActorEvent, enum class EActorCombination Combination, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddActorContextResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3accd40
	void ActorKilled(struct UDamageResponse* DamageResponse); // Function ShooterGame.RespondToEventStateComponent.ActorKilled // (Final|Native|Private) // @ game+0x3acccb0
	void ActorDestroyed(struct AActor* Actor); // Function ShooterGame.RespondToEventStateComponent.ActorDestroyed // (Final|Native|Private) // @ game+0x3accc20
};

// Class ShooterGame.ActorLockonStateComponent
// Size: 0x400 (Inherited: 0x3d0)
struct UActorLockonStateComponent : URespondToEventStateComponent {
	float Radius; // 0x3d0(0x04)
	float ConeAngle; // 0x3d4(0x04)
	float ConePullBack; // 0x3d8(0x04)
	bool bTwoDimensionalCone; // 0x3dc(0x01)
	bool bCheckLineOfSight; // 0x3dd(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x3de(0x01)
	char pad_3DF[0x1]; // 0x3df(0x01)
	float LockGracePeriod; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct AActor* LockedOnTarget; // 0x3e8(0x08)
	struct UScriptStateComponent* LockLostState; // 0x3f0(0x08)
	char pad_3F8[0x8]; // 0x3f8(0x08)

	void SetLockLostState(struct UScriptStateComponent* NewLockLostState); // Function ShooterGame.ActorLockonStateComponent.SetLockLostState // (Final|Native|Public|BlueprintCallable) // @ game+0x364ef40
	void MulticastLockLost(); // Function ShooterGame.ActorLockonStateComponent.MulticastLockLost // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x364e980
	struct AActor* GetLockOnTarget(); // Function ShooterGame.ActorLockonStateComponent.GetLockOnTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e410
	void BreakLockOnTarget(); // Function ShooterGame.ActorLockonStateComponent.BreakLockOnTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x364e080
};

// Class ShooterGame.MinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UMinimapDisplayComponentDeprecated : USceneComponent {
};

// Class ShooterGame.ActorMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UActorMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.ActorStateComponent
// Size: 0x160 (Inherited: 0xf8)
struct UActorStateComponent : UStateComponent {
	struct FMulticastInlineDelegate OnStateEnter; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnStateExit; // 0x108(0x10)
	struct UStateComponent* ActorNextState; // 0x118(0x08)
	struct FQueuedStateTransition QueuedStateTransition; // 0x120(0x38)
	struct UStateTransitionContext* CurrentContext; // 0x158(0x08)

	struct UStateTransitionContext* SetNewContext(struct UStateTransitionContext* ContextType); // Function ShooterGame.ActorStateComponent.SetNewContext // (Final|Native|Public|BlueprintCallable) // @ game+0x364efd0
	void SetDefaultNextState(struct UStateComponent* State); // Function ShooterGame.ActorStateComponent.SetDefaultNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x364eeb0
	void SetCurrentContext(struct UStateTransitionContext* NewContext); // Function ShooterGame.ActorStateComponent.SetCurrentContext // (Final|Native|Public|BlueprintCallable) // @ game+0x364ee20
	bool HasQueuedStateTransition(); // Function ShooterGame.ActorStateComponent.HasQueuedStateTransition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e940
	void GoToStateWithContext(struct UStateComponent* NewState, struct UStateTransitionContext* Context, float TimeUntilTransition); // Function ShooterGame.ActorStateComponent.GoToStateWithContext // (Final|Native|Public|BlueprintCallable) // @ game+0x364e750
	void GoToState(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.ActorStateComponent.GoToState // (Final|Native|Public|BlueprintCallable) // @ game+0x364e680
	void GoToNextState(float TimeUntilTransition); // Function ShooterGame.ActorStateComponent.GoToNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x364e600
	struct UStateComponent* GetDefaultNextState(); // Function ShooterGame.ActorStateComponent.GetDefaultNextState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e2c0
	struct UStateTransitionContext* GetCurrentContext(); // Function ShooterGame.ActorStateComponent.GetCurrentContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e270
};

// Class ShooterGame.StateMachineComponent
// Size: 0x1e0 (Inherited: 0xe8)
struct UStateMachineComponent : UActorComponent {
	struct FMulticastInlineDelegate OnStateMachineReset; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnStateAdded; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x108(0x10)
	char pad_118[0x18]; // 0x118(0x18)
	struct TArray<struct UStateTransitionContext*> CachedTransitionContexts; // 0x130(0x10)
	struct TMap<struct UStateComponent*, struct FStateMetadata> States; // 0x140(0x50)
	struct FStateContext ClientPredictedCurrentState; // 0x190(0x18)
	struct FStateContext AuthCurrentState; // 0x1a8(0x18)
	float CurrentSubframeWorldTimeSeconds; // 0x1c0(0x04)
	char pad_1C4[0x4]; // 0x1c4(0x04)
	struct UStateComponent* StartingState; // 0x1c8(0x08)
	struct UValueDisagreementTimer* CurrentStateDisagreementTimer; // 0x1d0(0x08)
	struct UValueDisagreementTimer* CurrentStateDisagreementTimerClassOverride; // 0x1d8(0x08)

	void SetStartingState(struct UStateComponent* State); // Function ShooterGame.StateMachineComponent.SetStartingState // (Final|Native|Public|BlueprintCallable) // @ game+0x3c00180
	void RemoveState(struct UStateComponent* State); // Function ShooterGame.StateMachineComponent.RemoveState // (Final|Native|Public|BlueprintCallable) // @ game+0x3c00060
	void OnRep_AuthCurrentState(); // Function ShooterGame.StateMachineComponent.OnRep_AuthCurrentState // (Final|Native|Private) // @ game+0x3c00040
	void InitializeStartingState(struct AActor* Owner); // Function ShooterGame.StateMachineComponent.InitializeStartingState // (Final|Native|Private) // @ game+0x3bfff50
	struct UStateComponent* GetStartingState(); // Function ShooterGame.StateMachineComponent.GetStartingState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d7f30
	struct UStateComponent* GetCurrentState(); // Function ShooterGame.StateMachineComponent.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffa60
	void ClientResetStateMachine(); // Function ShooterGame.StateMachineComponent.ClientResetStateMachine // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x36355e0
	void AuthResetStateMachine(); // Function ShooterGame.StateMachineComponent.AuthResetStateMachine // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AddState(struct UStateComponent* State); // Function ShooterGame.StateMachineComponent.AddState // (Final|Native|Public|BlueprintCallable) // @ game+0x3bff6f0
};

// Class ShooterGame.ActorStateMachineComponent
// Size: 0x230 (Inherited: 0x1e0)
struct UActorStateMachineComponent : UStateMachineComponent {
	char pad_1E0[0x48]; // 0x1e0(0x48)
	bool bStateMachineEnabled; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)

	struct AActor* GetOwningActor(); // Function ShooterGame.ActorStateMachineComponent.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e4d0
};

// Class ShooterGame.ActorTargetingStateComponent
// Size: 0x498 (Inherited: 0x3d0)
struct UActorTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnActorSelected; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnInvalidActor; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnActorTargetedLocally; // 0x3f0(0x10)
	struct FClassInclusionExclusionFilter ActorFilter; // 0x400(0x50)
	enum class EAresTeamTargeting TeamFilter; // 0x450(0x01)
	bool bPawnsOnly; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	float Radius; // 0x454(0x04)
	float ConfirmationGraceAmount; // 0x458(0x04)
	enum class ECollisionChannel SearchCollision; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	float ConeAngle; // 0x460(0x04)
	float ConeYawAngle; // 0x464(0x04)
	float ConePitchAngle; // 0x468(0x04)
	float ConePullBack; // 0x46c(0x04)
	bool bTwoDimensionalCone; // 0x470(0x01)
	bool bCheckLineOfSight; // 0x471(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x472(0x01)
	bool bTargetOnRemoteClients; // 0x473(0x01)
	char pad_474[0x4]; // 0x474(0x04)
	struct AActor* CurrentActorTarget; // 0x478(0x08)
	bool bDrawDebugTargeting; // 0x480(0x01)
	char pad_481[0x17]; // 0x481(0x17)

	struct AActor* GetCurrentTarget(); // Function ShooterGame.ActorTargetingStateComponent.GetCurrentTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e2a0
	float GetActorScore(struct AActor* Actor); // Function ShooterGame.ActorTargetingStateComponent.GetActorScore // (Native|Event|Public|BlueprintEvent) // @ game+0x364e1c0
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.ActorTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x364dd70
	bool ActorIsValid(struct AActor* Actor); // Function ShooterGame.ActorTargetingStateComponent.ActorIsValid // (Native|Event|Public|BlueprintEvent) // @ game+0x364dcc0
};

// Class ShooterGame.VisibilityComponent
// Size: 0x188 (Inherited: 0xe8)
struct UVisibilityComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnOwnerEnteredTeamSight; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnOwnerExitedTeamSight; // 0x100(0x10)
	bool bSeenByResult; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct TArray<struct AShooterCharacter*> CharactersWithVisibility; // 0x118(0x10)
	enum class EEnemyVisibilityOption EnemyVisibility; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct FMulticastInlineDelegate CanBeSeenByCharacterOverride; // 0x130(0x10)
	char pad_140[0x20]; // 0x140(0x20)
	float VisibilityLostTime; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	struct FTimerHandle ExitVisibilityTimerHandle; // 0x168(0x08)
	char pad_170[0x18]; // 0x170(0x18)

	bool HasTeamSight(struct AActor* TargetActor); // Function ShooterGame.VisibilityComponent.HasTeamSight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60f00
	bool HasAllianceSight(enum class EAresAlliance Alliance); // Function ShooterGame.VisibilityComponent.HasAllianceSight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60e60
	float GetVisibilityLostTime(); // Function ShooterGame.VisibilityComponent.GetVisibilityLostTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x262e830
	bool GetUseTeamVisibilityData(); // Function ShooterGame.VisibilityComponent.GetUseTeamVisibilityData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85710
	float GetLastTimeVisibleToEnemy(); // Function ShooterGame.VisibilityComponent.GetLastTimeVisibleToEnemy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60bb0
	struct FVector GetLastLocationVisibleToEnemy(); // Function ShooterGame.VisibilityComponent.GetLastLocationVisibleToEnemy // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60b80
	struct FVector GetLastFacingVisibleToEnemy(); // Function ShooterGame.VisibilityComponent.GetLastFacingVisibleToEnemy // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60b50
	bool CanBeSeenByCharacterDefault(struct AShooterCharacter* Character); // Function ShooterGame.VisibilityComponent.CanBeSeenByCharacterDefault // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37de720
	bool CanBeSeenByCharacter(struct AShooterCharacter* Character); // Function ShooterGame.VisibilityComponent.CanBeSeenByCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60930
	void AuthUnregisterForUpdate(); // Function ShooterGame.VisibilityComponent.AuthUnregisterForUpdate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthRegisterForUpdate(); // Function ShooterGame.VisibilityComponent.AuthRegisterForUpdate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.ActorVisibilityComponent
// Size: 0x188 (Inherited: 0x188)
struct UActorVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.ActorVisualizationComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UActorVisualizationComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bPawnsOnly; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct FClassInclusionExclusionFilter ActorFilter; // 0xf8(0x50)
	enum class EAresTeamTargeting TeamFilter; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct FEmbeddedEffectInfo VisualizationEffect; // 0x150(0x30)
	bool bVisualizationActiveInitially; // 0x180(0x01)
	char pad_181[0x17]; // 0x181(0x17)
	struct TArray<struct AActor*> PendingVisualizedActors; // 0x198(0x10)

	void StopVisualization(); // Function ShooterGame.ActorVisualizationComponent.StopVisualization // (Final|Native|Public|BlueprintCallable) // @ game+0x364f350
	void StartVisualization(); // Function ShooterGame.ActorVisualizationComponent.StartVisualization // (Final|Native|Public|BlueprintCallable) // @ game+0x364f330
	void SetVisualization(bool bVisualization); // Function ShooterGame.ActorVisualizationComponent.SetVisualization // (Final|Native|Public|BlueprintCallable) // @ game+0x364f2a0
	void OnPlayerSpawn(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.ActorVisualizationComponent.OnPlayerSpawn // (Final|Native|Private) // @ game+0x364ea40
	void OnActorSpawned(struct AActor* NewActor); // Function ShooterGame.ActorVisualizationComponent.OnActorSpawned // (Final|Native|Private) // @ game+0x364e9b0
};

// Class ShooterGame.AresBasePrimaryDataAsset
// Size: 0x50 (Inherited: 0x38)
struct UAresBasePrimaryDataAsset : UPrimaryDataAsset {
	struct FGuid UUID; // 0x38(0x10)
	bool bHideIfNotOwned; // 0x48(0x01)
	bool bBaseContent; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)

	enum class EAresContentType GetContentType(); // Function ShooterGame.AresBasePrimaryDataAsset.GetContentType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2a7fb10
};

// Class ShooterGame.ActRankBorderDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UActRankBorderDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.BaseContentUIData
// Size: 0x90 (Inherited: 0x30)
struct UBaseContentUIData : UObject {
	struct FText DisplayName; // 0x30(0x18)
	struct FText DisplayNameAllCaps; // 0x48(0x18)
	struct UTexture* DisplayIcon; // 0x60(0x08)
	struct FWidgetTransform IconTransform; // 0x68(0x1c)
	struct TWeakObjectPtr<struct UObject> WorldContext; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)

	void SetDisplayName(struct FText NewName); // Function ShooterGame.BaseContentUIData.SetDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x384ec30
	void SetDisplayIcon(struct UTexture* NewIcon); // Function ShooterGame.BaseContentUIData.SetDisplayIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x384eba0
	struct UUserWidget* MakeNewDetailedInfoWidget(); // Function ShooterGame.BaseContentUIData.MakeNewDetailedInfoWidget // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct FText GetDisplayNameAllCaps(); // Function ShooterGame.BaseContentUIData.GetDisplayNameAllCaps // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x384e0f0
	struct UUserWidget* GetDetailedInfoWidget(struct UObject* WorldContextObject); // Function ShooterGame.BaseContentUIData.GetDetailedInfoWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x384e050
	struct FText GetDescription(); // Function ShooterGame.BaseContentUIData.GetDescription // (Native|Public|Const) // @ game+0x384e010
};

// Class ShooterGame.ActRankBorderUIData
// Size: 0x98 (Inherited: 0x90)
struct UActRankBorderUIData : UBaseContentUIData {
	struct UTexture* SmallIcon; // 0x90(0x08)
};

// Class ShooterGame.AFKDetectionComponent
// Size: 0x170 (Inherited: 0xe8)
struct UAFKDetectionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAFKStatusChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnAwayPenaltyStateChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnDidLeaveSpawnChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnDidMove; // 0x118(0x10)
	struct FShooterGameTimeMarker AuthLastPlayerInputTimestamp; // 0x128(0x0c)
	struct FShooterGameTimeMarker AuthDisconnectedSinceTimestamp; // 0x134(0x0c)
	struct FShooterGameTimeMarker AuthLastPlayerChangedRegionTimestamp; // 0x140(0x0c)
	bool bIsPenalizedForBeingAway; // 0x14c(0x01)
	bool bIsAFK; // 0x14d(0x01)
	bool bDidLeaveSpawn; // 0x14e(0x01)
	char pad_14F[0x1]; // 0x14f(0x01)
	struct AShooterPlayerState* OwningShooterPlayer; // 0x150(0x08)
	struct AShooterGameState* GameState; // 0x158(0x08)
	char pad_160[0x10]; // 0x160(0x10)

	void ServerHandleClientInputHeartbeat(); // Function ShooterGame.AFKDetectionComponent.ServerHandleClientInputHeartbeat // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x36355e0
	void OnRep_IsPenalizedForBeingAway(); // Function ShooterGame.AFKDetectionComponent.OnRep_IsPenalizedForBeingAway // (Final|Native|Protected) // @ game+0x364eb10
	bool GetIsPenalizedForBeingAway(); // Function ShooterGame.AFKDetectionComponent.GetIsPenalizedForBeingAway // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e3f0
	bool GetIsAFK(); // Function ShooterGame.AFKDetectionComponent.GetIsAFK // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e3d0
	bool GetDidLeaveSpawn(); // Function ShooterGame.AFKDetectionComponent.GetDidLeaveSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e2f0
	void AuthSimulatePlayerInputReceived(); // Function ShooterGame.AFKDetectionComponent.AuthSimulatePlayerInputReceived // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	bool AuthShouldEndGameEarlyForDisconnects(struct UObject* WorldContextObject); // Function ShooterGame.AFKDetectionComponent.AuthShouldEndGameEarlyForDisconnects // (Final|BlueprintAuthorityOnly|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x364dff0
	void AuthHandleSpawnedCharacterChanged(struct AShooterCharacter* NewCharacter); // Function ShooterGame.AFKDetectionComponent.AuthHandleSpawnedCharacterChanged // (Final|Native|Protected) // @ game+0x3634e00
	void AuthHandlePlayerInputReceived(); // Function ShooterGame.AFKDetectionComponent.AuthHandlePlayerInputReceived // (Final|Native|Public) // @ game+0x2024060
	void AuthHandleConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AFKDetectionComponent.AuthHandleConnectionStatusChanged // (Final|Native|Protected) // @ game+0x363f1c0
	void AuthHandleCalloutRegionChanged(struct AAresCalloutRegion* NewRegion); // Function ShooterGame.AFKDetectionComponent.AuthHandleCalloutRegionChanged // (Final|Native|Protected) // @ game+0x3634e00
};

// Class ShooterGame.IdleTimeAFKDetectionComponent
// Size: 0x178 (Inherited: 0x170)
struct UIdleTimeAFKDetectionComponent : UAFKDetectionComponent {
	float PlayerAFKInactivityThreshold; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)

	float GetPlayerAFKInactivityThreshold(); // Function ShooterGame.IdleTimeAFKDetectionComponent.GetPlayerAFKInactivityThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e500
};

// Class ShooterGame.RoundBasedAFKDetectionComponent
// Size: 0x188 (Inherited: 0x170)
struct URoundBasedAFKDetectionComponent : UAFKDetectionComponent {
	int32_t RoundsAFKThreshold; // 0x170(0x04)
	char pad_174[0x14]; // 0x174(0x14)
};

// Class ShooterGame.AIAimPriorityComponent
// Size: 0x1e0 (Inherited: 0xe8)
struct UAIAimPriorityComponent : UActorComponent {
	struct TMap<enum class EAIAimTargetType, float> TargetPriorityMap; // 0xe8(0x50)
	char pad_138[0x50]; // 0x138(0x50)
	struct TSet<enum class EAIAimTargetType> DisabledTargets; // 0x188(0x50)
	char pad_1D8[0x8]; // 0x1d8(0x08)

	void SetTargetEnabled(enum class EAIAimTargetType TargetType, bool bEnabled); // Function ShooterGame.AIAimPriorityComponent.SetTargetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x364f1d0
	void SetPriority(enum class EAIAimTargetType TargetType, float Priority); // Function ShooterGame.AIAimPriorityComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x364f070
	void SetAllPriorities(struct TMap<enum class EAIAimTargetType, float> PriorityMap); // Function ShooterGame.AIAimPriorityComponent.SetAllPriorities // (Final|Native|Public|BlueprintCallable) // @ game+0x364ecb0
	void SetAimTarget(enum class EAIAimTargetType TargetType, struct FAIAimTargetInfo AimPriorityInfo); // Function ShooterGame.AIAimPriorityComponent.SetAimTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x364ebc0
	bool GetPriority(enum class EAIAimTargetType TargetType, float& OutPriority); // Function ShooterGame.AIAimPriorityComponent.GetPriority // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x364e520
	enum class EAIAimTargetType GetNextTargetType(enum class EAIAimTargetType TargetType); // Function ShooterGame.AIAimPriorityComponent.GetNextTargetType // (Final|Native|Public|BlueprintCallable) // @ game+0x364e440
	struct FAIAimTargetInfo GetHighestPriorityTarget(enum class EAIAimTargetType& OutAimTargetType); // Function ShooterGame.AIAimPriorityComponent.GetHighestPriorityTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x364e310
	void ClearPriority(enum class EAIAimTargetType TargetType); // Function ShooterGame.AIAimPriorityComponent.ClearPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x364e140
	void ClearAllPriorities(); // Function ShooterGame.AIAimPriorityComponent.ClearAllPriorities // (Final|Native|Public|BlueprintCallable) // @ game+0x364e120
	void ClearAimTarget(enum class EAIAimTargetType TargetType); // Function ShooterGame.AIAimPriorityComponent.ClearAimTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x364e0a0
};

// Class ShooterGame.AIBehaviorMarkup
// Size: 0x3e0 (Inherited: 0x3d8)
struct AAIBehaviorMarkup : AActor {
	struct UBehaviorTree* BehaviorTree; // 0x3d8(0x08)

	struct UBehaviorTree* GetBehaviorTree(); // Function ShooterGame.AIBehaviorMarkup.GetBehaviorTree // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36558b0
};

// Class ShooterGame.AIBehaviorMarkupPrecondition_Delayed
// Size: 0x190 (Inherited: 0xe8)
struct UAIBehaviorMarkupPrecondition_Delayed : UActorComponent {
	char pad_E8[0xa8]; // 0xe8(0xa8)

	void StartPreconditionTimer(struct AAIController* AIController, float PreconditionDelay, bool bOverrideExistingTimer); // Function ShooterGame.AIBehaviorMarkupPrecondition_Delayed.StartPreconditionTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x3656810
	void FailPrecondition(struct AAIController* AIController); // Function ShooterGame.AIBehaviorMarkupPrecondition_Delayed.FailPrecondition // (Final|Native|Public|BlueprintCallable) // @ game+0x3655620
};

// Class ShooterGame.AIBehaviorMarkupPrecondition_MaxNumEquippableActivation
// Size: 0x158 (Inherited: 0xe8)
struct UAIBehaviorMarkupPrecondition_MaxNumEquippableActivation : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t MaxNumActivation; // 0xf0(0x04)
	bool bRequireActivationSuccess; // 0xf4(0x01)
	bool bClearOnRoundStart; // 0xf5(0x01)
	char pad_F6[0x62]; // 0xf6(0x62)

	void OnRoundStart(int32_t RoundNumber); // Function ShooterGame.AIBehaviorMarkupPrecondition_MaxNumEquippableActivation.OnRoundStart // (Final|Native|Private) // @ game+0x3656110
	void OnEquippableActivationComplete(struct UAIEquippableActivationComponent* EquippableActivationComponent, bool bSuccess); // Function ShooterGame.AIBehaviorMarkupPrecondition_MaxNumEquippableActivation.OnEquippableActivationComplete // (Final|Native|Private) // @ game+0x3655e30
};

// Class ShooterGame.AIBehaviorMarkupPreconditionInterface
// Size: 0x30 (Inherited: 0x30)
struct UAIBehaviorMarkupPreconditionInterface : UInterface {

	bool IsPreconditionMet(struct AAIController* AIController, struct APawn* Pawn); // Function ShooterGame.AIBehaviorMarkupPreconditionInterface.IsPreconditionMet // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3655bc0
};

// Class ShooterGame.AIEquippableActivationComponent
// Size: 0x150 (Inherited: 0xe8)
struct UAIEquippableActivationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnActivationComplete; // 0xe8(0x10)
	struct TSoftClassPtr<UObject> EquippableClass; // 0xf8(0x30)
	struct AController* OwningController; // 0x128(0x08)
	struct AShooterCharacter* OwningShooterCharacter; // 0x130(0x08)
	struct UAresInventory* Inventory; // 0x138(0x08)
	bool bAborted; // 0x140(0x01)
	char pad_141[0xf]; // 0x141(0x0f)

	bool UnequipEquippable(); // Function ShooterGame.AIEquippableActivationComponent.UnequipEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x3656930
	void SetEquippableClass(struct TSoftClassPtr<UObject> InEquippableClass); // Function ShooterGame.AIEquippableActivationComponent.SetEquippableClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3656650
	void PerformActivation(); // Function ShooterGame.AIEquippableActivationComponent.PerformActivation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x36355e0
	void OnNewPawn(struct APawn* NewPawn); // Function ShooterGame.AIEquippableActivationComponent.OnNewPawn // (Final|Native|Private) // @ game+0x3655ff0
	bool IsEquipped(); // Function ShooterGame.AIEquippableActivationComponent.IsEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655b90
	void InstantActivateEquippable(); // Function ShooterGame.AIEquippableActivationComponent.InstantActivateEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x3655b30
	struct TSoftClassPtr<UObject> GetEquippableClass(); // Function ShooterGame.AIEquippableActivationComponent.GetEquippableClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655a50
	struct AAresEquippable* GetEquippable(); // Function ShooterGame.AIEquippableActivationComponent.GetEquippable // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x36558e0
	bool EquipEquippable(); // Function ShooterGame.AIEquippableActivationComponent.EquipEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x36555f0
	bool CanUseEquippable(); // Function ShooterGame.AIEquippableActivationComponent.CanUseEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36551c0
	void ActivateOnceEquipped(); // Function ShooterGame.AIEquippableActivationComponent.ActivateOnceEquipped // (Final|Native|Private) // @ game+0x3654f50
	void ActivateEquippable(); // Function ShooterGame.AIEquippableActivationComponent.ActivateEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x3654f30
	void Abort(); // Function ShooterGame.AIEquippableActivationComponent.Abort // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3654e70
};

// Class ShooterGame.AIEquippableActivationMarkupComponent
// Size: 0x140 (Inherited: 0xe8)
struct UAIEquippableActivationMarkupComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnConfigureForActivation; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnActivationComplete; // 0x100(0x10)
	struct TSoftClassPtr<UObject> EquippableClass; // 0x110(0x30)

	void OnEquippableActivationComplete(struct UAIEquippableActivationComponent* EquippableActivationComponent, bool bSuccess); // Function ShooterGame.AIEquippableActivationMarkupComponent.OnEquippableActivationComplete // (Final|Native|Private) // @ game+0x3655f00
	struct TSoftClassPtr<UObject> GetEquippableClass(); // Function ShooterGame.AIEquippableActivationMarkupComponent.GetEquippableClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655ac0
	struct UAIEquippableActivationComponent* GetEquippableActivationComponent(struct AAIController* AIController); // Function ShooterGame.AIEquippableActivationMarkupComponent.GetEquippableActivationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36559b0
	struct AAresEquippable* GetEquippable(struct APawn* Pawn); // Function ShooterGame.AIEquippableActivationMarkupComponent.GetEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655910
	void ConfigureAndActivateEquippable(struct AAIController* AIController, bool bInstantActivation); // Function ShooterGame.AIEquippableActivationMarkupComponent.ConfigureAndActivateEquippable // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x3655280
	void AbortEquippableActivation(struct AAIController* AIController); // Function ShooterGame.AIEquippableActivationMarkupComponent.AbortEquippableActivation // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x3654ea0
};

// Class ShooterGame.AIFiringStateTuningComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UAIFiringStateTuningComponent : UActorComponent {

	float PredictProjectileDamage(struct FVector& FiringLocation, struct FVector& AttackVector, struct FProjectileTuning& ProjectileTuning, struct FHitResult& OutHitResult); // Function ShooterGame.AIFiringStateTuningComponent.PredictProjectileDamage // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36561a0
	void OnPlayerCharacterHit(float Damage); // Function ShooterGame.AIFiringStateTuningComponent.OnPlayerCharacterHit // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ModifyShotTrajectories(struct FVector& FiringLocation, struct TArray<struct FVector>& AttackVectors, struct FProjectileTuning& ProjectileTuning); // Function ShooterGame.AIFiringStateTuningComponent.ModifyShotTrajectories // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3655ca0
	void ForceAttackVectorsToMiss(struct FVector& FiringLocation, struct TArray<struct FVector>& AttackVectors, struct FProjectileTuning& ProjectileTuning); // Function ShooterGame.AIFiringStateTuningComponent.ForceAttackVectorsToMiss // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36556b0
};

// Class ShooterGame.EquippableListAsset
// Size: 0x48 (Inherited: 0x38)
struct UEquippableListAsset : UDataAsset {
	struct TArray<struct TSoftClassPtr<UObject>> Equippables; // 0x38(0x10)
};

// Class ShooterGame.AimToolsTuningComponent
// Size: 0x1b8 (Inherited: 0xe8)
struct UAimToolsTuningComponent : UActorComponent {
	struct UCurveFloat* MagnetDistanceCurve; // 0xe8(0x08)
	struct UCurveFloat* MagnetVelocityCurve; // 0xf0(0x08)
	struct UCurveFloat* MagnetRampUpCurve; // 0xf8(0x08)
	struct UCurveFloat* SnapDistanceCurveHorizontal; // 0x100(0x08)
	struct UCurveFloat* SnapDistanceCurveVertical; // 0x108(0x08)
	struct UCurveFloat* SnapAngleCurveHorizontal; // 0x110(0x08)
	struct UCurveFloat* SnapAngleCurveVertical; // 0x118(0x08)
	struct UCurveFloat* HeadshotSnapDistanceCurve; // 0x120(0x08)
	struct UCurveFloat* HeadshotSnapAngleCurve; // 0x128(0x08)
	struct UEquippableListAsset* MagnetizedAbilities; // 0x130(0x08)
	struct UEquippableListAsset* AimSnapExcludedWeapons; // 0x138(0x08)
	struct UEquippableListAsset* AimSnapExcludedWhileZoomedWeapons; // 0x140(0x08)
	struct UEquippableListAsset* AimSnapIncludedAbilities; // 0x148(0x08)
	struct UCurveFloat* DeployablesSnapAngleScaleCurve; // 0x150(0x08)
	struct TMap<struct TSoftClassPtr<UObject>, struct FSnapTargetTypeTunables> TargetTypeMap; // 0x158(0x50)
	struct TArray<struct TSoftClassPtr<UObject>> BaseScalingClasses; // 0x1a8(0x10)

	bool IsAimTouchActive(); // Function ShooterGame.AimToolsTuningComponent.IsAimTouchActive // (Native|Public|BlueprintCallable) // @ game+0x3655b50
};

// Class ShooterGame.RespondsToHearingDetectionInterface
// Size: 0x30 (Inherited: 0x30)
struct URespondsToHearingDetectionInterface : UInterface {

	void RespondToDetection(struct TArray<struct AActor*>& InDetectingActors, struct FAINoiseEvent& InEvent, struct FNoiseEventTagData& InDecodedData); // Function ShooterGame.RespondsToHearingDetectionInterface.RespondToDetection // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3656460
};

// Class ShooterGame.AISense_OcclusionHearing
// Size: 0xf8 (Inherited: 0xf8)
struct UAISense_OcclusionHearing : UAISense_Hearing {

	struct FName EncodeNoiseEventTagDataToTag(struct FNoiseEventTagData& InData); // Function ShooterGame.AISense_OcclusionHearing.EncodeNoiseEventTagDataToTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x36554c0
	bool DecodeTagToNoiseEventTagData(struct FName& InTag, struct FNoiseEventTagData& OutData); // Function ShooterGame.AISense_OcclusionHearing.DecodeTagToNoiseEventTagData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3655350
	void AuthReportNoiseEvent(struct UObject* WorldContextObject, struct FNoiseEventData& EventData, struct AActor* Instigator, struct FVector& Location); // Function ShooterGame.AISense_OcclusionHearing.AuthReportNoiseEvent // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3655000
};

// Class ShooterGame.AISenseConfig_OcclusionHearing
// Size: 0x68 (Inherited: 0x68)
struct UAISenseConfig_OcclusionHearing : UAISenseConfig_Hearing {
};

// Class ShooterGame.AITargetData
// Size: 0xf0 (Inherited: 0xe8)
struct UAITargetData : UActorComponent {
	bool bIsPriorityTarget; // 0xe8(0x01)
	bool bIsShootableFlash; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
};

// Class ShooterGame.AIUpdateMovementAimTargetComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UAIUpdateMovementAimTargetComponent : UActorComponent {
	enum class EAIAimTargetType MovementTargetType; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class ShooterGame.AllPawnsTargetingStateComponent
// Size: 0x2e0 (Inherited: 0x2e0)
struct UAllPawnsTargetingStateComponent : UScriptStateComponent {
};

// Class ShooterGame.DesignableUserWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UDesignableUserWidget : UUserWidget {

	void SynchronizeWidget(struct UWidget* Widget); // Function ShooterGame.DesignableUserWidget.SynchronizeWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38991b0
	void OnSynchronizeProperties(); // Function ShooterGame.DesignableUserWidget.OnSynchronizeProperties // (Native|Event|Public|BlueprintEvent) // @ game+0x37c24a0
};

// Class ShooterGame.CoordinatedHUDElement
// Size: 0x2d8 (Inherited: 0x2c8)
struct UCoordinatedHUDElement : UDesignableUserWidget {
	bool bShowMouseWhenVisible; // 0x2c8(0x01)
	bool bCaptureMouseWhenVisible; // 0x2c9(0x01)
	bool bCaptureMouseWhenOverridden; // 0x2ca(0x01)
	char pad_2CB[0x1]; // 0x2cb(0x01)
	int32_t AllowedGameInputWhileVisible; // 0x2cc(0x04)
	int32_t AllowedGameInputWhileShowingMouse; // 0x2d0(0x04)
	bool bNeedsFocus; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)

	void SetHUDModel(struct UCoordinatedHUDModel* HUDModel); // Function ShooterGame.CoordinatedHUDElement.SetHUDModel // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3656780
	void SetCoordinatedShooterUIModel(struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel); // Function ShooterGame.CoordinatedHUDElement.SetCoordinatedShooterUIModel // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AllyEdgeIndicatorHUD
// Size: 0x348 (Inherited: 0x2d8)
struct UAllyEdgeIndicatorHUD : UCoordinatedHUDElement {
	char pad_2D8[0x18]; // 0x2d8(0x18)
	struct FMulticastInlineDelegate OnAllyEnterRange; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnAllyExitRange; // 0x300(0x10)
	struct FMulticastInlineDelegate OnAllyDeath; // 0x310(0x10)
	float RelevantRangeModifier; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	struct TArray<struct UHUDPlayerModel*> TrackedHUDPlayerModelsList; // 0x328(0x10)
	struct UCoordinatedHUDModel* HUDModel; // 0x338(0x08)
	struct APlayerState* CurrentlyTrackedPlayerState; // 0x340(0x08)

	void SetHUDModel_Implementation(struct UCoordinatedHUDModel* InHUDModel); // Function ShooterGame.AllyEdgeIndicatorHUD.SetHUDModel_Implementation // (Final|Native|Private) // @ game+0x3656780
	void RemoveTrackedPlayer(struct UHUDPlayerModel* PlayerHUDModel, bool Died); // Function ShooterGame.AllyEdgeIndicatorHUD.RemoveTrackedPlayer // (Final|Native|Private) // @ game+0x3656390
	void OnPlayerDeath(struct UDamageResponse* Response); // Function ShooterGame.AllyEdgeIndicatorHUD.OnPlayerDeath // (Final|Native|Private) // @ game+0x3656080
	void OnHUDPlayerModelListUpdated(); // Function ShooterGame.AllyEdgeIndicatorHUD.OnHUDPlayerModelListUpdated // (Final|Native|Private) // @ game+0x3655fd0
	void OnHUDModelSet(struct UCoordinatedHUDModel* InHUDModel); // Function ShooterGame.AllyEdgeIndicatorHUD.OnHUDModelSet // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	struct TArray<struct UHUDPlayerModel*> GetAllAlliesInRange(); // Function ShooterGame.AllyEdgeIndicatorHUD.GetAllAlliesInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655820
	void CheckForAndHandleTrackedPlayerChange(struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.AllyEdgeIndicatorHUD.CheckForAndHandleTrackedPlayerChange // (Final|Native|Private) // @ game+0x36551f0
	void AddTrackedPlayer(struct UHUDPlayerModel* PlayerHUDModel); // Function ShooterGame.AllyEdgeIndicatorHUD.AddTrackedPlayer // (Final|Native|Private) // @ game+0x3654f70
};

// Class ShooterGame.AmmoComponent
// Size: 0x158 (Inherited: 0x138)
struct UAmmoComponent : UResourceComponent {
	bool bInfiniteReserveAmmo; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	int32_t Ammo; // 0x13c(0x04)
	int32_t MaxAmmo; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct UAmmoComponent* ReserveComponent; // 0x148(0x08)
	bool bInBeginPlay; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)

	void UpdateMaxAmmo(int32_t NewMax); // Function ShooterGame.AmmoComponent.UpdateMaxAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x365ebc0
	void SetReserveComponent(struct UAmmoComponent* AmmoComponent); // Function ShooterGame.AmmoComponent.SetReserveComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x365ea10
	void SetMaxReserveAmmo(bool bInfiniteReserve, int32_t NewMax); // Function ShooterGame.AmmoComponent.SetMaxReserveAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x365e6d0
	void Reload(int32_t ReloadAmount); // Function ShooterGame.AmmoComponent.Reload // (Final|Native|Public|BlueprintCallable) // @ game+0x365e440
	void OnRep_MaxAmmoValue(); // Function ShooterGame.AmmoComponent.OnRep_MaxAmmoValue // (Final|Native|Private) // @ game+0x365e420
	void OnRep_bInfiniteReserveAmmoValue(); // Function ShooterGame.AmmoComponent.OnRep_bInfiniteReserveAmmoValue // (Final|Native|Private) // @ game+0x365e420
	struct UAmmoComponent* GetReserveComponent(); // Function ShooterGame.AmmoComponent.GetReserveComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dff0
	int32_t GetMaxAmmo(); // Function ShooterGame.AmmoComponent.GetMaxAmmo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dfc0
	int32_t GetAmmo(); // Function ShooterGame.AmmoComponent.GetAmmo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635ff0
	void FullReload(); // Function ShooterGame.AmmoComponent.FullReload // (Final|Native|Public|BlueprintCallable) // @ game+0x365dcb0
	bool CanReload(); // Function ShooterGame.AmmoComponent.CanReload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dbf0
};

// Class ShooterGame.AnimatableUserWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAnimatableUserWidget : UDesignableUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnScopedCueEvent; // 0x2d0(0x10)

	void BroadcastCueEvent(struct FScopedAnimationCueSource_ScopedCueEventData& EventData); // Function ShooterGame.AnimatableUserWidget.BroadcastCueEvent // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x365db50
	void BP_BroadcastNewCueEvent(struct FName CueName, struct FName ScopeName); // Function ShooterGame.AnimatableUserWidget.BP_BroadcastNewCueEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x365d8f0
};

// Class ShooterGame.ZoomComponent
// Size: 0x528 (Inherited: 0xe8)
struct UZoomComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnZoomInStarted; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnZoomInCompleted; // 0x100(0x10)
	struct FMulticastInlineDelegate OnUnZoomStarted; // 0x110(0x10)
	struct FMulticastInlineDelegate OnUnZoomCompleted; // 0x120(0x10)
	struct FMulticastInlineDelegate OnZoomTransitionStatusChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnCosmeticZoomInPercent; // 0x140(0x10)
	struct FMulticastInlineDelegate OnZoomCooldownCompleted; // 0x150(0x10)
	struct FZoomTransitionSettings ZoomTransitionSettings; // 0x160(0x14)
	char pad_174[0x4]; // 0x174(0x04)
	struct UCurveFloat* ZoomInCurve; // 0x178(0x08)
	struct UCurveFloat* ZoomOutCurve; // 0x180(0x08)
	struct FRuntimeFloatCurve FoVInitialZoomInCurve; // 0x188(0x88)
	struct FRuntimeFloatCurve FoVSubsequentZoomInCurve; // 0x210(0x88)
	struct FRuntimeFloatCurve FoVZoomOutCurve; // 0x298(0x88)
	struct FRuntimeFloatCurve FoV1PInitialZoomInCurve; // 0x320(0x88)
	struct FRuntimeFloatCurve FoV1PSubsequentZoomInCurve; // 0x3a8(0x88)
	struct FRuntimeFloatCurve FoV1PZoomOutCurve; // 0x430(0x88)
	struct TArray<struct FZoomLevelInfo> ZoomLevelInfo; // 0x4b8(0x10)
	struct FZoomTransition AuthZoomTransition; // 0x4c8(0x24)
	struct FZoomTransition ClientPredictedZoomTransition; // 0x4ec(0x24)
	struct FTimerHandle ZoomTimer[0x3]; // 0x510(0x18)

	void SetZoomMultiplierForIndex(int32_t ZoomIndex, float NewMultiplier); // Function ShooterGame.ZoomComponent.SetZoomMultiplierForIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7ee90
	void SetZoomFovForIndex(int32_t ZoomIndex, float NewFov); // Function ShooterGame.ZoomComponent.SetZoomFovForIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7edc0
	void SetTransitionSettings(struct FZoomTransitionSettings& InTransitionSettings); // Function ShooterGame.ZoomComponent.SetTransitionSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7ea40
	void OnZoomTransitionTimerCompleted(); // Function ShooterGame.ZoomComponent.OnZoomTransitionTimerCompleted // (Final|Native|Private) // @ game+0x3c7e480
	void OnZoomCooldownTimerCompleted(); // Function ShooterGame.ZoomComponent.OnZoomCooldownTimerCompleted // (Final|Native|Private) // @ game+0x3c7e2a0
	void OnRep_ZoomTransition(); // Function ShooterGame.ZoomComponent.OnRep_ZoomTransition // (Final|Native|Private) // @ game+0x3c7e280
	void OnCosmeticZoomInPercentTriggerTimerCompleted(); // Function ShooterGame.ZoomComponent.OnCosmeticZoomInPercentTriggerTimerCompleted // (Final|Native|Private) // @ game+0x3c7e170
	bool IsZoomTransitioning(); // Function ShooterGame.ZoomComponent.IsZoomTransitioning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7e080
	bool IsZoomOnCooldown(); // Function ShooterGame.ZoomComponent.IsZoomOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7e050
	bool IsZoomingOut(); // Function ShooterGame.ZoomComponent.IsZoomingOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7e140
	bool IsZoomingIn(); // Function ShooterGame.ZoomComponent.IsZoomingIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7e110
	bool IsZoomedOut(); // Function ShooterGame.ZoomComponent.IsZoomedOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7e0e0
	bool IsZoomed(); // Function ShooterGame.ZoomComponent.IsZoomed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7e0b0
	int32_t GetTargetZoomLevel(); // Function ShooterGame.ZoomComponent.GetTargetZoomLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7dd50
	int32_t GetNumZoomLevels(); // Function ShooterGame.ZoomComponent.GetNumZoomLevels // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7dd10
	int32_t GetCurrentZoomLevel(); // Function ShooterGame.ZoomComponent.GetCurrentZoomLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7dca0
};

// Class ShooterGame.AnimatedZoomComponent
// Size: 0x538 (Inherited: 0x528)
struct UAnimatedZoomComponent : UZoomComponent {
	float WorldFOVMin; // 0x528(0x04)
	float WorldFOVMax; // 0x52c(0x04)
	float Mesh1PFOVMin; // 0x530(0x04)
	float Mesh1PFOVMax; // 0x534(0x04)
};

// Class ShooterGame.ProgressModel
// Size: 0x30 (Inherited: 0x30)
struct UProgressModel : UInterface {

	void UnbindProgressStateChanged(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.UnbindProgressStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x398f450
	void UnbindProgressCompleted(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.UnbindProgressCompleted // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3a9ffd0
	struct FProgressModelState GetProgressState(); // Function ShooterGame.ProgressModel.GetProgressState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f470
	void BindProgressStateChanged(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.BindProgressStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x378ca00
	void BindProgressCompleted(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.BindProgressCompleted // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x39f0c90
};

// Class ShooterGame.AnimationConductorNode
// Size: 0x30 (Inherited: 0x30)
struct UAnimationConductorNode : UProgressModel {

	void StartAnimation(); // Function ShooterGame.AnimationConductorNode.StartAnimation // (Native|Public|BlueprintCallable) // @ game+0x365ead0
	void SkipAnimation(); // Function ShooterGame.AnimationConductorNode.SkipAnimation // (Native|Public|BlueprintCallable) // @ game+0x365eaa0
	void SetDebugLogging(bool bNewValue, enum class EAnimationConductorNodePropagationMode PropagationMode); // Function ShooterGame.AnimationConductorNode.SetDebugLogging // (Native|Public|BlueprintCallable) // @ game+0x365e560
	void ResetAnimation(enum class EAnimationConductorNodeResetType ResetType); // Function ShooterGame.AnimationConductorNode.ResetAnimation // (Native|Public|BlueprintCallable) // @ game+0x365e4d0
};

// Class ShooterGame.ProgressModelBase
// Size: 0x58 (Inherited: 0x30)
struct UProgressModelBase : UObject {
	char pad_30[0x28]; // 0x30(0x28)

	void BroadcastProgressStateChanged(); // Function ShooterGame.ProgressModelBase.BroadcastProgressStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9e020
	void BroadcastProgressCompleted(); // Function ShooterGame.ProgressModelBase.BroadcastProgressCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9e000
};

// Class ShooterGame.NumericProgressModelBase
// Size: 0x70 (Inherited: 0x58)
struct UNumericProgressModelBase : UProgressModelBase {
	char pad_58[0x18]; // 0x58(0x18)

	void BroadcastProgressValueChanged(); // Function ShooterGame.NumericProgressModelBase.BroadcastProgressValueChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x39efd40
};

// Class ShooterGame.ManualNumericProgressModelBase
// Size: 0x88 (Inherited: 0x70)
struct UManualNumericProgressModelBase : UNumericProgressModelBase {
	char pad_70[0x18]; // 0x70(0x18)

	void BP_SetProgressValueMaximum(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressValueMaximum // (Final|Native|Protected|BlueprintCallable) // @ game+0x39a7d10
	void BP_SetProgressValueCurrent(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressValueCurrent // (Final|Native|Protected|BlueprintCallable) // @ game+0x39a7c80
	void BP_SetProgressValue(struct FNumericProgressValue& NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressValue // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x39a7be0
	void BP_SetProgressState(struct FProgressModelState NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressState // (Final|Native|Protected|BlueprintCallable) // @ game+0x39a7b60
	void BP_CompleteProgress(); // Function ShooterGame.ManualNumericProgressModelBase.BP_CompleteProgress // (Final|Native|Protected|BlueprintCallable) // @ game+0x39a7b40
	void BP_ClearProgressValue(); // Function ShooterGame.ManualNumericProgressModelBase.BP_ClearProgressValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x39a7b20
};

// Class ShooterGame.AnimationConductorNodeBase
// Size: 0xa8 (Inherited: 0x88)
struct UAnimationConductorNodeBase : UManualNumericProgressModelBase {
	char pad_88[0x20]; // 0x88(0x20)

	void BP_BroadcastNewCueEvent(struct FName CueName); // Function ShooterGame.AnimationConductorNodeBase.BP_BroadcastNewCueEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x365d9f0
	void BP_BroadcastCueEvent(struct FAnimationCueSource_CueEventData& EventData); // Function ShooterGame.AnimationConductorNodeBase.BP_BroadcastCueEvent // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x365d850
};

// Class ShooterGame.AnimationConductorNodeBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAnimationConductorNodeBlueprintLibrary : UBlueprintFunctionLibrary {

	void DumpToLog(struct TScriptInterface<IAnimationConductorNode> Target); // Function ShooterGame.AnimationConductorNodeBlueprintLibrary.DumpToLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x365dc20
};

// Class ShooterGame.AnimationCueSource
// Size: 0x30 (Inherited: 0x30)
struct UAnimationCueSource : UInterface {

	void UnbindOnCueEvent(struct FDelegate& Delegate); // Function ShooterGame.AnimationCueSource.UnbindOnCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x365eb00
	void BindOnCueEvent(struct FDelegate& Delegate); // Function ShooterGame.AnimationCueSource.BindOnCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x365da90
};

// Class ShooterGame.AnimationCueSourceBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAnimationCueSourceBlueprintLibrary : UBlueprintFunctionLibrary {

	struct FScopedAnimationCueSource_ScopedCueEventData MakeNewScopedCueEventData(struct FName InCueName, struct FName InScopeName); // Function ShooterGame.AnimationCueSourceBlueprintLibrary.MakeNewScopedCueEventData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x365e0d0
	struct FAnimationCueSource_CueEventData MakeNewCueEventData(struct FName InCueName); // Function ShooterGame.AnimationCueSourceBlueprintLibrary.MakeNewCueEventData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x365e020
};

// Class ShooterGame.AnimationStateComponent
// Size: 0xbd0 (Inherited: 0xe8)
struct UAnimationStateComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FAnimationStateParams AnimationStateParams; // 0x100(0x1d0)
	struct FAnimationAssetsGun1P AnimationAssetsGun1P; // 0x2d0(0x48)
	struct FAnimationAssetsGun1P CosmeticAnimationAssetsGun1P; // 0x318(0x48)
	struct FBoneTransformAim3P BoneTransformAim3P; // 0x360(0x74)
	char pad_3D4[0x1]; // 0x3d4(0x01)
	bool bIsOnRope; // 0x3d5(0x01)
	bool bGlideActive; // 0x3d6(0x01)
	bool bIsMeleeAttacking; // 0x3d7(0x01)
	bool bForceAnimSlot1PNoBlend; // 0x3d8(0x01)
	bool bForceAnimSlotUpperBody3PNoBlend; // 0x3d9(0x01)
	bool bForceAnimSlotLowerBody3PNoBlend; // 0x3da(0x01)
	char pad_3DB[0x1]; // 0x3db(0x01)
	float MaxErrorDegrees; // 0x3dc(0x04)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	float ErrorAnimationInterpolationRate; // 0x3e4(0x04)
	float WeaponInaccuracySpring1PStiffness; // 0x3e8(0x04)
	float WeaponInaccuracySpring1PDampening; // 0x3ec(0x04)
	float DefaultHitReactionBlendTime; // 0x3f0(0x04)
	float HitReactionAlpha; // 0x3f4(0x04)
	bool bHitReactionTriggeredThisFrame; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	float CrouchLowerBodyMontageAlpha; // 0x3fc(0x04)
	float CrouchSplitterTranslationScale; // 0x400(0x04)
	float RopeSpineBlendWeightScale; // 0x404(0x04)
	bool bDisableSplitBodyRotation; // 0x408(0x01)
	char pad_409[0x43]; // 0x409(0x43)
	float AnimDynamicsBlendTime; // 0x44c(0x04)
	float AimModeBlendTime; // 0x450(0x04)
	float IkBlendTime; // 0x454(0x04)
	float FootIKMaxActorPullDownDistance; // 0x458(0x04)
	float FootIKActorPullDownInterpRate; // 0x45c(0x04)
	float FootIKRootScalar; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UCurveFloat* FootIKEnableCurve; // 0x468(0x08)
	float AnimSlotBlendTime; // 0x470(0x04)
	float Idle1PBlendTime; // 0x474(0x04)
	float Run1PBlendTime; // 0x478(0x04)
	float Walk1PBlendTime; // 0x47c(0x04)
	float Crouch1PBlendTime; // 0x480(0x04)
	float CrouchIdle1PBlendTime; // 0x484(0x04)
	float CrouchWalk1PBlendTime; // 0x488(0x04)
	float StandUp1PBlendTime; // 0x48c(0x04)
	float Jump1PBlendTime; // 0x490(0x04)
	float JumpLand1PBlendTime; // 0x494(0x04)
	float BoneTransformAimPitchAngleLimit; // 0x498(0x04)
	float BoneTransformAimPitchMultiplier; // 0x49c(0x04)
	float BoneTransformAimYawMultiplier; // 0x4a0(0x04)
	float Spine1AimRotationScale; // 0x4a4(0x04)
	float Spine2AimRotationScale; // 0x4a8(0x04)
	float Spine3AimRotationScale; // 0x4ac(0x04)
	float Spine4AimRotationScale; // 0x4b0(0x04)
	float NeckAimRotationScale; // 0x4b4(0x04)
	float HeadAimRotationScale; // 0x4b8(0x04)
	float LeftClavicleAimRotationScale; // 0x4bc(0x04)
	float RightClavicleAimRotationScale; // 0x4c0(0x04)
	float AimSpring1PTargetRotationScale; // 0x4c4(0x04)
	float RecentlyFiredTime; // 0x4c8(0x04)
	float MinCounterStrafeAngle; // 0x4cc(0x04)
	bool bCanGlide; // 0x4d0(0x01)
	char pad_4D1[0x7]; // 0x4d1(0x07)
	struct TMap<struct UAnimSlot1P*, struct UAnimationAsset*> Anims1P; // 0x4d8(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> AnimsUpperBody3P; // 0x528(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> AnimsLowerBody3P; // 0x578(0x50)
	struct TMap<struct UAnimSlot1P*, struct UAnimationAsset*> OverrideAnims1P; // 0x5c8(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> OverrideAnimsUpperBody3P; // 0x618(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> OverrideAnimsLowerBody3P; // 0x668(0x50)
	struct TArray<struct UBlendSpace*> HeadHitReactions3P; // 0x6b8(0x10)
	struct TArray<struct UBlendSpace*> BodyHitReactions3P; // 0x6c8(0x10)
	struct TArray<struct UBlendSpace*> LegHitReactions3P; // 0x6d8(0x10)
	struct TMap<struct UAnimSlotFace3P*, struct UAnimSequence*> AnimsFace3P; // 0x6e8(0x50)
	struct TArray<struct UAnimSequence*> FaceFidgets3P; // 0x738(0x10)
	float FaceFidgetDelayMin; // 0x748(0x04)
	float FaceFidgetDelayMax; // 0x74c(0x04)
	float FaceFidgetDelayLength; // 0x750(0x04)
	float FaceFidgetDelayTimer; // 0x754(0x04)
	float FaceFidgetPlayLength; // 0x758(0x04)
	float FaceFidgetPlayTimer; // 0x75c(0x04)
	struct FAlphaBlend ZoomedModeAlphaBlend; // 0x760(0x30)
	bool bDisabled; // 0x790(0x01)
	char pad_791[0xf]; // 0x791(0x0f)
	struct FTransform GunToScopeTransform; // 0x7a0(0x30)
	struct UCurveFloat* ADSWeaponRecoveryCurve; // 0x7d0(0x08)
	char pad_7D8[0x118]; // 0x7d8(0x118)
	struct FAnimationSlotArray UpperBodyAimOffsets; // 0x8f0(0x18)
	struct FAnimationSlotArray LowerBodyAimOffsets; // 0x908(0x18)
	struct FVector ReticlePosition; // 0x920(0x0c)
	bool bHasReticlePosition; // 0x92c(0x01)
	char pad_92D[0x3]; // 0x92d(0x03)
	struct FName ADSIdleRefBoneName; // 0x930(0x0c)
	char pad_93C[0x9c]; // 0x93c(0x9c)
	struct AAresEquippable* LastEquippable; // 0x9d8(0x08)
	char pad_9E0[0x8]; // 0x9e0(0x08)
	struct UAnimMovementStateMachine* MovementStateMachine; // 0x9e8(0x08)
	bool bLastFirstPerson; // 0x9f0(0x01)
	char pad_9F1[0x3]; // 0x9f1(0x03)
	float LastActorYaw; // 0x9f4(0x04)
	float LastTimeFired; // 0x9f8(0x04)
	int32_t UpdateRateLimitingDisable3PRefCount; // 0x9fc(0x04)
	bool bCachedEnableUpdateRateOptimizations; // 0xa00(0x01)
	char pad_A01[0x3]; // 0xa01(0x03)
	int32_t FaceLayerDisableRefCount; // 0xa04(0x04)
	int32_t CharacterIsFiringRefCount; // 0xa08(0x04)
	char pad_A0C[0x4]; // 0xa0c(0x04)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0xa10(0x08)
	float ADSKickBackDistance; // 0xa18(0x04)
	char pad_A1C[0x4]; // 0xa1c(0x04)
	struct FTransform ADSIdleRefTransform; // 0xa20(0x30)
	bool bEnteredClientRelevancy; // 0xa50(0x01)
	bool bJustRespawned; // 0xa51(0x01)
	char pad_A52[0x17e]; // 0xa52(0x17e)

	void SetOverrideAnimationUpperBody3P(struct UAnimSlotUpperBody3P* Slot, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AnimationStateComponent.SetOverrideAnimationUpperBody3P // (Final|Native|Public|BlueprintCallable) // @ game+0x365e940
	void SetOverrideAnimationLowerBody3P(struct UAnimSlotLowerBody3P* Slot, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AnimationStateComponent.SetOverrideAnimationLowerBody3P // (Final|Native|Public|BlueprintCallable) // @ game+0x365e870
	void SetOverrideAnimation1P(struct UAnimSlot1P* Slot, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AnimationStateComponent.SetOverrideAnimation1P // (Final|Native|Public|BlueprintCallable) // @ game+0x365e7a0
	void SetDisableMontageSpineBlendWeight(bool Disable); // Function ShooterGame.AnimationStateComponent.SetDisableMontageSpineBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x365e640
	void OnMontageStart(struct UAnimMontage* Montage); // Function ShooterGame.AnimationStateComponent.OnMontageStart // (Final|Native|Private) // @ game+0x365e390
	void OnMeshVisibilityUpdated(struct AShooterCharacter* Character, bool bFirstPersonVisible, bool bThirdPersonVisible); // Function ShooterGame.AnimationStateComponent.OnMeshVisibilityUpdated // (Final|Native|Private) // @ game+0x365e280
	void OnClientBecomeRelevant(struct AActor* OwningActor); // Function ShooterGame.AnimationStateComponent.OnClientBecomeRelevant // (Final|Native|Public) // @ game+0x365e1f0
	float GetIKAlpha(struct FName& BoneName); // Function ShooterGame.AnimationStateComponent.GetIKAlpha // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x365df10
	int32_t GetAnimationUpperBody3PActiveIndex(struct UAnimSlotUpperBody3P* Slot); // Function ShooterGame.AnimationStateComponent.GetAnimationUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365de70
	int32_t GetAnimationLowerBody3PActiveIndex(struct UAnimSlotLowerBody3P* Slot); // Function ShooterGame.AnimationStateComponent.GetAnimationLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365ddd0
	struct UAnimationAsset* GetAnimationGun1P(struct UAnimSlotGun1P* Slot); // Function ShooterGame.AnimationStateComponent.GetAnimationGun1P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x365dd30
	int32_t GetAimOffsetUpperBody3PActiveIndex(); // Function ShooterGame.AnimationStateComponent.GetAimOffsetUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dd10
	int32_t GetAimOffsetLowerBody3PLastValidActiveIndex(); // Function ShooterGame.AnimationStateComponent.GetAimOffsetLowerBody3PLastValidActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dcf0
	int32_t GetAimOffsetLowerBody3PActiveIndex(); // Function ShooterGame.AnimationStateComponent.GetAimOffsetLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dcd0
};

// Class ShooterGame.AnimDynamicStateInfo
// Size: 0x30 (Inherited: 0x30)
struct UAnimDynamicStateInfo : UInterface {
};

// Class ShooterGame.AnimMovementStateMachine
// Size: 0xe8 (Inherited: 0x30)
struct UAnimMovementStateMachine : UObject {
	char pad_30[0xb8]; // 0x30(0xb8)
};

// Class ShooterGame.AnimNotifyState_AnimDynamic
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_AnimDynamic : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_BoneTransformAim
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotifyState_BoneTransformAim : UAnimNotifyState {
	struct FBoneReference ConstraintBone; // 0x38(0x14)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class ShooterGame.AnimNotifyState_CanInterruptDeathReaction
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_CanInterruptDeathReaction : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_CanTransition
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotifyState_CanTransition : UAnimNotifyState {
	enum class EAnimMovementStateMachineState FromState; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class ShooterGame.AnimNotifyState_CharacterIsFiring
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_CharacterIsFiring : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_DisableAnimUpdateRateOptimizations
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotifyState_DisableAnimUpdateRateOptimizations : UAnimNotifyState {
	bool Disabled; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class ShooterGame.AnimNotifyState_DisableFaceLayer
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_DisableFaceLayer : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_EquippableCharacterAltAnims
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_EquippableCharacterAltAnims : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_IKEnabled
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotifyState_IKEnabled : UAnimNotifyState {
	struct FBoneReference Bone; // 0x38(0x14)
	bool Enabled; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class ShooterGame.AnimSlot
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlot : UDataAsset {
};

// Class ShooterGame.AnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlot1P : UAnimSlot {
};

// Class ShooterGame.AnimSlotFace3P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotFace3P : UAnimSlot {
};

// Class ShooterGame.AnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotGun1P : UAnimSlot {
};

// Class ShooterGame.AnimSlotLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotLowerBody3P : UAnimSlot {
};

// Class ShooterGame.AnimSlotUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotUpperBody3P : UAnimSlot {
};

// Class ShooterGame.StateTransitionContext
// Size: 0x30 (Inherited: 0x30)
struct UStateTransitionContext : UObject {

	void Reset(); // Function ShooterGame.StateTransitionContext.Reset // (Native|Event|Public|BlueprintEvent) // @ game+0x37ba530
	void OnReset(); // Function ShooterGame.StateTransitionContext.OnReset // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool IsValueDisagreement(struct UStateTransitionContext* Rhs); // Function ShooterGame.StateTransitionContext.IsValueDisagreement // (Native|Event|Public|BlueprintEvent) // @ game+0x382d970
	struct FString GetDebugString(); // Function ShooterGame.StateTransitionContext.GetDebugString // (Native|Event|Public|BlueprintEvent) // @ game+0x3bffa90
};

// Class ShooterGame.AnimTriggeredStateContinueTransitionContext
// Size: 0x30 (Inherited: 0x30)
struct UAnimTriggeredStateContinueTransitionContext : UStateTransitionContext {
};

// Class ShooterGame.AnimTriggeredStateComponent
// Size: 0x3f0 (Inherited: 0x3d0)
struct UAnimTriggeredStateComponent : URespondToEventStateComponent {
	struct UAnimMontage* TriggeringAnimation; // 0x3d0(0x08)
	struct TArray<struct FNotifyTriggerType> NotifyTriggers; // 0x3d8(0x10)
	char pad_3E8[0x8]; // 0x3e8(0x08)

	void AddManualTrigger(float TriggerTime, struct UScriptStateComponent* TriggeredState, bool bReturningState); // Function ShooterGame.AnimTriggeredStateComponent.AddManualTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0x3668eb0
	void AddAnimationTrigger(struct TSoftClassPtr<UObject> NotifyType, struct UScriptStateComponent* TriggeredState, bool bReturningState); // Function ShooterGame.AnimTriggeredStateComponent.AddAnimationTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0x36689d0
};

// Class ShooterGame.AntiAddictionManager
// Size: 0x110 (Inherited: 0x80)
struct UAntiAddictionManager : UInitSystem {
	struct FMulticastInlineDelegate OnAntiAddictionWarningNotification; // 0x80(0x10)
	char pad_90[0x28]; // 0x90(0x28)
	struct UAntiAddictionService* AntiAddictionService; // 0xb8(0x08)
	struct UNotificationManager* NotificationManager; // 0xc0(0x08)
	struct UConfigManager* ConfigManager; // 0xc8(0x08)
	struct URMSManager* RMSManager; // 0xd0(0x08)
	struct FText ShutdownText; // 0xd8(0x18)
	char pad_F0[0x20]; // 0xf0(0x20)

	bool IsShutdown(); // Function ShooterGame.AntiAddictionManager.IsShutdown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x366a570
	bool IsRestricted(); // Function ShooterGame.AntiAddictionManager.IsRestricted // (Final|Native|Public|Const) // @ game+0x366a540
	struct FText GetShutdownText(); // Function ShooterGame.AntiAddictionManager.GetShutdownText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3669d00
	struct UAntiAddictionManager* GetAntiAddictionManager(struct UObject* WorldContextObject); // Function ShooterGame.AntiAddictionManager.GetAntiAddictionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3669460
};

// Class ShooterGame.AntiAddictionService
// Size: 0xc0 (Inherited: 0x30)
struct UAntiAddictionService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
	struct UConfigManager* ConfigManager; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)
	struct FString AntiAddictionShutdownResource; // 0x50(0x10)
	struct FString AntiAddictionPlayTimeResource; // 0x60(0x10)
	struct FString AntiAddictionWarningResource; // 0x70(0x10)
	struct FString AntiAddictionDisableMatchmakingResource; // 0x80(0x10)
	struct FString AntiAddictionHopeHeartbeatResource; // 0x90(0x10)
	struct FString AntiAddictionHopeWarningResource; // 0xa0(0x10)
	struct FString AntiAddictionHopeShutdownResource; // 0xb0(0x10)
};

// Class ShooterGame.AntiAddictionSessionManager
// Size: 0x38 (Inherited: 0x30)
struct UAntiAddictionSessionManager : UObject {
	struct UPlatformSessionManager* PlatformSessionManager; // 0x30(0x08)

	void HandleAntiAddictionTokenUpdate(struct FAntiAddictionToken AntiAddictionToken); // Function ShooterGame.AntiAddictionSessionManager.HandleAntiAddictionTokenUpdate // (Final|Native|Private) // @ game+0x366a070
};

// Class ShooterGame.ApplicationRepairManager
// Size: 0xa0 (Inherited: 0x80)
struct UApplicationRepairManager : UInitSystem {
	struct UApplicationRepairService* ApplicationRepairService; // 0x80(0x08)
	char pad_88[0x18]; // 0x88(0x18)
};

// Class ShooterGame.ApplicationRepairService
// Size: 0x38 (Inherited: 0x30)
struct UApplicationRepairService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.BaseProjectileEffectComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UBaseProjectileEffectComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	enum class EProjectileEventType TriggeringEvent; // 0xf0(0x01)
	bool bCanBeDisarmed; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)

	void OnProjectileStop(); // Function ShooterGame.BaseProjectileEffectComponent.OnProjectileStop // (Final|Native|Private) // @ game+0x37dfc00
	void OnProjectileDisarmed(); // Function ShooterGame.BaseProjectileEffectComponent.OnProjectileDisarmed // (Final|Native|Private) // @ game+0x37dfbe0
	void OnEventTriggered(); // Function ShooterGame.BaseProjectileEffectComponent.OnEventTriggered // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnEntranceHit(struct FHitResult& LastHitResult, struct FHitResult& EntranceHit); // Function ShooterGame.BaseProjectileEffectComponent.OnEntranceHit // (Final|Native|Private|HasOutParms) // @ game+0x37df9b0
	void OnActorDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.BaseProjectileEffectComponent.OnActorDestroyed // (Final|Native|Private) // @ game+0x37df730
};

// Class ShooterGame.ApplyBuffHitScanEffectComponent
// Size: 0x118 (Inherited: 0xf8)
struct UApplyBuffHitScanEffectComponent : UBaseProjectileEffectComponent {
	struct FEquippableStateBuffInfo BuffInfo; // 0xf8(0x20)
};

// Class ShooterGame.TimedStateComponent
// Size: 0x408 (Inherited: 0x3d0)
struct UTimedStateComponent : URespondToEventStateComponent {
	float TimerLength; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct TArray<struct FGameplayAttribute> TimerModifingAttributes; // 0x3d8(0x10)
	bool bMovementSyncedTimer; // 0x3e8(0x01)
	char pad_3E9[0x1f]; // 0x3e9(0x1f)

	void TimerExpired(); // Function ShooterGame.TimedStateComponent.TimerExpired // (Native|Protected) // @ game+0x364e980
	void SetTimerPaused(bool bPaused); // Function ShooterGame.TimedStateComponent.SetTimerPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fb60
	void SetTimer(float NewTime); // Function ShooterGame.TimedStateComponent.SetTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fae0
	float GetTimerModifier(); // Function ShooterGame.TimedStateComponent.GetTimerModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f2e0
	float GetTimeRemaining(); // Function ShooterGame.TimedStateComponent.GetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f2b0
};

// Class ShooterGame.ApplyBuffStateComponent
// Size: 0x418 (Inherited: 0x408)
struct UApplyBuffStateComponent : UTimedStateComponent {
	struct UAresGameplayBuff* BuffClass; // 0x408(0x08)
	float BuffLevel; // 0x410(0x04)
	bool bRemoveBuffOnStateEnd; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
};

// Class ShooterGame.ApplyBuffToTargetsStateComponent
// Size: 0x2f0 (Inherited: 0x2e0)
struct UApplyBuffToTargetsStateComponent : UScriptStateComponent {
	struct UAresGameplayBuff* BuffClass; // 0x2e0(0x08)
	float BuffLevel; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
};

// Class ShooterGame.ApplyBuffWhileOverlappingComponent
// Size: 0x108 (Inherited: 0xe8)
struct UApplyBuffWhileOverlappingComponent : UActorComponent {
	struct UAresGameplayBuff* BuffClass; // 0xe8(0x08)
	float BuffLevel; // 0xf0(0x04)
	enum class EApplyBuffTarget ApplyBuffTarget; // 0xf4(0x01)
	char pad_F5[0xb]; // 0xf5(0x0b)
	struct AActor* OtherActor; // 0x100(0x08)

	void AuthSetOtherActor(struct AActor* OtherActor); // Function ShooterGame.ApplyBuffWhileOverlappingComponent.AuthSetOtherActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthHandleEndOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function ShooterGame.ApplyBuffWhileOverlappingComponent.AuthHandleEndOverlap // (Final|Native|Private) // @ game+0x3669300
	void AuthHandleBeginOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function ShooterGame.ApplyBuffWhileOverlappingComponent.AuthHandleBeginOverlap // (Final|Native|Private) // @ game+0x3669300
};

// Class ShooterGame.ApplyContinuousForceModuleToTargetStateComponent
// Size: 0x300 (Inherited: 0x2e0)
struct UApplyContinuousForceModuleToTargetStateComponent : UScriptStateComponent {
	struct UForceModule* ForceModule; // 0x2e0(0x08)
	float Duration; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct UForceModuleManagerComponent* TargetForceManager; // 0x2f0(0x08)
	struct FForceModuleHandle ModuleHandle; // 0x2f8(0x08)

	void OnModuleEnd(struct UForceModuleManagerComponent* Manager, struct FForceModuleHandle Handle); // Function ShooterGame.ApplyContinuousForceModuleToTargetStateComponent.OnModuleEnd // (Final|Native|Private) // @ game+0x366a5a0
	void MulticastModuleExpired(); // Function ShooterGame.ApplyContinuousForceModuleToTargetStateComponent.MulticastModuleExpired // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x26204a0
};

// Class ShooterGame.ApplyForceModuleStateComponent
// Size: 0x428 (Inherited: 0x408)
struct UApplyForceModuleStateComponent : UTimedStateComponent {
	struct UForceModule* Module; // 0x408(0x08)
	struct AActor* SourceActor; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)
	struct UForceModuleManagerComponent* TargetForceManager; // 0x420(0x08)

	void RemoteClientModuleEnd(); // Function ShooterGame.ApplyForceModuleStateComponent.RemoteClientModuleEnd // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x366a740
	void OnModuleEnd(struct UForceModuleManagerComponent* Manager, struct FForceModuleHandle Handle); // Function ShooterGame.ApplyForceModuleStateComponent.OnModuleEnd // (Final|Native|Protected) // @ game+0x366a670
	struct FForceModuleHandle GetForceModuleHandle(); // Function ShooterGame.ApplyForceModuleStateComponent.GetForceModuleHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3669940
	struct UForceModule* GetForceModule(); // Function ShooterGame.ApplyForceModuleStateComponent.GetForceModule // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3669910
	void AuthSetSourceActor(struct AActor* NewSource); // Function ShooterGame.ApplyForceModuleStateComponent.AuthSetSourceActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36693d0
};

// Class ShooterGame.ApplyForceToTargetsStateComponent
// Size: 0x2f0 (Inherited: 0x2e0)
struct UApplyForceToTargetsStateComponent : UScriptStateComponent {
	struct UForceModule* ForceModule; // 0x2e0(0x08)
	float Duration; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
};

// Class ShooterGame.ArchiveUIData
// Size: 0xa8 (Inherited: 0x90)
struct UArchiveUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.ArchiveDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UArchiveDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> AccordContracts; // 0x80(0x10)
};

// Class ShooterGame.AresAbilitySystemComponent
// Size: 0x1590 (Inherited: 0x1340)
struct UAresAbilitySystemComponent : UAbilitySystemComponent {
	char pad_1340[0x58]; // 0x1340(0x58)
	struct TArray<struct FGameplayAttribute> TrackedAttributes; // 0x1398(0x10)
	struct TMap<struct FGameplayAttribute, float> AttributeChangedTimeMap; // 0x13a8(0x50)
	struct TMap<struct FGameplayAttribute, struct FAttributeValueChangeDelegateList> AttributeChangedEvents; // 0x13f8(0x50)
	struct UAresAttributeSet* CachedAttributeSet; // 0x1448(0x08)
	struct TArray<struct FGameplayTag> TrackedTags; // 0x1450(0x10)
	struct TMap<struct FGameplayTag, float> TagChangedTimeMap; // 0x1460(0x50)
	struct TMap<struct FGameplayTag, struct FTagValueChangeDelegateList> TagChangedEvents; // 0x14b0(0x50)
	struct TArray<struct FDeferredTagChangedEntry> DeferredTagChangedEventsToRemove; // 0x1500(0x10)
	struct FTagValueChangeDelegateList AnyTagChangedEvents; // 0x1510(0x18)
	struct TArray<struct FDelegate> DeferredAnyTagChangedEvents; // 0x1528(0x10)
	struct TMap<struct FGameplayTag, struct FTagImmunityChangeDelegateList> TagImmunityChangedEvents; // 0x1538(0x50)
	char pad_1588[0x8]; // 0x1588(0x08)

	void SpecificTagValueChanged(struct FGameplayTag& Tag, int32_t Count); // Function ShooterGame.AresAbilitySystemComponent.SpecificTagValueChanged // (Final|Native|Private|HasOutParms) // @ game+0x366ad00
	void RemoveTagImmunityChangeEvent(struct FGameplayTag Tag, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveTagImmunityChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x366abe0
	void RemoveTagChangeEvent(struct FGameplayTag Tag, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x366aac0
	void RemoveAttributeChangeEvent(struct FGameplayAttribute Attribute, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveAttributeChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x366a850
	void RemoveAnyTagChangeEvent(struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveAnyTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x366a790
	void RemoveAllActiveEffects(); // Function ShooterGame.AresAbilitySystemComponent.RemoveAllActiveEffects // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x366a770
	void HandlePeriodicGameplayEffectExecuteOnSelf(struct UAbilitySystemComponent* Source, struct FGameplayEffectSpec& SpecExecuted, struct FActiveGameplayEffectHandle ActiveHandle); // Function ShooterGame.AresAbilitySystemComponent.HandlePeriodicGameplayEffectExecuteOnSelf // (Final|Native|Private|HasOutParms) // @ game+0x366a3e0
	void HandleGameplayEffectRemovedFromSelf(struct FActiveGameplayEffect& ActiveEffect); // Function ShooterGame.AresAbilitySystemComponent.HandleGameplayEffectRemovedFromSelf // (Final|Native|Private|HasOutParms) // @ game+0x366a2d0
	void HandleGameplayEffectAppliedToSelf(struct UAbilitySystemComponent* Source, struct FGameplayEffectSpec& SpecExecuted, struct FActiveGameplayEffectHandle ActiveHandle); // Function ShooterGame.AresAbilitySystemComponent.HandleGameplayEffectAppliedToSelf // (Final|Native|Private|HasOutParms) // @ game+0x366a170
	float GetTimeSinceTrackedTagChanged(struct FGameplayTag Tag); // Function ShooterGame.AresAbilitySystemComponent.GetTimeSinceTrackedTagChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x3669fc0
	float GetTimeSinceTrackedAttributeChanged(struct FGameplayAttribute Attribute); // Function ShooterGame.AresAbilitySystemComponent.GetTimeSinceTrackedAttributeChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x3669db0
	struct TArray<struct FActiveGameplayEffectHandle> GetGameplayEffectsByInstigator(struct UGameplayEffect* EffectType, struct AActor* Instigator); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectsByInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3669bf0
	struct TArray<struct FActiveGameplayEffectHandle> GetGameplayEffectsByCauser(struct UGameplayEffect* EffectType, struct AActor* Causer); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectsByCauser // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3669ae0
	struct AActor* GetGameplayEffectInstigator(struct FActiveGameplayEffectHandle& Handle); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectInstigator // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3669a30
	struct AActor* GetGameplayEffectCauser(struct FActiveGameplayEffectHandle& Handle); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectCauser // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3669980
	float GetFloatAttribute(struct FGameplayAttribute Attribute); // Function ShooterGame.AresAbilitySystemComponent.GetFloatAttribute // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3669700
	bool GetBoolAttribute(struct FGameplayAttribute Attribute); // Function ShooterGame.AresAbilitySystemComponent.GetBoolAttribute // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36694f0
	void AnyTagValueChanged(struct FGameplayTag& Tag, int32_t Count); // Function ShooterGame.AresAbilitySystemComponent.AnyTagValueChanged // (Final|Native|Private|HasOutParms) // @ game+0x3669210
	void AddTagImmunityChangeEvent(struct FGameplayTag Tag, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddTagImmunityChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36690f0
	void AddTagChangeEvent(struct FGameplayTag Tag, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3668fd0
	void AddAttributeChangeEvent(struct FGameplayAttribute Attribute, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddAttributeChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3668c40
	void AddAnyTagChangeEvent(struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddAnyTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3668b80
};

// Class ShooterGame.AresAbilitySystemGlobals
// Size: 0x2f8 (Inherited: 0x2f8)
struct UAresAbilitySystemGlobals : UAbilitySystemGlobals {
};

// Class ShooterGame.AccoladeDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UAccoladeDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Accolade; // 0x50(0x30)
	struct TSoftClassPtr<UObject> Character; // 0x80(0x30)
};

// Class ShooterGame.PowderedToastDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UPowderedToastDataAsset : UAresBasePrimaryDataAsset {
	struct FString PowderedToastID; // 0x50(0x10)
	struct TSoftClassPtr<UObject> PowderedToastAsset; // 0x60(0x30)
};

// Class ShooterGame.AresTouchWidget
// Size: 0x960 (Inherited: 0x2c8)
struct UAresTouchWidget : UUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)
	uint32_t SwipeOptions; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct FMulticastInlineDelegate OnSwipe; // 0x2d8(0x10)
	struct FAresTouchHoldGestureProperties HoldGestureProperties; // 0x2e8(0x0c)
	bool bUseDoubleTap; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct FAresTouchDoubleTapGestureProperties DoubleTapGestureProperties; // 0x2f8(0x14)
	bool bVisibilityCustomizable; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	struct FMulticastInlineDelegate OnSelectStateChanged; // 0x310(0x10)
	struct FMulticastInlineDelegate OnWidgetMoved; // 0x320(0x10)
	struct FMulticastInlineDelegate OnWidgetEditPressed; // 0x330(0x10)
	struct FMulticastInlineDelegate OnWidgetEditReleased; // 0x340(0x10)
	struct FMulticastInlineDelegate OnWidgetScaleChanged; // 0x350(0x10)
	struct FMulticastInlineDelegate OnWidgetOpacityChanged; // 0x360(0x10)
	struct UAresTouchBounds* TouchBounds; // 0x370(0x08)
	struct UImage* EditOutline; // 0x378(0x08)
	struct UScaleBox* UserDefinedScaleBox; // 0x380(0x08)
	bool bIsDirty; // 0x388(0x01)
	bool bHiddenByGameFeatureToggle; // 0x389(0x01)
	char ForwardingInputChannel; // 0x38a(0x01)
	char ReceivingForwardedInputChannel; // 0x38b(0x01)
	bool bCheckBoundsForForwardedTouchScreenPresses; // 0x38c(0x01)
	bool bActivateTouchOnTouchEnter; // 0x38d(0x01)
	bool bReleaseOnTouchLeave; // 0x38e(0x01)
	char pad_38F[0x9]; // 0x38f(0x09)
	struct FLinearColor EditModeDisabledColor; // 0x398(0x10)
	struct TWeakObjectPtr<struct UAresTouchScreen> ParentTouchScreen; // 0x3a8(0x08)
	struct UAresTouchComponent* TouchComponent; // 0x3b0(0x08)
	char pad_3B8[0x228]; // 0x3b8(0x228)
	bool bOverrideUserDefinedVisibility; // 0x5e0(0x01)
	enum class EWidgetVisibilityState InternalVisibilityState; // 0x5e1(0x01)
	enum class EWidgetEnabledState InternalEnabledState; // 0x5e2(0x01)
	char pad_5E3[0x5d]; // 0x5e3(0x5d)
	bool ForceVisible; // 0x640(0x01)
	char pad_641[0x7]; // 0x641(0x07)
	struct UAresTouchHoldGesture* HoldGesture; // 0x648(0x08)
	struct UAresTouchDoubleTapGesture* DoubleTapGesture; // 0x650(0x08)
	bool bRefreshOnTouchModeChanged; // 0x658(0x01)
	bool bSelectedForEdit; // 0x659(0x01)
	enum class EAresTouchWidgetDisabledInputMode DisabledInputMode; // 0x65a(0x01)
	enum class EAresTouchWidgetMode EditTouchMode; // 0x65b(0x01)
	enum class EAresTouchTrackingMode TouchTrackingMode; // 0x65c(0x01)
	char pad_65D[0x3]; // 0x65d(0x03)
	struct FAresUIPropertyMap TouchWidgetDefaultProperties; // 0x660(0x2d0)
	struct UAresUIPropertyRegistry* TouchWidgetProperties; // 0x930(0x08)
	char pad_938[0x28]; // 0x938(0x28)

	void UnregisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchWidget.UnregisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a45d0
	void SetWheelPassthroughEnabled(bool bEnable); // Function ShooterGame.AresTouchWidget.SetWheelPassthroughEnabled // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a4540
	void SetUserDefinedVisibilityState(enum class EWidgetVisibilityState InVisibilityState); // Function ShooterGame.AresTouchWidget.SetUserDefinedVisibilityState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a44c0
	void SetUserDefinedScale(float InScale); // Function ShooterGame.AresTouchWidget.SetUserDefinedScale // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a4440
	void SetUserDefinedOpacity(float InOpacity); // Function ShooterGame.AresTouchWidget.SetUserDefinedOpacity // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a43c0
	void SetTouchTrackingMode(enum class EAresTouchTrackingMode InTouchTrackingMode); // Function ShooterGame.AresTouchWidget.SetTouchTrackingMode // (Final|Native|Public|BlueprintCallable) // @ game+0x37a4340
	void SetTouchEnabled(bool InTouchEnabled); // Function ShooterGame.AresTouchWidget.SetTouchEnabled // (BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3785d00
	void SetSlotName(struct FName& InSlotName); // Function ShooterGame.AresTouchWidget.SetSlotName // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37a42a0
	void SetInternalVisibilityState(enum class EWidgetVisibilityState InVisibilityState); // Function ShooterGame.AresTouchWidget.SetInternalVisibilityState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a4220
	void SetInternalEnabledState(enum class EWidgetEnabledState InEnabledState); // Function ShooterGame.AresTouchWidget.SetInternalEnabledState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a41a0
	void SetInputChannelReceivingEnabled(enum class FAresTouchWidgetInputChannel InputChannel, bool bEnable); // Function ShooterGame.AresTouchWidget.SetInputChannelReceivingEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x37a40d0
	void SetInputChannelPassthroughEnabled(enum class FAresTouchWidgetInputChannel InputChannel, bool bEnable); // Function ShooterGame.AresTouchWidget.SetInputChannelPassthroughEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x37a4000
	void SetHiddenByGameFeatureToggle(bool Value); // Function ShooterGame.AresTouchWidget.SetHiddenByGameFeatureToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x37a3f70
	void SetFloatLayoutSetting(enum class EWidgetLayoutSettingName Setting, float Value); // Function ShooterGame.AresTouchWidget.SetFloatLayoutSetting // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3ea0
	void SetDisabledInputMode(enum class EAresTouchWidgetDisabledInputMode NewDisabledInputMode); // Function ShooterGame.AresTouchWidget.SetDisabledInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x37a3e20
	void SetBoolLayoutWeaponOverride(enum class EWidgetLayoutSettingName Setting, bool Value, struct FString WeaponName); // Function ShooterGame.AresTouchWidget.SetBoolLayoutWeaponOverride // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3ca0
	void SetBoolLayoutSetting(enum class EWidgetLayoutSettingName Setting, bool Value); // Function ShooterGame.AresTouchWidget.SetBoolLayoutSetting // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3bd0
	void SetAimPassthroughEnabled(bool bEnable); // Function ShooterGame.AresTouchWidget.SetAimPassthroughEnabled // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3b40
	void SetActivateTouchOnTouchEnter(bool bEnable); // Function ShooterGame.AresTouchWidget.SetActivateTouchOnTouchEnter // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3ab0
	void SetActivateTouchEnterIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchWidget.SetActivateTouchEnterIndex // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3a30
	void SaveLayoutForCurrentPreset(struct FWidgetLayout& WidgetLayout); // Function ShooterGame.AresTouchWidget.SaveLayoutForCurrentPreset // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37a38e0
	void SaveCurrentLayout(); // Function ShooterGame.AresTouchWidget.SaveCurrentLayout // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a38c0
	void ResetTouchState(); // Function ShooterGame.AresTouchWidget.ResetTouchState // (Final|Native|Public|BlueprintCallable) // @ game+0x37a38a0
	void ResetGestureState(); // Function ShooterGame.AresTouchWidget.ResetGestureState // (Final|Native|Protected|BlueprintCallable) // @ game+0x37a3880
	void RegisterWithTouchScreen(struct UAresTouchScreen* InTouchScreen); // Function ShooterGame.AresTouchWidget.RegisterWithTouchScreen // (BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a37f0
	void RegisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchWidget.RegisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3760
	void RefreshTouchModeVisuals(); // Function ShooterGame.AresTouchWidget.RefreshTouchModeVisuals // (Final|Native|Protected|BlueprintCallable) // @ game+0x37a3740
	void RefreshSlateVisibility(); // Function ShooterGame.AresTouchWidget.RefreshSlateVisibility // (Final|BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x37a3720
	void RefreshImpl(); // Function ShooterGame.AresTouchWidget.RefreshImpl // (Native|Event|Protected|BlueprintEvent) // @ game+0x37777d0
	void RefreshEnabledState(); // Function ShooterGame.AresTouchWidget.RefreshEnabledState // (Final|BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x37a3700
	void Refresh(); // Function ShooterGame.AresTouchWidget.Refresh // (Final|Native|Protected|BlueprintCallable) // @ game+0x37a36e0
	struct UAresTouchComponent* RebuildTouchComponent(); // Function ShooterGame.AresTouchWidget.RebuildTouchComponent // (Native|Event|Protected|BlueprintEvent) // @ game+0x37a36a0
	void OnTouchReset(); // Function ShooterGame.AresTouchWidget.OnTouchReset // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnTouchModeChange(enum class EAresTouchMode NewTouchMode); // Function ShooterGame.AresTouchWidget.OnTouchModeChange // (Native|Event|Protected|BlueprintEvent) // @ game+0x37a3610
	void OnScaleChanged(float NewScale); // Function ShooterGame.AresTouchWidget.OnScaleChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnPresetChange(); // Function ShooterGame.AresTouchWidget.OnPresetChange // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a35f0
	void OnOpacityChanged(float NewOpacity); // Function ShooterGame.AresTouchWidget.OnOpacityChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnInitializeDefaultValues(); // Function ShooterGame.AresTouchWidget.OnInitializeDefaultValues // (Native|Event|Public|BlueprintEvent) // @ game+0x3785c30
	void OnHoldStart(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnHoldStart // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnHoldEnd(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnHoldEnd // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnHoldChargeInterrupted(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnHoldChargeInterrupted // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnDoubleTapStart(struct FAresTouchDoubleTapGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapStart // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnDoubleTapHoldStart(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapHoldStart // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnDoubleTapHoldChargeInterrupted(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapHoldChargeInterrupted // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnDoubleTapEnd(struct FAresTouchDoubleTapGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapEnd // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnComponentSelectStateChanged(bool bSelected); // Function ShooterGame.AresTouchWidget.OnComponentSelectStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x37a3550
	void OnComponentEditReleased(); // Function ShooterGame.AresTouchWidget.OnComponentEditReleased // (Native|Protected) // @ game+0x366a740
	void OnComponentEditPressed(); // Function ShooterGame.AresTouchWidget.OnComponentEditPressed // (Native|Protected) // @ game+0x37a3520
	void OnComponentEditMoved(struct FVector2D ScreenDelta); // Function ShooterGame.AresTouchWidget.OnComponentEditMoved // (Native|Protected|HasDefaults) // @ game+0x37a3490
	void OnCharacterHUDAnimationFinished(); // Function ShooterGame.AresTouchWidget.OnCharacterHUDAnimationFinished // (Native|Event|Public|BlueprintEvent) // @ game+0x37a3460
	void LoadWidgetLayoutFromSettings(); // Function ShooterGame.AresTouchWidget.LoadWidgetLayoutFromSettings // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a3440
	bool IsWheelPassthroughEnabled(); // Function ShooterGame.AresTouchWidget.IsWheelPassthroughEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a3410
	bool IsInputChannelReceivingEnabled(enum class FAresTouchWidgetInputChannel InputChannel); // Function ShooterGame.AresTouchWidget.IsInputChannelReceivingEnabled // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a3380
	bool IsInputChannelPassthroughEnabled(enum class FAresTouchWidgetInputChannel InputChannel); // Function ShooterGame.AresTouchWidget.IsInputChannelPassthroughEnabled // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a32f0
	bool IsInCharacterHUD(); // Function ShooterGame.AresTouchWidget.IsInCharacterHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a32c0
	bool IsHandlingForwardedInputIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchWidget.IsHandlingForwardedInputIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a3230
	bool IsHandlingForwardedInput(); // Function ShooterGame.AresTouchWidget.IsHandlingForwardedInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a3200
	bool IsAimPassthroughEnabled(); // Function ShooterGame.AresTouchWidget.IsAimPassthroughEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a31d0
	void InitializeDefaultLayout(enum class EWidgetVisibilityState DefaultVisibilityState, bool bAllowForPreset, struct FWidgetLayoutSettingOverrides SettingOverrides, float Scale); // Function ShooterGame.AresTouchWidget.InitializeDefaultLayout // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a2e70
	void HandleTouchRelease(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchWidget.HandleTouchRelease // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x37a2d00
	bool HandleTouchPress(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchWidget.HandleTouchPress // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x37a2b80
	void HandleTouchMove(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchWidget.HandleTouchMove // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x37a2a10
	void HandleTouchExit(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchWidget.HandleTouchExit // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x37a28a0
	void HandleTouchEnter(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchWidget.HandleTouchEnter // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x37a2730
	enum class EWidgetVisibilityState GetVisibilityState(); // Function ShooterGame.AresTouchWidget.GetVisibilityState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a2700
	struct FWidgetLayout GetUserDefinedLayout(); // Function ShooterGame.AresTouchWidget.GetUserDefinedLayout // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a2610
	struct UAresUIPropertyRegistry* GetTouchWidgetProperties(); // Function ShooterGame.AresTouchWidget.GetTouchWidgetProperties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a25f0
	enum class EAresTouchTrackingMode GetTouchTrackingMode(); // Function ShooterGame.AresTouchWidget.GetTouchTrackingMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a25c0
	struct UAresTouchComponent* GetTouchComponent(); // Function ShooterGame.AresTouchWidget.GetTouchComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a25a0
	struct FName GetSlotName(); // Function ShooterGame.AresTouchWidget.GetSlotName // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a2560
	bool GetSettingWeaponOverride(enum class EWidgetLayoutSettingName SettingName, bool& OutValue, struct FString OverrideWeaponPath); // Function ShooterGame.AresTouchWidget.GetSettingWeaponOverride // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37a23e0
	struct UAresTouchScreen* GetParentTouchScreen(); // Function ShooterGame.AresTouchWidget.GetParentTouchScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a23a0
	struct FVector2D GetLocalCenterCoordinates(); // Function ShooterGame.AresTouchWidget.GetLocalCenterCoordinates // (Native|Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x37a2350
	bool GetHiddenByGameFeatureToggle(); // Function ShooterGame.AresTouchWidget.GetHiddenByGameFeatureToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x37a2320
	bool GetFloatLayoutSetting(enum class EWidgetLayoutSettingName SettingName, float& OutValue); // Function ShooterGame.AresTouchWidget.GetFloatLayoutSetting // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37a2240
	enum class EWidgetEnabledState GetEnabledState(); // Function ShooterGame.AresTouchWidget.GetEnabledState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a2210
	struct FWidgetLayout GetDefaultLayout(); // Function ShooterGame.AresTouchWidget.GetDefaultLayout // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x37a2090
	bool GetBoolLayoutSetting(enum class EWidgetLayoutSettingName SettingName, bool& OutValue, bool UseOverrides, struct FString OverrideWeaponPath); // Function ShooterGame.AresTouchWidget.GetBoolLayoutSetting // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37a1eb0
	void ForwardedOnTouchPress(struct FAresTouchEventInfo& TouchInfo, char InputChannel); // Function ShooterGame.AresTouchWidget.ForwardedOnTouchPress // (Final|Native|Protected|HasOutParms) // @ game+0x37a1d10
	void ForwardedOnTouchMoved(struct FAresTouchEventInfo& TouchInfo, char InputChannel); // Function ShooterGame.AresTouchWidget.ForwardedOnTouchMoved // (Final|Native|Protected|HasOutParms) // @ game+0x37a1b70
	void ForwardedOnTouchEnded(struct FAresTouchEventInfo& TouchInfo, char InputChannel); // Function ShooterGame.AresTouchWidget.ForwardedOnTouchEnded // (Final|Native|Protected|HasOutParms) // @ game+0x37a19d0
	void ForceVisibilityUpdate(); // Function ShooterGame.AresTouchWidget.ForceVisibilityUpdate // (Final|Native|Protected|BlueprintCallable) // @ game+0x37a19b0
	bool DoesHaveAnyActiveTouches(); // Function ShooterGame.AresTouchWidget.DoesHaveAnyActiveTouches // (Final|Native|Public|BlueprintCallable) // @ game+0x37a1980
	void ClearActivateTouchEnterIndex(); // Function ShooterGame.AresTouchWidget.ClearActivateTouchEnterIndex // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a1960
	void ApplyBoolLayoutWeaponOverrides(); // Function ShooterGame.AresTouchWidget.ApplyBoolLayoutWeaponOverrides // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37a1940
};

// Class ShooterGame.AresActionButton
// Size: 0xa10 (Inherited: 0x960)
struct UAresActionButton : UAresTouchWidget {
	struct FMulticastInlineDelegate OnEngage; // 0x960(0x10)
	struct FMulticastInlineDelegate OnDisengage; // 0x970(0x10)
	struct FMulticastInlineDelegate OnClick; // 0x980(0x10)
	struct FMulticastInlineDelegate OnButtonPressed; // 0x990(0x10)
	struct FMulticastInlineDelegate OnButtonReleased; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnButtonEntered; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnButtonExited; // 0x9c0(0x10)
	struct FMulticastInlineDelegate OnButtonMoved; // 0x9d0(0x10)
	struct FMulticastInlineDelegate OnButtonReset; // 0x9e0(0x10)
	bool bEngaged; // 0x9f0(0x01)
	char pad_9F1[0x3]; // 0x9f1(0x03)
	struct FName ActionMappingName; // 0x9f4(0x0c)
	bool bFireOnRelease; // 0xa00(0x01)
	enum class EActionButtonActivationMode ActivationMode; // 0xa01(0x01)
	enum class EActionButtonStateTransitionMethod StateTransitionMethod; // 0xa02(0x01)
	char pad_A03[0xd]; // 0xa03(0x0d)

	void SimulateTap(); // Function ShooterGame.AresActionButton.SimulateTap // (Native|Public|BlueprintCallable) // @ game+0x36725a0
	void SetStateTransitionMethod(enum class EActionButtonStateTransitionMethod InStateTransitionMethod); // Function ShooterGame.AresActionButton.SetStateTransitionMethod // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3672520
	void SetSelfHandlesTouchEngageVisualsEnabled(bool bInIsEnabled); // Function ShooterGame.AresActionButton.SetSelfHandlesTouchEngageVisualsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3672490
	void SetSelfHandlesTouchEngageEnabled(bool bInIsEnabled); // Function ShooterGame.AresActionButton.SetSelfHandlesTouchEngageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3672400
	void OnTouchComponentReleased(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentReleased // (Native|Protected) // @ game+0x3672150
	void OnTouchComponentPressed(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentPressed // (Native|Protected) // @ game+0x3672060
	void OnTouchComponentMoved(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentMoved // (Native|Protected) // @ game+0x3671f70
	void OnTouchComponentExited(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentExited // (Native|Protected) // @ game+0x3671e80
	void OnTouchComponentEntered(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentEntered // (Native|Protected) // @ game+0x3671d90
	void HandleTouchEngageVisuals(); // Function ShooterGame.AresActionButton.HandleTouchEngageVisuals // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3671a90
	void HandleTouchEngage(); // Function ShooterGame.AresActionButton.HandleTouchEngage // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x26206b0
	void HandleTouchDisengageVisuals(); // Function ShooterGame.AresActionButton.HandleTouchDisengageVisuals // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3671a60
	void HandleTouchDisengage(); // Function ShooterGame.AresActionButton.HandleTouchDisengage // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3671a30
	void HandleTouchClick(); // Function ShooterGame.AresActionButton.HandleTouchClick // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3671a00
	bool GetSelfHandlesTouchEngageEnabled(); // Function ShooterGame.AresActionButton.GetSelfHandlesTouchEngageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36716c0
};

// Class ShooterGame.AresActivatableWidgetStack
// Size: 0x280 (Inherited: 0x270)
struct UAresActivatableWidgetStack : UCommonActivatableWidgetStack {
	struct FMulticastInlineDelegate BP_OnTransitionChanged; // 0x270(0x10)

	void Native_OnTransitionChanged(struct UCommonActivatableWidgetContainerBase* Widget, bool bIsTransitioning); // Function ShooterGame.AresActivatableWidgetStack.Native_OnTransitionChanged // (Native|Protected) // @ game+0x3671be0
	bool IsTransitionPlaying(); // Function ShooterGame.AresActivatableWidgetStack.IsTransitionPlaying // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3671bb0
};

// Class ShooterGame.AresActorSoundPool
// Size: 0x3e8 (Inherited: 0x3d8)
struct AAresActorSoundPool : AActor {
	struct TArray<struct UAresAudioComponent*> RecycledAudioComponents; // 0x3d8(0x10)
};

// Class ShooterGame.AresViewModelBase
// Size: 0x48 (Inherited: 0x30)
struct UAresViewModelBase : UObject {
	struct FMulticastInlineDelegate OnHasValidDataChanged; // 0x30(0x10)
	bool bHasValidData; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	void SetHasValidData(bool HasValidData); // Function ShooterGame.AresViewModelBase.SetHasValidData // (Final|Native|Protected|BlueprintCallable) // @ game+0x37bb6c0
	void Reset(); // Function ShooterGame.AresViewModelBase.Reset // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37ba530
	void RefreshBroadcast(); // Function ShooterGame.AresViewModelBase.RefreshBroadcast // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37bb440
	void OnViewModelCreated(); // Function ShooterGame.AresViewModelBase.OnViewModelCreated // (Native|Event|Protected|BlueprintEvent) // @ game+0x2432e40
	struct UAresViewModelBase* MakeViewModel(struct UAresViewModelBase* ViewModelClass, struct UObject* Owner); // Function ShooterGame.AresViewModelBase.MakeViewModel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37bb170
	bool HasValidData(); // Function ShooterGame.AresViewModelBase.HasValidData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37ba510
	struct APlayerController* GetOwningPlayer(); // Function ShooterGame.AresViewModelBase.GetOwningPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba6d0
	bool BP_HasValidData(); // Function ShooterGame.AresViewModelBase.BP_HasValidData // (Final|Native|Public|BlueprintCallable) // @ game+0x37ba510
};

// Class ShooterGame.AresAddFriendViewModel
// Size: 0x68 (Inherited: 0x48)
struct UAresAddFriendViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnFriendRequestSuccess; // 0x48(0x10)
	struct FMulticastInlineDelegate OnFriendRequestError; // 0x58(0x10)

	void SendFriendRequestByGameNameAndTagline(struct FString GameName, struct FString TagLine); // Function ShooterGame.AresAddFriendViewModel.SendFriendRequestByGameNameAndTagline // (Final|Native|Public|BlueprintCallable) // @ game+0x36722f0
	void SendFriendRequestByFullName(struct FString FullName); // Function ShooterGame.AresAddFriendViewModel.SendFriendRequestByFullName // (Final|Native|Public|BlueprintCallable) // @ game+0x3672240
	void HandleOnFriendRequestSuccess(struct FString GameNameAndTagLine); // Function ShooterGame.AresAddFriendViewModel.HandleOnFriendRequestSuccess // (Final|Native|Private) // @ game+0x3671950
	void HandleOnFriendRequestError(enum class ERGIFriendsRequestResponseErrors ErrorType); // Function ShooterGame.AresAddFriendViewModel.HandleOnFriendRequestError // (Final|Native|Private) // @ game+0x36718d0
};

// Class ShooterGame.AresAimToolingTracker
// Size: 0x100 (Inherited: 0xf8)
struct UAresAimToolingTracker : UAimToolingTracker {
	float LastTelemetryEventSentTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	void TrySendAimToolingTelemetryEvent(struct APlayerState* PlayerState, struct FAimToolingTelemetryData AimToolingData); // Function ShooterGame.AresAimToolingTracker.TrySendAimToolingTelemetryEvent // (Final|Native|Public) // @ game+0x3672780
	void TrackAresShot(struct AShooterCharacter* ShooterCharacter, struct AAresEquippable* EquippableUsed, bool bIsBendingDamage, struct TArray<struct FAresPointDamageEvent>& AppliedDamageEvents); // Function ShooterGame.AresAimToolingTracker.TrackAresShot // (Final|Native|Public|HasOutParms) // @ game+0x36725d0
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.AresAimToolingTracker.OnRoundEnd // (Final|Native|Public) // @ game+0x3635550
};

// Class ShooterGame.AresAimToolingTuningAsset
// Size: 0x6c8 (Inherited: 0x38)
struct UAresAimToolingTuningAsset : UDataAsset {
	bool bAimToolingModule; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FAimToolingTargetManagementSharedTuningSet TargetManagementSharedTuningSet; // 0x40(0xa0)
	struct TMap<struct FString, struct FAimToolingTargetManagementWeaponTuningSet> TargetManagementWeaponTuningSets; // 0xe0(0x50)
	struct FAimToolingMoveErrorSharedTuningSet MoveErrorSharedTuningSet; // 0x130(0x08)
	bool bAimToolingBending; // 0x138(0x01)
	struct FAimToolingBendingSharedTuningSet BendingSharedTuningSet; // 0x139(0x01)
	char pad_13A[0x6]; // 0x13a(0x06)
	struct FAimToolingSpatialBendingFeatureTuningSet SpatialBendingFeatureTuningSet; // 0x140(0x18)
	struct FAimToolingSpatialBendingFeatureTuningSet SpatialBendingFeatureTuningSetADS; // 0x158(0x18)
	struct TMap<struct FString, struct FAimToolingSpatialBendingFeatureTuningSet> SpatialBendingFeatureTuningOverrideSets; // 0x170(0x50)
	struct TMap<struct FString, struct FAimToolingSpatialBendingWeaponTuningSet> SpatialBendingWeaponTuningSets; // 0x1c0(0x50)
	struct TMap<struct FString, struct FAimToolingPrecisionBendingWeaponTuningSet> PrecisionBendingWeaponTuningSets; // 0x210(0x50)
	bool bAimToolingPullToCenter; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	struct FAimToolingPullToCenterSharedTuningSet PullToCenterSharedTuningSet; // 0x264(0x04)
	struct FAimToolingPullToCenterFeatureTuningSet PullToCenterFeatureTuningSet; // 0x268(0x68)
	struct FAimToolingPullToCenterFeatureTuningSet PullToCenterFeatureTuningSetADS; // 0x2d0(0x68)
	struct TMap<struct FString, struct FAimToolingPullToCenterFeatureTuningSet> PullToCenterFeatureTuningOverrideSets; // 0x338(0x50)
	struct TMap<struct FString, struct FAimToolingPullToCenterWeaponTuningSet> PullToCenterWeaponTuningSets; // 0x388(0x50)
	bool bAimToolingTargetFriction; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct FAimToolingTargetFrictionSharedTuningSet TargetFrictionSharedTuningSet; // 0x3e0(0x18)
	struct FAimToolingTargetFrictionFeatureTuningSet TargetFrictionFeatureTuningSet; // 0x3f8(0x08)
	struct FAimToolingTargetFrictionFeatureTuningSet TargetFrictionFeatureTuningSetADS; // 0x400(0x08)
	struct TMap<struct FString, struct FAimToolingTargetFrictionFeatureTuningSet> TargetFrictionFeatureTuningOverrideSets; // 0x408(0x50)
	struct TMap<struct FString, struct FAimToolingTargetFrictionWeaponTuningSet> TargetFrictionWeaponTuningSets; // 0x458(0x50)
	bool bAimToolingAimAccelerationDelay; // 0x4a8(0x01)
	char pad_4A9[0x3]; // 0x4a9(0x03)
	struct FAimToolingAimAccelerationDelaySharedTuningSet AimAccelerationDelaySharedTuningSet; // 0x4ac(0x08)
	bool bAimToolingDeceleration; // 0x4b4(0x01)
	char pad_4B5[0x3]; // 0x4b5(0x03)
	struct FAimToolingDecelerationSharedTuningSet DecelerationSharedTuningSet; // 0x4b8(0x1c)
	bool bAimToolingStrafeAssist; // 0x4d4(0x01)
	char pad_4D5[0x3]; // 0x4d5(0x03)
	struct FAimToolingStrafeAssistSharedTuningSet StrafeAssistSharedTuningSet; // 0x4d8(0x14)
	struct FAimToolingStrafeAssistFeatureTuningSet StrafeAssistFeatureTuningSet; // 0x4ec(0x10)
	struct FAimToolingStrafeAssistFeatureTuningSet StrafeAssistFeatureTuningSetADS; // 0x4fc(0x10)
	char pad_50C[0x4]; // 0x50c(0x04)
	struct TMap<struct FString, struct FAimToolingStrafeAssistFeatureTuningSet> StrafeAssistFeatureTuningOverrideSets; // 0x510(0x50)
	struct TMap<struct FString, struct FAimToolingStrafeAssistWeaponTuningSet> StrafeAssistWeaponTuningSets; // 0x560(0x50)
	bool bAimToolingFrameOfReference; // 0x5b0(0x01)
	char pad_5B1[0x3]; // 0x5b1(0x03)
	struct FAimToolingFrameOfReferenceSharedTuningSet FrameOfReferenceSharedTuningSet; // 0x5b4(0x0c)
	struct FAimToolingFrameOfReferenceFeatureTuningSet FrameOfReferenceFeatureTuningSet; // 0x5c0(0x28)
	struct FAimToolingFrameOfReferenceFeatureTuningSet FrameOfReferenceFeatureTuningSetADS; // 0x5e8(0x28)
	struct TMap<struct FString, struct FAimToolingFrameOfReferenceFeatureTuningSet> FrameOfReferenceFeatureTuningOverrideSets; // 0x610(0x50)
	struct TMap<struct FString, struct FAimToolingFrameOfReferenceWeaponTuningSet> FrameOfReferenceWeaponTuningSets; // 0x660(0x50)
	struct FAimToolingNoTargetFalloffSharedTuningSet NoTargetFalloffSharedTuningSet; // 0x6b0(0x0c)
	struct FAimToolingNewTargetRampUpSharedTuningSet NewTargetRampUpSharedTuningSet; // 0x6bc(0x0c)
};

// Class ShooterGame.AresAimToolingTuningComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresAimToolingTuningComponent : UActorComponent {
	int32_t CurrentTuningMode; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FString> TuningModeAssetPaths; // 0xf0(0x10)
	struct UAresAimToolingTuningAsset* CurrentTuningAsset; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)

	void OnAimToolingGameRuleChanged(enum class EGameRuleBoolName RuleName, bool RuleValue); // Function ShooterGame.AresAimToolingTuningComponent.OnAimToolingGameRuleChanged // (Final|Native|Protected) // @ game+0x3671cc0
	void HandleTuningAssetLoaded(); // Function ShooterGame.AresAimToolingTuningComponent.HandleTuningAssetLoaded // (Final|Native|Protected) // @ game+0x3671ac0
	void HandleAimToolingTuningModeChanged(enum class EGameFeatureFloatConfigName TuningModeName, float NewValue); // Function ShooterGame.AresAimToolingTuningComponent.HandleAimToolingTuningModeChanged // (Final|Native|Protected) // @ game+0x3671800
};

// Class ShooterGame.AresAIPerceptionComponent
// Size: 0x1d8 (Inherited: 0x1d0)
struct UAresAIPerceptionComponent : UAIPerceptionComponent {
	float ReactionTime; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)

	bool HasSensedTimePassedReactionTime(struct UAISense* SenseToUse, struct AActor* Actor); // Function ShooterGame.AresAIPerceptionComponent.HasSensedTimePassedReactionTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3671ae0
	bool GetTotalSensedTime(struct UAISense* SenseToUse, struct AActor* Actor, float& Time); // Function ShooterGame.AresAIPerceptionComponent.GetTotalSensedTime // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36716e0
	bool GetActorsSensedLocation(struct AActor* Actor, struct FVector& Location); // Function ShooterGame.AresAIPerceptionComponent.GetActorsSensedLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36715e0
	void DeactivatePerception(); // Function ShooterGame.AresAIPerceptionComponent.DeactivatePerception // (Final|Native|Public|BlueprintCallable) // @ game+0x36715c0
	void ActivatePerception(); // Function ShooterGame.AresAIPerceptionComponent.ActivatePerception // (Final|Native|Public|BlueprintCallable) // @ game+0x36715a0
};

// Class ShooterGame.AresAIPerceptionSystem
// Size: 0x148 (Inherited: 0x148)
struct UAresAIPerceptionSystem : UAIPerceptionSystem {
};

// Class ShooterGame.AresAISystem
// Size: 0x158 (Inherited: 0x158)
struct UAresAISystem : UAISystem {
};

// Class ShooterGame.GamepadTuningDataAsset
// Size: 0x68 (Inherited: 0x38)
struct UGamepadTuningDataAsset : UDataAsset {
	float AnalogRoundness; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct UCurveFloat*> AimCurves; // 0x40(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> TriggerSwapEquippables; // 0x50(0x10)
	float QuickAbilityMaxHoldTime; // 0x60(0x04)
	float UltInputSeparationTime; // 0x64(0x04)
};

// Class ShooterGame.AresAnalogHandlerComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresAnalogHandlerComponent : UActorComponent {
	char pad_E8[0x20]; // 0xe8(0x20)
	struct UInputComponent* MapInputComponent; // 0x108(0x08)
	struct FVector2D CursorDeltaRemainder; // 0x110(0x08)
};

// Class ShooterGame.AresAssetManager
// Size: 0x510 (Inherited: 0x4a0)
struct UAresAssetManager : UAssetManager {
	char pad_4A0[0x70]; // 0x4a0(0x70)
};

// Class ShooterGame.AresAttachmentSocket
// Size: 0x40 (Inherited: 0x30)
struct UAresAttachmentSocket : UObject {
	struct FName SocketName; // 0x30(0x0c)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.GameplayModMagnitudeCalculationLevelAsCurve
// Size: 0x50 (Inherited: 0x48)
struct UGameplayModMagnitudeCalculationLevelAsCurve : UGameplayModMagnitudeCalculation {
	struct UCurveFloat* AttributeLevelCurve; // 0x48(0x08)
};

// Class ShooterGame.AresGameplayModMagnitudeCalculation
// Size: 0x48 (Inherited: 0x48)
struct UAresGameplayModMagnitudeCalculation : UGameplayModMagnitudeCalculation {

	struct UObject* GetSourceObject(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetSourceObject // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36818d0
	float GetEffectLevel(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetEffectLevel // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3681570
	struct AActor* GetEffectInstigator(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetEffectInstigator // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36814a0
	struct AActor* GetEffectCauser(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetEffectCauser // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36813d0
};

// Class ShooterGame.AresAttributeSet
// Size: 0x838 (Inherited: 0x38)
struct UAresAttributeSet : UAttributeSet {
	struct FGameplayBooleanAttributeData AllowFiringWhileUsing; // 0x38(0x10)
	struct FGameplayAttributeData Blinded; // 0x48(0x10)
	struct FGameplayAttributeData BonusDamage; // 0x58(0x10)
	struct FGameplayBooleanAttributeData CanSeeOthersHealth; // 0x68(0x10)
	struct FGameplayAttributeData DamageReduction; // 0x78(0x10)
	struct FGameplayAttributeData DefensiveDetectionDuration; // 0x88(0x10)
	struct FGameplayAttributeData DescendingGravityModifier; // 0x98(0x10)
	struct FGameplayAttributeData DetectionDelay; // 0xa8(0x10)
	struct FGameplayBooleanAttributeData DetectionDisabled; // 0xb8(0x10)
	struct FGameplayAttributeData EquippableMovementModifier; // 0xc8(0x10)
	struct FGameplayAttributeData HealingEffectiveness; // 0xd8(0x10)
	struct FGameplayAttributeData ShieldRestoreEffectiveness; // 0xe8(0x10)
	struct FGameplayAttributeData FiringErrorModifier; // 0xf8(0x10)
	struct FGameplayAttributeData FiringRateModifier; // 0x108(0x10)
	struct FGameplayAttributeData StabilityMovementModifier; // 0x118(0x10)
	struct FGameplayAttributeData GravityModifier; // 0x128(0x10)
	struct FGameplayAttributeData FootstepVolumeReduction; // 0x138(0x10)
	struct FGameplayBooleanAttributeData ForceCrouch; // 0x148(0x10)
	struct FGameplayBooleanAttributeData Frozen; // 0x158(0x10)
	struct FGameplayBooleanAttributeData HeavyWeaponsDisabled; // 0x168(0x10)
	struct FGameplayBooleanAttributeData Hide1P; // 0x178(0x10)
	struct FGameplayBooleanAttributeData Hide3P; // 0x188(0x10)
	struct FGameplayBooleanAttributeData HideCrosshair; // 0x198(0x10)
	struct FGameplayBooleanAttributeData HudVisibleToAll; // 0x1a8(0x10)
	struct FGameplayBooleanAttributeData HudVisibleToInstigator; // 0x1b8(0x10)
	struct FGameplayBooleanAttributeData InDanger; // 0x1c8(0x10)
	struct FGameplayBooleanAttributeData Intangible; // 0x1d8(0x10)
	struct FGameplayBooleanAttributeData Invisible; // 0x1e8(0x10)
	struct FGameplayBooleanAttributeData InvisibleEquippables; // 0x1f8(0x10)
	struct FGameplayBooleanAttributeData InvisibleToEnemies; // 0x208(0x10)
	struct FGameplayBooleanAttributeData InvisibleToEnemyNonPlayers; // 0x218(0x10)
	struct FGameplayBooleanAttributeData InvisibleToOwner; // 0x228(0x10)
	struct FGameplayBooleanAttributeData Invulnerable; // 0x238(0x10)
	struct FGameplayAttributeData JumpForceModifier; // 0x248(0x10)
	struct FGameplayAttributeData JumpMovementSlow; // 0x258(0x10)
	struct FGameplayBooleanAttributeData MinimapBlinded; // 0x268(0x10)
	struct FGameplayAttributeData MinimumAboveMaxSpeedDecayRateReduction; // 0x278(0x10)
	struct FGameplayAttributeData FallDamageReduction; // 0x288(0x10)
	struct FGameplayBooleanAttributeData LockMovement; // 0x298(0x10)
	struct FGameplayAttributeData MagazineBonus; // 0x2a8(0x10)
	struct FGameplayBooleanAttributeData MapVisibleToAll; // 0x2b8(0x10)
	struct FGameplayAttributeData MaxHealthModifier; // 0x2c8(0x10)
	struct FGameplayAttributeData MaxShieldModifier; // 0x2d8(0x10)
	struct FGameplayAttributeData MaxTurnRate; // 0x2e8(0x10)
	struct FGameplayAttributeData MinError; // 0x2f8(0x10)
	struct FGameplayAttributeData MinimapDetectionDelay; // 0x308(0x10)
	struct FGameplayBooleanAttributeData MinimapDisabled; // 0x318(0x10)
	struct FGameplayBooleanAttributeData MinimapInvisible; // 0x328(0x10)
	struct FGameplayAttributeData MinimapViewDistance; // 0x338(0x10)
	struct FGameplayAttributeData MaxVisionDistance; // 0x348(0x10)
	struct FGameplayAttributeData MoneyKillRewardModifier; // 0x358(0x10)
	struct FGameplayAttributeData MovementBonus; // 0x368(0x10)
	struct FGameplayAttributeData MovementBonusCrouch; // 0x378(0x10)
	struct FGameplayAttributeData MovementBonusFlying; // 0x388(0x10)
	struct FGameplayAttributeData MovementBonusJump; // 0x398(0x10)
	struct FGameplayAttributeData MovementBonusRun; // 0x3a8(0x10)
	struct FGameplayAttributeData MovementBonusWalk; // 0x3b8(0x10)
	struct FGameplayAttributeData MovementErrorModifier; // 0x3c8(0x10)
	struct FGameplayAttributeData MovementSlow; // 0x3d8(0x10)
	struct FGameplayAttributeData OffensiveDetectionDuration; // 0x3e8(0x10)
	struct FGameplayAttributeData PickupAmmoBonus; // 0x3f8(0x10)
	struct FGameplayBooleanAttributeData PreventAbilities; // 0x408(0x10)
	struct FGameplayBooleanAttributeData PreventCrouch; // 0x418(0x10)
	struct FGameplayBooleanAttributeData PreventDroppingEquippables; // 0x428(0x10)
	struct FGameplayBooleanAttributeData PreventJump; // 0x438(0x10)
	struct FGameplayBooleanAttributeData PreventFiring; // 0x448(0x10)
	struct FGameplayBooleanAttributeData PreventMeleeAttacking; // 0x458(0x10)
	struct FGameplayBooleanAttributeData PreventMovementInput; // 0x468(0x10)
	struct FGameplayBooleanAttributeData PreventReloading; // 0x478(0x10)
	struct FGameplayBooleanAttributeData PreventSwitchingEquippables; // 0x488(0x10)
	struct FGameplayBooleanAttributeData PreventUseCancelling; // 0x498(0x10)
	struct FGameplayBooleanAttributeData PreventUsing; // 0x4a8(0x10)
	struct FGameplayBooleanAttributeData PreventPickup; // 0x4b8(0x10)
	struct FGameplayBooleanAttributeData PrimarySlotDisabled; // 0x4c8(0x10)
	struct FGameplayAttributeData ReduceAbilityMovementPenalty; // 0x4d8(0x10)
	struct FGameplayAttributeData ReduceTaggingMovementPenalty; // 0x4e8(0x10)
	struct FGameplayAttributeData ReloadTimeModifier; // 0x4f8(0x10)
	struct FGameplayAttributeData SpreadRecoveryModifier; // 0x508(0x10)
	struct FGameplayBooleanAttributeData Stealthed; // 0x518(0x10)
	struct FGameplayBooleanAttributeData Untrackable; // 0x528(0x10)
	struct FGameplayAttributeData RecoilModifier; // 0x538(0x10)
	struct FGameplayBooleanAttributeData ThirdPerson; // 0x548(0x10)
	struct FGameplayAttributeData TurnRatePenalty; // 0x558(0x10)
	struct FGameplayAttributeData UltimatePointsDeathModifier; // 0x568(0x10)
	struct FGameplayAttributeData UltimatePointsDefuseModifier; // 0x578(0x10)
	struct FGameplayAttributeData UltimatePointsKillModifier; // 0x588(0x10)
	struct FGameplayAttributeData UltimatePointsPickUpModifier; // 0x598(0x10)
	struct FGameplayAttributeData UltimatePointsPlantModifier; // 0x5a8(0x10)
	struct FGameplayAttributeData UsingTimeModifier; // 0x5b8(0x10)
	struct FGameplayAttributeData WallPenetrationDistanceModifier; // 0x5c8(0x10)
	struct FGameplayAttributeData WeaponDrawTimeModifier; // 0x5d8(0x10)
	struct FGameplayBooleanAttributeData WeaponsDisabled; // 0x5e8(0x10)
	struct FGameplayBooleanAttributeData WeaponsLowered; // 0x5f8(0x10)
	struct FGameplayBooleanAttributeData Disarmed; // 0x608(0x10)
	struct FGameplayBooleanAttributeData GrenadeDisabled; // 0x618(0x10)
	struct FGameplayBooleanAttributeData QDisabled; // 0x628(0x10)
	struct FGameplayBooleanAttributeData EDisabled; // 0x638(0x10)
	struct FGameplayBooleanAttributeData UltimateDisabled; // 0x648(0x10)
	struct FGameplayBooleanAttributeData ZoomDisabled; // 0x658(0x10)
	struct FGameplayBooleanAttributeData EquipmentDisabled; // 0x668(0x10)
	struct FGameplayAttributeData TemporaryDamage; // 0x678(0x10)
	struct FGameplayAttributeData IncomingDamageShieldPenetrationModifier; // 0x688(0x10)
	struct FGameplayAttributeData IncomingAllyDamageModifier; // 0x698(0x10)
	struct FGameplayBooleanAttributeData PreventDeathFromDamage; // 0x6a8(0x10)
	struct FGameplayBooleanAttributeData BlindImmune; // 0x6b8(0x10)
	struct FGameplayBooleanAttributeData PreventUsingAbilities; // 0x6c8(0x10)
	struct FGameplayBooleanAttributeData PreventUsingAscenders; // 0x6d8(0x10)
	struct FGameplayBooleanAttributeData PreventUsingLoreItems; // 0x6e8(0x10)
	struct FGameplayAttributeData OverrideEquippableBaseMovement; // 0x6f8(0x10)
	struct FGameplayBooleanAttributeData DisableRegionalDamageMultipliers; // 0x708(0x10)
	struct FGameplayBooleanAttributeData DisableIncomingDamageCombatTracking; // 0x718(0x10)
	struct FGameplayBooleanAttributeData HealsFromAllyFlames; // 0x728(0x10)
	struct FGameplayAttributeData Marked; // 0x738(0x10)
	struct FGameplayBooleanAttributeData Suppressed; // 0x748(0x10)
	struct FGameplayBooleanAttributeData PreventDowned; // 0x758(0x10)
	struct FGameplayBooleanAttributeData PreventPlanting; // 0x768(0x10)
	struct FGameplayBooleanAttributeData PreventDefusing; // 0x778(0x10)
	struct FGameplayBooleanAttributeData PreventFollowing; // 0x788(0x10)
	struct FGameplayBooleanAttributeData InPeril; // 0x798(0x10)
	struct FGameplayBooleanAttributeData PreventMinimapFocusing; // 0x7a8(0x10)
	struct FGameplayAttributeData SensitivityModifier; // 0x7b8(0x10)
	struct FGameplayBooleanAttributeData ShowObserverKeybindsWhileHidden; // 0x7c8(0x10)
	struct FGameplayBooleanAttributeData PreventSkinFinisherIfVictim; // 0x7d8(0x10)
	struct FGameplayBooleanAttributeData PreventTeamWipeCondition; // 0x7e8(0x10)
	struct FGameplayBooleanAttributeData GroundedFootstepMute; // 0x7f8(0x10)
	struct FGameplayBooleanAttributeData DelayDeathUltPointReward; // 0x808(0x10)
	struct FGameplayBooleanAttributeData PreventKillUltPointReward; // 0x818(0x10)
	float Healing; // 0x828(0x04)
	float Damage; // 0x82c(0x04)
	float Shield; // 0x830(0x04)
	char pad_834[0x4]; // 0x834(0x04)
};

// Class ShooterGame.AresAudioBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresAudioBlueprintLibrary : UBlueprintFunctionLibrary {

	void SetDebugAresAudio(int32_t Value); // Function ShooterGame.AresAudioBlueprintLibrary.SetDebugAresAudio // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3681c90
	void SetAudioLanguage(struct FString Language); // Function ShooterGame.AresAudioBlueprintLibrary.SetAudioLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3681ba0
	void LoadLocalizedEventsFromBankList(struct TArray<struct UAkAudioBank*>& AudioBanks); // Function ShooterGame.AresAudioBlueprintLibrary.LoadLocalizedEventsFromBankList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3681ac0
	void LoadEventsFromBankList(struct TArray<struct UAkAudioBank*>& AudioBanks); // Function ShooterGame.AresAudioBlueprintLibrary.LoadEventsFromBankList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3681a20
	void LoadEventsForBank(struct UAkAudioBank* AudioBank); // Function ShooterGame.AresAudioBlueprintLibrary.LoadEventsForBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36819a0
	struct AAresSoundHandler* GetSoundHandlerForWorld(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioBlueprintLibrary.GetSoundHandlerForWorld // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3681840
	struct TArray<struct FString> GetLocalizationDirectories(); // Function ShooterGame.AresAudioBlueprintLibrary.GetLocalizationDirectories // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3681720
	void GetEventsForBank(struct UAkAudioBank* AudioBank, struct TArray<struct UAkAudioEvent*>& OutEvents); // Function ShooterGame.AresAudioBlueprintLibrary.GetEventsForBank // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3681640
	int32_t GetDebugAresAudio(); // Function ShooterGame.AresAudioBlueprintLibrary.GetDebugAresAudio // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36813a0
	struct FString GetAudioLanguage(); // Function ShooterGame.AresAudioBlueprintLibrary.GetAudioLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3681320
	struct AAresActorSoundPool* GetActorSoundPoolForWorld(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioBlueprintLibrary.GetActorSoundPoolForWorld // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3681290
	void AudioStatsSetInt(struct UObject* WorldContextObject, struct FName StatName, int32_t Value); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsSetInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36810f0
	void AudioStatsResetAll(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsResetAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3681070
	int32_t AudioStatsIncrementInt(struct UObject* WorldContextObject, struct FName StatName); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsIncrementInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3680f90
	struct FString AudioStatsGetString(struct UObject* WorldContextObject, int32_t TotalFrames); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsGetString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3680e80
	int32_t AudioStatsGetInt(struct UObject* WorldContextObject, struct FName StatName); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsGetInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3680da0
	struct UAkAudioEvent* AresLoadAkAudioEventByPath(struct FString EventPath); // Function ShooterGame.AresAudioBlueprintLibrary.AresLoadAkAudioEventByPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3680c30
};

// Class ShooterGame.AresAudioComponent
// Size: 0x550 (Inherited: 0x460)
struct UAresAudioComponent : UAkComponent {
	bool bEnableDopplerRTPC; // 0x460(0x01)
	bool bEnableOcclusion; // 0x461(0x01)
	bool bSimpleOcclusion; // 0x462(0x01)
	bool bContinuousOcclusion; // 0x463(0x01)
	float OcclusionUpdateInterval; // 0x464(0x04)
	struct TArray<struct AActor*> OcclusionIgnoredActors; // 0x468(0x10)
	char pad_478[0x11]; // 0x478(0x11)
	bool bAllowActorRecycling; // 0x489(0x01)
	char pad_48A[0xc6]; // 0x48a(0xc6)

	void WillRecycleComponent(); // Function ShooterGame.AresAudioComponent.WillRecycleComponent // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void WillPostEvent(struct FString PostEventName); // Function ShooterGame.AresAudioComponent.WillPostEvent // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void UpdatePosition(); // Function ShooterGame.AresAudioComponent.UpdatePosition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x36820b0
	void SetVolumeMultiplier(float VolumeMultiplier); // Function ShooterGame.AresAudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x3682030
	void SetSurfaceType(enum class EAresSurfaceType AresSurfaceType); // Function ShooterGame.AresAudioComponent.SetSurfaceType // (Final|Native|Public|BlueprintCallable) // @ game+0x3681fb0
	void SetRegionDamage(enum class EAresRegionalDamage RegionDamage); // Function ShooterGame.AresAudioComponent.SetRegionDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x3681f30
	void SetImpactAllies(enum class EAresImpactEffectAllies Allies); // Function ShooterGame.AresAudioComponent.SetImpactAllies // (Final|Native|Public|BlueprintCallable) // @ game+0x3681eb0
	void SetHitSpace(enum class EAresImpactEffectHitspace HitSpace); // Function ShooterGame.AresAudioComponent.SetHitSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3681e30
	void SetHitImpactArmor(enum class EAresImpactEffectWithArmor HitImpactArmor); // Function ShooterGame.AresAudioComponent.SetHitImpactArmor // (Final|Native|Public|BlueprintCallable) // @ game+0x3681db0
	void SetHitConfirmLocality(enum class EAresHitConfirmLocality HitConfirmLocality); // Function ShooterGame.AresAudioComponent.SetHitConfirmLocality // (Final|Native|Public|BlueprintCallable) // @ game+0x3681d30
	void SetFacingAngle(); // Function ShooterGame.AresAudioComponent.SetFacingAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3681d10
	void ResetAudioComponent(); // Function ShooterGame.AresAudioComponent.ResetAudioComponent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3681b80
	void PrepareForReuse(); // Function ShooterGame.AresAudioComponent.PrepareForReuse // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3681b60
	float GetSoundFacingAngle(); // Function ShooterGame.AresAudioComponent.GetSoundFacingAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3681820
	float GetOcclusionValue(); // Function ShooterGame.AresAudioComponent.GetOcclusionValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3681800
	void GetComponentDebugString(struct FString& DebugString); // Function ShooterGame.AresAudioComponent.GetComponentDebugString // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	float ComputeOcclusion(); // Function ShooterGame.AresAudioComponent.ComputeOcclusion // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ComputeDopplerRTPC(float DeltaTime); // Function ShooterGame.AresAudioComponent.ComputeDopplerRTPC // (Final|Native|Public|BlueprintCallable) // @ game+0x3681210
	void AudioTick(float DeltaTime); // Function ShooterGame.AresAudioComponent.AudioTick // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AresUseGlobal2DAudioComponent(struct UObject* WorldContextObject, struct UAkAudioEvent* Event); // Function ShooterGame.AresAudioComponent.AresUseGlobal2DAudioComponent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3680ce0
	bool AresIsEventAudible(struct UObject* WorldContextObject, struct UAkAudioEvent* AudioEvent, struct FVector& Location, bool IsAttached, float VolumeMultiplier); // Function ShooterGame.AresAudioComponent.AresIsEventAudible // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3680a60
	struct FVector AresGetListenerVelocity(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetListenerVelocity // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x36809c0
	struct FVector AresGetListenerPosition(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetListenerPosition // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3680920
	struct FVector AresGetListenerForward(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetListenerForward // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3680880
	struct APlayerController* AresGetActiveListenerPlayerController(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetActiveListenerPlayerController // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36807f0
	struct UAresAudioComponent* AresFindOrCreateReusableAudioComponentForWorld(struct UAresAudioComponent* ComponentClass, struct UObject* WorldContextObject, struct FVector& Location, struct FRotator& Orientation, struct FString ComponentName); // Function ShooterGame.AresAudioComponent.AresFindOrCreateReusableAudioComponentForWorld // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3680600
	struct UAresAudioComponent* AresFindOrCreateReusableAudioComponentForActor(struct UAresAudioComponent* ComponentClass, struct AActor* Owner, struct USceneComponent* ParentComponent, struct FName AttachPointName, struct FVector Offset); // Function ShooterGame.AresAudioComponent.AresFindOrCreateReusableAudioComponentForActor // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3680450
	struct UAresAudioComponent* AresCreateAudioComponentForActor(struct UAresAudioComponent* ComponentClass, struct AActor* Owner, struct USceneComponent* ParentComponent, struct FName AttachPointName, struct FVector Offset, struct FRotator Orientation, bool bAutoDestroyComponent, bool bStopWhenOwnerDestroyed, bool bAllowRecycling); // Function ShooterGame.AresAudioComponent.AresCreateAudioComponentForActor // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3680170
};

// Class ShooterGame.AresAudioComponentManagerComponent
// Size: 0x140 (Inherited: 0xe8)
struct UAresAudioComponentManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TMap<struct UObject*, struct FAudioComponentPool> AudioComponentPools; // 0xf0(0x50)

	void SetPooledAudioLimit(int32_t Limit, struct UObject* ParentObject); // Function ShooterGame.AresAudioComponentManagerComponent.SetPooledAudioLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3688200
	void RemovePoolFromMontage(struct UAnimMontage* Montage, bool bInterrupted); // Function ShooterGame.AresAudioComponentManagerComponent.RemovePoolFromMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x3687430
	void RemovePooledAudioComponent(struct UAresAudioComponent* AudioComponent, struct UObject* ParentObject); // Function ShooterGame.AresAudioComponentManagerComponent.RemovePooledAudioComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3687500
	void RemoveAudioPool(struct UObject* ParentObject, bool bStopAllAudio); // Function ShooterGame.AresAudioComponentManagerComponent.RemoveAudioPool // (Final|Native|Public|BlueprintCallable) // @ game+0x3687360
	void AddPooledAudioComponent(struct UAresAudioComponent* AudioComponent, struct UObject* ParentObject); // Function ShooterGame.AresAudioComponentManagerComponent.AddPooledAudioComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3686700
};

// Class ShooterGame.AresAudioSettings
// Size: 0xa8 (Inherited: 0x48)
struct UAresAudioSettings : UDeveloperSettings {
	float BasicOcclusion; // 0x48(0x04)
	float HeavyOcclusion; // 0x4c(0x04)
	float SoundBlockerOcclusion; // 0x50(0x04)
	float NoOcclusionPathOcclusion; // 0x54(0x04)
	struct FSoftObjectPath HeavyOcclusionMaterial; // 0x58(0x20)
	struct FSoftObjectPath SoundBlockerMaterial; // 0x78(0x20)
	float InterpolationTimeMs; // 0x98(0x04)
	float TracePadding; // 0x9c(0x04)
	enum class ECollisionChannel DirectLineToSoundCollision; // 0xa0(0x01)
	enum class ECollisionChannel DetectBlockersCollision; // 0xa1(0x01)
	char pad_A2[0x6]; // 0xa2(0x06)
};

// Class ShooterGame.AutocompleteSuggestionBase
// Size: 0x2f8 (Inherited: 0x2c8)
struct UAutocompleteSuggestionBase : UUserWidget {
	struct FString Suggestion; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnClick; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnHover; // 0x2e8(0x10)

	void SetHighlighted(bool Highlighted); // Function ShooterGame.AutocompleteSuggestionBase.SetHighlighted // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AutocompleteProvider
// Size: 0x30 (Inherited: 0x30)
struct UAutocompleteProvider : UInterface {

	bool PerformsAutoFill(); // Function ShooterGame.AutocompleteProvider.PerformsAutoFill // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	bool IsRelevant(struct TArray<struct FString>& Tokens); // Function ShooterGame.AutocompleteProvider.IsRelevant // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	struct UAutocompleteSuggestionBase* GetSuggestionWidgetClass(); // Function ShooterGame.AutocompleteProvider.GetSuggestionWidgetClass // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	struct TArray<struct FString> GetAllSuggestions(struct UAresClientGameInstance* AresClientGame); // Function ShooterGame.AutocompleteProvider.GetAllSuggestions // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
};

// Class ShooterGame.AresAutocompleteTextBox
// Size: 0x328 (Inherited: 0x2c8)
struct UAresAutocompleteTextBox : UUserWidget {
	struct UEditableTextBox* RawTextBox; // 0x2c8(0x08)
	int32_t MaxSuggestions; // 0x2d0(0x04)
	bool ShouldSplitInputOnSpace; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct FString LastToken; // 0x2d8(0x10)
	bool bAutoFill; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct UAutocompleteSuggestionBase* CurrentSuggestionWidgetClass; // 0x2f0(0x08)
	struct TArray<struct FString> CurrentSuggestions; // 0x2f8(0x10)
	bool bApplyingSuggestion; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct TArray<struct TScriptInterface<IAutocompleteProvider>> Providers; // 0x310(0x10)
	struct UEmojiMapping* EmojiMapping; // 0x320(0x08)

	void UpdateSuggestions(struct FString Input); // Function ShooterGame.AresAutocompleteTextBox.UpdateSuggestions // (Final|Native|Protected|BlueprintCallable) // @ game+0x3688560
	struct TArray<struct FString> TokenizeInput(struct FString Input, bool SplitOnSpace); // Function ShooterGame.AresAutocompleteTextBox.TokenizeInput // (Final|Native|Protected|Const) // @ game+0x36882d0
	void ApplySuggestion(struct UEditableTextBox* TargetTextBox, struct FString Suggestion); // Function ShooterGame.AresAutocompleteTextBox.ApplySuggestion // (Final|Native|Protected|BlueprintCallable) // @ game+0x3686bb0
};

// Class ShooterGame.AresBaseGameInstance
// Size: 0x30 (Inherited: 0x30)
struct UAresBaseGameInstance : UObject {
};

// Class ShooterGame.AresCommonButton
// Size: 0x1028 (Inherited: 0xce8)
struct UAresCommonButton : UCommonButtonBase {
	char pad_CE8[0x18]; // 0xce8(0x18)
	struct TArray<struct TScriptInterface<IAresButtonComponent>> ButtonComponents; // 0xd00(0x10)
	struct FText Text; // 0xd10(0x18)
	struct FText SecondaryText; // 0xd28(0x18)
	struct FSlateBrush IconBrush; // 0xd40(0x90)
	bool bFocusIsHover; // 0xdd0(0x01)
	char pad_DD1[0x7]; // 0xdd1(0x07)
	struct FMulticastInlineDelegate OnButtonBaseLongClicked; // 0xdd8(0x10)
	char pad_DE8[0x18]; // 0xde8(0x18)
	struct TArray<struct FAresConditionalInputActionData> ConditionalInputActionsNew; // 0xe00(0x10)
	char pad_E10[0x50]; // 0xe10(0x50)
	struct TArray<struct FAresCommonConditionalInputAction> ConditionalInputActions; // 0xe60(0x10)
	bool bShouldLongClickTriggerRegularClick; // 0xe70(0x01)
	char pad_E71[0x7]; // 0xe71(0x07)
	struct UCommonTextBlock* ButtonText; // 0xe78(0x08)
	struct UImage* ButtonIcon; // 0xe80(0x08)
	bool bDisplayInActionBar_TMP; // 0xe88(0x01)
	char pad_E89[0x7]; // 0xe89(0x07)
	struct FText OverrideTriggerActionDisplayName; // 0xe90(0x18)
	struct FButtonMaterialAnimations MaterialAnimations[0x9]; // 0xea8(0x90)
	struct TMap<struct FName, struct UMaterialInstanceDynamic*> AnimatableMaterials; // 0xf38(0x50)
	struct FName StyleMaterialParamFocused; // 0xf88(0x0c)
	struct FName StyleMaterialParamPressed; // 0xf94(0x0c)
	struct FName StyleMaterialParamSelected; // 0xfa0(0x0c)
	struct FName StyleMaterialParamEnabled; // 0xfac(0x0c)
	char pad_FB8[0x8]; // 0xfb8(0x08)
	struct TScriptInterface<IButtonTextWidgetComponent> PrimaryTextComponent; // 0xfc0(0x10)
	struct TScriptInterface<IButtonTextWidgetComponent> SecondaryTextComponent; // 0xfd0(0x10)
	struct TArray<struct FHeldProgressMaterialPair> ProgressMaterials; // 0xfe0(0x10)
	char pad_FF0[0x28]; // 0xff0(0x28)
	struct TArray<struct FButtonMaterialAnimationInfo> ActiveMaterialAnimations; // 0x1018(0x10)

	void UnregisterProgressMaterial(struct UMaterialInstanceDynamic* ProgressMaterial); // Function ShooterGame.AresCommonButton.UnregisterProgressMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x36a8c00
	void SetText(struct FText& InText); // Function ShooterGame.AresCommonButton.SetText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x36a8af0
	void SetSecondaryText(struct FText& InText); // Function ShooterGame.AresCommonButton.SetSecondaryText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x36a8a00
	void SetImageBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function ShooterGame.AresCommonButton.SetImageBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x36a8870
	void SetImageBrushFromMaterial(struct UMaterialInterface* Material); // Function ShooterGame.AresCommonButton.SetImageBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x36a87e0
	void SetConditionalInputActionOverrideNameByInputAction(struct FDataTableRowHandle& InputAction, struct FText NewName); // Function ShooterGame.AresCommonButton.SetConditionalInputActionOverrideNameByInputAction // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x36a8680
	void SetConditionalInputActionOverrideNameByIndex(int32_t Index, struct FText NewName); // Function ShooterGame.AresCommonButton.SetConditionalInputActionOverrideNameByIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x36a8540
	void SetConditionalInputActionEnabledByInputAction(struct FDataTableRowHandle& InputAction, bool IsEnabled); // Function ShooterGame.AresCommonButton.SetConditionalInputActionEnabledByInputAction // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x36a8450
	void SetConditionalInputActionEnabledByIndex(int32_t Index, bool IsEnabled); // Function ShooterGame.AresCommonButton.SetConditionalInputActionEnabledByIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x36a8380
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function ShooterGame.AresCommonButton.SetBrushFromTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x36a8220
	void RegisterProgressMaterial(struct FHeldProgressMaterialPair ProgressMaterialInfo); // Function ShooterGame.AresCommonButton.RegisterProgressMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7fe0
	void HandleButtonLongClicked(); // Function ShooterGame.AresCommonButton.HandleButtonLongClicked // (Final|Native|Protected) // @ game+0x36a7d20
	enum class EAresCommonButtonVisibleState GetVisibleState(); // Function ShooterGame.AresCommonButton.GetVisibleState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a7cc0
	struct UCommonTextStyle* GetTextStyleClassForVisibleState(enum class EAresCommonButtonVisibleState State); // Function ShooterGame.AresCommonButton.GetTextStyleClassForVisibleState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7b90
	struct FText GetText(); // Function ShooterGame.AresCommonButton.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a7aa0
	struct FText GetSecondaryText(); // Function ShooterGame.AresCommonButton.GetSecondaryText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a79e0
	bool GetIsConditionalInputActionEnabledByInputAction(struct FDataTableRowHandle& InputAction); // Function ShooterGame.AresCommonButton.GetIsConditionalInputActionEnabledByInputAction // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x36a7820
	bool GetIsConditionalInputActionEnabledByIndex(int32_t Index); // Function ShooterGame.AresCommonButton.GetIsConditionalInputActionEnabledByIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x36a7780
	struct FText GetConditionalInputActionNameOverrideByInputAction(struct FDataTableRowHandle& InputAction); // Function ShooterGame.AresCommonButton.GetConditionalInputActionNameOverrideByInputAction // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x36a7640
	struct TMap<struct FName, struct UMaterialInstanceDynamic*> GetAnimatableMaterialsMap(); // Function ShooterGame.AresCommonButton.GetAnimatableMaterialsMap // (Native|Event|Protected|BlueprintEvent) // @ game+0x36a7410
	void DisableConditionalActionsOfInputCondition(enum class EAresCommonInputCondition InputCondition); // Function ShooterGame.AresCommonButton.DisableConditionalActionsOfInputCondition // (Final|Native|Protected|BlueprintCallable) // @ game+0x36a71e0
	void BP_OnTransitionUnHovered(); // Function ShooterGame.AresCommonButton.BP_OnTransitionUnHovered // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionSelected(); // Function ShooterGame.AresCommonButton.BP_OnTransitionSelected // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionReleased(); // Function ShooterGame.AresCommonButton.BP_OnTransitionReleased // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionPressed(); // Function ShooterGame.AresCommonButton.BP_OnTransitionPressed // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionHovered(); // Function ShooterGame.AresCommonButton.BP_OnTransitionHovered // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionEnabled(); // Function ShooterGame.AresCommonButton.BP_OnTransitionEnabled // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionDisabled(); // Function ShooterGame.AresCommonButton.BP_OnTransitionDisabled // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnTransitionDeselected(); // Function ShooterGame.AresCommonButton.BP_OnTransitionDeselected // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnLongClicked(); // Function ShooterGame.AresCommonButton.BP_OnLongClicked // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresClickablePanel
// Size: 0x1030 (Inherited: 0x1028)
struct UAresClickablePanel : UAresCommonButton {
	char pad_1028[0x8]; // 0x1028(0x08)

	void K2_BindToViewModel(); // Function ShooterGame.AresClickablePanel.K2_BindToViewModel // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresSettingClickablePanel
// Size: 0x1070 (Inherited: 0x1030)
struct UAresSettingClickablePanel : UAresClickablePanel {
	bool bListenForLeftRightNavigation; // 0x1030(0x01)
	bool bListenForHeldLeftRightNavigation; // 0x1031(0x01)
	char pad_1032[0x6]; // 0x1032(0x06)
	struct UAresSettingUIData* SettingDataAssetClass; // 0x1038(0x08)
	struct UAresSettingUIData* SettingDataAsset; // 0x1040(0x08)
	bool bIsLeftNavigationDown; // 0x1048(0x01)
	bool bIsLeftNavigationHeld; // 0x1049(0x01)
	bool bIsRightNavigationDown; // 0x104a(0x01)
	bool bIsRightNavigationHeld; // 0x104b(0x01)
	char pad_104C[0x1c]; // 0x104c(0x1c)
	struct USettingsOptionViewModel* SettingOptionViewModel; // 0x1068(0x08)

	void SetSettingDataAsset(struct UAresSettingUIData* InSettingDataAsset); // Function ShooterGame.AresSettingClickablePanel.SetSettingDataAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x374dea0
	void RefreshViewFromSettingOptionViewModel(); // Function ShooterGame.AresSettingClickablePanel.RefreshViewFromSettingOptionViewModel // (Native|Event|Protected|BlueprintEvent) // @ game+0x374cfe0
	void OnDependentStateChanged(enum class EAresWidgetDependentState NewState); // Function ShooterGame.AresSettingClickablePanel.OnDependentStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x374cc10
	void InternalOnRightNavigationUp(); // Function ShooterGame.AresSettingClickablePanel.InternalOnRightNavigationUp // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c4a0
	void InternalOnRightNavigationReleased(); // Function ShooterGame.AresSettingClickablePanel.InternalOnRightNavigationReleased // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c470
	void InternalOnRightNavigationHeld(); // Function ShooterGame.AresSettingClickablePanel.InternalOnRightNavigationHeld // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c440
	void InternalOnRightNavigation(); // Function ShooterGame.AresSettingClickablePanel.InternalOnRightNavigation // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c410
	void InternalOnLeftNavigationUp(); // Function ShooterGame.AresSettingClickablePanel.InternalOnLeftNavigationUp // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c3e0
	void InternalOnLeftNavigationReleased(); // Function ShooterGame.AresSettingClickablePanel.InternalOnLeftNavigationReleased // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c3b0
	void InternalOnLeftNavigationHeld(); // Function ShooterGame.AresSettingClickablePanel.InternalOnLeftNavigationHeld // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c380
	void InternalOnLeftNavigation(); // Function ShooterGame.AresSettingClickablePanel.InternalOnLeftNavigation // (Native|Event|Protected|BlueprintEvent) // @ game+0x374c350
	struct UAresSettingUIData* BP_GetSettingDataAssetAs(struct UAresSettingUIData* AsType, bool& bIsValid); // Function ShooterGame.AresSettingClickablePanel.BP_GetSettingDataAssetAs // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374abc0
	void BindToSettingOptionViewModel(bool bBind); // Function ShooterGame.AresSettingClickablePanel.BindToSettingOptionViewModel // (Native|Event|Protected|BlueprintEvent) // @ game+0x374ae40
};

// Class ShooterGame.AresBoolSettingClickablePanel
// Size: 0x10b8 (Inherited: 0x1070)
struct UAresBoolSettingClickablePanel : UAresSettingClickablePanel {
	struct UMaterialInstance* ToggleMaterial; // 0x1070(0x08)
	struct UMaterialInstanceDynamic* ToggleMaterialInst; // 0x1078(0x08)
	struct FText OnText; // 0x1080(0x18)
	struct FText OffText; // 0x1098(0x18)
	struct USettingsBoolViewModel* BoolSettingViewModel; // 0x10b0(0x08)

	void SetOnText(struct FText& InOnText); // Function ShooterGame.AresBoolSettingClickablePanel.SetOnText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3688110
	void SetOffText(struct FText& InOffText); // Function ShooterGame.AresBoolSettingClickablePanel.SetOffText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3688020
	void OnToggleStateChanged(bool bIsSelected); // Function ShooterGame.AresBoolSettingClickablePanel.OnToggleStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x3687280
	void OnSettingValueChanged(bool NewValue); // Function ShooterGame.AresBoolSettingClickablePanel.OnSettingValueChanged // (Final|Native|Protected) // @ game+0x36871f0
	void OnMaterialCreated(); // Function ShooterGame.AresBoolSettingClickablePanel.OnMaterialCreated // (Native|Event|Protected|BlueprintEvent) // @ game+0x36871c0
	struct USettingsBoolViewModel* GetSettingOptionViewModelAsBoolSetting(); // Function ShooterGame.AresBoolSettingClickablePanel.GetSettingOptionViewModelAsBoolSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3687190
};

// Class ShooterGame.AresBotAimDebugComponent
// Size: 0x108 (Inherited: 0xe8)
struct UAresBotAimDebugComponent : UActorComponent {
	char pad_E8[0x20]; // 0xe8(0x20)

	void ClearTopPreaimPoints(); // Function ShooterGame.AresBotAimDebugComponent.ClearTopPreaimPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x3686cc0
	void ClearTopCombatTargets(); // Function ShooterGame.AresBotAimDebugComponent.ClearTopCombatTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x3686ca0
	void AddTopPreaimPoint(struct AActor* PreaimPoint, struct TMap<struct FString, float>& UtilValues, float TotalUtility, int32_t HeapSize); // Function ShooterGame.AresBotAimDebugComponent.AddTopPreaimPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36869c0
	void AddTopCombatTarget(struct AActor* CombatTarget, struct TMap<struct FString, float>& UtilValues, float TotalUtility, int32_t HeapSize); // Function ShooterGame.AresBotAimDebugComponent.AddTopCombatTarget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36867d0
};

// Class ShooterGame.ShooterAIController
// Size: 0x548 (Inherited: 0x4f8)
struct AShooterAIController : AAIController {
	struct URoundPersistenceComponent* Persistence; // 0x4f8(0x08)
	bool bTurretAiming; // 0x500(0x01)
	char pad_501[0xf]; // 0x501(0x0f)
	struct AShooterCharacter* PossessedShooterCharacter; // 0x510(0x08)
	struct FName ShooterCharacterFocalPointBone; // 0x518(0x0c)
	bool bMovementDownTickingEnabled; // 0x524(0x01)
	char pad_525[0x3]; // 0x525(0x03)
	struct FMulticastInlineDelegate OnPossessPawn; // 0x528(0x10)
	struct FMulticastInlineDelegate OnUnpossessPawn; // 0x538(0x10)

	void UnSetPossessedCharacter(); // Function ShooterGame.ShooterAIController.UnSetPossessedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3b48bf0
	void SetPossessedCharacter(struct APawn* InPawn); // Function ShooterGame.ShooterAIController.SetPossessedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3b471a0
	void SetAimOffset(struct FVector& NewOffset); // Function ShooterGame.ShooterAIController.SetAimOffset // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b46af0
	void OnJumpSignal(bool bShouldJump); // Function ShooterGame.ShooterAIController.OnJumpSignal // (Final|Native|Private) // @ game+0x3b449c0
	void OnCrouchSignal(bool bShouldCrouch); // Function ShooterGame.ShooterAIController.OnCrouchSignal // (Final|Native|Private) // @ game+0x3b44930
	void ClearAimOffset(); // Function ShooterGame.ShooterAIController.ClearAimOffset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b367b0
};

// Class ShooterGame.AresBotController
// Size: 0x568 (Inherited: 0x548)
struct AAresBotController : AShooterAIController {
	bool bAutoSetClass; // 0x548(0x01)
	bool bRandomizeShootingSkillMultiplier; // 0x549(0x01)
	char pad_54A[0x2]; // 0x54a(0x02)
	float MinShootingSkillMultiplier; // 0x54c(0x04)
	float MaxShootingSkillMultiplier; // 0x550(0x04)
	struct FName ShootingSkillMultiplierKeyName; // 0x554(0x0c)
	bool bCanPickupBombEquippable; // 0x560(0x01)
	char pad_561[0x7]; // 0x561(0x07)
};

// Class ShooterGame.AresBotDebugComponent
// Size: 0x128 (Inherited: 0xe8)
struct UAresBotDebugComponent : UActorComponent {
	bool bDrawCombatAimDebug; // 0xe8(0x01)
	bool bDrawRecoilCompensationDebug; // 0xe9(0x01)
	bool bDrawMovementCompensationDebug; // 0xea(0x01)
	bool bDrawMechanicalAimDebug; // 0xeb(0x01)
	bool bUseNewCombatAim; // 0xec(0x01)
	bool bShouldOverrideAimOffset; // 0xed(0x01)
	enum class EAIAimPlayerCharacterOffset OverrideAimOffsetType; // 0xee(0x01)
	bool bShouldOverrideMovementReactionTime; // 0xef(0x01)
	float OverrideMovementReactionTime; // 0xf0(0x04)
	bool bShouldOverrideFlickAngleErrorStd; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	float OverrideFlickAngleErrorStd; // 0xf8(0x04)
	float FlickDistanceErrorStdMultiplier; // 0xfc(0x04)
	bool bShouldOverridePostFlickDelayMean; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	float OverridePostFlickDelayMean; // 0x104(0x04)
	float SmoothAdjustTowardsTargetSpeedMultiplier; // 0x108(0x04)
	struct FVector ForceMoveToLocation; // 0x10c(0x0c)
	bool bShouldForceMove; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float OverrideFiringDelaySecondsAgainstNewTarget; // 0x11c(0x04)
	float OverrideFiringDelaySecondsAfterTargetEntersVision; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)

	struct FVector PopForceMoveToLocation(); // Function ShooterGame.AresBotDebugComponent.PopForceMoveToLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3687320
	int32_t DrawPersistentDebugSphereOnAllClients(int32_t ID, float LifeTime, struct FVector Center, float Radius, int32_t Segments, struct FColor Color, char DepthPriority); // Function ShooterGame.AresBotDebugComponent.DrawPersistentDebugSphereOnAllClients // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3686f10
	int32_t DrawPersistentDebugLineOnAllClients(int32_t ID, float LifeTime, struct FVector LineStart, struct FVector LineEnd, struct FColor Color, char DepthPriority, float Thickness); // Function ShooterGame.AresBotDebugComponent.DrawPersistentDebugLineOnAllClients // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3686ce0
};

// Class ShooterGame.AresBotDebugPlayerComponent
// Size: 0x160 (Inherited: 0xe8)
struct UAresBotDebugPlayerComponent : UActorComponent {
	struct FRateLimiter RateLimiter; // 0xe8(0x30)
	char pad_118[0x28]; // 0x118(0x28)
	struct FMulticastInlineDelegate ClientBotAimControlChangedDelegate; // 0x140(0x10)
	struct FMulticastInlineDelegate ClientBotMovementControlChangedDelegate; // 0x150(0x10)

	void UpdateReplicatedDebugInfo(struct TArray<struct FAresDebugSpherePersistent> DebugSpheres, struct TArray<struct FAresDebugLinePersistent> DebugLines); // Function ShooterGame.AresBotDebugPlayerComponent.UpdateReplicatedDebugInfo // (Final|Net|Native|Event|Private|NetClient) // @ game+0x3688460
	void ServerSetFiringDelaySecondsAgainstNewTarget(float FiringDelaySeconds); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetFiringDelaySecondsAgainstNewTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687f90
	void ServerSetFiringDelaySecondsAfterTargetEntersVision(float FiringDelaySeconds); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetFiringDelaySecondsAfterTargetEntersVision // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687f00
	void ServerSetBotsUseNewCombatAim(bool bUseNewCombatAim); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsUseNewCombatAim // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687e60
	void ServerSetBotsSmoothAdjustTowardsTargetSpeedMultiplier(float Multiplier); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsSmoothAdjustTowardsTargetSpeedMultiplier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687dd0
	void ServerSetBotsShouldDrawRecoilCompensationDebug(bool bShouldDraw); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsShouldDrawRecoilCompensationDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687d30
	void ServerSetBotsShouldDrawMovementCompensationDebug(bool bShouldDraw); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsShouldDrawMovementCompensationDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687c90
	void ServerSetBotsShouldDrawMechanicalAimDebug(bool bShouldDraw); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsShouldDrawMechanicalAimDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687bf0
	void ServerSetBotsShouldDrawCombatAimDebug(bool bShouldDraw); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsShouldDrawCombatAimDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687b50
	void ServerSetBotsOverridePostFlickDelayMean(bool bShouldOverride, float PostFlickDelayMean); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsOverridePostFlickDelayMean // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687a70
	void ServerSetBotsOverrideMovementReactionTime(bool bShouldOverride, float ReactionTime); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsOverrideMovementReactionTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3687990
	void ServerSetBotsOverrideFlickAngleErrorStd(bool bShouldOverride, float FlickAngleErrorStd); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsOverrideFlickAngleErrorStd // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36878b0
	void ServerSetBotsOverrideAimOffset(bool bShouldOverride, enum class EAIAimPlayerCharacterOffset AimOffset); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsOverrideAimOffset // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36877d0
	void ServerSetBotsForceMoveTo(struct FVector Location, struct TArray<struct FString> ArgsArray, struct AShooterPlayerState* PlayerState); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsForceMoveTo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3687660
	void ServerSetBotsFlickDistanceErrorStdMultiplier(float Multiplier); // Function ShooterGame.AresBotDebugPlayerComponent.ServerSetBotsFlickDistanceErrorStdMultiplier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36875d0
	bool GetBotShouldHaveMovementControl(); // Function ShooterGame.AresBotDebugPlayerComponent.GetBotShouldHaveMovementControl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3687160
	bool GetBotShouldHaveAimControl(); // Function ShooterGame.AresBotDebugPlayerComponent.GetBotShouldHaveAimControl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3687130
};

// Class ShooterGame.AresButtonBorderComponent
// Size: 0x300 (Inherited: 0x2f0)
struct UAresButtonBorderComponent : UCommonBorder {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct UAresCommonButton* OwningButton; // 0x2f8(0x08)
};

// Class ShooterGame.AresButtonBorderStyle
// Size: 0x420 (Inherited: 0xc0)
struct UAresButtonBorderStyle : UCommonBorderStyle {
	struct FSlateBrush BorderStyles[0x6]; // 0xc0(0x360)

	void GetBorderBrushForButtonVisibilityState(struct FSlateBrush& Brush, enum class EAresCommonButtonVisibleState State); // Function ShooterGame.AresButtonBorderStyle.GetBorderBrushForButtonVisibilityState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x368ff60
};

// Class ShooterGame.AresButtonImageBrushContainer
// Size: 0x390 (Inherited: 0x30)
struct UAresButtonImageBrushContainer : UObject {
	struct FSlateBrush ImageBrushes[0x6]; // 0x30(0x360)

	void GetImageBrushForButtonVisibilityState(struct FSlateBrush& Brush, enum class EAresCommonButtonVisibleState State); // Function ShooterGame.AresButtonImageBrushContainer.GetImageBrushForButtonVisibilityState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3690410
};

// Class ShooterGame.AresButtonImageComponent
// Size: 0x280 (Inherited: 0x268)
struct UAresButtonImageComponent : UImage {
	char pad_268[0x8]; // 0x268(0x08)
	struct UAresButtonImageBrushContainer* BrushContainer; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)

	void SetBrushContainer(struct UAresButtonImageBrushContainer* InBrushContainer); // Function ShooterGame.AresButtonImageComponent.SetBrushContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x3690e30
};

// Class ShooterGame.AresCommonRichText
// Size: 0x730 (Inherited: 0x730)
struct UAresCommonRichText : UCommonRichTextBlock {
};

// Class ShooterGame.AresButtonRichTextComponent
// Size: 0x758 (Inherited: 0x730)
struct UAresButtonRichTextComponent : UAresCommonRichText {
	char pad_730[0x10]; // 0x730(0x10)
	struct UAresButtonTextStyleContainer* ButtonTextStyleOverride; // 0x740(0x08)
	struct UAresCommonButton* OwningButton; // 0x748(0x08)
	enum class EButtonTextWidgetComponentType TextComponentType; // 0x750(0x01)
	char pad_751[0x7]; // 0x751(0x07)
};

// Class ShooterGame.AresCommonText
// Size: 0x338 (Inherited: 0x338)
struct UAresCommonText : UCommonTextBlock {
};

// Class ShooterGame.AresButtonTextComponent
// Size: 0x360 (Inherited: 0x338)
struct UAresButtonTextComponent : UAresCommonText {
	char pad_338[0x10]; // 0x338(0x10)
	struct UAresButtonTextStyleContainer* ButtonTextStyleOverride; // 0x348(0x08)
	struct UAresCommonButton* OwningButton; // 0x350(0x08)
	enum class EButtonTextWidgetComponentType TextComponentType; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
};

// Class ShooterGame.AresCalloutRegion
// Size: 0x418 (Inherited: 0x3d8)
struct AAresCalloutRegion : AActor {
	struct FText RegionName; // 0x3d8(0x18)
	enum class ECalloutSuperRegion SuperRegion; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	int32_t Priority; // 0x3f4(0x04)
	struct TArray<struct UAresCalloutSubregionComponent*> SubRegions; // 0x3f8(0x10)
	struct UTextRenderComponent* EditorNameText; // 0x408(0x08)
	char pad_410[0x8]; // 0x410(0x08)

	void OnCalloutRegionsFeatureToggled(enum class EGameFeatureToggleName Toggle, bool bEnabled); // Function ShooterGame.AresCalloutRegion.OnCalloutRegionsFeatureToggled // (Final|Native|Public) // @ game+0x3690810
	bool ContainsActor(struct AActor* Actor); // Function ShooterGame.AresCalloutRegion.ContainsActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x368fd70
};

// Class ShooterGame.AresCalloutSubregionComponent
// Size: 0x610 (Inherited: 0x610)
struct UAresCalloutSubregionComponent : UStaticMeshComponent {

	struct AAresCalloutRegion* GetParentRegion(); // Function ShooterGame.AresCalloutSubregionComponent.GetParentRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36905a0
};

// Class ShooterGame.CalloutRegionTrackingComponent
// Size: 0x110 (Inherited: 0xe8)
struct UCalloutRegionTrackingComponent : UActorComponent {
	struct FMulticastInlineDelegate OnCalloutRegionChanged; // 0xe8(0x10)
	struct TArray<struct AAresCalloutRegion*> OverlappingRegions; // 0xf8(0x10)
	struct AAresCalloutRegion* CurrentRegion; // 0x108(0x08)

	void OnRep_CurrentRegion(struct AAresCalloutRegion* Region); // Function ShooterGame.CalloutRegionTrackingComponent.OnRep_CurrentRegion // (Final|Native|Protected) // @ game+0x3690960
	struct FText GetCurrentCalloutRegionName(); // Function ShooterGame.CalloutRegionTrackingComponent.GetCurrentCalloutRegionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36902d0
	struct AAresCalloutRegion* GetCurrentCalloutRegion(); // Function ShooterGame.CalloutRegionTrackingComponent.GetCurrentCalloutRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36902a0
	struct UCalloutRegionTrackingComponent* GetCalloutRegionTrackingComponent(struct AActor* Actor); // Function ShooterGame.CalloutRegionTrackingComponent.GetCalloutRegionTrackingComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36900f0
};

// Class ShooterGame.AresCalloutVolume
// Size: 0x418 (Inherited: 0x3d8)
struct AAresCalloutVolume : AActor {
	struct UStaticMeshComponent* VolumeMesh; // 0x3d8(0x08)
	struct UBoxComponent* OverlapBox; // 0x3e0(0x08)
	struct FString CalloutRegion; // 0x3e8(0x10)
	struct FString CalloutSubRegion; // 0x3f8(0x10)
	char pad_408[0x10]; // 0x408(0x10)

	void Tick(float DeltaSeconds); // Function ShooterGame.AresCalloutVolume.Tick // (Native|Public) // @ game+0x3690ff0
	struct FString GetSubRegion(); // Function ShooterGame.AresCalloutVolume.GetSubRegion // (Final|Native|Public|Const) // @ game+0x3690610
	struct FString GetRegion(); // Function ShooterGame.AresCalloutVolume.GetRegion // (Final|Native|Public|Const) // @ game+0x36905d0
	struct TArray<struct AAresCalloutVolume*> FindOverlappingVolumes(struct AActor* Actor, bool bStopSearchOnFirstHit); // Function ShooterGame.AresCalloutVolume.FindOverlappingVolumes // (Final|Native|Static|Public) // @ game+0x368fe10
};

// Class ShooterGame.AresCeremony
// Size: 0x3d8 (Inherited: 0x3d8)
struct AAresCeremony : AInfo {

	bool ShouldDisplayCeremony(struct FAresCeremonyDecisionContext& DecisionContext); // Function ShooterGame.AresCeremony.ShouldDisplayCeremony // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3690ec0
	void AuthCheatSetCeremonyDisplayed(bool bShouldDisplay); // Function ShooterGame.AresCeremony.AuthCheatSetCeremonyDisplayed // (Native|Event|Public|BlueprintEvent) // @ game+0x2979380
};

// Class ShooterGame.AresCeremonyComponent
// Size: 0x138 (Inherited: 0xe8)
struct UAresCeremonyComponent : UActorComponent {
	struct TArray<struct AAresCeremony*> RegisteredCeremonies; // 0xe8(0x10)
	struct TArray<struct AAresCeremony*> PrioritySortedCeremonies; // 0xf8(0x10)
	struct TArray<struct FAresCeremonyTriggerEvent> CeremonyTriggerEvents; // 0x108(0x10)
	char pad_118[0x20]; // 0x118(0x20)

	void ResetRoundTrackers(); // Function ShooterGame.AresCeremonyComponent.ResetRoundTrackers // (Final|Native|Private) // @ game+0x3690e10
	void RecordRespawn(struct APawn* RespawnedPawn); // Function ShooterGame.AresCeremonyComponent.RecordRespawn // (Final|Native|Public) // @ game+0x3634e00
	void RecordKill(struct AOwnerExclusivePlayerInfo* KillerPlayerInfo, struct AOwnerExclusivePlayerInfo* VictimPlayerInfo, struct APawn* KilledPawn, struct UDamageResponse* Response, struct TArray<struct FAresAssist>& AssistList, struct UDamageType* DamageType); // Function ShooterGame.AresCeremonyComponent.RecordKill // (Final|Native|Public|HasOutParms) // @ game+0x3690c10
	void OnRoundWin(struct UBaseTeamComponent* WinningTeam, enum class EAresRoundOutcome RoundResult); // Function ShooterGame.AresCeremonyComponent.OnRoundWin // (Final|Native|Public) // @ game+0x3690a80
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.AresCeremonyComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x36909f0
	void OnPhaseTransition(enum class EAresGamePhase NewGamePhase); // Function ShooterGame.AresCeremonyComponent.OnPhaseTransition // (Final|Native|Public) // @ game+0x36908e0
	void GetCeremonyToDisplay(struct AShooterGameState* ShooterGameState); // Function ShooterGame.AresCeremonyComponent.GetCeremonyToDisplay // (Final|Native|Private) // @ game+0x3690180
	struct TArray<struct FAresCeremonyTriggerEvent> GetAllCeremonyTriggerEventsForCurrentRound(); // Function ShooterGame.AresCeremonyComponent.GetAllCeremonyTriggerEventsForCurrentRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x368ff20
	void AuthRegisterCeremonies(); // Function ShooterGame.AresCeremonyComponent.AuthRegisterCeremonies // (Final|Native|Public) // @ game+0x2024060
	void AuthClearCeremonyTriggerEvents(); // Function ShooterGame.AresCeremonyComponent.AuthClearCeremonyTriggerEvents // (Final|Native|Public) // @ game+0x2024060
	void AuthAddCeremonyTriggerEvent(struct FAresCeremonyTriggerEvent& CeremonyKillEvent); // Function ShooterGame.AresCeremonyComponent.AuthAddCeremonyTriggerEvent // (Final|Native|Public|HasOutParms) // @ game+0x368fcd0
};

// Class ShooterGame.CharacterAbilityUIData
// Size: 0xd8 (Inherited: 0x90)
struct UCharacterAbilityUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	struct TSoftClassPtr<UObject> StreamedVideo; // 0xa8(0x30)
};

// Class ShooterGame.CharacterRoleUIData
// Size: 0xa8 (Inherited: 0x90)
struct UCharacterRoleUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.CharacterRoleDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UCharacterRoleDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.CharacterUIData
// Size: 0x198 (Inherited: 0x90)
struct UCharacterUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	struct UTexture* DisplayIconSmall; // 0xa8(0x08)
	struct UTexture* KillfeedPortrait; // 0xb0(0x08)
	struct UTexture* TopHUDPortrait; // 0xb8(0x08)
	struct FWidgetTransform PortraitRenderTransform; // 0xc0(0x1c)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct TMap<enum class ECharacterAbilitySlot, struct UCharacterAbilityUIData*> Abilities; // 0xe0(0x50)
	struct TArray<struct FText> CharacterTags; // 0x130(0x10)
	struct FName WwiseStateName; // 0x140(0x0c)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct UAkAudioEvent* PickMeVOEvent; // 0x150(0x08)
	struct FLinearColor BackgroundGradientColor1; // 0x158(0x10)
	struct FLinearColor BackgroundGradientColor2; // 0x168(0x10)
	struct FLinearColor BackgroundGradientColor3; // 0x178(0x10)
	struct FLinearColor BackgroundGradientColor4; // 0x188(0x10)
};

// Class ShooterGame.RecruitmentData
// Size: 0x68 (Inherited: 0x30)
struct URecruitmentData : UObject {
	struct FGuid CounterID; // 0x30(0x10)
	struct FGuid MilestoneID; // 0x40(0x10)
	int32_t MilestoneThreshold; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FDateTime StartDate; // 0x58(0x08)
	struct FDateTime EndDate; // 0x60(0x08)
};

// Class ShooterGame.CharacterDataAsset
// Size: 0x1c8 (Inherited: 0x50)
struct UCharacterDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Character; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
	struct TSoftClassPtr<UObject> Role; // 0xb0(0x30)
	struct TSoftObjectPtr<UTexture2D> FullPortrait; // 0xe0(0x30)
	struct TSoftObjectPtr<UTexture2D> CharacterBackground; // 0x110(0x30)
	bool FullPortraitRightFacing; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct TSoftClassPtr<UObject> CharacterSelectFXC; // 0x148(0x30)
	struct FName DeveloperName; // 0x178(0x0c)
	struct FName ShippingName; // 0x184(0x0c)
	bool bIsPlayableCharacter; // 0x190(0x01)
	bool bAvailableForTest; // 0x191(0x01)
	char pad_192[0x6]; // 0x192(0x06)
	struct TSoftClassPtr<UObject> RecruitmentData; // 0x198(0x30)
};

// Class ShooterGame.CharacterDataAssetOverride
// Size: 0xe0 (Inherited: 0x50)
struct UCharacterDataAssetOverride : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> CharacterDataAsset; // 0x50(0x30)
	struct TSoftClassPtr<UObject> CharacterOverride; // 0x80(0x30)
	struct TSoftClassPtr<UObject> UIDataOverride; // 0xb0(0x30)
};

// Class ShooterGame.AresTouchPad
// Size: 0x9f0 (Inherited: 0x960)
struct UAresTouchPad : UAresTouchWidget {
	struct FMulticastInlineDelegate OnPadPressed; // 0x960(0x10)
	struct FMulticastInlineDelegate OnPadReleased; // 0x970(0x10)
	struct FMulticastInlineDelegate OnPadMoved; // 0x980(0x10)
	struct FMulticastInlineDelegate OnPadIndexPressed; // 0x990(0x10)
	struct FMulticastInlineDelegate OnPadIndexReleased; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnPadIndexMoved; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnPadXLocationChanged; // 0x9c0(0x10)
	struct FMulticastInlineDelegate OnPadYLocationChanged; // 0x9d0(0x10)
	struct TWeakObjectPtr<struct UAresTouchTrackPadComponent> TouchPadComponent; // 0x9e0(0x08)
	int32_t MaxTouchesAllowed; // 0x9e8(0x04)
	char pad_9EC[0x4]; // 0x9ec(0x04)

	void SetAxisEnabledY(enum class ETouchIndex InTouchIndex, bool InEnabled); // Function ShooterGame.AresTouchPad.SetAxisEnabledY // (Final|Native|Public|BlueprintCallable) // @ game+0x379c540
	void SetAxisEnabledX(enum class ETouchIndex InTouchIndex, bool InEnabled); // Function ShooterGame.AresTouchPad.SetAxisEnabledX // (Final|Native|Public|BlueprintCallable) // @ game+0x379c470
	void OnTouchPadYLocationChanged(float YDelta, float UnmodifiedYDelta); // Function ShooterGame.AresTouchPad.OnTouchPadYLocationChanged // (Native|Protected) // @ game+0x379c300
	void OnTouchPadXLocationChanged(float XDelta, float UnmodifiedXDelta); // Function ShooterGame.AresTouchPad.OnTouchPadXLocationChanged // (Native|Protected) // @ game+0x379c220
	void OnTouchPadReleased(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchPad.OnTouchPadReleased // (Native|Protected|HasDefaults) // @ game+0x3794800
	void OnTouchPadPressed(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchPad.OnTouchPadPressed // (Native|Protected|HasDefaults) // @ game+0x3794180
	void OnTouchPadMoved(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchPad.OnTouchPadMoved // (Native|Protected|HasDefaults) // @ game+0x3794730
};

// Class ShooterGame.AresCharacterAimingTouchPad
// Size: 0xa08 (Inherited: 0x9f0)
struct UAresCharacterAimingTouchPad : UAresTouchPad {
	char pad_9F0[0x8]; // 0x9f0(0x08)
	struct TArray<struct UAresHudElement*> DebugHudElementClasses; // 0x9f8(0x10)
};

// Class ShooterGame.AresCharacterHUDMobile
// Size: 0x370 (Inherited: 0x2c8)
struct UAresCharacterHUDMobile : UUserWidget {
	struct TMap<struct FName, struct UWidgetAnimation*> AnimationMap; // 0x2c8(0x50)
	struct TMap<struct FName, struct UWidget*> SlotNameToWidgetInstance; // 0x318(0x50)
	struct UAresTouchScreen* ParentTouchScreen; // 0x368(0x08)

	void PrePresetChange(); // Function ShooterGame.AresCharacterHUDMobile.PrePresetChange // (Final|Native|Protected|BlueprintCallable) // @ game+0x2024060
	void PostPresetChange(); // Function ShooterGame.AresCharacterHUDMobile.PostPresetChange // (Final|Native|Protected|BlueprintCallable) // @ game+0x3690bf0
	void PlayAnimationByName(struct FName& AnimationName); // Function ShooterGame.AresCharacterHUDMobile.PlayAnimationByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3690b50
	void LoadWidgetLayoutFromSettings(); // Function ShooterGame.AresCharacterHUDMobile.LoadWidgetLayoutFromSettings // (Final|Native|Protected|BlueprintCallable) // @ game+0x36907f0
	bool IsWidgetInCharacterHUD(struct UUserWidget* Widget); // Function ShooterGame.AresCharacterHUDMobile.IsWidgetInCharacterHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3690750
	struct UWidget* GetWidgetBySlotName(struct FName SlotName, struct UWidget* OptionalWidgetClass); // Function ShooterGame.AresCharacterHUDMobile.GetWidgetBySlotName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3690650
	struct TArray<struct UDataTable*> GetDataTablesFromHUDDefinition(); // Function ShooterGame.AresCharacterHUDMobile.GetDataTablesFromHUDDefinition // (Native|Event|Protected|BlueprintEvent) // @ game+0x3690380
	struct UAresCharacterHUDMobile* GetCharacterHUDMobile(struct UObject* WorldContextObject); // Function ShooterGame.AresCharacterHUDMobile.GetCharacterHUDMobile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3690210
};

// Class ShooterGame.AresCheatAutoCompletePopulator
// Size: 0x50 (Inherited: 0x30)
struct UAresCheatAutoCompletePopulator : UObject {
	struct FSoftObjectPath DevOnlyGunNamesToEquippableDataAssetsDataTable; // 0x30(0x20)

	void GenerateAutoComplete(struct TArray<struct FAutoCompleteCommand>& AutoCompleteList, struct UContentIndex* ContentIndex, struct UConsole* ViewportConsole); // Function ShooterGame.AresCheatAutoCompletePopulator.GenerateAutoComplete // (Final|Native|Public|HasOutParms) // @ game+0x369e890
};

// Class ShooterGame.BasePlayerController
// Size: 0x750 (Inherited: 0x750)
struct ABasePlayerController : APlayerController {

	float GetTimeSinceLastInput(); // Function ShooterGame.BasePlayerController.GetTimeSinceLastInput // (Final|Native|Public|BlueprintCallable) // @ game+0x37dea50
	void ApplySettingsCustomizations(); // Function ShooterGame.BasePlayerController.ApplySettingsCustomizations // (Final|Native|Public|BlueprintCallable) // @ game+0x37de180
};

// Class ShooterGame.AresPlayerController
// Size: 0xa00 (Inherited: 0x750)
struct AAresPlayerController : ABasePlayerController {
	char pad_750[0x10]; // 0x750(0x10)
	struct FMulticastInlineDelegate OnScreenTransitionUpdated; // 0x760(0x10)
	struct FMulticastInlineDelegate OnScoreboardVisibleUpdated; // 0x770(0x10)
	struct FMulticastInlineDelegate OnShopOpenUpdated; // 0x780(0x10)
	struct FMulticastInlineDelegate OnMegamapOpenUpdated; // 0x790(0x10)
	char pad_7A0[0x8]; // 0x7a0(0x08)
	struct FMulticastInlineDelegate OnAresPlayerStateChanged; // 0x7a8(0x10)
	char pad_7B8[0x80]; // 0x7b8(0x80)
	struct FMulticastInlineDelegate OnPlayerViewTargetModeChanged; // 0x838(0x10)
	struct FMulticastInlineDelegate OnPlayerViewTargetChanged; // 0x848(0x10)
	enum class EAnalogPlayerState PreviousAnalogPlayerState; // 0x858(0x01)
	char pad_859[0x7]; // 0x859(0x07)
	struct FMulticastInlineDelegate OnInputModeChanged; // 0x860(0x10)
	char pad_870[0x18]; // 0x870(0x18)
	struct UAresUIManager* UIManager; // 0x888(0x08)
	struct UAresUIDirector* UIDirector; // 0x890(0x08)
	bool bCreateUIInstancesFromGlobals; // 0x898(0x01)
	char pad_899[0x7]; // 0x899(0x07)
	struct UShooterUICoordinator* UICoordinator; // 0x8a0(0x08)
	struct UAresMinimapManager* MinimapManager; // 0x8a8(0x08)
	char pad_8B0[0x8]; // 0x8b0(0x08)
	struct AShooterCharacter* CachedShooterCharacter; // 0x8b8(0x08)
	struct AShooterCamera* CachedShooterCamera; // 0x8c0(0x08)
	struct UScreenTransitionComponent* ScreenTransitionComponent; // 0x8c8(0x08)
	struct UViewTargetComponent* ViewTargetComponent; // 0x8d0(0x08)
	struct UGamepadInputComponent* GamepadInputComponent; // 0x8d8(0x08)
	struct USpectateInOrderActionComponent* SpectateInOrderActionComponent; // 0x8e0(0x08)
	struct USpectateSpecificActionComponent* SpectateSpecificActionComponent; // 0x8e8(0x08)
	struct UMessageListenerComponent* MessageListenerComponent; // 0x8f0(0x08)
	struct UShooterCharacterMinimapComponent* MapSpectateKeybindComponentClass; // 0x8f8(0x08)
	struct FRateLimiter SpectateRequestRateLimiter; // 0x900(0x30)
	char pad_930[0x10]; // 0x930(0x10)
	struct UAresAnalogHandlerComponent* AnalogHandlerComponent; // 0x940(0x08)
	char pad_948[0x18]; // 0x948(0x18)
	struct FString MatchID; // 0x960(0x10)
	char pad_970[0x8]; // 0x970(0x08)
	struct UAimToolingComponent* AimToolingComponent; // 0x978(0x08)
	struct UMovementToolingComponent* MovementToolingComponent; // 0x980(0x08)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0x988(0x08)
	char pad_990[0x70]; // 0x990(0x70)

	void UpdateMapSpectateKeybindVisibility(); // Function ShooterGame.AresPlayerController.UpdateMapSpectateKeybindVisibility // (Final|Native|Public) // @ game+0x3732130
	void UnlockFOV(); // Function ShooterGame.AresPlayerController.UnlockFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x3732110
	bool TrySetAresInputModeGameOnly(); // Function ShooterGame.AresPlayerController.TrySetAresInputModeGameOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x37320e0
	void TouchSnapReleaseHandler(struct FVector2D WidgetLocation); // Function ShooterGame.AresPlayerController.TouchSnapReleaseHandler // (Final|Native|Public|HasDefaults) // @ game+0x3732060
	void TouchSnapFireHandler(struct AShooterCharacter* InCharacter, struct AAresEquippable* Equippable, struct AProjectile* ProjectileClass, int32_t NumProjectiles); // Function ShooterGame.AresPlayerController.TouchSnapFireHandler // (Final|Native|Public|BlueprintCallable) // @ game+0x3731f00
	void ToggleShop(); // Function ShooterGame.AresPlayerController.ToggleShop // (Final|Native|Public|BlueprintCallable) // @ game+0x3731ee0
	void ToggleConsoleCheatsMenu(); // Function ShooterGame.AresPlayerController.ToggleConsoleCheatsMenu // (Final|Native|Private|BlueprintCallable) // @ game+0x2024060
	void StartScreenTransition(struct FName TransitionReason, float MaxDuration); // Function ShooterGame.AresPlayerController.StartScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3731df0
	void SimulateInputKey(struct FKey Key, bool bPressed); // Function ShooterGame.AresPlayerController.SimulateInputKey // (Final|Native|Public|BlueprintCallable) // @ game+0x3731ca0
	bool ShowCorpsesForPlayer(); // Function ShooterGame.AresPlayerController.ShowCorpsesForPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3731c70
	bool ShowColoredMuzzleFlashesForPlayer(); // Function ShooterGame.AresPlayerController.ShowColoredMuzzleFlashesForPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3731c40
	void ShowCheatMenuCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.ShowCheatMenuCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x3731b30
	bool ShowBloodForPlayer(); // Function ShooterGame.AresPlayerController.ShowBloodForPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3731b00
	void SetTickViewTargetModeEnabled(bool bEnabled); // Function ShooterGame.AresPlayerController.SetTickViewTargetModeEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x3731a70
	void SetOnDemandAimAccelerationSensitivityModifiers(struct FAimAccelerationSensitivityModifiers AimAccelerationSensitivityModifiers); // Function ShooterGame.AresPlayerController.SetOnDemandAimAccelerationSensitivityModifiers // (Final|Native|Public|BlueprintCallable) // @ game+0x37319e0
	void SetMinimapVisibility(enum class EMinimapVisibleReason MinimapVisibleReason, bool Visibility); // Function ShooterGame.AresPlayerController.SetMinimapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3731910
	void SetMapSpectateKeybindsVisible(bool IsVisible); // Function ShooterGame.AresPlayerController.SetMapSpectateKeybindsVisible // (BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x3731870
	void SetMapOpen(bool bOpen); // Function ShooterGame.AresPlayerController.SetMapOpen // (Final|Native|Public|BlueprintCallable) // @ game+0x37317e0
	void SetLockInputMode(bool bIsLocked); // Function ShooterGame.AresPlayerController.SetLockInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3731750
	void SetInputSimulated(bool bUsingSimulatedInput); // Function ShooterGame.AresPlayerController.SetInputSimulated // (Final|Native|Public|BlueprintCallable) // @ game+0x37316c0
	void SetFOV(float F); // Function ShooterGame.AresPlayerController.SetFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x3731640
	void SetAresInputMode(bool bIsUIOnly); // Function ShooterGame.AresPlayerController.SetAresInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x37315b0
	void ServerTryActivateModifier(struct UGameModifierComponent* Modifier, struct FString Argument); // Function ShooterGame.AresPlayerController.ServerTryActivateModifier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3731420
	void ServerStopRecordingReplay(); // Function ShooterGame.AresPlayerController.ServerStopRecordingReplay // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x37313f0
	void ServerStartRecordingReplay(struct FString RecordingName); // Function ShooterGame.AresPlayerController.ServerStartRecordingReplay // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3731340
	void ServerSlackMessage(struct FString Channel, struct FString Text, struct FString Icon); // Function ShooterGame.AresPlayerController.ServerSlackMessage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x37311d0
	void ServerSetPlayerDisassociating(bool NewDisassociating); // Function ShooterGame.AresPlayerController.ServerSetPlayerDisassociating // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x3731130
	void ServerSetBotShootingSkillMultiplier(float Multiplier); // Function ShooterGame.AresPlayerController.ServerSetBotShootingSkillMultiplier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x37310a0
	void ServerSay(struct FString Msg, int32_t ChatMode); // Function ShooterGame.AresPlayerController.ServerSay // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3730f00
	void ServerSaveRiotProfiling(); // Function ShooterGame.AresPlayerController.ServerSaveRiotProfiling // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3730ed0
	void ServerOnToggleDetailedProfiling(bool bEnabled); // Function ShooterGame.AresPlayerController.ServerOnToggleDetailedProfiling // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3730d90
	void ServerNotifyOnClientToggleDetailedProfiling(bool bEnabled); // Function ShooterGame.AresPlayerController.ServerNotifyOnClientToggleDetailedProfiling // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3730c50
	void ServerNotifyFinishedLoadingDropInPlayer(struct FUniqueNetIdRepl UniqueId); // Function ShooterGame.AresPlayerController.ServerNotifyFinishedLoadingDropInPlayer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x3730b40
	void ServerConsoleCommand(struct FString Text); // Function ShooterGame.AresPlayerController.ServerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3730a90
	void ServerCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.ServerCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x3730980
	void ServerBugItWorker(struct FVector TheLocation, struct FRotator TheRotation); // Function ShooterGame.AresPlayerController.ServerBugItWorker // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3730890
	void ServerBroadcastConsoleCommand(struct FString Text); // Function ShooterGame.AresPlayerController.ServerBroadcastConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x37307e0
	void ServerAddRiotProfileInstantMarker(); // Function ShooterGame.AresPlayerController.ServerAddRiotProfileInstantMarker // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x37307b0
	void ServerAcknowledgeSetControlRotation(); // Function ShooterGame.AresPlayerController.ServerAcknowledgeSetControlRotation // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3730780
	void ServerAcknowledgeLoadClass(struct FSoftObjectPath Class); // Function ShooterGame.AresPlayerController.ServerAcknowledgeLoadClass // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3730670
	bool ScreenTransitionActive(); // Function ShooterGame.AresPlayerController.ScreenTransitionActive // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3730640
	void PCSendServerSerializedData(struct TArray<char> Bytes); // Function ShooterGame.AresPlayerController.PCSendServerSerializedData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3730560
	void OnViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.AresPlayerController.OnViewTargetModeChanged // (Final|Native|Public|HasOutParms) // @ game+0x37304b0
	void OnViewTargetActorReplicated(struct FViewTargetInfo& Info); // Function ShooterGame.AresPlayerController.OnViewTargetActorReplicated // (Final|Native|Public|HasOutParms) // @ game+0x3730420
	void OnToggleInformationalHUD(); // Function ShooterGame.AresPlayerController.OnToggleInformationalHUD // (Final|Native|Public) // @ game+0x3730400
	void OnToggleDetailedProfiling(bool bEnabled, struct AActor* Initiator); // Function ShooterGame.AresPlayerController.OnToggleDetailedProfiling // (Final|Native|Public) // @ game+0x3730330
	void OnShowDeveloperMenu(); // Function ShooterGame.AresPlayerController.OnShowDeveloperMenu // (Final|Native|Public) // @ game+0x3730310
	void OnShopOpenStateChanged(bool bIsVisible); // Function ShooterGame.AresPlayerController.OnShopOpenStateChanged // (Final|Native|Public) // @ game+0x3730280
	void OnNoPreloadsInProgress(); // Function ShooterGame.AresPlayerController.OnNoPreloadsInProgress // (Final|Native|Private) // @ game+0x3730260
	void OnMinimapKeybindSettingsChange(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.AresPlayerController.OnMinimapKeybindSettingsChange // (Final|Native|Public) // @ game+0x3730140
	void OnMegamapOpenStateChanged(bool bIsVisible); // Function ShooterGame.AresPlayerController.OnMegamapOpenStateChanged // (Final|Native|Public) // @ game+0x37300b0
	void OnMapToggle(bool bOpen); // Function ShooterGame.AresPlayerController.OnMapToggle // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnGoreSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresPlayerController.OnGoreSettingChanged // (Final|Native|Private) // @ game+0x372ff90
	void OnEventScreenTransitionUpdated(bool IsAnyTransitionActive); // Function ShooterGame.AresPlayerController.OnEventScreenTransitionUpdated // (Final|Native|Public) // @ game+0x372ff00
	float OnEventGamepadTurnAtRate(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadTurnAtRate // (Final|Native|Public) // @ game+0x372fe60
	float OnEventGamepadMoveRight(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadMoveRight // (Final|Native|Public) // @ game+0x372fdc0
	float OnEventGamepadMoveForward(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadMoveForward // (Final|Native|Public) // @ game+0x372fd20
	float OnEventGamepadLookUpAtRate(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadLookUpAtRate // (Final|Native|Public) // @ game+0x372fc80
	void OnColoredMuzzleFlashesSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresPlayerController.OnColoredMuzzleFlashesSettingChanged // (Final|Native|Private) // @ game+0x372fb60
	void OnBotDesiredCharactersReady(); // Function ShooterGame.AresPlayerController.OnBotDesiredCharactersReady // (Final|Native|Private) // @ game+0x372fb40
	void OnAlternateMovementUp(); // Function ShooterGame.AresPlayerController.OnAlternateMovementUp // (Final|Native|Public) // @ game+0x372fb20
	void OnAlternateMovementDown(); // Function ShooterGame.AresPlayerController.OnAlternateMovementDown // (Final|Native|Public) // @ game+0x372fb00
	bool K2_UseShortConnectTimeout(); // Function ShooterGame.AresPlayerController.K2_UseShortConnectTimeout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372fab0
	bool IsViewingPlayerState(struct AShooterPlayerState* InPlayerState); // Function ShooterGame.AresPlayerController.IsViewingPlayerState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x372fa10
	bool IsSpectatingShooterCharacter(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.AresPlayerController.IsSpectatingShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f970
	bool IsSoftADSing(); // Function ShooterGame.AresPlayerController.IsSoftADSing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	bool IsShowHUD(); // Function ShooterGame.AresPlayerController.IsShowHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f940
	bool IsShopOpen(); // Function ShooterGame.AresPlayerController.IsShopOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f910
	bool IsMinimapVisible(); // Function ShooterGame.AresPlayerController.IsMinimapVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f8b0
	bool IsMapOpen(); // Function ShooterGame.AresPlayerController.IsMapOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f880
	bool InSpectatorMode(); // Function ShooterGame.AresPlayerController.InSpectatorMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f770
	void InsertLogMarker(); // Function ShooterGame.AresPlayerController.InsertLogMarker // (Final|Native|Public) // @ game+0x372f830
	void InsertClientHitchFromKeybind(); // Function ShooterGame.AresPlayerController.InsertClientHitchFromKeybind // (Final|Native|Protected) // @ game+0x2024060
	void InitMapSpectateKeybindComponentFor(struct AShooterCharacter* InCharacter); // Function ShooterGame.AresPlayerController.InitMapSpectateKeybindComponentFor // (Final|Native|Protected) // @ game+0x372f7a0
	bool HasValidUIGlobals(); // Function ShooterGame.AresPlayerController.HasValidUIGlobals // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f740
	void HandleThreadedChatManagerSentInGameMessage(struct FString NewMessage, enum class EChatMode ChatMode); // Function ShooterGame.AresPlayerController.HandleThreadedChatManagerSentInGameMessage // (Native|Protected) // @ game+0x372f610
	void HandleDisassociateComplete(); // Function ShooterGame.AresPlayerController.HandleDisassociateComplete // (Final|Native|Private) // @ game+0x372f5f0
	struct UAresUIManager* GetUIManager(); // Function ShooterGame.AresPlayerController.GetUIManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f5c0
	struct UAresUIDirector* GetUIDirector(); // Function ShooterGame.AresPlayerController.GetUIDirector // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7cf0
	struct AShooterCharacter* GetSpectatingShooterCharacter(); // Function ShooterGame.AresPlayerController.GetSpectatingShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f590
	struct AShooterCharacter* GetSpectatedSpawnedCharacter(); // Function ShooterGame.AresPlayerController.GetSpectatedSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f560
	float GetSmokeOverlay(); // Function ShooterGame.AresPlayerController.GetSmokeOverlay // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x372f520
	struct FText GetShortcutActionDisplayNameToSpectate(struct AShooterCharacter* ViewedCharacter); // Function ShooterGame.AresPlayerController.GetShortcutActionDisplayNameToSpectate // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f410
	struct AShooterCharacter* GetShooterCharacter(); // Function ShooterGame.AresPlayerController.GetShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f3e0
	struct AShooterCamera* GetShooterCamera(); // Function ShooterGame.AresPlayerController.GetShooterCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f3b0
	struct FVector GetPlayerViewVector(); // Function ShooterGame.AresPlayerController.GetPlayerViewVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f2f0
	enum class EAresPlayerViewTargetMode GetPlayerViewTargetMode(); // Function ShooterGame.AresPlayerController.GetPlayerViewTargetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f2c0
	struct FRotator GetPlayerViewRotation(); // Function ShooterGame.AresPlayerController.GetPlayerViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f280
	void GetPlayerViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation); // Function ShooterGame.AresPlayerController.GetPlayerViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f190
	struct FVector GetPlayerViewLocation(); // Function ShooterGame.AresPlayerController.GetPlayerViewLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f150
	struct APlayerCameraManager* GetPlayerCameraManager(); // Function ShooterGame.AresPlayerController.GetPlayerCameraManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f120
	struct UAresMinimapManager* GetMinimapManager(); // Function ShooterGame.AresPlayerController.GetMinimapManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a78d0
	struct TScriptInterface<IInputMethodInterface> GetInputMethodInterface(); // Function ShooterGame.AresPlayerController.GetInputMethodInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372f050
	struct AShooterCharacter* GetFirstPersonCharacter(); // Function ShooterGame.AresPlayerController.GetFirstPersonCharacter // (Final|Native|Public) // @ game+0x372f020
	struct AAresPlayerStateBase* GetAresPlayerState(); // Function ShooterGame.AresPlayerController.GetAresPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372ede0
	void GamepadTurnAtRate(float Rate); // Function ShooterGame.AresPlayerController.GamepadTurnAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x372ed00
	void GamepadMoveRight(float Rate); // Function ShooterGame.AresPlayerController.GamepadMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x372ec80
	void GamepadMoveForward(float Rate); // Function ShooterGame.AresPlayerController.GamepadMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x372ec00
	void GamepadLookUpAtRate(float Rate); // Function ShooterGame.AresPlayerController.GamepadLookUpAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x372eb80
	void EnablePacketLossKeybindsFunc(struct UWorld* World); // Function ShooterGame.AresPlayerController.EnablePacketLossKeybindsFunc // (Final|Native|Static|Protected) // @ game+0x372eb00
	void EnableClientHitchKeybindFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.EnableClientHitchKeybindFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DisconnectPlayerDueToSecurityViolation(); // Function ShooterGame.AresPlayerController.DisconnectPlayerDueToSecurityViolation // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x372e9c0
	void DisconnectFromServer(); // Function ShooterGame.AresPlayerController.DisconnectFromServer // (Final|Native|Public) // @ game+0x372e9a0
	void DisassociateAndDisconnectFromServer(); // Function ShooterGame.AresPlayerController.DisassociateAndDisconnectFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x372e980
	void ConsoleBroadcastCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.ConsoleBroadcastCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e870
	void CompleteScreenTransition(struct FName TransitionReason); // Function ShooterGame.AresPlayerController.CompleteScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x372e7d0
	void ClientUpdateVisibility(struct UVisibilityComponent* VisibilityComponent, struct FVector Location, struct FVector_NetQuantizeNormal FacingVector, struct TArray<struct AShooterCharacter*> CharactersWithVision); // Function ShooterGame.AresPlayerController.ClientUpdateVisibility // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x372e650
	void ClientUpdateActiveForceModules(struct UForceModuleManagerComponent* ForceModuleManager, struct TArray<struct FNetworkedForceModuleInfo> ServerForceModules); // Function ShooterGame.AresPlayerController.ClientUpdateActiveForceModules // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372e560
	void ClientSyncLifeState(struct AShooterCharacter* CharacterToSync, struct TArray<struct FLifeChangeEvent> DamageSectionStates, bool bDamageableComponentAlive, struct FLifeChangeTimestamp LifeChangeTimestamp); // Function ShooterGame.AresPlayerController.ClientSyncLifeState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372e3c0
	void ClientStartOnlineGame(); // Function ShooterGame.AresPlayerController.ClientStartOnlineGame // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372e390
	void ClientSendSystemMessage(struct APlayerState* SourcePlayerState, struct APlayerState* TargetPlayerState, struct FText S, bool bIsLocalMessage); // Function ShooterGame.AresPlayerController.ClientSendSystemMessage // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x372e1e0
	void ClientSaveRiotProfiling(); // Function ShooterGame.AresPlayerController.ClientSaveRiotProfiling // (Final|Native|Private|BlueprintCallable) // @ game+0x2024060
	void ClientReceiveRemoteCharacterUpdatesSingleArrayNoAutonomous(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates); // Function ShooterGame.AresPlayerController.ClientReceiveRemoteCharacterUpdatesSingleArrayNoAutonomous // (Net|Native|Event|Protected|NetClient) // @ game+0x372e110
	void ClientReceiveRemoteCharacterUpdatesSingleArray(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates, struct FComponentDataStream AutonomousComponentDataStream); // Function ShooterGame.AresPlayerController.ClientReceiveRemoteCharacterUpdatesSingleArray // (Net|Native|Event|Protected|NetClient) // @ game+0x372dfe0
	void ClientReceiveRemoteCharacterUpdates(struct TArray<struct FRemoteCharacterUpdate> AllyRemoteCharacterUpdates, struct TArray<struct FRemoteCharacterUpdate> EnemyAndNeutralRemoteCharacterUpdates, struct FComponentDataStream AutonomousComponentDataStream); // Function ShooterGame.AresPlayerController.ClientReceiveRemoteCharacterUpdates // (Net|Native|Event|Protected|NetClient) // @ game+0x372de20
	void ClientOnWinningTeam(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.AresPlayerController.ClientOnWinningTeam // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372dd60
	void ClientInternalUnreliableOnScreenDebugMessageWithName(struct FName Identifier, float TimeToDisplay, struct TArray<struct FAresHUDDebugTextLine> Message, enum class EDebugMessagePosition Loc, enum class EDebugMessageOptionFlags OPTIONS); // Function ShooterGame.AresPlayerController.ClientInternalUnreliableOnScreenDebugMessageWithName // (Final|Net|Native|Event|Private|NetClient|Const) // @ game+0x372db70
	void ClientInternalUnreliableOnScreenDebugMessage(uint64_t Identifier, float TimeToDisplay, struct TArray<struct FAresHUDDebugTextLine> Message, enum class EDebugMessagePosition Loc, enum class EDebugMessageOptionFlags OPTIONS); // Function ShooterGame.AresPlayerController.ClientInternalUnreliableOnScreenDebugMessage // (Final|Net|Native|Event|Private|NetClient|Const) // @ game+0x372d990
	void ClientInternalOnScreenDebugMessageWithName(struct FName Identifier, float TimeToDisplay, struct TArray<struct FAresHUDDebugTextLine> Message, enum class EDebugMessagePosition Loc, enum class EDebugMessageOptionFlags OPTIONS); // Function ShooterGame.AresPlayerController.ClientInternalOnScreenDebugMessageWithName // (Final|Net|NetReliableNative|Event|Private|NetClient|Const) // @ game+0x372d7a0
	void ClientInternalOnScreenDebugMessage(uint64_t Identifier, float TimeToDisplay, struct TArray<struct FAresHUDDebugTextLine> Message, enum class EDebugMessagePosition Loc, enum class EDebugMessageOptionFlags OPTIONS); // Function ShooterGame.AresPlayerController.ClientInternalOnScreenDebugMessage // (Final|Net|NetReliableNative|Event|Private|NetClient|Const) // @ game+0x372d5c0
	void ClientGameStarted(); // Function ShooterGame.AresPlayerController.ClientGameStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372d590
	void ClientGamePhaseEnded(enum class EAresGamePhase OldPhase); // Function ShooterGame.AresPlayerController.ClientGamePhaseEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372d500
	void ClientGamePhaseBegin(enum class EAresGamePhase NewPhase); // Function ShooterGame.AresPlayerController.ClientGamePhaseBegin // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x372d3c0
	void ClientForceSetControlRotation(struct FRotator NewRotation); // Function ShooterGame.AresPlayerController.ClientForceSetControlRotation // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient) // @ game+0x372d330
	void ClientEndOnlineGame(); // Function ShooterGame.AresPlayerController.ClientEndOnlineGame // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372d250
	void ClientDrawDebugSpheres(struct TArray<struct FAresDebugSphereReplicated> DebugSpheres); // Function ShooterGame.AresPlayerController.ClientDrawDebugSpheres // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372d1a0
	void ClientDrawDebugLines(struct TArray<struct FAresDebugLineReplicated> DebugLines); // Function ShooterGame.AresPlayerController.ClientDrawDebugLines // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372d0f0
	void ClientDebugDrawTextOnScreenAndLog(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.AresPlayerController.ClientDebugDrawTextOnScreenAndLog // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable|Const) // @ game+0x372cfb0
	void ClientDebugDrawTextOnScreen(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.AresPlayerController.ClientDebugDrawTextOnScreen // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable|Const) // @ game+0x372ce70
	void ClientConsolePrint(struct FString ConsoleText); // Function ShooterGame.AresPlayerController.ClientConsolePrint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x372cdc0
	void ClientConsoleCommand(struct FString Text, struct APlayerState* RequestingPlayer); // Function ShooterGame.AresPlayerController.ClientConsoleCommand // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x372ccc0
	void ClientBeginLoadingDropInPlayer(struct FUniqueNetIdRepl UniqueId, struct FDropInPlayerAssets DropInPlayerAssets); // Function ShooterGame.AresPlayerController.ClientBeginLoadingDropInPlayer // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x372cae0
	bool CanTriggerSpectateShortcuts(); // Function ShooterGame.AresPlayerController.CanTriggerSpectateShortcuts // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x372ca00
	bool CanBeMinimapFocused(); // Function ShooterGame.AresPlayerController.CanBeMinimapFocused // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372c9c0
	void AuthOverrideControlRotation(struct FRotator NewRotation); // Function ShooterGame.AresPlayerController.AuthOverrideControlRotation // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x372c930
	void AuthFindValidSpectateTarget(); // Function ShooterGame.AresPlayerController.AuthFindValidSpectateTarget // (Final|Native|Public) // @ game+0x372c910
	void AresGetInputMouseDelta(float& DeltaX, float& DeltaY); // Function ShooterGame.AresPlayerController.AresGetInputMouseDelta // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x372c820
	void AddRiotProfileInstantMarker(); // Function ShooterGame.AresPlayerController.AddRiotProfileInstantMarker // (Final|Native|Private|BlueprintCallable) // @ game+0x372c710
};

// Class ShooterGame.AresCheatManagerBase
// Size: 0x90 (Inherited: 0x90)
struct UAresCheatManagerBase : UCheatManager {

	void ToggleWatermark(); // Function ShooterGame.AresCheatManagerBase.ToggleWatermark // (Final|Exec|Native|Private) // @ game+0x2024060
	struct UUserWidget* CheatGetSecretWidgetClass(struct FString Name); // Function ShooterGame.AresCheatManagerBase.CheatGetSecretWidgetClass // (Final|Native|Private|BlueprintCallable) // @ game+0x369e300
};

// Class ShooterGame.AresCheatManager
// Size: 0x108 (Inherited: 0x90)
struct UAresCheatManager : UAresCheatManagerBase {
	struct UMaterial* GreenScreenMaterial; // 0x90(0x08)
	struct FSoftObjectPath GreenScreenMaterialName; // 0x98(0x20)
	struct TMap<struct UStaticMeshComponent*, struct FStaticMeshMaterialList> StaticMeshToOriginalMaterialsMap; // 0xb8(0x50)

	void ShowUI(int32_t Show); // Function ShooterGame.AresCheatManager.ShowUI // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetClientMuted(int32_t Mute); // Function ShooterGame.AresCheatManager.SetClientMuted // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetBotShootingSkillMultiplier(float Multiplier); // Function ShooterGame.AresCheatManager.SetBotShootingSkillMultiplier // (Final|Exec|Native|Public) // @ game+0x36a0b30
	void OnFoWDebugCheatsChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.AresCheatManager.OnFoWDebugCheatsChanged // (Final|Native|Public) // @ game+0x3690810
	void EnableGreenScreen(bool bEnableGreenScreen, int32_t Red, int32_t Green, int32_t Blue); // Function ShooterGame.AresCheatManager.EnableGreenScreen // (Final|Exec|Native|Public) // @ game+0x369e730
};

// Class ShooterGame.AresClientEvents
// Size: 0x68 (Inherited: 0x30)
struct UAresClientEvents : UObject {
	struct FMulticastInlineDelegate OnBugCommandDelegate; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPlatformUnhealthy; // 0x40(0x10)
	struct FMulticastInlineDelegate OnInitScreenComplete; // 0x50(0x10)
	char pad_60[0x8]; // 0x60(0x08)

	void MarkInitScreenComplete(); // Function ShooterGame.AresClientEvents.MarkInitScreenComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0800
};

// Class ShooterGame.AresClientGameInstance
// Size: 0x858 (Inherited: 0x30)
struct UAresClientGameInstance : UAresBaseGameInstance {
	char pad_30[0x18]; // 0x30(0x18)
	struct FString ErrorMessage; // 0x48(0x10)
	struct FMulticastInlineDelegate OnNativePlatformLogin; // 0x58(0x10)
	struct FMulticastInlineDelegate ClientGameInstanceInitStatusChanged; // 0x68(0x10)
	enum class EAresClientGameInstanceInitStatus InitStatus; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FMulticastInlineDelegate OnPatchContentUpToDate; // 0x80(0x10)
	struct FMulticastInlineDelegate OnQuitGameInstance; // 0x90(0x10)
	struct FMulticastInlineDelegate OnRequestDestroyWindow; // 0xa0(0x10)
	bool bDidPlayIntroCinematic; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct UCrossWorldUserWidget* PlaytimeManagerWidget; // 0xb8(0x08)
	int32_t PlaytimeWidgetZOrder; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct TSoftClassPtr<UObject> GlobalAudioManagerAssetClass; // 0xc8(0x30)
	struct TSoftClassPtr<UObject> PlaytimeManagerWidgetAssetClass; // 0xf8(0x30)
	struct TSoftClassPtr<UObject> LeaveMatchConfirmationClass; // 0x128(0x30)
	struct UAresSettingsManager* AresSettingsManagerClass; // 0x158(0x08)
	struct UActionTraitsManager* ActionTraitsManagerClass; // 0x160(0x08)
	struct UUserWidget* LeaveMatchConfirmationWidget; // 0x168(0x08)
	struct TSoftClassPtr<UObject> InputMethodEditorAssetClass; // 0x170(0x30)
	struct UAresInputMethodEditor* InputMethodEditor; // 0x1a0(0x08)
	struct UPlatformInitializerV2* PlatformInitializer; // 0x1a8(0x08)
	struct UAresWidgetRegistry* WidgetRegistry; // 0x1b0(0x08)
	char pad_1B8[0x78]; // 0x1b8(0x78)
	struct UAresGameInstance* MyGameInstance; // 0x230(0x08)
	struct FAllInitSystems Systems; // 0x238(0x478)
	bool RiotLoggedIn; // 0x6b0(0x01)
	char pad_6B1[0xf]; // 0x6b1(0x0f)
	bool bPatchFiles; // 0x6c0(0x01)
	bool bNoRiotClient; // 0x6c1(0x01)
	bool bPendingLogoutOnExit; // 0x6c2(0x01)
	bool UserPatchConfirmed; // 0x6c3(0x01)
	char pad_6C4[0x14]; // 0x6c4(0x14)
	struct FSoftObjectPath SoftResetMap; // 0x6d8(0x20)
	struct UUpdateManager* UpdateManager; // 0x6f8(0x08)
	char pad_700[0x8]; // 0x700(0x08)
	struct FGameClientInstanceInfo ClientInstanceInfo; // 0x708(0x150)

	bool UseLoginWithField(); // Function ShooterGame.AresClientGameInstance.UseLoginWithField // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0d20
	void UpdatePatchStatus(); // Function ShooterGame.AresClientGameInstance.UpdatePatchStatus // (Native|Protected) // @ game+0x36a0cf0
	void UpdateInitStatus(); // Function ShooterGame.AresClientGameInstance.UpdateInitStatus // (Final|Native|Private) // @ game+0x36a0cd0
	void TriggerVanguardBanNotification(struct FString Subject); // Function ShooterGame.AresClientGameInstance.TriggerVanguardBanNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0c20
	void StartPatchDownload(); // Function ShooterGame.AresClientGameInstance.StartPatchDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0c00
	bool ShouldAllowLeaveMatch(); // Function ShooterGame.AresClientGameInstance.ShouldAllowLeaveMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0bd0
	void SetupRequestDestroyWindowOverride(); // Function ShooterGame.AresClientGameInstance.SetupRequestDestroyWindowOverride // (Final|Native|Private) // @ game+0x36a0bb0
	bool RiotLogin(struct FString Username, struct FString Password); // Function ShooterGame.AresClientGameInstance.RiotLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0a10
	bool RequestSystemRestart(struct FText& Reason); // Function ShooterGame.AresClientGameInstance.RequestSystemRestart // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0920
	void QueueSoftResetOnNextTick(); // Function ShooterGame.AresClientGameInstance.QueueSoftResetOnNextTick // (Final|Native|Public) // @ game+0x36a0900
	void PostTelemetryConsoleStartupTime(); // Function ShooterGame.AresClientGameInstance.PostTelemetryConsoleStartupTime // (Final|Native|Private) // @ game+0x2024060
	bool PatchFailed(); // Function ShooterGame.AresClientGameInstance.PatchFailed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a08d0
	void OverrideLanguageOnSoftReset(struct FString Language); // Function ShooterGame.AresClientGameInstance.OverrideLanguageOnSoftReset // (Final|Native|Public) // @ game+0x36a0820
	bool IsRiotSDKAvailable(); // Function ShooterGame.AresClientGameInstance.IsRiotSDKAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a07d0
	bool IsPlatformFaulted(); // Function ShooterGame.AresClientGameInstance.IsPlatformFaulted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a07a0
	bool IsPatchUpToDate(); // Function ShooterGame.AresClientGameInstance.IsPatchUpToDate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0770
	bool IsLoggedIn(); // Function ShooterGame.AresClientGameInstance.IsLoggedIn // (Native|Public|BlueprintCallable) // @ game+0x36a0730
	bool IsInProvisioningFlow(enum class EProvisioningFlowID ExpectedProvisioningFlow); // Function ShooterGame.AresClientGameInstance.IsInProvisioningFlow // (Final|Native|Public|Const) // @ game+0x36a0670
	bool IsInPregame(); // Function ShooterGame.AresClientGameInstance.IsInPregame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0640
	bool IsInMatchmadeGame(); // Function ShooterGame.AresClientGameInstance.IsInMatchmadeGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0610
	bool IsInitialized(); // Function ShooterGame.AresClientGameInstance.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0700
	bool IsInCustomGame(); // Function ShooterGame.AresClientGameInstance.IsInCustomGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05e0
	bool IsDirectConnectAllowed(); // Function ShooterGame.AresClientGameInstance.IsDirectConnectAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	void InitiateRiotLogin(enum class ERiotLoginStrategy LoginStrategy); // Function ShooterGame.AresClientGameInstance.InitiateRiotLogin // (Native|Public|BlueprintCallable) // @ game+0x36a0520
	void HandleRNetHealthChange(); // Function ShooterGame.AresClientGameInstance.HandleRNetHealthChange // (Final|Native|Private) // @ game+0x36a0500
	void HandlePlatformInitStatusChanged(enum class EAresPlatformInitStatus Status); // Function ShooterGame.AresClientGameInstance.HandlePlatformInitStatusChanged // (Final|Native|Public) // @ game+0x36a0480
	void HandlePlatformFault(enum class EPlatformFaultReason& Reason); // Function ShooterGame.AresClientGameInstance.HandlePlatformFault // (Final|Native|Protected|HasOutParms) // @ game+0x36a03f0
	struct UAresWidgetRegistry* GetWidgetRegistry(); // Function ShooterGame.AresClientGameInstance.GetWidgetRegistry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a03d0
	struct UWhisperChatManager* GetWhisperChatManager(); // Function ShooterGame.AresClientGameInstance.GetWhisperChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a03a0
	struct UAresWatermarkManager* GetWatermarkManager(); // Function ShooterGame.AresClientGameInstance.GetWatermarkManager // (Final|Native|Public|Const) // @ game+0x36a0370
	struct UVoiceViewController* GetVoiceViewController(); // Function ShooterGame.AresClientGameInstance.GetVoiceViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0340
	struct UVoiceRoomManager* GetVoiceRoomManager(); // Function ShooterGame.AresClientGameInstance.GetVoiceRoomManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0310
	struct UVoicePreferencesManager* GetVoicePreferencesManager(); // Function ShooterGame.AresClientGameInstance.GetVoicePreferencesManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e410
	struct UVoiceModel* GetVoiceModel(); // Function ShooterGame.AresClientGameInstance.GetVoiceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a02e0
	struct URNetVoiceManager* GetVoiceManager(); // Function ShooterGame.AresClientGameInstance.GetVoiceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2432d10
	struct UVNGManager* GetVNGManager(); // Function ShooterGame.AresClientGameInstance.GetVNGManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a01d0
	struct UVanguardManager* GetVanguardManager(); // Function ShooterGame.AresClientGameInstance.GetVanguardManager // (Final|Native|Public|Const) // @ game+0x36a02b0
	struct FString GetVanguardIncompatibleSoftware(); // Function ShooterGame.AresClientGameInstance.GetVanguardIncompatibleSoftware // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0230
	int32_t GetVanguardErrorCode(); // Function ShooterGame.AresClientGameInstance.GetVanguardErrorCode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0200
	struct UUITelemetryManager* GetUITelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetUITelemetryManager // (Final|Native|Public|Const) // @ game+0x36a01a0
	struct UUINavigationManager* GetUINavigationManager(); // Function ShooterGame.AresClientGameInstance.GetUINavigationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0170
	struct UTutorialManager* GetTutorialManager(); // Function ShooterGame.AresClientGameInstance.GetTutorialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0140
	struct UTravelManager* GetTravelManager(); // Function ShooterGame.AresClientGameInstance.GetTravelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0110
	struct UTransitionModelManager* GetTransitionModelManager(); // Function ShooterGame.AresClientGameInstance.GetTransitionModelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a00e0
	struct UTournamentsManager* GetTournamentsManager(); // Function ShooterGame.AresClientGameInstance.GetTournamentsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a00b0
	float GetTimeSinceLastInput(); // Function ShooterGame.AresClientGameInstance.GetTimeSinceLastInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0080
	struct UThreadedChatManager* GetThreadedChatManager(); // Function ShooterGame.AresClientGameInstance.GetThreadedChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0050
	struct UTextChatManagerV2* GetTextChatManager(); // Function ShooterGame.AresClientGameInstance.GetTextChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0020
	struct UStoreViewControllerV2* GetStoreViewController(); // Function ShooterGame.AresClientGameInstance.GetStoreViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fff0
	struct UStoreUITelemetryManager* GetStoreUITelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetStoreUITelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ffc0
	struct UStoreManager* GetStoreManager(); // Function ShooterGame.AresClientGameInstance.GetStoreManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ff90
	struct USocialViewControllerV3* GetSocialViewController(); // Function ShooterGame.AresClientGameInstance.GetSocialViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ff60
	struct UAresSocialExperienceModel* GetSocialExperienceModel(); // Function ShooterGame.AresClientGameInstance.GetSocialExperienceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ff30
	struct UPlatformSessionManager* GetSessionManager(); // Function ShooterGame.AresClientGameInstance.GetSessionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ff00
	struct UServiceTickerManager* GetServiceTickerManager(); // Function ShooterGame.AresClientGameInstance.GetServiceTickerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fed0
	struct URSOManager* GetRSOManager(); // Function ShooterGame.AresClientGameInstance.GetRSOManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fd00
	struct URosterManager* GetRosterManager(); // Function ShooterGame.AresClientGameInstance.GetRosterManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fea0
	struct URoamingSettingsManager* GetRoamingSettingsManager(); // Function ShooterGame.AresClientGameInstance.GetRoamingSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fe70
	struct URMSManager* GetRMSManager(); // Function ShooterGame.AresClientGameInstance.GetRMSManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fcd0
	struct URiotWarningManager* GetRiotWarningManager(); // Function ShooterGame.AresClientGameInstance.GetRiotWarningManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fe40
	struct URiotGamesApiClient* GetRiotGamesApiClient(); // Function ShooterGame.AresClientGameInstance.GetRiotGamesApiClient // (Final|Native|Public|Const) // @ game+0x369fe10
	struct URiotClientHeartbeatManager* GetRiotClientHeartbeatManager(); // Function ShooterGame.AresClientGameInstance.GetRiotClientHeartbeatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fde0
	struct URiotClientConfigManager* GetRiotClientConfigManager(); // Function ShooterGame.AresClientGameInstance.GetRiotClientConfigManager // (Final|Native|Public|Const) // @ game+0x369fdb0
	struct UAresRGIFriendsClient* GetRGIFriendsClient(); // Function ShooterGame.AresClientGameInstance.GetRGIFriendsClient // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fca0
	struct URewardGrantModelFactory* GetRewardGrantModelFactory(); // Function ShooterGame.AresClientGameInstance.GetRewardGrantModelFactory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fd80
	struct URestrictionsManager* GetRestrictionsManager(); // Function ShooterGame.AresClientGameInstance.GetRestrictionsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fd50
	struct UReporterFeedbackManager* GetReporterFeedbackManager(); // Function ShooterGame.AresClientGameInstance.GetReporterFeedbackManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c29490
	struct UReplayCatalogManager* GetReplayCatalogManager(); // Function ShooterGame.AresClientGameInstance.GetReplayCatalogManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fd20
	struct UPurchaseManager* GetPurchaseManager(); // Function ShooterGame.AresClientGameInstance.GetPurchaseManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fc70
	struct UProvisioningErrorNotificationManager* GetProvisioningErrorNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetProvisioningErrorNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fc40
	struct UPresenceManager* GetPresenceManager(); // Function ShooterGame.AresClientGameInstance.GetPresenceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fc10
	struct UPremierRosterViewController* GetPremierRosterViewController(); // Function ShooterGame.AresClientGameInstance.GetPremierRosterViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fbe0
	struct UPremierRosterManager* GetPremierRosterManager(); // Function ShooterGame.AresClientGameInstance.GetPremierRosterManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fbb0
	struct UPremierManager* GetPremierManager(); // Function ShooterGame.AresClientGameInstance.GetPremierManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fb80
	struct UPreloadManager* GetPreloadManager(); // Function ShooterGame.AresClientGameInstance.GetPreloadManager // (Final|Native|Public|Const) // @ game+0x369fb50
	struct UPregameManager* GetPregameManager(); // Function ShooterGame.AresClientGameInstance.GetPregameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fb20
	struct UPlayerSettingsTelemetry* GetPlayerSettingsTelemetry(); // Function ShooterGame.AresClientGameInstance.GetPlayerSettingsTelemetry // (Final|Native|Public|Const) // @ game+0x369faf0
	struct UPlayerReportNotificationManager* GetPlayerReportNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerReportNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36558b0
	struct UPlayerReportManager* GetPlayerReportManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerReportManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fac0
	struct UPlayerLoginLocationHistoryManager* GetPlayerLoginLocationHistoryManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerLoginLocationHistoryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fa90
	struct UPlayerFeedbackToolViewController* GetPlayerFeedbackToolViewController(); // Function ShooterGame.AresClientGameInstance.GetPlayerFeedbackToolViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fa60
	struct UPlayerFeedbackToolPluginManager* GetPlayerFeedbackToolPluginManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerFeedbackToolPluginManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fa30
	struct UPlayerFacingPerfManager* GetPlayerFacingPerfManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerFacingPerfManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fa00
	struct UPlayerAliasManager* GetPlayerAliasManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerAliasManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f9d0
	struct UPlayerAffinityManager* GetPlayerAffinityManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerAffinityManager // (Final|Native|Public|Const) // @ game+0x369f9a0
	struct FText GetPlatormFailureReason(); // Function ShooterGame.AresClientGameInstance.GetPlatormFailureReason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x369f910
	enum class EPlatformFaultReason GetPlatormFailureCode(); // Function ShooterGame.AresClientGameInstance.GetPlatormFailureCode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x369f8e0
	struct UPlatformPlayerManager* GetPlatformPlayerManager(); // Function ShooterGame.AresClientGameInstance.GetPlatformPlayerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f8b0
	struct UPlatformOffersManager* GetPlatformOffersManager(); // Function ShooterGame.AresClientGameInstance.GetPlatformOffersManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f880
	struct FText GetPlatformInitErrorReason(); // Function ShooterGame.AresClientGameInstance.GetPlatformInitErrorReason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x369f7f0
	enum class EPlatformInitErrorReason GetPlatformInitErrorCode(); // Function ShooterGame.AresClientGameInstance.GetPlatformInitErrorCode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x369f7a0
	struct UPingManager* GetPingManager(); // Function ShooterGame.AresClientGameInstance.GetPingManager // (Final|Native|Public|Const) // @ game+0x369f770
	struct UPersonalizationManagerV2* GetPersonalizationManagerV2(); // Function ShooterGame.AresClientGameInstance.GetPersonalizationManagerV2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f750
	struct UPaymentsManager* GetPaymentsManager(); // Function ShooterGame.AresClientGameInstance.GetPaymentsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f720
	struct UPatchNotesManager* GetPatchNotesManager(); // Function ShooterGame.AresClientGameInstance.GetPatchNotesManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f6a0
	struct UPatchManager* GetPatchManager(); // Function ShooterGame.AresClientGameInstance.GetPatchManager // (Final|Native|Public|Const) // @ game+0x369f670
	struct FString GetPatchlineId(); // Function ShooterGame.AresClientGameInstance.GetPatchlineId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f6d0
	struct UPatchAvailabilityManager* GetPatchAvailabilityManager(); // Function ShooterGame.AresClientGameInstance.GetPatchAvailabilityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f640
	struct UPartyViewController* GetPartyViewController(); // Function ShooterGame.AresClientGameInstance.GetPartyViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f610
	struct UPartyNotificationManager* GetPartyNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetPartyNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f5e0
	struct UPartyModel* GetPartyModel(); // Function ShooterGame.AresClientGameInstance.GetPartyModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f5b0
	struct UPartyManager* GetPartyManager(); // Function ShooterGame.AresClientGameInstance.GetPartyManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f580
	struct UPartyListingManager* GetPartyListingManager(); // Function ShooterGame.AresClientGameInstance.GetPartyListingManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f550
	struct UOnlineIdentityManager* GetOnlineIdentityManager(); // Function ShooterGame.AresClientGameInstance.GetOnlineIdentityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f520
	struct UNotificationManager* GetNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f4f0
	struct UMutedPatternsManager* GetMutedPatternsManager(); // Function ShooterGame.AresClientGameInstance.GetMutedPatternsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f4c0
	struct UModalManager* GetModalManager(); // Function ShooterGame.AresClientGameInstance.GetModalManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f490
	struct UMMRManager* GetMMRManager(); // Function ShooterGame.AresClientGameInstance.GetMMRManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f2a0
	struct UMenuStackManager* GetMenuStackManager(); // Function ShooterGame.AresClientGameInstance.GetMenuStackManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f460
	struct UMatchmakingManager* GetMatchmakingManager(); // Function ShooterGame.AresClientGameInstance.GetMatchmakingManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f430
	struct UMatchHistoryViewController* GetMatchHistoryViewController(); // Function ShooterGame.AresClientGameInstance.GetMatchHistoryViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f400
	struct UMatchHistoryManager* GetMatchHistoryManager(); // Function ShooterGame.AresClientGameInstance.GetMatchHistoryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2038c20
	struct UMatchDetailsManager* GetMatchDetailsManager(); // Function ShooterGame.AresClientGameInstance.GetMatchDetailsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f3d0
	struct UMassRewardsManager* GetMassRewardsManager(); // Function ShooterGame.AresClientGameInstance.GetMassRewardsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f3a0
	struct UMapLoadModel* GetMapLoadModel(); // Function ShooterGame.AresClientGameInstance.GetMapLoadModel // (Final|Native|Public|Const) // @ game+0x369f370
	struct UMainMenuTelemetryManager* GetMainMenuTelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetMainMenuTelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f340
	struct UMainMenuParentWidget* GetMainMenuParent(); // Function ShooterGame.AresClientGameInstance.GetMainMenuParent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f310
	struct FName GetMainMenuLevel(); // Function ShooterGame.AresClientGameInstance.GetMainMenuLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f2d0
	struct ULoginQueueManager* GetLoginQueueManager(); // Function ShooterGame.AresClientGameInstance.GetLoginQueueManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f270
	struct ULocalePreferenceManager* GetLocalePreferenceManager(); // Function ShooterGame.AresClientGameInstance.GetLocalePreferenceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f240
	struct ULegalInfoManager* GetLegalInfoManager(); // Function ShooterGame.AresClientGameInstance.GetLegalInfoManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f210
	struct ULeaderboardViewController* GetLeaderboardViewController(); // Function ShooterGame.AresClientGameInstance.GetLeaderboardViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f1e0
	struct ULeaderboardManager* GetLeaderboardManager(); // Function ShooterGame.AresClientGameInstance.GetLeaderboardManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f1b0
	struct UJuiceScreenViewController* GetJuiceScreenViewController(); // Function ShooterGame.AresClientGameInstance.GetJuiceScreenViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f180
	struct UInventoryManager* GetInventoryManager(); // Function ShooterGame.AresClientGameInstance.GetInventoryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f150
	struct UInventoryInitManager* GetInventoryInitManager(); // Function ShooterGame.AresClientGameInstance.GetInventoryInitManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f120
	struct UHovercardCacheManager* GetHovercardCacheManager(); // Function ShooterGame.AresClientGameInstance.GetHovercardCacheManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f0f0
	struct UGlobalAudioManager* GetGlobalAudioManager(); // Function ShooterGame.AresClientGameInstance.GetGlobalAudioManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f0c0
	struct UGameFlowStateManager* GetGameFlowStateManager(); // Function ShooterGame.AresClientGameInstance.GetGameFlowStateManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f090
	struct UFriendsManager* GetFriendsManager(); // Function ShooterGame.AresClientGameInstance.GetFriendsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2459db0
	struct UFriendNotificationManager* GetFriendNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetFriendNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f060
	struct UFlyoutManager* GetFlyoutManager(); // Function ShooterGame.AresClientGameInstance.GetFlyoutManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f030
	struct UFavoritesManager* GetFavoritesManager(); // Function ShooterGame.AresClientGameInstance.GetFavoritesManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f000
	struct UEsportsTelemetryManager* GetEsportsTelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetEsportsTelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369efd0
	struct UEsportsManager* GetEsportsManager(); // Function ShooterGame.AresClientGameInstance.GetEsportsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369efa0
	struct UDropInLoadingManager* GetDropInLoadingManager(); // Function ShooterGame.AresClientGameInstance.GetDropInLoadingManager // (Final|Native|Public|Const) // @ game+0x369ef70
	struct UDisplayNameManager* GetDisplayNameManager(); // Function ShooterGame.AresClientGameInstance.GetDisplayNameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ef40
	struct UDebugNotificationEmitter* GetDebugNotificationEmitter(); // Function ShooterGame.AresClientGameInstance.GetDebugNotificationEmitter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ef10
	struct UDailyRewardsManager* GetDailyRewardsManager(); // Function ShooterGame.AresClientGameInstance.GetDailyRewardsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369eee0
	struct UCustomGameManager* GetCustomGameManager(); // Function ShooterGame.AresClientGameInstance.GetCustomGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369eeb0
	struct UCrosshairManager* GetCrosshairManager(); // Function ShooterGame.AresClientGameInstance.GetCrosshairManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ee80
	struct UCoreGameManager* GetCoreGameManager(); // Function ShooterGame.AresClientGameInstance.GetCoreGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ee50
	struct UContractsViewController* GetContractsViewController(); // Function ShooterGame.AresClientGameInstance.GetContractsViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ee20
	struct UContractsManager* GetContractsManager(); // Function ShooterGame.AresClientGameInstance.GetContractsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369edf0
	struct UContractDefinitionsManager* GetContractDefinitionsManager(); // Function ShooterGame.AresClientGameInstance.GetContractDefinitionsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26203b0
	struct UContentManager* GetContentManager(); // Function ShooterGame.AresClientGameInstance.GetContentManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369edc0
	struct UContentFilterViewController* GetContentFilterViewController(); // Function ShooterGame.AresClientGameInstance.GetContentFilterViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ed90
	struct UContentFilterUITelemetryManager* GetContentFilterUITelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetContentFilterUITelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ed60
	struct UConfigManager* GetConfigManager(); // Function ShooterGame.AresClientGameInstance.GetConfigManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ed30
	struct UCNAntiAddictionManager* GetCNAntiAddictionManager(); // Function ShooterGame.AresClientGameInstance.GetCNAntiAddictionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ec70
	struct UClientTelemetryPersistence* GetClientTelemetryPersistence(); // Function ShooterGame.AresClientGameInstance.GetClientTelemetryPersistence // (Final|Native|Public|Const) // @ game+0x369ed00
	struct UChatSessionManager* GetChatSessionManager(); // Function ShooterGame.AresClientGameInstance.GetChatSessionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ecd0
	struct UChatFriendsMetadataManager* GetChatFriendsMetadataManager(); // Function ShooterGame.AresClientGameInstance.GetChatFriendsMetadataManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369eca0
	struct UAVSManager* GetAVSManager(); // Function ShooterGame.AresClientGameInstance.GetAVSManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ea00
	struct UArsenalViewController* GetArsenalViewController(); // Function ShooterGame.AresClientGameInstance.GetArsenalViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ec40
	struct UAresSettingsManager* GetAresSettingsManager(); // Function ShooterGame.AresClientGameInstance.GetAresSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ec10
	struct UAresClientGameInstance* GetAresClientGameInstance(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance.GetAresClientGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x369eb80
	struct UAresClientEvents* GetAresClientEvents(); // Function ShooterGame.AresClientGameInstance.GetAresClientEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369eb50
	struct UApplicationRepairManager* GetApplicationRepairManager(); // Function ShooterGame.AresClientGameInstance.GetApplicationRepairManager // (Final|Native|Public|Const) // @ game+0x369eb20
	struct UAntiAddictionSessionManager* GetAntiAddictionSessionManager(); // Function ShooterGame.AresClientGameInstance.GetAntiAddictionSessionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369eaf0
	struct UAntiAddictionManager* GetAntiAddictionManager(); // Function ShooterGame.AresClientGameInstance.GetAntiAddictionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369eac0
	struct UActionTraitsManager* GetActionTraitsManager(); // Function ShooterGame.AresClientGameInstance.GetActionTraitsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ea90
	struct UActionBindingsManager* GetActionBindingsManager(); // Function ShooterGame.AresClientGameInstance.GetActionBindingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ea60
	struct UAccountXPManager* GetAccountXPManager(); // Function ShooterGame.AresClientGameInstance.GetAccountXPManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ea30
	void DisconnectFromServer(); // Function ShooterGame.AresClientGameInstance.DisconnectFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x369e710
	void ConnectToServer(struct FConnectToServerDetails Details); // Function ShooterGame.AresClientGameInstance.ConnectToServer // (Final|Native|Public|BlueprintCallable) // @ game+0x369e4b0
	void ConfirmCloseGame(); // Function ShooterGame.AresClientGameInstance.ConfirmCloseGame // (Final|Native|Public|BlueprintCallable) // @ game+0x369e490
	void CloseGame(bool bForceImmediate, bool bLogoutOnExit); // Function ShooterGame.AresClientGameInstance.CloseGame // (Final|Native|Public|BlueprintCallable) // @ game+0x369e3c0
	void BringToFront(); // Function ShooterGame.AresClientGameInstance.BringToFront // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x369e2e0
};

// Class ShooterGame.AresClientGameInstance_NativePlatform
// Size: 0x8d0 (Inherited: 0x858)
struct UAresClientGameInstance_NativePlatform : UAresClientGameInstance {
	struct UAresGameInstance* GameInstance; // 0x858(0x08)
	struct UNativePlatformFriendsManager* NativePlatformFriendsManager; // 0x860(0x08)
	struct UContentAccessBehaviorManager* ContentAccessBehaviorManager; // 0x868(0x08)
	char pad_870[0x60]; // 0x870(0x60)

	void HideVirtualCursor(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance_NativePlatform.HideVirtualCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7d70
	struct UNativePlatformFriendsManager* GetNativePlatformFriendsManager(); // Function ShooterGame.AresClientGameInstance_NativePlatform.GetNativePlatformFriendsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7900
	struct UAresClientGameInstance_NativePlatform* GetAresClientGameInstance_NativePlatform(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance_NativePlatform.GetAresClientGameInstance_NativePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a74f0
};

// Class ShooterGame.AresClientGameInstance_Touch
// Size: 0x8d8 (Inherited: 0x858)
struct UAresClientGameInstance_Touch : UAresClientGameInstance {
	struct FString TouchAimToolsTuningComponentClass; // 0x858(0x10)
	struct FMulticastInlineDelegate OnConnectionInfoUpdatedDelegate; // 0x868(0x10)
	struct FMulticastInlineDelegate OnThermalStateChangedDelegate; // 0x878(0x10)
	char pad_888[0x8]; // 0x888(0x08)
	struct UWidgetLayoutManager* WidgetLayoutManager; // 0x890(0x08)
	struct UAresTouchManager* AresTouchManager; // 0x898(0x08)
	struct UPushNotificationsManager* PushNotificationsManager; // 0x8a0(0x08)
	struct UMobileOverlayViewController* MobileOverlayViewController; // 0x8a8(0x08)
	struct UTextChatPanelViewController* TextChatPanelViewController; // 0x8b0(0x08)
	struct TArray<struct UObject*> PersistentBlueprintObjects; // 0x8b8(0x10)
	char pad_8C8[0x10]; // 0x8c8(0x10)

	void TryAutoLogin(); // Function ShooterGame.AresClientGameInstance_Touch.TryAutoLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x36a8be0
	void SetActiveUserPersistentSessionFound(bool LoggedIn); // Function ShooterGame.AresClientGameInstance_Touch.SetActiveUserPersistentSessionFound // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x36a8190
	void SaveSelectedLocale(struct FString SelectedLocale); // Function ShooterGame.AresClientGameInstance_Touch.SaveSelectedLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x36a8090
	void RegisterPersistentBlueprintObject(struct UObject* InObject); // Function ShooterGame.AresClientGameInstance_Touch.RegisterPersistentBlueprintObject // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7f50
	bool IsActiveUserPersistentSessionFound(); // Function ShooterGame.AresClientGameInstance_Touch.IsActiveUserPersistentSessionFound // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7e00
	struct UWidgetLayoutManager* GetWidgetLayoutManager(); // Function ShooterGame.AresClientGameInstance_Touch.GetWidgetLayoutManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7cf0
	struct UTextChatPanelViewController* GetTextChatPanelViewController(); // Function ShooterGame.AresClientGameInstance_Touch.GetTextChatPanelViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7b60
	struct FString GetSavedLocale(); // Function ShooterGame.AresClientGameInstance_Touch.GetSavedLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7960
	struct UPushNotificationsManager* GetPushNotificationsManager(); // Function ShooterGame.AresClientGameInstance_Touch.GetPushNotificationsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7930
	struct UMobileOverlayViewController* GetMobileOverlayViewController(); // Function ShooterGame.AresClientGameInstance_Touch.GetMobileOverlayViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a78d0
	int32_t GetCurrentDeviceThermalState(); // Function ShooterGame.AresClientGameInstance_Touch.GetCurrentDeviceThermalState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a7750
	struct UAresTouchManager* GetAresTouchManager(); // Function ShooterGame.AresClientGameInstance_Touch.GetAresTouchManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7610
	struct UAresClientGameInstance_Touch* GetAresClientGameInstance_Touch(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance_Touch.GetAresClientGameInstance_Touch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a7580
	struct TArray<struct FString> GetAllLocalesForMobile(); // Function ShooterGame.AresClientGameInstance_Touch.GetAllLocalesForMobile // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7390
	struct UObject* FindPersistentBlueprintObjectByClass(struct UObject* ObjectClass); // Function ShooterGame.AresClientGameInstance_Touch.FindPersistentBlueprintObjectByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7260
};

// Class ShooterGame.AresComboBox
// Size: 0xf20 (Inherited: 0xf08)
struct UAresComboBox : UComboBoxString {
	struct FDelegate OnGenerateButtonContentWidgetEvent; // 0xf08(0x14)
	char pad_F1C[0x4]; // 0xf1c(0x04)

	void SetComboButtonWidget(struct UWidget* Widget); // Function ShooterGame.AresComboBox.SetComboButtonWidget // (Native|Public|BlueprintCallable) // @ game+0x36a82f0
};

// Class ShooterGame.AresCommonActionWidget
// Size: 0x398 (Inherited: 0x380)
struct UAresCommonActionWidget : UCommonActionWidget {
	struct FDataTableRowHandle InputActionIconOverrideHandle; // 0x380(0x18)

	void SetInputActionIconOverride(struct FDataTableRowHandle OverrideHandle); // Function ShooterGame.AresCommonActionWidget.SetInputActionIconOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36a8950
	bool HasInputActionOverride(); // Function ShooterGame.AresCommonActionWidget.HasInputActionOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36a7d40
};

// Class ShooterGame.AresCommonActivatableWidget
// Size: 0x398 (Inherited: 0x388)
struct UAresCommonActivatableWidget : UCommonActivatableWidget {
	char pad_388[0x8]; // 0x388(0x08)
	bool bDisplayBackHandlerInActionBar; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)

	void K2_BindToViewModel(); // Function ShooterGame.AresCommonActivatableWidget.K2_BindToViewModel // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresButtonComponent
// Size: 0x30 (Inherited: 0x30)
struct UAresButtonComponent : UInterface {

	void OnButtonVisibilityStateChanged(enum class EAresCommonButtonVisibleState NewState); // Function ShooterGame.AresButtonComponent.OnButtonVisibilityStateChanged // (Native|Event|Public|BlueprintEvent) // @ game+0x36a7ec0
	void NotifyAddedToButton(struct UAresCommonButton* OwningButton); // Function ShooterGame.AresButtonComponent.NotifyAddedToButton // (Native|Event|Public|BlueprintEvent) // @ game+0x36a7e30
};

// Class ShooterGame.AresButtonTextStyleContainer
// Size: 0x60 (Inherited: 0x30)
struct UAresButtonTextStyleContainer : UObject {
	struct UCommonTextStyle* TextStyles[0x6]; // 0x30(0x30)

	struct UCommonTextStyle* GetTextStyleForButtonVisibilityState(enum class EAresCommonButtonVisibleState State); // Function ShooterGame.AresButtonTextStyleContainer.GetTextStyleForButtonVisibilityState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7c30
};

// Class ShooterGame.AresCommonButtonStyle
// Size: 0x618 (Inherited: 0x5e8)
struct UAresCommonButtonStyle : UCommonButtonStyle {
	struct UAkAudioEvent* StateSounds[0x6]; // 0x5e8(0x30)

	struct UAkAudioEvent* GetAKSoundForButtonVisibilityState(enum class EAresCommonButtonVisibleState State); // Function ShooterGame.AresCommonButtonStyle.GetAKSoundForButtonVisibilityState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a7300
};

// Class ShooterGame.AresCommonButtonGroup
// Size: 0x118 (Inherited: 0x118)
struct UAresCommonButtonGroup : UCommonButtonGroupBase {

	void FocusButtonAtIndex(int32_t Index); // Function ShooterGame.AresCommonButtonGroup.FocusButtonAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x36b0070
	bool DoesGroupHaveFocus(); // Function ShooterGame.AresCommonButtonGroup.DoesGroupHaveFocus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b0040
};

// Class ShooterGame.AresCommonButtonRichText
// Size: 0x760 (Inherited: 0x730)
struct UAresCommonButtonRichText : UAresCommonRichText {
	bool bBindToParentButtonState; // 0x730(0x01)
	bool bUseParentButtonFontStyle; // 0x731(0x01)
	char pad_732[0x6]; // 0x732(0x06)
	struct UCommonTextStyle* StyleDefault; // 0x738(0x08)
	struct UCommonTextStyle* StylePressed; // 0x740(0x08)
	struct UCommonTextStyle* StyleHovered; // 0x748(0x08)
	struct UCommonTextStyle* StyleSelected; // 0x750(0x08)
	struct UCommonTextStyle* StyleDisabled; // 0x758(0x08)

	void OnButtonCurrentVisibleStateChanged(struct UAresCommonButton* Button, enum class EAresCommonButtonVisibleState NewVisibleState); // Function ShooterGame.AresCommonButtonRichText.OnButtonCurrentVisibleStateChanged // (Final|Native|Protected) // @ game+0x36b03e0
};

// Class ShooterGame.AresCommonButtonText
// Size: 0x368 (Inherited: 0x338)
struct UAresCommonButtonText : UAresCommonText {
	bool bBindToParentButtonState; // 0x338(0x01)
	bool bUseParentButtonFontStyle; // 0x339(0x01)
	char pad_33A[0x6]; // 0x33a(0x06)
	struct UCommonTextStyle* StyleDefault; // 0x340(0x08)
	struct UCommonTextStyle* StylePressed; // 0x348(0x08)
	struct UCommonTextStyle* StyleHovered; // 0x350(0x08)
	struct UCommonTextStyle* StyleSelected; // 0x358(0x08)
	struct UCommonTextStyle* StyleDisabled; // 0x360(0x08)

	void OnButtonCurrentVisibleStateChanged(struct UAresCommonButton* Button, enum class EAresCommonButtonVisibleState NewVisibleState); // Function ShooterGame.AresCommonButtonText.OnButtonCurrentVisibleStateChanged // (Final|Native|Protected) // @ game+0x36b04b0
};

// Class ShooterGame.AresCommonButtonToggle
// Size: 0x1040 (Inherited: 0x1028)
struct UAresCommonButtonToggle : UAresCommonButton {
	struct FMulticastInlineDelegate OnToggleStateChanged; // 0x1028(0x10)
	struct UCheckBox* CheckBoxComponent; // 0x1038(0x08)

	void SetToggleStateAsBoolean(bool bToggledOn); // Function ShooterGame.AresCommonButtonToggle.SetToggleStateAsBoolean // (Final|Native|Public|BlueprintCallable) // @ game+0x36b1000
	void SetToggleState(enum class ECheckBoxState NewState); // Function ShooterGame.AresCommonButtonToggle.SetToggleState // (Final|Native|Public|BlueprintCallable) // @ game+0x36b0f80
	bool GetToggleStateAsBoolean(); // Function ShooterGame.AresCommonButtonToggle.GetToggleStateAsBoolean // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b0230
	enum class ECheckBoxState GetToggleState(); // Function ShooterGame.AresCommonButtonToggle.GetToggleState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b0200
	struct UCheckBox* GetCheckBox(); // Function ShooterGame.AresCommonButtonToggle.GetCheckBox // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b0120
};

// Class ShooterGame.AresCommonInputActionManager
// Size: 0x48 (Inherited: 0x30)
struct UAresCommonInputActionManager : UObject {
	bool DisplayInActionBar; // 0x30(0x01)
	char pad_31[0x17]; // 0x31(0x17)

	void UnregisterBinding(struct FAresActionBindingHandle BindingHandle); // Function ShooterGame.AresCommonInputActionManager.UnregisterBinding // (Final|Native|Private|BlueprintCallable) // @ game+0x36b10d0
	void UnregisterAllBindings(); // Function ShooterGame.AresCommonInputActionManager.UnregisterAllBindings // (Final|Native|Private|BlueprintCallable) // @ game+0x36b10b0
	void RegisterBinding(struct UCommonUserWidget* CommonWidget, struct FDataTableRowHandle InputAction, struct FAresActionBindingHandle& BindingHandle, struct FText AlternateDisplayName, bool bUsePersistentBinding, struct FDelegate& Callback); // Function ShooterGame.AresCommonInputActionManager.RegisterBinding // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x36b0630
};

// Class ShooterGame.AresCommonTextStyle
// Size: 0x1b8 (Inherited: 0x168)
struct UAresCommonTextStyle : UCommonTextStyle {
	struct TMap<enum class EAresPlatformType, struct FOverridableTextProperties> PlatformOverrides; // 0x168(0x50)
};

// Class ShooterGame.AresCommonUIActionRouter
// Size: 0x110 (Inherited: 0x108)
struct UAresCommonUIActionRouter : UCommonUIActionRouterBase {
	char pad_108[0x8]; // 0x108(0x08)
};

// Class ShooterGame.AresCommonUserWidget
// Size: 0x300 (Inherited: 0x2f0)
struct UAresCommonUserWidget : UCommonUserWidget {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct UUserWidget* CurrentFocusedUserWidget; // 0x2f8(0x08)

	void K2_BindToViewModel(); // Function ShooterGame.AresCommonUserWidget.K2_BindToViewModel // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BP_OnChildWidgetFocusChanged(struct UUserWidget* ChildWidget); // Function ShooterGame.AresCommonUserWidget.BP_OnChildWidgetFocusChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct UWidget* BP_GetDesiredFocusTarget(); // Function ShooterGame.AresCommonUserWidget.BP_GetDesiredFocusTarget // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
};

// Class ShooterGame.AresCommonViewModelInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresCommonViewModelInterface : UInterface {
};

// Class ShooterGame.AresConfigurableCommonTileView
// Size: 0x410 (Inherited: 0x3c8)
struct UAresConfigurableCommonTileView : UCommonTileView {
	char pad_3C8[0x8]; // 0x3c8(0x08)
	struct FMulticastInlineDelegate BP_OnWidgetHoverChanged; // 0x3d0(0x10)
	struct FAresPaginatedListViewConfig ListViewConfiguration; // 0x3e0(0x10)
	struct FMulticastInlineDelegate BP_OnInputMethodChanged; // 0x3f0(0x10)
	char pad_400[0x10]; // 0x400(0x10)

	void SetListViewConfig(struct FAresPaginatedListViewConfig InConfig); // Function ShooterGame.AresConfigurableCommonTileView.SetListViewConfig // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36b0e20
	void SetIsScrollAnimationEnabled(bool InEnabled); // Function ShooterGame.AresConfigurableCommonTileView.SetIsScrollAnimationEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b0ce0
	void SetInternalSelectorIndex(int32_t InIndex); // Function ShooterGame.AresConfigurableCommonTileView.SetInternalSelectorIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b0c50
	void SetEntrySpacing(float InEntrySpacing); // Function ShooterGame.AresConfigurableCommonTileView.SetEntrySpacing // (Native|Public|BlueprintCallable) // @ game+0x36b0b30
	void OnInputMethodChanged(enum class ECommonInputType NewInputType); // Function ShooterGame.AresConfigurableCommonTileView.OnInputMethodChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x36b0580
	bool GetInputSubsystem(struct UCommonInputSubsystem*& OutVal); // Function ShooterGame.AresConfigurableCommonTileView.GetInputSubsystem // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x36b0140
};

// Class ShooterGame.AresConfigurableTileView
// Size: 0x30 (Inherited: 0x30)
struct UAresConfigurableTileView : UInterface {

	void SetListViewConfig(struct FAresPaginatedListViewConfig InConfig); // Function ShooterGame.AresConfigurableTileView.SetListViewConfig // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36b0d70
};

// Class ShooterGame.AresPlatformDataAsset
// Size: 0x40 (Inherited: 0x38)
struct UAresPlatformDataAsset : UPrimaryDataAsset {
	int32_t Priority; // 0x38(0x04)
	uint32_t Platforms; // 0x3c(0x04)
};

// Class ShooterGame.ContextAwareModuleGlobalsDataAsset
// Size: 0xf0 (Inherited: 0x40)
struct UContextAwareModuleGlobalsDataAsset : UAresPlatformDataAsset {
	struct TSoftClassPtr<UObject> ContextAwareModuleManagerComponentClass; // 0x40(0x30)
	struct TSoftClassPtr<UObject> ContextDetectionActorAsset; // 0x70(0x30)
	struct FSoftObjectPath TipDatabaseAssetPath; // 0xa0(0x20)
	struct TSoftClassPtr<UObject> GuidanceWidgetAsset; // 0xc0(0x30)
};

// Class ShooterGame.AresContextMenuActionBaseWidget
// Size: 0x2f0 (Inherited: 0x2c8)
struct UAresContextMenuActionBaseWidget : UUserWidget {
	char pad_2C8[0x18]; // 0x2c8(0x18)
	struct FMulticastInlineDelegate OnActionTriggered; // 0x2e0(0x10)

	void TriggerAction(); // Function ShooterGame.AresContextMenuActionBaseWidget.TriggerAction // (Final|Native|Public|BlueprintCallable) // @ game+0x36b1090
	void OnInit(struct FText& Text, struct UTexture2D* IconTexture, bool Enabled); // Function ShooterGame.AresContextMenuActionBaseWidget.OnInit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresContextMenuBaseWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresContextMenuBaseWidget : UUserWidget {
	struct UAresContextMenuActionBaseWidget* ActionWidgetClass; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnAnyActionTriggered; // 0x2d0(0x10)

	void OnActionTriggered(struct UAresContextMenuActionBaseWidget* ActionWidget); // Function ShooterGame.AresContextMenuBaseWidget.OnActionTriggered // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnActionAdded(struct UAresContextMenuActionBaseWidget* ActionWidget); // Function ShooterGame.AresContextMenuBaseWidget.OnActionAdded // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void HandleActionTriggered(struct UAresContextMenuActionBaseWidget* ActionWidget); // Function ShooterGame.AresContextMenuBaseWidget.HandleActionTriggered // (Final|Native|Protected) // @ game+0x36b0260
	struct UAresContextMenuActionBaseWidget* AddAction(struct FDelegate& Callback, struct FText Text, struct UTexture2D* IconTexture, bool Enabled); // Function ShooterGame.AresContextMenuBaseWidget.AddAction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36afcf0
};

// Class ShooterGame.AresMenuAnchor
// Size: 0x1d8 (Inherited: 0x1b8)
struct UAresMenuAnchor : UMenuAnchor {
	struct FVector2D MenuPosition; // 0x1b8(0x08)
	struct FMargin ActionPadding; // 0x1c0(0x10)
	bool AnchorOnMouse; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
};

// Class ShooterGame.AresContextMenuItemViewModel
// Size: 0xf8 (Inherited: 0x48)
struct UAresContextMenuItemViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnVisibilityStateChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnEnabledStateChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnCloseContextMenuRequested; // 0x68(0x10)
	struct FText Label; // 0x78(0x18)
	struct UTexture2D* Icon; // 0x90(0x08)
	bool bIsVisible; // 0x98(0x01)
	bool bIsEnabled; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct UPlatformPlayer* ObservedPlayer; // 0xa0(0x08)
	struct UAresContextMenuItemListViewModel* ListViewModel; // 0xa8(0x08)
	char pad_B0[0x48]; // 0xb0(0x48)

	void UnbindFromEvents(struct UPlatformPlayer* Player); // Function ShooterGame.AresContextMenuItemViewModel.UnbindFromEvents // (Native|Event|Protected|BlueprintEvent) // @ game+0x2627cd0
	void SetObservedPlayer(struct UPlatformPlayer* InObservedPlayer); // Function ShooterGame.AresContextMenuItemViewModel.SetObservedPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x36b8420
	void SetIsVisible(bool bNewValue); // Function ShooterGame.AresContextMenuItemViewModel.SetIsVisible // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b8300
	void SetIsEnabled(bool bNewValue); // Function ShooterGame.AresContextMenuItemViewModel.SetIsEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b8270
	void RefreshState(); // Function ShooterGame.AresContextMenuItemViewModel.RefreshState // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x36b8220
	void PrepareForDisposal(); // Function ShooterGame.AresContextMenuItemViewModel.PrepareForDisposal // (Native|Public|BlueprintCallable) // @ game+0x36b81f0
	bool GetIsVisible(); // Function ShooterGame.AresContextMenuItemViewModel.GetIsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7f40
	bool GetIsEnabled(); // Function ShooterGame.AresContextMenuItemViewModel.GetIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7f10
	void BindToEvents(struct UPlatformPlayer* Player); // Function ShooterGame.AresContextMenuItemViewModel.BindToEvents // (Native|Event|Protected|BlueprintEvent) // @ game+0x2627c40
};

// Class ShooterGame.AresContextMenuItemActionViewModel
// Size: 0x100 (Inherited: 0xf8)
struct UAresContextMenuItemActionViewModel : UAresContextMenuItemViewModel {
	bool bRequestCloseOnActionPerformed; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void PerformAction(); // Function ShooterGame.AresContextMenuItemActionViewModel.PerformAction // (Final|Native|Public|BlueprintCallable) // @ game+0x36b0610
	void DoPerformAction(); // Function ShooterGame.AresContextMenuItemActionViewModel.DoPerformAction // (Native|Event|Protected|BlueprintEvent) // @ game+0x2024370
};

// Class ShooterGame.AresContextMenuItemBoolViewModel
// Size: 0x128 (Inherited: 0xf8)
struct UAresContextMenuItemBoolViewModel : UAresContextMenuItemViewModel {
	struct FMulticastInlineDelegate OnValueChanged; // 0xf8(0x10)
	bool bCachedValue; // 0x108(0x01)
	char pad_109[0x1f]; // 0x109(0x1f)

	void SetCachedValue(bool bNewValue); // Function ShooterGame.AresContextMenuItemBoolViewModel.SetCachedValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b0a10
	void SetBoolValue(bool bNewValue); // Function ShooterGame.AresContextMenuItemBoolViewModel.SetBoolValue // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36b0970
	bool GetBoolValue(); // Function ShooterGame.AresContextMenuItemBoolViewModel.GetBoolValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b0100
};

// Class ShooterGame.AresContextMenuItemIntViewModel
// Size: 0x128 (Inherited: 0xf8)
struct UAresContextMenuItemIntViewModel : UAresContextMenuItemViewModel {
	struct FMulticastInlineDelegate OnValueChanged; // 0xf8(0x10)
	int32_t CachedValue; // 0x108(0x04)
	char pad_10C[0x1c]; // 0x10c(0x1c)

	void SetIntValue(int32_t NewValue); // Function ShooterGame.AresContextMenuItemIntViewModel.SetIntValue // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36b0bc0
	void SetCachedValue(int32_t NewValue); // Function ShooterGame.AresContextMenuItemIntViewModel.SetCachedValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b0aa0
	int32_t GetIntValue(); // Function ShooterGame.AresContextMenuItemIntViewModel.GetIntValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b01e0
};

// Class ShooterGame.AresContextMenuItemListDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UAresContextMenuItemListDataAsset : UPrimaryDataAsset {
	struct TArray<struct FAresContextMenuItemDefinition> Items; // 0x38(0x10)
};

// Class ShooterGame.AresContextMenuItemListViewModel
// Size: 0x110 (Inherited: 0x48)
struct UAresContextMenuItemListViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnCloseContextMenuRequested; // 0x48(0x10)
	struct FMulticastInlineDelegate OnRegularItemVisibilityChanged; // 0x58(0x10)
	struct UPlatformPlayer* ObservedPlayer; // 0x68(0x08)
	struct TArray<struct UAresContextMenuItemViewModel*> ContextMenuItems; // 0x70(0x10)
	struct TArray<struct UAresContextMenuItemViewModel*> SpacerItems; // 0x80(0x10)
	char pad_90[0x30]; // 0x90(0x30)
	struct TMap<struct UAresContextMenuItemViewModel*, struct FContextMenuItemDelegateHandles> ContextMenuItemHandles; // 0xc0(0x50)

	void SetObservedPlayer(struct FString PlayerSubject); // Function ShooterGame.AresContextMenuItemListViewModel.SetObservedPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x36b0ed0
	void RemoveContextMenuItem(struct UAresContextMenuItemViewModel* Item); // Function ShooterGame.AresContextMenuItemListViewModel.RemoveContextMenuItem // (Final|Native|Public|BlueprintCallable) // @ game+0x36b08e0
	void PrepareForDisposal(); // Function ShooterGame.AresContextMenuItemListViewModel.PrepareForDisposal // (Final|Native|Public|BlueprintCallable) // @ game+0x36aff80
	void HandleVisibilityStateChanged(struct UAresContextMenuItemViewModel* Item, bool bIsVisible); // Function ShooterGame.AresContextMenuItemListViewModel.HandleVisibilityStateChanged // (Final|Native|Private|Const) // @ game+0x36b0310
	void HandleCloseContextMenuRequested(); // Function ShooterGame.AresContextMenuItemListViewModel.HandleCloseContextMenuRequested // (Final|Native|Private|Const) // @ game+0x36b02f0
	struct UAresContextMenuItemViewModel* CreateAndAddContextMenuItem(struct UAresContextMenuItemViewModel* ViewModelClass); // Function ShooterGame.AresContextMenuItemListViewModel.CreateAndAddContextMenuItem // (Final|Native|Public|BlueprintCallable) // @ game+0x36affa0
	void ClearContextMenuItems(); // Function ShooterGame.AresContextMenuItemListViewModel.ClearContextMenuItems // (Final|Native|Public|BlueprintCallable) // @ game+0x36aff80
	void AddContextMenuItem(struct UAresContextMenuItemViewModel* Item); // Function ShooterGame.AresContextMenuItemListViewModel.AddContextMenuItem // (Final|Native|Public|BlueprintCallable) // @ game+0x36afef0
};

// Class ShooterGame.AresContextMenuItemSpacerViewModel
// Size: 0x100 (Inherited: 0xf8)
struct UAresContextMenuItemSpacerViewModel : UAresContextMenuItemViewModel {
	char pad_F8[0x8]; // 0xf8(0x08)
};

// Class ShooterGame.AresContextMenuItemWidget
// Size: 0x308 (Inherited: 0x300)
struct UAresContextMenuItemWidget : UAresCommonUserWidget {
	struct UAresContextMenuItemViewModel* ContextMenuItemViewModel; // 0x300(0x08)
};

// Class ShooterGame.PureEffectInstance
// Size: 0x40 (Inherited: 0x30)
struct UPureEffectInstance : UObject {
	struct AEffectContainer* PureInstance; // 0x30(0x08)
	struct UWorld* World; // 0x38(0x08)
};

// Class ShooterGame.AresTracerInstanceInterface
// Size: 0x178 (Inherited: 0x40)
struct UAresTracerInstanceInterface : UPureEffectInstance {
	struct UObject* Context; // 0x40(0x08)
	bool bHasStarted; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float CreationTime; // 0x4c(0x04)
	float RemainingLifeSpan; // 0x50(0x04)
	struct FVector Location; // 0x54(0x0c)
	struct UParticleSystem* OverrideBeamTemplate; // 0x60(0x08)
	struct UParticleSystemComponent* BeamComponent; // 0x68(0x08)
	struct FEffectData EffectData; // 0x70(0x58)
	struct FHitResult EndHitResult; // 0xc8(0x90)
	struct FVector BeamDirectionNormalized; // 0x158(0x0c)
	struct FVector AdjustedStartLocation; // 0x164(0x0c)
	float ImpactDistance; // 0x170(0x04)
	enum class EAresImpactOrder ImpactOrder; // 0x174(0x01)
	bool bCollapsed; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
};

// Class ShooterGame.AresContrailTracerInstance
// Size: 0x180 (Inherited: 0x178)
struct UAresContrailTracerInstance : UAresTracerInstanceInterface {
	float LastTickTime; // 0x178(0x04)
	bool bFiredWhileZoomed; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
};

// Class ShooterGame.EffectContainer
// Size: 0x550 (Inherited: 0x3d8)
struct AEffectContainer : AActor {
	char pad_3D8[0x10]; // 0x3d8(0x10)
	struct UFXCTypePool* Pool; // 0x3e8(0x08)
	struct FEffectID EffectID; // 0x3f0(0x20)
	struct FEffectData EffectData; // 0x410(0x58)
	struct FMulticastInlineDelegate OnStartEffect; // 0x468(0x10)
	struct FMulticastInlineDelegate OnUpdateEffectPerspective; // 0x478(0x10)
	struct FMulticastInlineDelegate OnEffectDataUpdated; // 0x488(0x10)
	struct FMulticastInlineDelegate OnStopEffect; // 0x498(0x10)
	struct FMulticastInlineDelegate OnResetEffect; // 0x4a8(0x10)
	enum class EEffectAttachType AttachType; // 0x4b8(0x01)
	bool bObeyOwnerHidden; // 0x4b9(0x01)
	enum class EMovementSyncType MovementSyncType; // 0x4ba(0x01)
	bool bPureEffect; // 0x4bb(0x01)
	enum class ESpawnEffectType SpawnType; // 0x4bc(0x01)
	bool bCosmeticEffect; // 0x4bd(0x01)
	bool bForceOneShotEffect; // 0x4be(0x01)
	char pad_4BF[0x1]; // 0x4bf(0x01)
	float ReplayEffectOffsetTime; // 0x4c0(0x04)
	char pad_4C4[0x1]; // 0x4c4(0x01)
	bool bCurrentPerspectiveIsFirstPerson; // 0x4c5(0x01)
	char pad_4C6[0x2]; // 0x4c6(0x02)
	float EffectTailTime; // 0x4c8(0x04)
	char pad_4CC[0x5c]; // 0x4cc(0x5c)
	struct AEffectContainer* PureEffectInstance; // 0x528(0x08)
	char pad_530[0x8]; // 0x530(0x08)
	struct UEffectManagerComponent* OwningManager; // 0x538(0x08)
	struct AActor* OriginalTarget; // 0x540(0x08)
	char pad_548[0x8]; // 0x548(0x08)

	void UpdateEffectPerspective(float CurrentTime, bool FirstPerson); // Function ShooterGame.EffectContainer.UpdateEffectPerspective // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void StopEffect(enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectContainer.StopEffect // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void StartPlacedEffectContainer(); // Function ShooterGame.EffectContainer.StartPlacedEffectContainer // (Final|Native|Private) // @ game+0x38a1270
	void StartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.EffectContainer.StartEffect // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ResetEffect(); // Function ShooterGame.EffectContainer.ResetEffect // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void PerspectiveChanged(struct AShooterCharacter* Character); // Function ShooterGame.EffectContainer.PerspectiveChanged // (Final|Native|Private) // @ game+0x38a10f0
	void OwnerHiddenChanged(struct AActor* Actor); // Function ShooterGame.EffectContainer.OwnerHiddenChanged // (Final|Native|Private) // @ game+0x38a1060
	void OnMontageStartedByCosmeticFXC(struct UAnimMontage* Montage); // Function ShooterGame.EffectContainer.OnMontageStartedByCosmeticFXC // (Final|Native|Private) // @ game+0x3634e00
	void K2_OnAssetsLoaded(int32_t AssetTypes); // Function ShooterGame.EffectContainer.K2_OnAssetsLoaded // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void K2_GetPreloadAssetPaths(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.EffectContainer.K2_GetPreloadAssetPaths // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38a0ce0
	bool HasStopped(); // Function ShooterGame.EffectContainer.HasStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38a0cb0
	void GetPreloadAssetPathsOnContainer(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.EffectContainer.GetPreloadAssetPathsOnContainer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	float GetElapsedEffectTime(); // Function ShooterGame.EffectContainer.GetElapsedEffectTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38a0c50
	void EquippablePerspectiveChanged(struct AAresEquippable* Equippable, bool bFirstPersonVisible, bool bThirdPersonVisible); // Function ShooterGame.EffectContainer.EquippablePerspectiveChanged // (Final|Native|Private) // @ game+0x38a0b00
	void EffectDataUpdated(); // Function ShooterGame.EffectContainer.EffectDataUpdated // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct UAresAudioComponent* CreateReusableAudioComponent(); // Function ShooterGame.EffectContainer.CreateReusableAudioComponent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x38a0ad0
	void AddTailTime(float TailTime); // Function ShooterGame.EffectContainer.AddTailTime // (Final|Native|Public|BlueprintCallable) // @ game+0x38a0960
	void AbortEffect(); // Function ShooterGame.EffectContainer.AbortEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x38a0940
};

// Class ShooterGame.AresTracerInterface
// Size: 0x650 (Inherited: 0x550)
struct AAresTracerInterface : AEffectContainer {
	struct UAresTracerInstanceInterface* InstanceClass; // 0x548(0x08)
	struct FVector AdjustedStartLocation; // 0x550(0x0c)
	struct FVector BeamDirectionNormalized; // 0x55c(0x0c)
	struct FName TracerBeamIntensityParameterName; // 0x568(0x0c)
	struct UParticleSystemComponent* BeamComponent; // 0x578(0x08)
	struct TArray<int32_t> BeamEmitterIndices; // 0x580(0x10)
	float InitialSpeed; // 0x590(0x04)
	bool bSyncBeamComponentTransform; // 0x594(0x01)
	float ImpactDistance; // 0x598(0x04)
	float AdjustForwardDistance; // 0x59c(0x04)
	float PostImpactLife; // 0x5a0(0x04)
	bool bPlayImpactForHitCharacters; // 0x5a4(0x01)
	bool bCollapsed; // 0x5a5(0x01)
	bool bAutoDisableCollisionOnImpact; // 0x5a6(0x01)
	struct FHitResult EndHitResult; // 0x5a8(0x90)
	struct TArray<struct UAresTracerComponent*> TracerComponents; // 0x638(0x10)
	char pad_648[0x8]; // 0x648(0x08)

	void TracerStartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.AresTracerInterface.TracerStartEffect // (Native|Public) // @ game+0x37b46e0
	void TracerResetEffect(); // Function ShooterGame.AresTracerInterface.TracerResetEffect // (Native|Public) // @ game+0x37b46b0
	void Tick(float DeltaSeconds); // Function ShooterGame.AresTracerInterface.Tick // (Native|Public) // @ game+0x3690ff0
	void OnStartTracer(); // Function ShooterGame.AresTracerInterface.OnStartTracer // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void NotifyImpact(struct FHitResult& HitResult); // Function ShooterGame.AresTracerInterface.NotifyImpact // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	float GetTracerTraveledDistance(); // Function ShooterGame.AresTracerInterface.GetTracerTraveledDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1420
	float GetTracerIntensityFalloff(); // Function ShooterGame.AresTracerInterface.GetTracerIntensityFalloff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b13f0
	float GetTracerAliveTime(); // Function ShooterGame.AresTracerInterface.GetTracerAliveTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b13c0
};

// Class ShooterGame.AresContrailTracer
// Size: 0x650 (Inherited: 0x650)
struct AAresContrailTracer : AAresTracerInterface {
	float LastTickTime; // 0x648(0x04)
};

// Class ShooterGame.CoreGlobalsDataAsset
// Size: 0x58 (Inherited: 0x40)
struct UCoreGlobalsDataAsset : UAresPlatformDataAsset {
	struct UAresClientGameInstance* GameInstanceClass; // 0x40(0x08)
	struct UCurveFloat* ClientFramerateInstabilityThresholdCurve; // 0x48(0x08)
	struct UCurveFloat* ClientFramerateInstabilityCriticalThresholdCurve; // 0x50(0x08)
};

// Class ShooterGame.AresCustomizationPackInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresCustomizationPackInterface : UInterface {
};

// Class ShooterGame.AresCycleSettingClickablePanel
// Size: 0x10a8 (Inherited: 0x1070)
struct UAresCycleSettingClickablePanel : UAresSettingClickablePanel {
	struct FMulticastInlineDelegate OnTextOptionsChanged; // 0x1070(0x10)
	struct FMulticastInlineDelegate OnNumberOfOptionsChanged; // 0x1080(0x10)
	char pad_1090[0x18]; // 0x1090(0x18)

	void SetOptionTexts(struct TArray<struct FText>& NewOptions); // Function ShooterGame.AresCycleSettingClickablePanel.SetOptionTexts // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x36b84b0
	void SetNumberOfOptions(int32_t NewNumberOfOptions); // Function ShooterGame.AresCycleSettingClickablePanel.SetNumberOfOptions // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b8390
	void RefreshViewFromViewModel(); // Function ShooterGame.AresCycleSettingClickablePanel.RefreshViewFromViewModel // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b8250
};

// Class ShooterGame.AresCycleIntSettingClickablePanel
// Size: 0x10c8 (Inherited: 0x10a8)
struct UAresCycleIntSettingClickablePanel : UAresCycleSettingClickablePanel {
	struct USettingsIntViewModel* IntSettingViewModel; // 0x10a8(0x08)
	struct FMulticastInlineDelegate OnCurrentSettingValueChanged; // 0x10b0(0x10)
	char pad_10C0[0x8]; // 0x10c0(0x08)

	void SetSettingsValue(int32_t NewValue); // Function ShooterGame.AresCycleIntSettingClickablePanel.SetSettingsValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b85c0
	void OnSettingValueChanged(int32_t NewValue); // Function ShooterGame.AresCycleIntSettingClickablePanel.OnSettingValueChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x36b80b0
	struct USettingsIntViewModel* GetSettingOptionViewModelAsIntViewModel(); // Function ShooterGame.AresCycleIntSettingClickablePanel.GetSettingOptionViewModelAsIntViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3687190
};

// Class ShooterGame.AresCycleStringSettingClickablePanel
// Size: 0x10d0 (Inherited: 0x10a8)
struct UAresCycleStringSettingClickablePanel : UAresCycleSettingClickablePanel {
	struct USettingsStringViewModel* SettingsStringViewModel; // 0x10a8(0x08)
	struct FMulticastInlineDelegate OnCurrentSettingValueChanged; // 0x10b0(0x10)
	char pad_10C0[0x10]; // 0x10c0(0x10)

	void SetSettingsValue(struct FString NewValue); // Function ShooterGame.AresCycleStringSettingClickablePanel.SetSettingsValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x36b8650
	void OnSettingValueChanged(struct FString NewValue); // Function ShooterGame.AresCycleStringSettingClickablePanel.OnSettingValueChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x36b8140
	struct USettingsStringViewModel* GetSettingOptionViewModelAsStringViewModel(); // Function ShooterGame.AresCycleStringSettingClickablePanel.GetSettingOptionViewModelAsStringViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3687190
};

// Class ShooterGame.DebugInformation
// Size: 0x30 (Inherited: 0x30)
struct UDebugInformation : UInterface {
};

// Class ShooterGame.DebugDamageReport
// Size: 0x30 (Inherited: 0x30)
struct UDebugDamageReport : UInterface {
};

// Class ShooterGame.AresDelegates
// Size: 0x30 (Inherited: 0x30)
struct UAresDelegates : UObject {
};

// Class ShooterGame.AresDetachedTracerInstance
// Size: 0x188 (Inherited: 0x178)
struct UAresDetachedTracerInstance : UAresTracerInstanceInterface {
	float LastTickTime; // 0x178(0x04)
	bool bImpacted; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float EndDistance; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
};

// Class ShooterGame.AresDetachedTracer
// Size: 0x670 (Inherited: 0x650)
struct AAresDetachedTracer : AAresTracerInterface {
	struct TArray<float> IntensityCycleArray; // 0x648(0x10)
	float BeamLength; // 0x658(0x04)
	float LastTickTime; // 0x65c(0x04)
	bool bImpacted; // 0x660(0x01)
	float EndDistance; // 0x664(0x04)
	char pad_66D[0x3]; // 0x66d(0x03)
};

// Class ShooterGame.AresUIScreen
// Size: 0x78 (Inherited: 0x30)
struct UAresUIScreen : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	enum class EUIChannel Channel; // 0x48(0x01)
	bool bWidgetsCreated; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	int32_t ViewportZOrder; // 0x4c(0x04)
	char pad_50[0x20]; // 0x50(0x20)
	bool bCreateWidgetDefaultOverlayContainer; // 0x70(0x01)
	enum class EAresScreenVibility Visibility; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)

	void TickActive(); // Function ShooterGame.AresUIScreen.TickActive // (Native|Public) // @ game+0x36b81f0
	void TakeFocus(); // Function ShooterGame.AresUIScreen.TakeFocus // (Native|Public) // @ game+0x20096f0
	void SetVisiblity(enum class EAresScreenVibility NewVisiblity); // Function ShooterGame.AresUIScreen.SetVisiblity // (Final|Native|Public) // @ game+0x37bb800
	void RemoveFromChannel(); // Function ShooterGame.AresUIScreen.RemoveFromChannel // (Final|Native|Public) // @ game+0x37bb470
	void OnVisibilityUpdate(enum class EAresScreenVibility OldVisiblity, enum class EAresScreenVibility NewVisiblity); // Function ShooterGame.AresUIScreen.OnVisibilityUpdate // (Native|Public) // @ game+0x37bb350
	bool IsVisible(); // Function ShooterGame.AresUIScreen.IsVisible // (Final|Native|Public|Const) // @ game+0x37bb140
	struct UAresUIManager* GetUIManager(); // Function ShooterGame.AresUIScreen.GetUIManager // (Final|Native|Public|Const) // @ game+0x37ba720
	bool GetShowMouseCursor(); // Function ShooterGame.AresUIScreen.GetShowMouseCursor // (Native|Public|Const) // @ game+0x36a0d20
	bool GetGiveGameFocus(); // Function ShooterGame.AresUIScreen.GetGiveGameFocus // (Native|Public|Const) // @ game+0x36a0730
	struct UGameViewportClient* GetGameViewport(); // Function ShooterGame.AresUIScreen.GetGameViewport // (Final|Native|Public|Const) // @ game+0x37ba5c0
	enum class EUIChannel GetChannel(); // Function ShooterGame.AresUIScreen.GetChannel // (Final|Native|Public|Const) // @ game+0x37ba590
	struct AAresPlayerController* GetAresController(); // Function ShooterGame.AresUIScreen.GetAresController // (Final|Native|Public|Const) // @ game+0x37ba560
	void DestroyWidgets(); // Function ShooterGame.AresUIScreen.DestroyWidgets // (Native|Public) // @ game+0x288aab0
	void CreateWidgets(); // Function ShooterGame.AresUIScreen.CreateWidgets // (Native|Public) // @ game+0x37ba530
};

// Class ShooterGame.AresDeveloperMenuScreen
// Size: 0x78 (Inherited: 0x78)
struct UAresDeveloperMenuScreen : UAresUIScreen {
};

// Class ShooterGame.AresDeveloperSettings
// Size: 0x30 (Inherited: 0x30)
struct UAresDeveloperSettings : UObject {
};

// Class ShooterGame.GameObject
// Size: 0x410 (Inherited: 0x3d8)
struct AGameObject : AActor {
	struct UMeshComponent* Mesh; // 0x3d8(0x08)
	struct URoundPersistenceComponent* Persistence; // 0x3e0(0x08)
	bool Invulnerable; // 0x3e8(0x01)
	bool bIgnoreFriendlyFireModifiers; // 0x3e9(0x01)
	bool bIgnoreFriendlyFireModifiersForInstigator; // 0x3ea(0x01)
	bool bPlayImpactEffects; // 0x3eb(0x01)
	float PostDeathLifespan; // 0x3ec(0x04)
	enum class EAresTeamTargeting CanBeTeleportedFilter; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
	struct UDamageableComponent* DamageHandler; // 0x3f8(0x08)
	struct UChildDamageSectionComponent* HealthSection; // 0x400(0x08)
	struct UPlayspaceVisibilityComponent* PlayspaceVisibility; // 0x408(0x08)

	void ReceiveServerPreDie(struct UDamageResponse* Response, struct AController* Killer); // Function ShooterGame.GameObject.ReceiveServerPreDie // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	bool OnCrushed(struct AActor* CrushingObject, float CrushDamage); // Function ShooterGame.GameObject.OnCrushed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAuthRoundEnd(); // Function ShooterGame.GameObject.OnAuthRoundEnd // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAuthRoundBegin(); // Function ShooterGame.GameObject.OnAuthRoundBegin // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool IsAlive(); // Function ShooterGame.GameObject.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39357f0
	void HandleOnDeath(struct UDamageResponse* Response); // Function ShooterGame.GameObject.HandleOnDeath // (Final|Native|Protected) // @ game+0x3935760
	void HandleOnDamaged(struct UDamageResponse* Response); // Function ShooterGame.GameObject.HandleOnDamaged // (Final|Native|Protected) // @ game+0x3634e00
	float GetShield(); // Function ShooterGame.GameObject.GetShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3935730
	enum class EAresRegionalDamage GetRegionalDamage(struct FHitResult& HitResult); // Function ShooterGame.GameObject.GetRegionalDamage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3935640
	float GetMaxShield(); // Function ShooterGame.GameObject.GetMaxShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3935560
	float GetMaxHealth(); // Function ShooterGame.GameObject.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3935560
	float GetHealth(); // Function ShooterGame.GameObject.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39353b0
	bool CanBeTeleported(struct AShooterCharacter* TeleportInstigator); // Function ShooterGame.GameObject.CanBeTeleported // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3935060
	void AuthRoundEnd(); // Function ShooterGame.GameObject.AuthRoundEnd // (Native|Public) // @ game+0x372ddf0
	void AuthRoundBegin(); // Function ShooterGame.GameObject.AuthRoundBegin // (Native|Public) // @ game+0x37b46b0
	bool AuthGameObjectCrushed(struct AActor* CrushingObject, float CrushDamage); // Function ShooterGame.GameObject.AuthGameObjectCrushed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3934f90
};

// Class ShooterGame.AresDoor
// Size: 0x438 (Inherited: 0x410)
struct AAresDoor : AGameObject {
	bool bResetOnRound; // 0x410(0x01)
	enum class EAresInitialDoorState InitialDoorState; // 0x411(0x01)
	char pad_412[0x2]; // 0x412(0x02)
	float DoorSpeed; // 0x414(0x04)
	float DoorOpenTime; // 0x418(0x04)
	float DoorCloseTime; // 0x41c(0x04)
	float LocalDoorPos; // 0x420(0x04)
	float PreviousLocalDoorPos; // 0x424(0x04)
	struct FAresDoorStatus DoorStatus; // 0x428(0x02)
	char pad_42A[0x2]; // 0x42a(0x02)
	float DoorOpenStartTime; // 0x42c(0x04)
	float DoorCloseStartTime; // 0x430(0x04)
	bool bMovementSynchronized; // 0x434(0x01)
	char pad_435[0x3]; // 0x435(0x03)

	void UpdateDoorStatus(struct FAresDoorStatus& PreviousDoorStatus, bool bNotifyDoorStateChanged); // Function ShooterGame.AresDoor.UpdateDoorStatus // (Final|Native|Private|HasOutParms) // @ game+0x36b8700
	void Tick(float DeltaSeconds); // Function ShooterGame.AresDoor.Tick // (Native|Public) // @ game+0x3690ff0
	void OnRep_DoorStatus(struct FAresDoorStatus PreviousDoorStatus); // Function ShooterGame.AresDoor.OnRep_DoorStatus // (Final|Native|Private) // @ game+0x36b8030
	void OnDoorMoved(float TimeElapsed, float DoorPos); // Function ShooterGame.AresDoor.OnDoorMoved // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool IsOpenOrOpening(); // Function ShooterGame.AresDoor.IsOpenOrOpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7fd0
	bool IsOpeningOrClosing(); // Function ShooterGame.AresDoor.IsOpeningOrClosing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b8000
	bool IsClosedOrClosing(); // Function ShooterGame.AresDoor.IsClosedOrClosing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7fa0
	float GetLocalPos(); // Function ShooterGame.AresDoor.GetLocalPos // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7f70
	enum class EAresDoorState GetDoorState(); // Function ShooterGame.AresDoor.GetDoorState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7ee0
	float GetDeterministicDoorPosAtTime(float CurrentMovementTimestamp); // Function ShooterGame.AresDoor.GetDeterministicDoorPosAtTime // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7e40
	void DoorStateChanged(enum class EAresDoorState NewState, enum class EAresDoorState OldState, enum class EAresDoorTransition Transition); // Function ShooterGame.AresDoor.DoorStateChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthStartOpen(); // Function ShooterGame.AresDoor.AuthStartOpen // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthStartClose(); // Function ShooterGame.AresDoor.AuthStartClose // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthSetDoorStatus(enum class EAresDoorState NewState, enum class EAresDoorTransition NewTransition); // Function ShooterGame.AresDoor.AuthSetDoorStatus // (Final|Native|Private) // @ game+0x36b7d70
	void AuthSetDoorSpeed(float NewSpeed); // Function ShooterGame.AresDoor.AuthSetDoorSpeed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthResetDoor(); // Function ShooterGame.AresDoor.AuthResetDoor // (Final|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.AresDPICustomScalingRule
// Size: 0x40 (Inherited: 0x30)
struct UAresDPICustomScalingRule : UDPICustomScalingRule {
	int32_t CustomReferenceScreenDensity; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class ShooterGame.Projectile
// Size: 0x510 (Inherited: 0x3d8)
struct AProjectile : AActor {
	char pad_3D8[0x8]; // 0x3d8(0x08)
	struct FMulticastInlineDelegate OnTeleported; // 0x3e0(0x10)
	bool bIsDisarmed; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
	struct FMulticastInlineDelegate OnDisarmed; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnEntranceHitEvent; // 0x408(0x10)
	struct FMulticastInlineDelegate OnExitHitEvent; // 0x418(0x10)
	struct FMulticastInlineDelegate OnStopEvent; // 0x428(0x10)
	char pad_438[0x30]; // 0x438(0x30)
	struct FMulticastInlineDelegate OnMaximumRangeReachedEvent; // 0x468(0x10)
	bool bShouldAlwaysCollideWithAllies; // 0x478(0x01)
	bool bIgnoreFriendlyFireModifiers; // 0x479(0x01)
	bool bSimulation; // 0x47a(0x01)
	bool bIsReusable; // 0x47b(0x01)
	bool bUseProjectilePooling; // 0x47c(0x01)
	bool bIsCleanedUpForReuse; // 0x47d(0x01)
	bool bIsBeingReused; // 0x47e(0x01)
	char pad_47F[0x1]; // 0x47f(0x01)
	float InitializedForUseTimestamp; // 0x480(0x04)
	float SpeedScale; // 0x484(0x04)
	float DefaultDestroyDelay; // 0x488(0x04)
	enum class EProjectileSimulation ProjectileSimulationRule; // 0x48c(0x01)
	enum class EProjectileStopAction ProjectileStopAction; // 0x48d(0x01)
	char pad_48E[0x2]; // 0x48e(0x02)
	float DestroyDelay; // 0x490(0x04)
	char pad_494[0xc]; // 0x494(0x0c)
	struct USceneComponent* CollisionComponent; // 0x4a0(0x08)
	struct UDamageIDComponent* DamageIDComponent; // 0x4a8(0x08)
	int32_t CreationRandomSeed; // 0x4b0(0x04)
	enum class EProjectilePerspective Perspective; // 0x4b4(0x01)
	char pad_4B5[0xb]; // 0x4b5(0x0b)
	struct FTransform CreationTransform; // 0x4c0(0x30)
	struct TWeakObjectPtr<struct AOwnerExclusivePlayerInfo> InstigatorPlayerInfo; // 0x4f0(0x08)
	struct TWeakObjectPtr<struct AShooterPlayerState> FiringPlayerState; // 0x4f8(0x08)
	struct UPlayspaceVisibilityComponent* PlayspaceVisibility; // 0x500(0x08)
	bool bNormalizeImpartedVelocity; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)

	void StopProjectile(); // Function ShooterGame.Projectile.StopProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9ffb0
	void StartProjectile(); // Function ShooterGame.Projectile.StartProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9ff90
	void SetCollisionComponent(struct USceneComponent* SceneComponent); // Function ShooterGame.Projectile.SetCollisionComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9fcd0
	void ProcessDestroyOrPooling(); // Function ShooterGame.Projectile.ProcessDestroyOrPooling // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9f980
	void PostInitializeComponents(); // Function ShooterGame.Projectile.PostInitializeComponents // (Native|Public) // @ game+0x373b8f0
	void MulticastStopProjectile(); // Function ShooterGame.Projectile.MulticastStopProjectile // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x373aa20
	void MulticastStartProjectile(); // Function ShooterGame.Projectile.MulticastStartProjectile // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x37b46b0
	void MulticastInitializeForUse(struct FTransform SpawnTransform, struct AActor* NewOwner, struct APawn* NewInstigator); // Function ShooterGame.Projectile.MulticastInitializeForUse // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x3a9f7f0
	void MulticastCleanupForPooling(); // Function ShooterGame.Projectile.MulticastCleanupForPooling // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x372ddf0
	enum class EProjectilePerspective GetPerspective(); // Function ShooterGame.Projectile.GetPerspective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f1c0
	struct AOwnerExclusivePlayerInfo* GetInstigatorPlayerInfo(); // Function ShooterGame.Projectile.GetInstigatorPlayerInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f180
	float GetGameTimeSinceInitializedForUse(); // Function ShooterGame.Projectile.GetGameTimeSinceInitializedForUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f150
	struct AShooterPlayerState* GetFiringPlayerState(); // Function ShooterGame.Projectile.GetFiringPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f120
	struct FTransform GetCreationTransform(); // Function ShooterGame.Projectile.GetCreationTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f0e0
	int32_t GetCreationRandomSeed(); // Function ShooterGame.Projectile.GetCreationRandomSeed // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f0b0
	struct FVector GetCreationLocation(); // Function ShooterGame.Projectile.GetCreationLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f070
	struct USceneComponent* GetCollisionComponent(); // Function ShooterGame.Projectile.GetCollisionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f370
	void FireStandaloneProjectile(struct AProjectile* ProjectileFired, struct FVector& FiringLocation, struct FVector& FiringDirection, float SpeedScale, struct AShooterCharacter* ProjectileInstigator, enum class ETracerOption TracerOption, enum class EImpactEffectsOption ImpactEffectsOption, enum class EProjectilePerspective ProjectilePerspective, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, bool bUseRewinding); // Function ShooterGame.Projectile.FireStandaloneProjectile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a9ed00
	struct TArray<struct AProjectile*> FireProjectiles(struct AProjectile* ProjectileFired, struct FVector& FiringLocation, struct FVector& FiringDirection, float SpeedScale, int32_t NumProjectilesToCreate, float ErrorDegrees, float ErrorPower, int32_t ErrorRetries, int32_t RandomSeed, struct UObject* WorldContextObject, struct AActor* ProjectileOwner, enum class ETracerOption TracerOption, enum class EImpactEffectsOption ImpactEffectsOption, enum class EProjectilePerspective ProjectilePerspective, struct TArray<struct AActor*>& IgnoredActors, bool bShouldNormalizeImpartedVelocity, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, struct AOwnerExclusivePlayerInfo* InstigatorPlayerInfo, struct AShooterPlayerState* FiringPlayerState, bool bUseRewinding, int32_t GroupDamageID); // Function ShooterGame.Projectile.FireProjectiles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a9e670
	struct TArray<struct AProjectile*> FireMultipleProjectiles(struct AProjectile* ProjectileFired, struct TArray<struct FTransform> FiringTransforms, float SpeedScale, struct UObject* WorldContextObject, struct AAresEquippable* FiringEquippable, enum class ETracerOption TracerOption, enum class EImpactEffectsOption ImpactEffectsOption, enum class EProjectilePerspective ProjectilePerspective, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, struct AOwnerExclusivePlayerInfo* InstigatorPlayerInfo, struct AShooterPlayerState* FiringPlayerState, bool bUseRewinding); // Function ShooterGame.Projectile.FireMultipleProjectiles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3a9e1e0
	void DisarmProjectile(); // Function ShooterGame.Projectile.DisarmProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9e1c0
	void AddIgnoredActor(struct AActor* Actor); // Function ShooterGame.Projectile.AddIgnoredActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9de20
};

// Class ShooterGame.AresDroppedEquippable
// Size: 0x530 (Inherited: 0x510)
struct AAresDroppedEquippable : AProjectile {
	char pad_510[0x8]; // 0x510(0x08)
	struct AAresEquippable* MyEquippable; // 0x518(0x08)
	struct AShooterCharacter* LastOwner; // 0x520(0x08)
	bool bIsSilentDrop; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)

	void AuthInitialize(struct AAresEquippable* DroppedEquippable, struct FVector DropVector); // Function ShooterGame.AresDroppedEquippable.AuthInitialize // (BlueprintAuthorityOnly|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void AuthEquippableRemoved(); // Function ShooterGame.AresDroppedEquippable.AuthEquippableRemoved // (Final|Native|Private) // @ game+0x2024060
	void AuthEquippableOwnerChanged(struct AAresEquippable* Equippable, struct AActor* EquippableOwner); // Function ShooterGame.AresDroppedEquippable.AuthEquippableOwnerChanged // (Final|Native|Private) // @ game+0x3669300
	void AuthEquippableDestroyed(struct AActor* Equippable); // Function ShooterGame.AresDroppedEquippable.AuthEquippableDestroyed // (Final|Native|Private) // @ game+0x3634e00
};

// Class ShooterGame.AresEditControls
// Size: 0x318 (Inherited: 0x2c8)
struct UAresEditControls : UUserWidget {
	struct TMap<struct UObject*, struct FEditControlsWidgetList> CustomWidgetPool; // 0x2c8(0x50)

	void ReleaseCustomWidgetToPool(struct UUserWidget* Widget); // Function ShooterGame.AresEditControls.ReleaseCustomWidgetToPool // (Final|Native|Public|BlueprintCallable) // @ game+0x36c5f60
	struct UUserWidget* GetOrCreateCustomWidgetFromPool(struct UUserWidget* WidgetClass); // Function ShooterGame.AresEditControls.GetOrCreateCustomWidgetFromPool // (Final|Native|Public|BlueprintCallable) // @ game+0x36c46e0
	struct UAresEditControls* GetEditControlsMobile(struct UObject* WorldContextObject); // Function ShooterGame.AresEditControls.GetEditControlsMobile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36c4370
};

// Class ShooterGame.AresEjectable
// Size: 0x530 (Inherited: 0x3d8)
struct AAresEjectable : AActor {
	enum class EEjectableType EjectableType; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float MaxSpawnDistance; // 0x3dc(0x04)
	bool bUseSocketVelocityIn1P; // 0x3e0(0x01)
	bool bUseSocketRotationalVelocityIn1P; // 0x3e1(0x01)
	char pad_3E2[0x2]; // 0x3e2(0x02)
	float RotationalVelocityAxisSnapAmount; // 0x3e4(0x04)
	int32_t NumBounces; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x3f0(0x08)
	struct UBoxComponent* CollisionComponent; // 0x3f8(0x08)
	float RandomMinEjectSpeed; // 0x400(0x04)
	float RandomMaxEjectSpeed; // 0x404(0x04)
	struct FVector RandomVelocityConeDirection; // 0x408(0x0c)
	float RandomVelocityConeAngleHorizontal; // 0x414(0x04)
	float RandomVelocityConeAngleVertical; // 0x418(0x04)
	float RandomVelocitySpread; // 0x41c(0x04)
	float RotationalRandomness; // 0x420(0x04)
	int32_t MaxBounces; // 0x424(0x04)
	float PostProjectileStopIdleTime; // 0x428(0x04)
	float FadeOutTime; // 0x42c(0x04)
	struct UAkAudioEvent* BounceEvent; // 0x430(0x08)
	float MinBounceSpeedToPlaySound[0x24]; // 0x438(0x90)
	bool bStopPreviousBounceSound; // 0x4c8(0x01)
	char pad_4C9[0x3]; // 0x4c9(0x03)
	struct FName NumBouncesParameterName; // 0x4cc(0x0c)
	struct FName BounceSpeedParameterName; // 0x4d8(0x0c)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct TArray<struct FVector> RestNormals; // 0x4e8(0x10)
	bool bAlignToSurfaceOnFirstBounce; // 0x4f8(0x01)
	bool bAlignToSurfaceOnStop; // 0x4f9(0x01)
	char pad_4FA[0x6]; // 0x4fa(0x06)
	struct UAresAudioComponent* PreviousBounceSoundComponent; // 0x500(0x08)
	struct UAresEjectablePool* EjectablePool; // 0x508(0x08)
	struct UMaterialInterface* CurrentOverrideMaterial1P; // 0x510(0x08)
	struct UMaterialInterface* CurrentOverrideMaterial3P; // 0x518(0x08)
	struct UStaticMesh* CurrentOverrideMesh1P; // 0x520(0x08)
	struct UStaticMesh* CurrentOverrideMesh3P; // 0x528(0x08)

	int32_t GetNumBounces(); // Function ShooterGame.AresEjectable.GetNumBounces // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c46b0
	float GetCurrentOpacityValue(); // Function ShooterGame.AresEjectable.GetCurrentOpacityValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4220
	struct UBoxComponent* GetCollisionComponent(); // Function ShooterGame.AresEjectable.GetCollisionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f430
	void EventSpawned(); // Function ShooterGame.AresEjectable.EventSpawned // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventOverrideMesh(struct UStaticMesh* OverrideMesh1P, struct UStaticMesh* OverrideMesh3P); // Function ShooterGame.AresEjectable.EventOverrideMesh // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventOverrideMaterial(struct UMaterialInterface* OverrideMaterial1P, struct UMaterialInterface* OverrideMaterial3P); // Function ShooterGame.AresEjectable.EventOverrideMaterial // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventOverride3PMesh(struct UStaticMesh* OverrideMesh); // Function ShooterGame.AresEjectable.EventOverride3PMesh // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventOverride3PMaterial(struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.AresEjectable.EventOverride3PMaterial // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventOverride1PMesh(struct UStaticMesh* OverrideMesh); // Function ShooterGame.AresEjectable.EventOverride1PMesh // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventOverride1PMaterial(struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.AresEjectable.EventOverride1PMaterial // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventDespawned(); // Function ShooterGame.AresEjectable.EventDespawned // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EventApplyRotationalVelocity(struct FRotator& rotRate); // Function ShooterGame.AresEjectable.EventApplyRotationalVelocity // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void ClientOnStop(struct FHitResult& HitResult); // Function ShooterGame.AresEjectable.ClientOnStop // (Final|Native|Protected|HasOutParms) // @ game+0x36c3be0
	void ClientOnBounce(struct FHitResult& HitResult, struct FVector& PreBounceVelocity); // Function ShooterGame.AresEjectable.ClientOnBounce // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x36c3ac0
};

// Class ShooterGame.AresEjectablePool
// Size: 0x78 (Inherited: 0x30)
struct UAresEjectablePool : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct AAresEjectable*> FreeEjectables; // 0x48(0x10)
	struct UMaterialInterface* CurrentOverrideMaterial1P; // 0x58(0x08)
	struct UMaterialInterface* CurrentOverrideMaterial3P; // 0x60(0x08)
	struct UStaticMesh* CurrentOverrideMesh1P; // 0x68(0x08)
	struct UStaticMesh* CurrentOverrideMesh3P; // 0x70(0x08)
};

// Class ShooterGame.AresItem
// Size: 0x448 (Inherited: 0x3d8)
struct AAresItem : AActor {
	int32_t MaximumAmount; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct FMulticastInlineDelegate AuthItemOnSetOwner; // 0x3e0(0x10)
	struct FMulticastInlineDelegate ItemOnSetOwner; // 0x3f0(0x10)
	struct URoundPersistenceComponent* Persistence; // 0x400(0x08)
	struct UReplicationSleepComponent* ReplicationSleepComponent; // 0x408(0x08)
	enum class EAresItemSlot EquippableSlot; // 0x410(0x01)
	bool bShouldShowInStore; // 0x411(0x01)
	char pad_412[0x6]; // 0x412(0x06)
	struct AShooterCharacter* MyPawn; // 0x418(0x08)
	enum class EEquippableInInventory InInventory; // 0x420(0x01)
	char pad_421[0x7]; // 0x421(0x07)
	struct FString AuthOriginalOwnerId; // 0x428(0x10)
	struct TWeakObjectPtr<struct UAresBasePrimaryDataAsset> CachedDataAsset; // 0x438(0x08)
	struct TWeakObjectPtr<struct UBaseContentUIData> CachedUIData; // 0x440(0x08)

	bool ShouldShowInStore(); // Function ShooterGame.AresItem.ShouldShowInStore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3702930
	void ReceiveClientSetOwningCharacter(struct AShooterCharacter* NewCharacter); // Function ShooterGame.AresItem.ReceiveClientSetOwningCharacter // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void ReceiveClientClearOwningCharacter(struct AShooterCharacter* OldCharacter); // Function ShooterGame.AresItem.ReceiveClientClearOwningCharacter // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void ReceiveAuthSetOwningCharacter(struct AShooterCharacter* NewCharacter); // Function ShooterGame.AresItem.ReceiveAuthSetOwningCharacter // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void ReceiveAuthClearOwningCharacter(struct AShooterCharacter* OldCharacter); // Function ShooterGame.AresItem.ReceiveAuthClearOwningCharacter // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OverrideUIData(struct UBaseContentUIData* OverriddenUIData); // Function ShooterGame.AresItem.OverrideUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x37021e0
	bool MustBeStartingEquippableForSlot(enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresItem.MustBeStartingEquippableForSlot // (Native|Event|Public|BlueprintEvent) // @ game+0x3701f60
	bool IsEquippable(); // Function ShooterGame.AresItem.IsEquippable // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29792e0
	int32_t GetSellPrice(int32_t BasePrice); // Function ShooterGame.AresItem.GetSellPrice // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x3701b30
	struct AShooterCharacter* GetPawnOwner(); // Function ShooterGame.AresItem.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ee20
	struct AShooterCharacter* GetOwningShooterCharacter(); // Function ShooterGame.AresItem.GetOwningShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3701b00
	struct FText GetItemTooltipText(); // Function ShooterGame.AresItem.GetItemTooltipText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3701ac0
	enum class EAresItemSlot GetItemSlot(); // Function ShooterGame.AresItem.GetItemSlot // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3701a80
	struct FText GetItemNameText(); // Function ShooterGame.AresItem.GetItemNameText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3701a40
	struct UTexture* GetItemIcon(); // Function ShooterGame.AresItem.GetItemIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3701a00
	struct FString GetAssetServiceIDFromClass(struct UObject* WorldContextObject, struct UObject* ItemClass); // Function ShooterGame.AresItem.GetAssetServiceIDFromClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37016f0
	struct FString GetAssetServiceID(); // Function ShooterGame.AresItem.GetAssetServiceID // (Final|Native|Public|BlueprintCallable) // @ game+0x3701670
	void ClientDebugDrawTextOnScreen(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.AresItem.ClientDebugDrawTextOnScreen // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient|BlueprintCallable|Const) // @ game+0x3701060
	void AuthSetOwnerTo(struct AActor* NewOwner); // Function ShooterGame.AresItem.AuthSetOwnerTo // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3700fa0
	void AuthRemoveAndDestroy(enum class EInventoryTransaction TransactionType); // Function ShooterGame.AresItem.AuthRemoveAndDestroy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	struct FString AuthGetOriginalOwnerId(); // Function ShooterGame.AresItem.AuthGetOriginalOwnerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3700f60
	void AuthDestroyInternal(); // Function ShooterGame.AresItem.AuthDestroyInternal // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.AresEquippable
// Size: 0xf20 (Inherited: 0x448)
struct AAresEquippable : AAresItem {
	char pad_448[0x10]; // 0x448(0x10)
	enum class EEquippableTickState EquippableTickState; // 0x458(0x01)
	char pad_459[0xa7]; // 0x459(0xa7)
	struct UTexture* ObjectiveIcon; // 0x500(0x08)
	bool bUsingCharacterAlternateAnims; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnims1P; // 0x510(0x50)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnimsAltmode1P; // 0x560(0x50)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnimsAltmode1POverride; // 0x5b0(0x50)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnims1POverride; // 0x600(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> GunAnims1POverride; // 0x650(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> CosmeticGunAnims1POverride; // 0x6a0(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> CosmeticGunAnimsAltmode1POverride; // 0x6f0(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> CharacterAnimsLowerBody3POverride; // 0x740(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> CharacterAnimsUpperBody3POverride; // 0x790(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> GunAnims1P; // 0x7e0(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> CharacterAnimsUpperBody3P; // 0x830(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> CharacterAnimsAltModeUpperBody3P; // 0x880(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> CharacterAnimsLowerBody3P; // 0x8d0(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> CharacterAnimsAltModeLowerBody3P; // 0x920(0x50)
	struct TMap<struct UAnimSlotFace3P*, struct UAnimationAsset*> CharacterAnimsFace3P; // 0x970(0x50)
	struct TMap<struct UAnimSlotFace3P*, struct UAnimationAsset*> CharacterAnimsAltModeFace3P; // 0x9c0(0x50)
	bool LeftHandIKEnabled; // 0xa10(0x01)
	bool RightHandIKEnabled; // 0xa11(0x01)
	bool AltModeLeftHandIKEnabled; // 0xa12(0x01)
	bool AltModeRightHandIKEnabled; // 0xa13(0x01)
	float InaccuracyAnimationMultiplier; // 0xa14(0x04)
	float AimOffsetDisableOnEquip; // 0xa18(0x04)
	float PrimaryAimSpring1PStiffness; // 0xa1c(0x04)
	float PrimaryAimSpring1PDampening; // 0xa20(0x04)
	float SecondaryAimSpring1PStiffness; // 0xa24(0x04)
	float SecondaryAimSpring1PDampening; // 0xa28(0x04)
	char pad_A2C[0x4]; // 0xa2c(0x04)
	struct UAkAudioEvent* PickupSoundEvent; // 0xa30(0x08)
	struct FMulticastInlineDelegate OnRejectedInput; // 0xa38(0x10)
	struct FEquippableAimToolingModifiers AimToolingModifiers; // 0xa48(0x28)
	bool bCanSoftADS; // 0xa70(0x01)
	char pad_A71[0x7]; // 0xa71(0x07)
	struct TMap<struct UAnimSlot1P*, struct FAsyncLoadedEquippableCharacterAnim> CachedCharacterAnimationAssetMap; // 0xa78(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct FAsyncLoadedEquippableGunAnim> CachedGunAnimationAssetMap; // 0xac8(0x50)
	struct TWeakObjectPtr<struct AShooterCharacter> AttributeOwner; // 0xb18(0x08)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xb20(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xb30(0x10)
	char pad_B40[0x18]; // 0xb40(0x18)
	float EquipQueueTime; // 0xb58(0x04)
	bool bCanBeAutoEquipped; // 0xb5c(0x01)
	bool bCanBeAutoEquippedWithoutResources; // 0xb5d(0x01)
	bool bCanBeEquippedOutsideGameplay; // 0xb5e(0x01)
	char pad_B5F[0x1]; // 0xb5f(0x01)
	struct FMulticastInlineDelegate EquippableOnSetOwner; // 0xb60(0x10)
	enum class EEquippableSuppressionBehavior SuppressionBehavior; // 0xb70(0x01)
	enum class EEquippableEquipBehavior EquipBehavior; // 0xb71(0x01)
	bool OverrideHolstering; // 0xb72(0x01)
	char pad_B73[0x5]; // 0xb73(0x05)
	struct FMulticastInlineDelegate OnMeshVisibilityUpdated; // 0xb78(0x10)
	struct TArray<struct FString> PostInitErrors; // 0xb88(0x10)
	struct TMap<struct TSoftClassPtr<UObject>, struct AEffectContainer*> EffectOverrides; // 0xb98(0x50)
	struct UZoomManagerComponent* ZoomManager; // 0xbe8(0x08)
	char pad_BF0[0x1]; // 0xbf0(0x01)
	bool bAutoEquip; // 0xbf1(0x01)
	bool bAutoPickup; // 0xbf2(0x01)
	char pad_BF3[0x1]; // 0xbf3(0x01)
	float AutoPickupDistance; // 0xbf4(0x04)
	float PreventPickupDuration; // 0xbf8(0x04)
	float ScaleOnGround; // 0xbfc(0x04)
	bool bResetMyRoot3PScaleWhenDroppedOnGround; // 0xc00(0x01)
	char pad_C01[0x7]; // 0xc01(0x07)
	struct UAkAudioEvent* FootstepEvent; // 0xc08(0x08)
	struct UAkAudioEvent* JumpEvent; // 0xc10(0x08)
	struct UAkAudioEvent* LandEvent; // 0xc18(0x08)
	struct UCooldownComponent* CooldownComponent; // 0xc20(0x08)
	struct FMulticastInlineDelegate OnDisabledInputRequested; // 0xc28(0x10)
	struct FMulticastInlineDelegate OnEquippableDisabled; // 0xc38(0x10)
	bool bDestroyWhenDropped; // 0xc48(0x01)
	char pad_C49[0x7]; // 0xc49(0x07)
	struct FMulticastInlineDelegate OnDropped; // 0xc50(0x10)
	struct FMulticastInlineDelegate OnFiringVFXStateUpdated; // 0xc60(0x10)
	struct FMulticastInlineDelegate OnEquippableVFXStateChanged; // 0xc70(0x10)
	struct FMulticastInlineDelegate OnEquippableZoomVFXStateChanged; // 0xc80(0x10)
	bool bInPersistentData; // 0xc90(0x01)
	bool bCanActivateWhenSlotDisabled; // 0xc91(0x01)
	bool bHideFirstPersonWhileZoomed; // 0xc92(0x01)
	enum class EZoomInHideOption ZoomInHideOption; // 0xc93(0x01)
	enum class EZoomOutShowOption ZoomOutShowOption; // 0xc94(0x01)
	char pad_C95[0x3]; // 0xc95(0x03)
	float ZoomedMovementRatio; // 0xc98(0x04)
	float AlwaysTurnRatio; // 0xc9c(0x04)
	float AlwaysMovementRatio; // 0xca0(0x04)
	struct FName EquippableAttachPoint1P; // 0xca4(0x0c)
	struct FName EquippableAttachPoint3P; // 0xcb0(0x0c)
	char pad_CBC[0x4]; // 0xcbc(0x04)
	struct USceneComponent* MySceneRoot; // 0xcc0(0x08)
	struct USceneComponent* MyRoot3P; // 0xcc8(0x08)
	struct USkeletalMeshComponent* Mesh1P; // 0xcd0(0x08)
	struct UAresOutlineComponent* OutlineComponent1P; // 0xcd8(0x08)
	struct USkeletalMeshComponent* Mesh3P; // 0xce0(0x08)
	struct UAresOutlineComponent* OutlineComponent3P; // 0xce8(0x08)
	struct UEquippableStateMachineComponent* EquippableStateMachine; // 0xcf0(0x08)
	enum class EAresEquippableState CurrentEquippableVFXState; // 0xcf8(0x01)
	char pad_CF9[0x7]; // 0xcf9(0x07)
	struct UEquippableFogOfWarComponent* EquippableFogOfWar; // 0xd00(0x08)
	struct UEquippableEventEquippableComponent* EquippableEventComponent; // 0xd08(0x08)
	struct UCycleZoomState* EquippableCycleZoomState; // 0xd10(0x08)
	struct TArray<struct UEquippableStateMachineComponent*> EquippableStateMachines; // 0xd18(0x10)
	struct TArray<struct USkeletalMeshComponent*> Meshes; // 0xd28(0x10)
	struct FName InventoryAttachPoint; // 0xd38(0x0c)
	bool bCanBeDropped; // 0xd44(0x01)
	bool bDropOnDeath; // 0xd45(0x01)
	enum class EAresDropOnDeath DropOnDeathNew; // 0xd46(0x01)
	char pad_D47[0x1]; // 0xd47(0x01)
	struct FRotator DropOnDeathScatterMin; // 0xd48(0x0c)
	struct FRotator DropOnDeathScatterMax; // 0xd54(0x0c)
	bool bOnlyAlliesCanPickup; // 0xd60(0x01)
	enum class EUsablePriority PickupPriority; // 0xd61(0x01)
	char pad_D62[0x2]; // 0xd62(0x02)
	float PickupScoringBonus; // 0xd64(0x04)
	struct FName MuzzlePointSocketName; // 0xd68(0x0c)
	char pad_D74[0x44]; // 0xd74(0x44)
	struct UKillBannerData* SkinKillBannerData; // 0xdb8(0x08)
	struct UTexture* InventoryIcon; // 0xdc0(0x08)
	struct UEquippableSkinDataAsset* SkinDataAsset; // 0xdc8(0x08)
	struct UEquippableSkinLevelDataAsset* SkinLevelDataAsset; // 0xdd0(0x08)
	struct TArray<struct UEquippableAttachmentDataAsset*> AttachmentDataAssets; // 0xdd8(0x10)
	struct UEquippableSkinChromaDataAsset* ChromaDataAsset; // 0xde8(0x08)
	struct UEquippableCharmDataAsset* CharmDataAsset; // 0xdf0(0x08)
	struct UEquippableCharmLevelDataAsset* CharmLevelDataAsset; // 0xdf8(0x08)
	struct FGuid SkinDataAssetId; // 0xe00(0x10)
	struct FGuid SkinLevelDataAssetId; // 0xe10(0x10)
	struct FGuid CharmDataAssetId; // 0xe20(0x10)
	struct FGuid CharmLevelDataAssetId; // 0xe30(0x10)
	struct TArray<struct FGuid> AttachmentDataAssetIds; // 0xe40(0x10)
	struct FGuid ChromaDataAssetId; // 0xe50(0x10)
	struct AShooterCharacter* PreventPickupCharacter; // 0xe60(0x08)
	int32_t CosmeticRandomSeed; // 0xe68(0x04)
	char pad_E6C[0xc]; // 0xe6c(0x0c)
	bool bInitialCooldownOnRoundStart; // 0xe78(0x01)
	bool bAuthIsGhostEquipped; // 0xe79(0x01)
	char pad_E7A[0x6]; // 0xe7a(0x06)
	struct TSet<enum class EAresEquippableInput> UnequippedInputs; // 0xe80(0x50)
	int32_t MaxCharges; // 0xed0(0x04)
	int32_t ChargesGainedEachRefresh; // 0xed4(0x04)
	float HitRegistrationSubTickMovementTimestamp; // 0xed8(0x04)
	float AuthServerSnapshottedMovementTimestamp; // 0xedc(0x04)
	bool bCanAddToStorageSlot; // 0xee0(0x01)
	char pad_EE1[0x7]; // 0xee1(0x07)
	struct TArray<struct TWeakObjectPtr<struct UObject>> HolsterBlockingObjects; // 0xee8(0x10)
	struct AShooterCharacter* LastFiringCharacter; // 0xef8(0x08)
	bool bIsForced1PTextureStreamingEnabled; // 0xf00(0x01)
	char pad_F01[0xf]; // 0xf01(0x0f)
	int32_t NonLookingPickupPriority; // 0xf10(0x04)
	char pad_F14[0xc]; // 0xf14(0x0c)

	void UpdateMaterial(int32_t Index, struct UMaterialInterface* Material); // Function ShooterGame.AresEquippable.UpdateMaterial // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool UnequipEquippable(enum class EEquipSpeed Speed, bool bIgnoreAutoEquipSettings); // Function ShooterGame.AresEquippable.UnequipEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6a00
	bool TryEquipWithRestrictionsEnum(enum class EEquipSource EquipSource, enum class EEquippableRestrictions EquippableRestrictions); // Function ShooterGame.AresEquippable.TryEquipWithRestrictionsEnum // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6930
	bool TryEquip(enum class EEquipSource EquipSource, bool bSkipRestrictions); // Function ShooterGame.AresEquippable.TryEquip // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6860
	bool TryAutoEquip(enum class EEquipSpeed EquipSpeed, enum class EEquipSource EquipSource); // Function ShooterGame.AresEquippable.TryAutoEquip // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6790
	bool ShouldPresentAsUsable(); // Function ShooterGame.AresEquippable.ShouldPresentAsUsable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x36c6750
	void SetMuzzlePointSocketName(struct FName InMuzzlePointSocketName); // Function ShooterGame.AresEquippable.SetMuzzlePointSocketName // (Final|Native|Public|BlueprintCallable) // @ game+0x36c66b0
	void SetGunAnimation1POverride(struct UAnimSlotGun1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetGunAnimation1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c65e0
	void SetForceFirstPersonMeshHide(enum class EFirstPersonHideOption Option); // Function ShooterGame.AresEquippable.SetForceFirstPersonMeshHide // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6560
	void SetCosmeticGunAnimationAltmode1POverride(struct UAnimSlotGun1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCosmeticGunAnimationAltmode1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6490
	void SetCosmeticGunAnimation1POverride(struct UAnimSlotGun1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCosmeticGunAnimation1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c63c0
	void SetCharacterClassForAbility(struct AShooterCharacter* CharacterClass); // Function ShooterGame.AresEquippable.SetCharacterClassForAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6330
	void SetCharacterAnimationUpperBody3POverride(struct UAnimSlotUpperBody3P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimationUpperBody3POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6260
	void SetCharacterAnimationLowerBody3POverride(struct UAnimSlotLowerBody3P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimationLowerBody3POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c6190
	void SetCharacterAnimationAltmode1POverride(struct UAnimSlot1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimationAltmode1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c60c0
	void SetCharacterAnimation1POverride(struct UAnimSlot1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimation1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x36c5ff0
	struct UAresAudioComponent* PlayEquippableSoundEvent(struct UAkAudioEvent* SoundEvent, struct USceneComponent* WorldComponent, struct FName AttachPoint, bool bSoundFollowsAttachPoint, struct UAresAudioComponent* ReuseAudioComponent); // Function ShooterGame.AresEquippable.PlayEquippableSoundEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x36c5db0
	struct UParticleSystemComponent* PlayEquippableEffect(struct UParticleSystem* FX, struct FName AttachPoint, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bIsFirstPerson, float WarmupTime, enum class EAresParticleVariantColor VariantColor, bool bAttach); // Function ShooterGame.AresEquippable.PlayEquippableEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36c5980
	void OverrideEffect(struct TSoftClassPtr<UObject> Base, struct AEffectContainer* Override); // Function ShooterGame.AresEquippable.OverrideEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x36c5820
	void OnZoomInStarted(struct UZoomComponent* ZoomComponent, float TargetZoomLevel, bool IsInitialZoom); // Function ShooterGame.AresEquippable.OnZoomInStarted // (Final|Native|Public) // @ game+0x36c5700
	void OnZoomInCompleted(struct UZoomComponent* ZoomComponent, float TargetZoomLevel, bool IsInitialZoom); // Function ShooterGame.AresEquippable.OnZoomInCompleted // (Final|Native|Public) // @ game+0x36c55e0
	void OnUnZoomStarted(struct UZoomComponent* ZoomComponent, float SourceZoomLevel); // Function ShooterGame.AresEquippable.OnUnZoomStarted // (Final|Native|Public) // @ game+0x36c5510
	void OnUnZoomCompleted(struct UZoomComponent* ZoomComponent, float SourceZoomLevel); // Function ShooterGame.AresEquippable.OnUnZoomCompleted // (Final|Native|Public) // @ game+0x36c5440
	void OnRep_InPersistentData(); // Function ShooterGame.AresEquippable.OnRep_InPersistentData // (Final|Native|Public) // @ game+0x36c5420
	void OnPawnDeath(); // Function ShooterGame.AresEquippable.OnPawnDeath // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnJumped(); // Function ShooterGame.AresEquippable.OnJumped // (Native|Public) // @ game+0x36c53f0
	void OnItemPickedUp(struct AShooterCharacter* NewOwner, bool bCurrentWasDropped); // Function ShooterGame.AresEquippable.OnItemPickedUp // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnInvisibleEquippablePropertyChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.AresEquippable.OnInvisibleEquippablePropertyChanged // (Final|Native|Protected|HasOutParms) // @ game+0x36c5230
	void OnEquippableStateMachineSubTick(float SubTickDeltaTime); // Function ShooterGame.AresEquippable.OnEquippableStateMachineSubTick // (Final|Native|Protected) // @ game+0x36c51b0
	void OnEquippableStateMachineServerCorrection(struct UEquippableStateMachineComponent* EquippableStateMachineComponent); // Function ShooterGame.AresEquippable.OnEquippableStateMachineServerCorrection // (Final|Native|Protected) // @ game+0x36c5120
	void OnEquippableStateMachineInactive(struct UEquippableStateMachineComponent* InactiveEquippableStateMachine); // Function ShooterGame.AresEquippable.OnEquippableStateMachineInactive // (Final|Native|Protected) // @ game+0x36c5120
	void OnEquippableStateMachineActive(struct UEquippableStateMachineComponent* ActiveEquippableStateMachine); // Function ShooterGame.AresEquippable.OnEquippableStateMachineActive // (Final|Native|Protected) // @ game+0x36c5120
	void OnDisablePropertyChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.AresEquippable.OnDisablePropertyChanged // (Final|Native|Protected|HasOutParms) // @ game+0x36c4f60
	void OnAuthRoundEnd(); // Function ShooterGame.AresEquippable.OnAuthRoundEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x20185c0
	void On3PMontagesFinished(); // Function ShooterGame.AresEquippable.On3PMontagesFinished // (Final|Native|Private) // @ game+0x36c4f40
	void MulticastOnItemMovedToPersistentData(); // Function ShooterGame.AresEquippable.MulticastOnItemMovedToPersistentData // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x36c4f10
	void ModifyDroppability(bool CanDrop, bool DestroyOnDrop); // Function ShooterGame.AresEquippable.ModifyDroppability // (Final|Native|Public|BlueprintCallable) // @ game+0x36c4e40
	void Load1PAnimAssetsOnClient(); // Function ShooterGame.AresEquippable.Load1PAnimAssetsOnClient // (Final|Native|Protected) // @ game+0x36c4e20
	bool IsZoomed(); // Function ShooterGame.AresEquippable.IsZoomed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4de0
	bool IsOffCooldown(); // Function ShooterGame.AresEquippable.IsOffCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4db0
	bool IsInputUp(enum class EAresEquippableInput Input); // Function ShooterGame.AresEquippable.IsInputUp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4d20
	bool IsInputDown(enum class EAresEquippableInput Input); // Function ShooterGame.AresEquippable.IsInputDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4c90
	bool IsHolsteringAllowed(struct AAresEquippable* NextEquippable); // Function ShooterGame.AresEquippable.IsHolsteringAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4bf0
	bool IsDesiredEquippable(); // Function ShooterGame.AresEquippable.IsDesiredEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4bc0
	bool IsCurrentEquippable(); // Function ShooterGame.AresEquippable.IsCurrentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4b90
	bool InputIsDisabled(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, bool bReportFailure); // Function ShooterGame.AresEquippable.InputIsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4a70
	bool HasPipsToCast(); // Function ShooterGame.AresEquippable.HasPipsToCast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4a40
	bool HasMuzzle(); // Function ShooterGame.AresEquippable.HasMuzzle // (Final|Native|Public|BlueprintCallable) // @ game+0x36c4a10
	bool HasEnoughChargesToUse(); // Function ShooterGame.AresEquippable.HasEnoughChargesToUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c49e0
	bool HasAnyResources(); // Function ShooterGame.AresEquippable.HasAnyResources // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x36c49a0
	void HandleResourceChanged(struct UResourceComponent* Resource); // Function ShooterGame.AresEquippable.HandleResourceChanged // (Final|Native|Public) // @ game+0x3634e00
	void HandleInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, float InputTimestamp, enum class EAresActivationInputType ActivationType); // Function ShooterGame.AresEquippable.HandleInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36c4840
	int32_t GetPipCost(); // Function ShooterGame.AresEquippable.GetPipCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4810
	struct AEffectContainer* GetOverridableEffect(struct AEffectContainer* Effect); // Function ShooterGame.AresEquippable.GetOverridableEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x36c4780
	struct FTransform GetMuzzleTransform(); // Function ShooterGame.AresEquippable.GetMuzzleTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4670
	struct USkeletalMeshComponent* GetMesh3P(); // Function ShooterGame.AresEquippable.GetMesh3P // (Final|Native|Public) // @ game+0x36c4650
	struct USkeletalMeshComponent* GetMesh1P(); // Function ShooterGame.AresEquippable.GetMesh1P // (Final|Native|Public) // @ game+0x36c4630
	int32_t GetMaxCharges(); // Function ShooterGame.AresEquippable.GetMaxCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4600
	struct UBaseContentUIData* GetEquippableUIData(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> EquippableClass); // Function ShooterGame.AresEquippable.GetEquippableUIData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36c44a0
	struct UEquippableSkinDataAsset* GetEquippableSkinDataAsset(); // Function ShooterGame.AresEquippable.GetEquippableSkinDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36c4480
	struct USkeletalMeshComponent* GetEquippableMesh(); // Function ShooterGame.AresEquippable.GetEquippableMesh // (Final|Native|Public|Const) // @ game+0x36c4450
	struct UEquippableFogOfWarComponent* GetEquippableFogOfWar(); // Function ShooterGame.AresEquippable.GetEquippableFogOfWar // (Final|Native|Public|BlueprintCallable) // @ game+0x36c4420
	struct UEquippableEventEquippableComponent* GetEquippableEventComponent(); // Function ShooterGame.AresEquippable.GetEquippableEventComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4400
	enum class EAresDropOnDeath GetDropOnDeath(struct FRotator& DropRotation); // Function ShooterGame.AresEquippable.GetDropOnDeath // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x36c42d0
	float GetDefaultAutoEquipPriorityForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresEquippable.GetDefaultAutoEquipPriorityForSlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36c4250
	struct UBaseCrosshairHudElement* GetCurrentCrosshairHudElementClass(); // Function ShooterGame.AresEquippable.GetCurrentCrosshairHudElementClass // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x36c41e0
	int32_t GetCurrentCharges(); // Function ShooterGame.AresEquippable.GetCurrentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c41b0
	bool GetCanEquipWhenSlotDisabled(); // Function ShooterGame.AresEquippable.GetCanEquipWhenSlotDisabled // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x36c4170
	bool GetCanDrop(); // Function ShooterGame.AresEquippable.GetCanDrop // (Final|Native|Public|Const) // @ game+0x36c4140
	bool GetCanActivateWhenSlotDisabled(); // Function ShooterGame.AresEquippable.GetCanActivateWhenSlotDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c4110
	float GetAutoEquipPriority(); // Function ShooterGame.AresEquippable.GetAutoEquipPriority // (Native|Event|Public|BlueprintEvent) // @ game+0x36c40d0
	void GetAttachmentControllerParameters(struct UAttachmentControllerComponent* AttachmentControllerComponent, enum class EAttachmentPerspective AttachmentPerspective, enum class EAttachmentVisibility ComputedVisibility, struct USceneComponent* ComputedAttachComponent, enum class EAttachmentVisibility& DesiredVisibility, struct USceneComponent*& DesiredAttachComponent, struct FAttachmentSettings& DesiredAttachmentSettings); // Function ShooterGame.AresEquippable.GetAttachmentControllerParameters // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x36c3e70
	bool EquippableSlotIsDisabled(); // Function ShooterGame.AresEquippable.EquippableSlotIsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c3e40
	bool EquippableIsLocallyControlledOrSpectated(); // Function ShooterGame.AresEquippable.EquippableIsLocallyControlledOrSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c3e10
	bool EquippableIsLocallyControlled(); // Function ShooterGame.AresEquippable.EquippableIsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c3de0
	enum class EAresImpactEffectHitspace ComputeHitSpace(struct AAresEquippable* Equippable, struct FHitResult& Impact); // Function ShooterGame.AresEquippable.ComputeHitSpace // (Final|Native|Static|Public|HasOutParms) // @ game+0x36c3cb0
	void ClientTickActiveForLocalPlayer(float DeltaSeconds); // Function ShooterGame.AresEquippable.ClientTickActiveForLocalPlayer // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ClientMapPing(struct FVector ClickLocation); // Function ShooterGame.AresEquippable.ClientMapPing // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void ClientMapClicked(struct FVector ClickLocation); // Function ShooterGame.AresEquippable.ClientMapClicked // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void ClientItemWillEquip(); // Function ShooterGame.AresEquippable.ClientItemWillEquip // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ClientItemUnEquipped(); // Function ShooterGame.AresEquippable.ClientItemUnEquipped // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ClientItemEquipped(); // Function ShooterGame.AresEquippable.ClientItemEquipped // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ClearPreventPickupCharacter(); // Function ShooterGame.AresEquippable.ClearPreventPickupCharacter // (Final|Native|Protected) // @ game+0x2024060
	void ChangeEquippableVFXState(enum class EAresEquippableState State); // Function ShooterGame.AresEquippable.ChangeEquippableVFXState // (Final|Native|Public|BlueprintCallable) // @ game+0x36c3a40
	bool CanZoom(); // Function ShooterGame.AresEquippable.CanZoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c3a10
	enum class EAresEquippableCanUseResult CanUse(); // Function ShooterGame.AresEquippable.CanUse // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36c39d0
	bool CanBeDesiredEquippable(); // Function ShooterGame.AresEquippable.CanBeDesiredEquippable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x36c3990
	bool CanAutoEquip(); // Function ShooterGame.AresEquippable.CanAutoEquip // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x36c3950
	struct TSet<struct FSoftObjectPath> BP_GetPreloadAssetPaths(struct UGameModeDataAsset* GameModeDataAsset); // Function ShooterGame.AresEquippable.BP_GetPreloadAssetPaths // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthSetCooldown(float NewCooldown); // Function ShooterGame.AresEquippable.AuthSetCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x36c38d0
	void AuthRefreshEvent(); // Function ShooterGame.AresEquippable.AuthRefreshEvent // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void AuthRefresh(); // Function ShooterGame.AresEquippable.AuthRefresh // (Native|Public) // @ game+0x36c38a0
	void AuthOnUnEquipped(); // Function ShooterGame.AresEquippable.AuthOnUnEquipped // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void AuthOnPawnDeath(); // Function ShooterGame.AresEquippable.AuthOnPawnDeath // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthOnOwningCharacterRemoteRoleChanged(struct AShooterCharacter* OwningShooterCharacter, enum class ENetRole PrevRole, enum class ENetRole NewRole); // Function ShooterGame.AresEquippable.AuthOnOwningCharacterRemoteRoleChanged // (Final|Native|Protected) // @ game+0x36c3790
	void AuthOnEquipped(); // Function ShooterGame.AresEquippable.AuthOnEquipped // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void AuthGrantResourcesForAutomation(); // Function ShooterGame.AresEquippable.AuthGrantResourcesForAutomation // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthDrop(struct FVector& Location, struct FRotator& Rotation, float SpeedScale, bool bIsSilentDrop); // Function ShooterGame.AresEquippable.AuthDrop // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36c3600
	void AuthClearCooldown(); // Function ShooterGame.AresEquippable.AuthClearCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x36c35e0
	bool AllowPickup(struct AShooterCharacter* TargetCharacter); // Function ShooterGame.AresEquippable.AllowPickup // (Native|Event|Public|BlueprintEvent) // @ game+0x36c3530
	void AddPostInitError(struct FString ErrorMessage); // Function ShooterGame.AresEquippable.AddPostInitError // (Final|Native|Public) // @ game+0x36c3430
};

// Class ShooterGame.AresEquippableAnimInstance
// Size: 0x520 (Inherited: 0x300)
struct UAresEquippableAnimInstance : UAnimInstance {
	struct FAnimationStateParams AnimationStateParams; // 0x300(0x1d0)
	struct FAnimationAssetsGun1P CosmeticAnimationAssetsGun1P; // 0x4d0(0x48)
	char pad_518[0x8]; // 0x518(0x08)
};

// Class ShooterGame.AresEquippableDataTracker
// Size: 0xf0 (Inherited: 0xe8)
struct UAresEquippableDataTracker : UActorComponent {
	struct AAresPlayerStateBase* OriginalBuyer; // 0xe8(0x08)

	struct FString GetOriginalBuyerName(); // Function ShooterGame.AresEquippableDataTracker.GetOriginalBuyerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cd920
	struct AAresPlayerStateBase* GetOriginalBuyer(); // Function ShooterGame.AresEquippableDataTracker.GetOriginalBuyer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cd8f0
};

// Class ShooterGame.AresEquippableGlobals
// Size: 0x140 (Inherited: 0x30)
struct UAresEquippableGlobals : UObject {
	struct AAresDroppedEquippable* DroppedEquippable; // 0x30(0x08)
	struct AAresOnGroundEquippable* OnGroundEquippable; // 0x38(0x08)
	struct AAresEquippableSlot* EquippableSlots[0x10]; // 0x40(0x80)
	struct UAnimNotify* InterruptFrameAnimNotifyClass; // 0xc0(0x08)
	struct FSoftObjectPath DevOnlyPurchasableOverrideDataTable; // 0xc8(0x20)
	struct TMap<struct UAresPurchasable*, struct UAresPurchasable*> PurchasableOverrideMap; // 0xe8(0x50)
	char pad_138[0x8]; // 0x138(0x08)

	struct UAresPurchasable* GetPurchasableFromConfig(struct UObject* WorldContextObject, struct UAresPurchasable* OriginalPurchasable); // Function ShooterGame.AresEquippableGlobals.GetPurchasableFromConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cd9a0
};

// Class ShooterGame.AresEquippableSlot
// Size: 0x3e8 (Inherited: 0x3d8)
struct AAresEquippableSlot : AInfo {
	int32_t MaximumAmount; // 0x3d8(0x04)
	enum class EAresEquippableSlotViewType bViewType; // 0x3dc(0x01)
	enum class EAresItemSlot SlotType; // 0x3dd(0x01)
	char pad_3DE[0x2]; // 0x3de(0x02)
	int32_t SortPriority; // 0x3e0(0x04)
	bool bCanReplaceItems; // 0x3e4(0x01)
	bool bCanRepurchaseSameItem; // 0x3e5(0x01)
	char pad_3E6[0x2]; // 0x3e6(0x02)
};

// Class ShooterGame.FireCustomizationWeaponDataList
// Size: 0x48 (Inherited: 0x38)
struct UFireCustomizationWeaponDataList : UDataAsset {
	struct TArray<struct FFireButtonWeaponCustomizationSettingData> WeaponUIData; // 0x38(0x10)
};

// Class ShooterGame.AresFireButtonCustomization
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAresFireButtonCustomization : UUserWidget {
};

// Class ShooterGame.AresFireButtonCustomizationWeaponGrid
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresFireButtonCustomizationWeaponGrid : UUserWidget {
	struct FString WeaponUIDataAssetPath; // 0x2c8(0x10)
	struct UFireCustomizationWeaponDataList* WeaponUIDataAsset; // 0x2d8(0x08)

	struct UFireCustomizationWeaponDataList* GetWeaponUIDataAsset(); // Function ShooterGame.AresFireButtonCustomizationWeaponGrid.GetWeaponUIDataAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x36cdc00
};

// Class ShooterGame.AresFriendFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresFriendFunctionLibrary : UBlueprintFunctionLibrary {

	void UnblockPlayerBySubject(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.AresFriendFunctionLibrary.UnblockPlayerBySubject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce690
	void UnblockPlayer(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresFriendFunctionLibrary.UnblockPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce5d0
	void SendFriendRequestById(struct UObject* WorldContextObject, struct FString GameNameAndTagLine); // Function ShooterGame.AresFriendFunctionLibrary.SendFriendRequestById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce300
	void SendFriendRequest(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresFriendFunctionLibrary.SendFriendRequest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce240
	void RemoveFriend(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresFriendFunctionLibrary.RemoveFriend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36ce180
	bool IsValidGameNameAndTagLine(struct UObject* WorldContextObject, struct FString GameNameAndTagLine); // Function ShooterGame.AresFriendFunctionLibrary.IsValidGameNameAndTagLine // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36cdf50
	bool IsFriend(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.AresFriendFunctionLibrary.IsFriend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cde20
	bool IsBlockedPlayer(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresFriendFunctionLibrary.IsBlockedPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36cdd50
	void BlockPlayerBySubject(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.AresFriendFunctionLibrary.BlockPlayerBySubject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cd590
	void BlockPlayer(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresFriendFunctionLibrary.BlockPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x36cd4d0
};

// Class ShooterGame.AresSocialCountViewModelBase
// Size: 0x60 (Inherited: 0x48)
struct UAresSocialCountViewModelBase : UAresViewModelBase {
	struct FMulticastInlineDelegate SocialCountChanged; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)

	void SetSocialCount(int32_t NewSocialCount); // Function ShooterGame.AresSocialCountViewModelBase.SetSocialCount // (Final|Native|Public) // @ game+0x377fda0
	int32_t GetSocialCount(); // Function ShooterGame.AresSocialCountViewModelBase.GetSocialCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377f1b0
};

// Class ShooterGame.AresFriendRequestCountViewModel
// Size: 0x68 (Inherited: 0x60)
struct UAresFriendRequestCountViewModel : UAresSocialCountViewModelBase {
	struct URGIFriendsSubsystem* FriendsSubsystem; // 0x60(0x08)

	void HandleFriendsUpdate(struct FRGIFriendsFriendRequests& FriendRequestList); // Function ShooterGame.AresFriendRequestCountViewModel.HandleFriendsUpdate // (Final|Native|Private|HasOutParms) // @ game+0x36cdc30
};

// Class ShooterGame.AresFriendRequestItemViewModel
// Size: 0x78 (Inherited: 0x48)
struct UAresFriendRequestItemViewModel : UAresViewModelBase {
	struct FFriendRequestItemModel CachedFriendRequestModel; // 0x48(0x30)

	void Setup(struct FFriendRequestItemModel& FriendRequestModel); // Function ShooterGame.AresFriendRequestItemViewModel.Setup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36ce3e0
	void RejectFriendRequest(); // Function ShooterGame.AresFriendRequestItemViewModel.RejectFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x36ce160
	struct FString GetSenderTagline(); // Function ShooterGame.AresFriendRequestItemViewModel.GetSenderTagline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cdb80
	struct FString GetSenderSubject(); // Function ShooterGame.AresFriendRequestItemViewModel.GetSenderSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cdb00
	struct FString GetSenderGameName(); // Function ShooterGame.AresFriendRequestItemViewModel.GetSenderGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cda80
	void AcceptFriendRequest(); // Function ShooterGame.AresFriendRequestItemViewModel.AcceptFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x36cd4b0
};

// Class ShooterGame.AresSocialListViewModel
// Size: 0x78 (Inherited: 0x48)
struct UAresSocialListViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnVisibleElementCountChanged; // 0x48(0x10)
	int32_t VisibleElementCount; // 0x58(0x04)
	char pad_5C[0x1c]; // 0x5c(0x1c)

	int32_t GetVisibleElementCount(); // Function ShooterGame.AresSocialListViewModel.GetVisibleElementCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377f1b0
};

// Class ShooterGame.AresFriendRequestListViewModel
// Size: 0xf0 (Inherited: 0x78)
struct UAresFriendRequestListViewModel : UAresSocialListViewModel {
	struct FMulticastInlineDelegate FriendRequestAdded; // 0x78(0x10)
	struct FMulticastInlineDelegate FriendRequestRemoved; // 0x88(0x10)
	struct URGIFriendsSubsystem* FriendsSubsystem; // 0x98(0x08)
	struct TMap<struct FString, struct FFriendRequestItemModel> FriendRequestCache; // 0xa0(0x50)

	void RefreshCache(struct FRGIFriendsFriendRequests& FriendRequestList); // Function ShooterGame.AresFriendRequestListViewModel.RefreshCache // (Final|Native|Private|HasOutParms) // @ game+0x36ce040
	struct TArray<struct FFriendRequestItemModel> GetFriendRequests(); // Function ShooterGame.AresFriendRequestListViewModel.GetFriendRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cd740
};

// Class ShooterGame.FrontendUIGlobalsDataAsset
// Size: 0x228 (Inherited: 0x40)
struct UFrontendUIGlobalsDataAsset : UAresPlatformDataAsset {
	struct TSoftClassPtr<UObject> MainMenuAsset; // 0x40(0x30)
	struct TSoftClassPtr<UObject> MainMenuViewControllerAsset; // 0x70(0x30)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct TSoftClassPtr<UObject>> MainMenuStateWidgets; // 0xa0(0x50)
	struct TSoftClassPtr<UObject> PregameAsset; // 0xf0(0x30)
	struct TSoftClassPtr<UObject> WelcomeAsset; // 0x120(0x30)
	struct TSoftObjectPtr<UTexture2D> MainMenuDefaultBackgroundArt; // 0x150(0x30)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct TSoftObjectPtr<UTexture2D>> MainMenuBackgroundArtOverride; // 0x180(0x50)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct FMediaSourceParams> MainMenuBackgroundVideoOverride; // 0x1d0(0x50)
	bool bUsingUpdatedNavBar; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)

	bool TryGetBackgroundVideoForState(enum class EAresMainMenuTopNavigationState DesiredNavigationState, struct FMediaSourceParams& OutParams); // Function ShooterGame.FrontendUIGlobalsDataAsset.TryGetBackgroundVideoForState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x36ce4c0
	struct TSoftObjectPtr<UTexture2D> GetBackgroundArtForState(enum class EAresMainMenuTopNavigationState DesiredNavigationState); // Function ShooterGame.FrontendUIGlobalsDataAsset.GetBackgroundArtForState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cd670
};

// Class ShooterGame.AresFrontendUIGlobalsBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresFrontendUIGlobalsBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	struct UFrontendUIGlobalsDataAsset* GetFrontendUIGlobalsForWidget(struct UWidget* Requester); // Function ShooterGame.AresFrontendUIGlobalsBlueprintFunctionLibrary.GetFrontendUIGlobalsForWidget // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0x36cd860
};

// Class ShooterGame.AresGameAutomation
// Size: 0x3e8 (Inherited: 0x3d8)
struct AAresGameAutomation : AActor {
	bool bStartTestInGameplayPhase; // 0x3d8(0x01)
	bool bStartWithPausedTimer; // 0x3d9(0x01)
	bool bWaitUntilAllPlayersLoadedAutomation; // 0x3da(0x01)
	char pad_3DB[0x1]; // 0x3db(0x01)
	float ReadyToTestDelay; // 0x3dc(0x04)
	bool bReadyToTest; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	float ReadyToTestDuration; // 0x3e4(0x04)

	void Tick(float DeltaSeconds); // Function ShooterGame.AresGameAutomation.Tick // (Native|Public) // @ game+0x3690ff0
	void ReceiveReadyToTest(); // Function ShooterGame.AresGameAutomation.ReceiveReadyToTest // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ReceivePlayerAutomationComplete(struct AAresPlayerAutomation* PlayerAutomation); // Function ShooterGame.AresGameAutomation.ReceivePlayerAutomationComplete // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void PostInitProperties(); // Function ShooterGame.AresGameAutomation.PostInitProperties // (Native|Public) // @ game+0x36d6c20
	bool GetReadyToTest(); // Function ShooterGame.AresGameAutomation.GetReadyToTest // (Final|Native|Public|Const) // @ game+0x36d6af0
	void AuthSetGameToGameplayPhase(); // Function ShooterGame.AresGameAutomation.AuthSetGameToGameplayPhase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	bool AuthPollIsReadyToTest(); // Function ShooterGame.AresGameAutomation.AuthPollIsReadyToTest // (Native|Event|Public|BlueprintEvent) // @ game+0x36d6200
	void AuthPassTest(); // Function ShooterGame.AresGameAutomation.AuthPassTest // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthNotifyPlayersGameAutomationPassed(); // Function ShooterGame.AresGameAutomation.AuthNotifyPlayersGameAutomationPassed // (Final|Native|Public) // @ game+0x2024060
	void AuthLog(struct FString Reason); // Function ShooterGame.AresGameAutomation.AuthLog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36d6150
	void AuthFailTest(struct FString Reason); // Function ShooterGame.AresGameAutomation.AuthFailTest // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36d6150
};

// Class ShooterGame.AresGameEngine
// Size: 0xf30 (Inherited: 0xf20)
struct UAresGameEngine : UGameEngine {
	struct TArray<struct FAssetCategoryInfo> AssetCategories; // 0xf20(0x10)
};

// Class ShooterGame.AresGameEventLog
// Size: 0x118 (Inherited: 0xe8)
struct UAresGameEventLog : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UWorld* TheWorld; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
	struct UTelemetrySampler* TelemetrySampler; // 0x100(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x108(0x08)
	bool bEventPostEnabled; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)

	bool ShouldSampleByMatch(); // Function ShooterGame.AresGameEventLog.ShouldSampleByMatch // (Final|Native|Public|Const) // @ game+0x36d6db0
	void SetEventPostEnabled(bool bNewEventPostEnabled); // Function ShooterGame.AresGameEventLog.SetEventPostEnabled // (Final|Native|Public) // @ game+0x36d6d20
	void RecordRoundScoreEvent(); // Function ShooterGame.AresGameEventLog.RecordRoundScoreEvent // (Final|Native|Public) // @ game+0x36d6d00
	void RecordPlayerLocationsEvent(); // Function ShooterGame.AresGameEventLog.RecordPlayerLocationsEvent // (Final|Native|Public) // @ game+0x36d6ce0
	void RecordDamageEvent(struct UDamageResponse* DamageResponse); // Function ShooterGame.AresGameEventLog.RecordDamageEvent // (Final|Native|Public) // @ game+0x36d6c50
	void OnActorSpawned(struct AActor* NewActor); // Function ShooterGame.AresGameEventLog.OnActorSpawned // (Final|Native|Public) // @ game+0x36d6b90
	void AuthRecordWeaponOrbRewardDroppedEvent(struct FName OrbSpawnerName, struct AShooterCharacter* Collector, struct FOrbEventInfo OrbSpawnedInfo, struct FOrbEventInfo OrbCollectedEventInfo, struct FOrbEventInfo OrbDroppedEventInfo, struct FVector PickupLocation, struct FVector DropLocation, int32_t BulletsLeft, bool bIsPlayerAlive); // Function ShooterGame.AresGameEventLog.AuthRecordWeaponOrbRewardDroppedEvent // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36d6680
	void AuthRecordShotsFiredTelemetry(struct FAresMatchResult& MatchResult); // Function ShooterGame.AresGameEventLog.AuthRecordShotsFiredTelemetry // (Final|Native|Public|HasOutParms) // @ game+0x36d65e0
	void AuthRecordShotsFiredRoundTelemetry(int32_t RoundNumberEnded); // Function ShooterGame.AresGameEventLog.AuthRecordShotsFiredRoundTelemetry // (Final|Native|Public) // @ game+0x3635550
	void AuthRecordPlayerTeleporterUseEvent(struct FName TeleporterName, struct AShooterCharacter* Character); // Function ShooterGame.AresGameEventLog.AuthRecordPlayerTeleporterUseEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x36d6370
	void AuthRecordOrbInteractionEvent(struct FName OrbName, struct AShooterCharacter* Collector, struct AActor* Orb, int32_t NumCollectors); // Function ShooterGame.AresGameEventLog.AuthRecordOrbInteractionEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x36d6460
	void AuthRecordItemTeleporterUseEvent(struct FName TeleporterName, struct AActor* Item); // Function ShooterGame.AresGameEventLog.AuthRecordItemTeleporterUseEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x36d6370
	void AuthRecordAscenderUseEvent(struct FName AscenderName, struct AShooterCharacter* Character, float UseDuration); // Function ShooterGame.AresGameEventLog.AuthRecordAscenderUseEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x36d6240
};

// Class ShooterGame.AresGameInstance
// Size: 0x2b0 (Inherited: 0x280)
struct UAresGameInstance : UPlatformGameInstance {
	struct UAresServerGameInstance* ServerGameInstanceClass; // 0x280(0x08)
	struct UAresClientGameInstance* ClientGameInstance; // 0x288(0x08)
	struct UAresServerGameInstance* ServerGameInstance; // 0x290(0x08)
	struct UContentIndex* ContentIndexInstance; // 0x298(0x08)
	struct UAresTestLogic* RunningTestLogic; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void StopBlueprintTest(); // Function ShooterGame.AresGameInstance.StopBlueprintTest // (Final|Native|Public) // @ game+0x2024060
	bool StartBlueprintTestByName(struct FString& Name, bool bIsServer, char ClientIndex); // Function ShooterGame.AresGameInstance.StartBlueprintTestByName // (Final|Native|Public|HasOutParms) // @ game+0x36d6de0
	struct UAresTestLogic* GetRunningTestLogic(); // Function ShooterGame.AresGameInstance.GetRunningTestLogic // (Final|Native|Public|Const) // @ game+0x369eca0
	struct UAresGameInstance* GetFromContext(struct UObject* WorldContextObject); // Function ShooterGame.AresGameInstance.GetFromContext // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x36d6a60
	struct UAresGameInstance* GET(struct UWorld* FromWorld); // Function ShooterGame.AresGameInstance.GET // (Final|Native|Static|Public) // @ game+0x36d6950
};

// Class ShooterGame.GameModeDataAsset
// Size: 0x280 (Inherited: 0x50)
struct UGameModeDataAsset : UAresBasePrimaryDataAsset {
	struct FString DisplayName; // 0x50(0x10)
	struct TArray<enum class EAresTeamRole> TeamRoles; // 0x60(0x10)
	bool bHidesMinimap; // 0x70(0x01)
	bool bAllowsTeamVoice; // 0x71(0x01)
	bool bAllowsMatchTimeouts; // 0x72(0x01)
	char pad_73[0x1]; // 0x73(0x01)
	int32_t RoundsPerHalf; // 0x74(0x04)
	enum class EEconomyTypes EconomyType; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct TSoftClassPtr<UObject> GameMode; // 0x80(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> AbilityWidgetOverrides; // 0xb0(0x50)
	struct TSoftClassPtr<UObject> UIData; // 0x100(0x30)
	struct TMap<enum class EGameFeatureToggleName, bool> GameFeatureToggleOverrides; // 0x130(0x50)
	struct TMap<enum class EGameFeatureFloatConfigName, float> GameFeatureFloatOverrides; // 0x180(0x50)
	struct TMap<enum class EGameRuleBoolName, bool> GameRuleBoolOverrides; // 0x1d0(0x50)
	struct TSet<enum class EGameRuleBoolName> PlayerSettableGameRuleBools; // 0x220(0x50)
	struct TArray<struct FName> MapToModeTags; // 0x270(0x10)

	bool IsFreeForAll(); // Function ShooterGame.GameModeDataAsset.IsFreeForAll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36d6b60
	struct UBaseContentUIData* GetUIData(); // Function ShooterGame.GameModeDataAsset.GetUIData // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36d6b20
	struct TArray<struct FSoftObjectPath> GetAssetPathsToPreloadForMatch(struct FString MatchID); // Function ShooterGame.GameModeDataAsset.GetAssetPathsToPreloadForMatch // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	struct FString GetAssetPath(); // Function ShooterGame.GameModeDataAsset.GetAssetPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36d69e0
};

// Class ShooterGame.GameModeUIData
// Size: 0xd8 (Inherited: 0x90)
struct UGameModeUIData : UBaseContentUIData {
	struct FGameModeMatchDetailsConfig GameModeMatchDetailsConfig; // 0x90(0x18)
	struct FText Duration; // 0xa8(0x18)
	struct UCharacterSelectScreen* CharacterSelectOverride; // 0xc0(0x08)
	bool EnableShopHighlighting; // 0xc8(0x01)
	bool ShowAgentAbilityPreviewVideos; // 0xc9(0x01)
	char pad_CA[0x6]; // 0xca(0x06)
	struct UTexture2D* ListViewIconTall; // 0xd0(0x08)
};

// Class ShooterGame.AresGameplayBuff
// Size: 0x990 (Inherited: 0x948)
struct UAresGameplayBuff : UGameplayEffect {
	struct FEmbeddedEffectInfo BuffEffect; // 0x948(0x30)
	enum class EBuffEffectContext ContextObject; // 0x978(0x01)
	char pad_979[0x7]; // 0x979(0x07)
	struct UDamageType* DamageType; // 0x980(0x08)
	bool bIgnoreAlliedDamageDuringEnemyDamage; // 0x988(0x01)
	bool bOnlyAllowOneDamageEventPerTeam; // 0x989(0x01)
	enum class EAresTeamTargeting TeamTargeting; // 0x98a(0x01)
	char pad_98B[0x5]; // 0x98b(0x05)

	enum class EAresTeamTargeting GetTeamTargeting(); // Function ShooterGame.AresGameplayBuff.GetTeamTargeting // (Final|Native|Public|Const) // @ game+0x36e1880
	void ApplyRadialBuff(struct UObject* WorldContextObject, struct UAresGameplayBuff* BuffClass, struct FVector& Origin, float Radius, struct AActor* DamageCauser, struct APawn* InstigatorPawn); // Function ShooterGame.AresGameplayBuff.ApplyRadialBuff // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x36e08c0
};

// Class ShooterGame.AresGameStateBase
// Size: 0x5f0 (Inherited: 0x460)
struct AAresGameStateBase : AGameState {
	char pad_460[0x68]; // 0x460(0x68)
	struct APostProcessVolume* GlobalPostProcessVolume; // 0x4c8(0x08)
	struct TMap<struct UCharacterDataAsset*, struct APawn*> LoadedCharacterClasses; // 0x4d0(0x50)
	struct TArray<struct UCharacterUIData*> PlayerUIDataInGame; // 0x520(0x10)
	struct TArray<struct FGuid> DesiredBotCharacters; // 0x530(0x10)
	bool bBotDesiredCharactersReady; // 0x540(0x01)
	char pad_541[0x7]; // 0x541(0x07)
	struct AAresGameAutomation* AresGameAutomation; // 0x548(0x08)
	char pad_550[0x20]; // 0x550(0x20)
	bool bShouldPerformanceInstabilityTrackingBeEnabled; // 0x570(0x01)
	char pad_571[0x7]; // 0x571(0x07)
	struct TArray<struct FNetworkLoadedClass> LoadedClasses; // 0x578(0x10)
	struct TMap<struct FName, uint32_t> ThrottledEvents; // 0x588(0x50)
	char pad_5D8[0x18]; // 0x5d8(0x18)

	void RemoveExcessAttachedActorsForRespawn(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.AresGameStateBase.RemoveExcessAttachedActorsForRespawn // (Final|Native|Public|BlueprintCallable) // @ game+0x36e26b0
	void PlayerControllerDestroyed(struct AActor* PlayerController); // Function ShooterGame.AresGameStateBase.PlayerControllerDestroyed // (Final|Native|Protected) // @ game+0x36e2600
	void OnRep_BotDesiredCharactersReady(); // Function ShooterGame.AresGameStateBase.OnRep_BotDesiredCharactersReady // (Final|Native|Protected) // @ game+0x36e25e0
	void OnPlayerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AresGameStateBase.OnPlayerConnectionStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnLocalPlayerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AresGameStateBase.OnLocalPlayerConnectionStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void NetMulticastReleaseClass(struct FSoftObjectPath Class); // Function ShooterGame.AresGameStateBase.NetMulticastReleaseClass // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x36e24d0
	void NetMulticastLoadClass(struct FSoftObjectPath Class, bool bBlockingLoad); // Function ShooterGame.AresGameStateBase.NetMulticastLoadClass // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x36e2380
	void MulticastResetForRespawn(struct AShooterCharacter* ShooterCharacter, struct FTransform SpawnTransform); // Function ShooterGame.AresGameStateBase.MulticastResetForRespawn // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x36e2230
	struct AAresPlayerStateBase* GetPlayerStateFromSubject(struct FString Subject); // Function ShooterGame.AresGameStateBase.GetPlayerStateFromSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e17c0
	struct APostProcessVolume* GetGlobalPostProcessVolume(); // Function ShooterGame.AresGameStateBase.GetGlobalPostProcessVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e1770
	struct AAresGameAutomation* GetAutomation(); // Function ShooterGame.AresGameStateBase.GetAutomation // (Final|Native|Public|Const) // @ game+0x36a00e0
	struct TArray<struct AAresPlayerStateBase*> GetAresPlayerStates(); // Function ShooterGame.AresGameStateBase.GetAresPlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e16f0
	struct TArray<struct AAresPlayerStateBase*> GetActiveAresPlayerStates(); // Function ShooterGame.AresGameStateBase.GetActiveAresPlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e1670
	void CheckLoadingCompleted(struct FSoftObjectPath Class); // Function ShooterGame.AresGameStateBase.CheckLoadingCompleted // (Final|Native|Protected|HasDefaults) // @ game+0x36e0f30
	void AuthSetAutomation(struct AAresGameAutomation* NewAutomation); // Function ShooterGame.AresGameStateBase.AuthSetAutomation // (Final|Native|Public) // @ game+0x3634e00
	void AuthReleaseNetworkLoadedClass(struct TSoftClassPtr<UObject> Class); // Function ShooterGame.AresGameStateBase.AuthReleaseNetworkLoadedClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36e0de0
	void AuthNetworkLoadClass(struct TSoftClassPtr<UObject> Class, bool bBlockingLoad, struct FDelegate& CompletedEvent); // Function ShooterGame.AresGameStateBase.AuthNetworkLoadClass // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36e0c00
	void AuthAcknowledgeLoadClass(struct AAresPlayerController* Controller, struct FSoftObjectPath Class); // Function ShooterGame.AresGameStateBase.AuthAcknowledgeLoadClass // (Final|Native|Public|HasDefaults) // @ game+0x36e0ac0
	void AddPlayerUIDataToGame(struct UCharacterUIData* NewClass); // Function ShooterGame.AresGameStateBase.AddPlayerUIDataToGame // (Final|Native|Public) // @ game+0x36e0700
};

// Class ShooterGame.AresGameViewportClient
// Size: 0x3c8 (Inherited: 0x3c0)
struct UAresGameViewportClient : UCommonGameViewportClient {
	struct UWorld* ActiveWorldOverride; // 0x3c0(0x08)
};

// Class ShooterGame.AresGauntletControllerBase
// Size: 0x60 (Inherited: 0x38)
struct UAresGauntletControllerBase : UGauntletTestController {
	char pad_38[0x28]; // 0x38(0x28)

	void InitStatusHandler(enum class EAresClientGameInstanceInitStatus InitStatus, struct FText ErrorCode); // Function ShooterGame.AresGauntletControllerBase.InitStatusHandler // (Final|Native|Private) // @ game+0x36e1e00
};

// Class ShooterGame.AresGauntletTestResultsManager
// Size: 0x80 (Inherited: 0x30)
struct UAresGauntletTestResultsManager : UObject {
	char pad_30[0x50]; // 0x30(0x50)

	void AddResult(struct FString ControllerName, struct FGauntletTestResult NewResult); // Function ShooterGame.AresGauntletTestResultsManager.AddResult // (Final|Native|Static|Public) // @ game+0x36e0790
};

// Class ShooterGame.AresGlobalTransition
// Size: 0x438 (Inherited: 0x410)
struct AAresGlobalTransition : AGameObject {
	struct UMaterialInterface* ReplaceMaterial; // 0x410(0x08)
	struct FName ExcludeTag; // 0x418(0x0c)
	char pad_424[0x4]; // 0x424(0x04)
	struct TArray<struct FStaticActorMaterialMapping> SavedMapping; // 0x428(0x10)
};

// Class ShooterGame.AresHitReactions
// Size: 0x48 (Inherited: 0x30)
struct UAresHitReactions : UObject {
	struct TArray<struct FAresHitReactionEntry> HitReactions; // 0x30(0x10)
	enum class EDirectionFilter DirectionFilter; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	void LookupHitReactionResults(enum class EAresDamageAnimationCategory AnimationCategory, enum class EAresDirectionalDamage DirectionalDamage, enum class EAresRegionalDamage RegionalDamage, enum class EAresDamageCategory DamageCategory, enum class EAresBodySection DamageBodySection, struct FName BoneName, struct UShooterDamageType* DamageType, float DamageAmount, struct TArray<struct FHitReactionResult>& OutHitReactionResults); // Function ShooterGame.AresHitReactions.LookupHitReactionResults // (Final|Native|Public|HasOutParms|Const) // @ game+0x36e1f40
};

// Class ShooterGame.AresHotfixManager
// Size: 0x108 (Inherited: 0x80)
struct UAresHotfixManager : UInitSystem {
	char pad_80[0x30]; // 0x80(0x30)
	struct URiotProductManager* ProductManager; // 0xb0(0x08)
	struct URiotGamesApiClient* RiotGamesApi; // 0xb8(0x08)
	struct UFRELoginManager* FRELoginManager; // 0xc0(0x08)
	struct UPlatformEnvironmentManager* PlatformEnvironmentManager; // 0xc8(0x08)
	struct URiotClientConfigManager* RiotClientConfigManager; // 0xd0(0x08)
	struct FSoftClassPath PostHotfixMap; // 0xd8(0x20)
	char pad_F8[0x10]; // 0xf8(0x10)
};

// Class ShooterGame.AresHotfixViewModel
// Size: 0x68 (Inherited: 0x48)
struct UAresHotfixViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnIsHotfixAvailableChanged; // 0x48(0x10)
	struct UPatchAvailabilityManager* PatchAvailabilityManager; // 0x58(0x08)
	bool IsHotfixAvailable; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)

	void SetIsHotfixAvailable(bool NewIsHotfixAvailable); // Function ShooterGame.AresHotfixViewModel.SetIsHotfixAvailable // (Final|Native|Protected|BlueprintCallable) // @ game+0x36e1d70
	void Refresh(); // Function ShooterGame.AresHotfixViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x36e2690
	void Init(); // Function ShooterGame.AresHotfixViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void HandleIsHotfixAvailable(bool bNeedsHotfix); // Function ShooterGame.AresHotfixViewModel.HandleIsHotfixAvailable // (Final|Native|Protected) // @ game+0x36e1d70
	bool GetIsHotfixAvailable(); // Function ShooterGame.AresHotfixViewModel.GetIsHotfixAvailable // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x36e17a0
	void BindEventsToPatchAvailabilityManager(); // Function ShooterGame.AresHotfixViewModel.BindEventsToPatchAvailabilityManager // (Final|Native|Protected|BlueprintCallable) // @ game+0x36e0f10
};

// Class ShooterGame.AresHudElement
// Size: 0x58 (Inherited: 0x30)
struct UAresHudElement : UObject {
	struct UCanvas* Canvas; // 0x30(0x08)
	bool bPixelAlignmentEnabled; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float GlobalAlpha; // 0x3c(0x04)
	struct FAresHudElementRectangle ElementRectangle; // 0x40(0x14)
	bool bElementEnabled; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	void OnDraw(float DeltaTime); // Function ShooterGame.AresHudElement.OnDraw // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct FVector2D GetTextExtentsWithLineWrap(struct FText& Text, float LineWrapWidth, float VerticalSpaceBetweenLines, enum class EAresHudTextExtentsMode TextExtentsMode, struct FAresHudFontParams& AresHudFontParams); // Function ShooterGame.AresHudElement.GetTextExtentsWithLineWrap // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e1af0
	struct FVector2D GetTextExtents(struct FText& Text, enum class EAresHudTextExtentsMode TextExtentsMode, struct FAresHudFontParams& AresHudFontParams, struct FVector2D& ScaleExtents); // Function ShooterGame.AresHudElement.GetTextExtents // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e18b0
	struct FVector2D DrawTextWithLineWrap(struct FText& Text, float LineWrapWidth, float VerticalSpaceBetweenLines, struct FVector2D& Pos, enum class EAresDrawOrigin DrawOrigin, enum class EAresHudTextExtentsMode TextExtentsModeForDrawOriginAdjustment, struct FAresHudFontParams& AresHudFontParams, struct FLinearColor DrawColor); // Function ShooterGame.AresHudElement.DrawTextWithLineWrap // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36e1320
	void DrawText(struct FText& Text, struct FVector2D& Pos, enum class EAresDrawOrigin DrawOrigin, enum class EAresHudTextExtentsMode TextExtentsModeForDrawOriginAdjustment, struct FAresHudFontParams& AresHudFontParams, struct FVector2D ScaleExtents, struct FLinearColor DrawColor); // Function ShooterGame.AresHudElement.DrawText // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x36e1030
};

// Class ShooterGame.HUDGlobalsDataAsset
// Size: 0x438 (Inherited: 0x40)
struct UHUDGlobalsDataAsset : UAresPlatformDataAsset {
	struct TArray<struct TSoftClassPtr<UObject>> OptionsScreenAssets; // 0x40(0x10)
	struct TSoftClassPtr<UObject> InformationalScreenAsset; // 0x50(0x30)
	struct FAresUMGElementAsset ShopScreenAsset; // 0x80(0xb0)
	struct FAresUMGElementAsset ShopScreenAssetNew; // 0x130(0xb0)
	struct TSoftClassPtr<UObject> MegamapAsset; // 0x1e0(0x30)
	struct TSoftClassPtr<UObject> ShootingRangeMissionAsset; // 0x210(0x30)
	struct TSoftClassPtr<UObject> MegamapViewModelAsset; // 0x240(0x30)
	struct TSoftClassPtr<UObject> NonVerbalCommsViewModelAsset; // 0x270(0x30)
	struct TSoftClassPtr<UObject> RadialCommAsset; // 0x2a0(0x30)
	struct TSoftClassPtr<UObject> MissionSettingsScreenCoordinatorAsset; // 0x2d0(0x30)
	struct TSoftClassPtr<UObject> ConsoleNonLookingPickupHUDWidget; // 0x300(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapMaterialAsset; // 0x330(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapFogMaterialAsset; // 0x360(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapVisionMaterialAsset; // 0x390(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapObserverVisionMaterialAsset; // 0x3c0(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapIconMaterialAsset; // 0x3f0(0x30)
	uint32_t ChatRoomTypesWithPrefixes; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct TArray<struct FAresUMGElementAsset> HUDElementAssets; // 0x428(0x10)
};

// Class ShooterGame.AresHUDListener
// Size: 0xf0 (Inherited: 0xe8)
struct UAresHUDListener : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)

	void HandleEquippableRestrictionErrorInEditor(struct AAresEquippable* Equippable, enum class EAresEquippableRestrictionType Restriction); // Function ShooterGame.AresHUDListener.HandleEquippableRestrictionErrorInEditor // (Final|Native|Private) // @ game+0x36eab40
	void HandleEquippableChanged(struct AAresEquippable* Equippable); // Function ShooterGame.AresHUDListener.HandleEquippableChanged // (Final|Native|Private) // @ game+0x36eaab0
};

// Class ShooterGame.AresIconButton
// Size: 0xa18 (Inherited: 0xa10)
struct UAresIconButton : UAresActionButton {
	enum class EAresIconButtonSize ButtonSize; // 0xa10(0x01)
	enum class EAresIconButtonState ButtonState; // 0xa11(0x01)
	char pad_A12[0x6]; // 0xa12(0x06)

	void SetOverrides(struct FAresIconButtonOverridesData& OverridesData); // Function ShooterGame.AresIconButton.SetOverrides // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x36eb7a0
	void SetButtonState(enum class EAresIconButtonState NewState); // Function ShooterGame.AresIconButton.SetButtonState // (Final|Native|Protected|BlueprintCallable) // @ game+0x36eb690
	void SetButtonSize(enum class EAresIconButtonSize NewButtonSize); // Function ShooterGame.AresIconButton.SetButtonSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x36eb610
	void ResetToDefaults(); // Function ShooterGame.AresIconButton.ResetToDefaults // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36eb5e0
};

// Class ShooterGame.AresWidgetPropertyComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UAresWidgetPropertyComponent : UUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void UnbindVector2DProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindVector2DProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c44b0
	void UnbindTexture2DProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindTexture2DProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c4340
	void UnbindTextProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindTextProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c41d0
	void UnbindMaterialInterfaceProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindMaterialInterfaceProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c4060
	void UnbindLinearColorProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindLinearColorProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c3ef0
	void UnbindIntProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindIntProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c3d80
	void UnbindFloatProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindFloatProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c3c10
	void UnbindBoolProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindBoolProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c3aa0
	void SetPropertyComponentActive(bool bActive); // Function ShooterGame.AresWidgetPropertyComponent.SetPropertyComponentActive // (Final|Native|Public|BlueprintCallable) // @ game+0x37c3a10
	bool IsPropertyComponentOnScreen(); // Function ShooterGame.AresWidgetPropertyComponent.IsPropertyComponentOnScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37c3440
	bool IsPropertyComponentActive(); // Function ShooterGame.AresWidgetPropertyComponent.IsPropertyComponentActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37c3420
	struct UAresUIPropertyRegistry* GetPropertyRegistry(); // Function ShooterGame.AresWidgetPropertyComponent.GetPropertyRegistry // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x37a36a0
	void ComponentInitialize(); // Function ShooterGame.AresWidgetPropertyComponent.ComponentInitialize // (Native|Event|Protected|BlueprintEvent) // @ game+0x37c24d0
	void ComponentCleanup(); // Function ShooterGame.AresWidgetPropertyComponent.ComponentCleanup // (Native|Event|Protected|BlueprintEvent) // @ game+0x37c24a0
	void BindVector2DProperty(struct FString PropertyID, struct FVector2D DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindVector2DProperty // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37c2220
	void BindTexture2DProperty(struct FString PropertyID, struct UTexture2D* DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindTexture2DProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c2080
	void BindTextProperty(struct FString PropertyID, struct FText DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindTextProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c1e70
	void BindMaterialInterfaceProperty(struct FString PropertyID, struct UMaterialInterface* DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindMaterialInterfaceProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c1cd0
	void BindLinearColorProperty(struct FString PropertyID, struct FLinearColor DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindLinearColorProperty // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37c1b20
	void BindIntProperty(struct FString PropertyID, int32_t DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindIntProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c1980
	void BindFloatProperty(struct FString PropertyID, float DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindFloatProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c17e0
	void BindBoolProperty(struct FString PropertyID, bool DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindBoolProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37c1630
};

// Class ShooterGame.AresTouchWidgetComponent
// Size: 0x338 (Inherited: 0x2d0)
struct UAresTouchWidgetComponent : UAresWidgetPropertyComponent {
	char pad_2D0[0x8]; // 0x2d0(0x08)
	bool bHandlesEnabledStateChange; // 0x2d8(0x01)
	bool bHandlesSelectedForEditChange; // 0x2d9(0x01)
	enum class EWidgetEnabledState EnabledState; // 0x2da(0x01)
	bool bSelectedForEdit; // 0x2db(0x01)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct TSoftObjectPtr<UAresTouchWidget> ParentTouchWidgetSoftPtr; // 0x2e0(0x30)
	char pad_310[0x28]; // 0x310(0x28)

	void OnSelectedForEditChanged_Internal(struct FString PropertyID, bool bOldValue, bool bNewValue); // Function ShooterGame.AresTouchWidgetComponent.OnSelectedForEditChanged_Internal // (Final|Native|Private) // @ game+0x37b1f90
	void OnSelectedForEditChanged(bool bNewValue); // Function ShooterGame.AresTouchWidgetComponent.OnSelectedForEditChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x262f4d0
	void OnEnabledStateChanged_Internal(struct FString PropertyID, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresTouchWidgetComponent.OnEnabledStateChanged_Internal // (Final|Native|Private) // @ game+0x37b1e40
	void OnEnabledStateChanged(enum class EWidgetEnabledState NewValue); // Function ShooterGame.AresTouchWidgetComponent.OnEnabledStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x37b1db0
};

// Class ShooterGame.AresIconButtonComponent
// Size: 0x368 (Inherited: 0x338)
struct UAresIconButtonComponent : UAresTouchWidgetComponent {
	bool bHandlesButtonStateChanged; // 0x338(0x01)
	bool bHandlesCrossedOutChanged; // 0x339(0x01)
	bool bOnlyVisibleWhenCrossedOut; // 0x33a(0x01)
	enum class EAresIconButtonState ButtonState; // 0x33b(0x01)
	bool bCrossedOut; // 0x33c(0x01)
	char pad_33D[0x2b]; // 0x33d(0x2b)

	void OnCrossedOutChanged_Internal(struct FString PropertyID, bool bOldValue, bool bNewValue); // Function ShooterGame.AresIconButtonComponent.OnCrossedOutChanged_Internal // (Final|Native|Private) // @ game+0x36eb030
	void OnCrossedOutChanged(bool bNewValue); // Function ShooterGame.AresIconButtonComponent.OnCrossedOutChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x36eaf90
	void OnButtonStateChanged_Internal(struct FString PropertyID, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresIconButtonComponent.OnButtonStateChanged_Internal // (Final|Native|Private) // @ game+0x36eae60
	void OnButtonStateChanged(enum class EAresIconButtonState NewValue); // Function ShooterGame.AresIconButtonComponent.OnButtonStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x36eadd0
	struct UAresIconButton* GetParentIconButton(); // Function ShooterGame.AresIconButtonComponent.GetParentIconButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36eaa80
};

// Class ShooterGame.AresIconButtonStyleAsset
// Size: 0x60 (Inherited: 0x38)
struct UAresIconButtonStyleAsset : UDataAsset {
	struct FAresIconButtonStyle ButtonStyle; // 0x38(0x24)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class ShooterGame.ImpactEffectInstance
// Size: 0x168 (Inherited: 0x40)
struct UImpactEffectInstance : UPureEffectInstance {
	bool bIsAlive; // 0x40(0x01)
	bool bInitialized; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	float StartTime; // 0x44(0x04)
	float MinLifespan; // 0x48(0x04)
	bool bVisibleOnStart; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	struct FHitResult HitResult; // 0x50(0x90)
	struct UParticleSystemComponent* ParticleSystemComponent; // 0xe0(0x08)
	struct UParticleSystem* ParticleSystem; // 0xe8(0x08)
	struct FRotator ParticleRotation; // 0xf0(0x0c)
	float ParticleScale; // 0xfc(0x04)
	struct UObject* EffectContext; // 0x100(0x08)
	struct FImpactEffectAudioInfo AudioInfo; // 0x108(0x18)
	struct FImpactEffectDecalInfo DecalInfo; // 0x120(0x48)

	float GetElapsedLifetime(); // Function ShooterGame.ImpactEffectInstance.GetElapsedLifetime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36eaa50
};

// Class ShooterGame.ImpactEffectStaticMeshInstance
// Size: 0x170 (Inherited: 0x168)
struct UImpactEffectStaticMeshInstance : UImpactEffectInstance {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x168(0x08)
};

// Class ShooterGame.AresImpactEffectComponent
// Size: 0x290 (Inherited: 0x290)
struct UAresImpactEffectComponent : USceneComponent {

	void TickImpactEffect(struct UImpactEffectInstance* Instance); // Function ShooterGame.AresImpactEffectComponent.TickImpactEffect // (Native|Event|Public|BlueprintEvent) // @ game+0x36eb970
	void StopImpactEffect(struct UImpactEffectInstance* Instance); // Function ShooterGame.AresImpactEffectComponent.StopImpactEffect // (Native|Event|Public|BlueprintEvent) // @ game+0x36a87e0
	void StartImpactEffect(struct UImpactEffectInstance* Instance); // Function ShooterGame.AresImpactEffectComponent.StartImpactEffect // (Native|Event|Public|BlueprintEvent) // @ game+0x36eb8e0
};

// Class ShooterGame.AresImpactEffect
// Size: 0x680 (Inherited: 0x550)
struct AAresImpactEffect : AEffectContainer {
	struct UImpactEffectInstance* InstanceClass; // 0x548(0x08)
	struct TMap<enum class EAresSurfaceType, struct FAresHitImpactParticle> ImpactParticleMap; // 0x550(0x50)
	struct TMap<enum class EAresSurfaceType, struct FDecalData> ImpactDecalMap; // 0x5a0(0x50)
	struct FClassInclusionExclusionFilter ValidHitActorClassFilter; // 0x5f0(0x50)
	struct AShooterCharacter* CharacterClass; // 0x640(0x08)
	struct UPhysicalMaterial* FleshPhysicalMaterial; // 0x648(0x08)
	struct UAkAudioEvent* ImpactEffectAudioEvent; // 0x650(0x08)
	float MaxImpactEffectAudioDistance; // 0x658(0x04)
	struct FName AudioExclusionTag; // 0x65c(0x0c)
	struct TArray<struct UAresImpactEffectComponent*> ImpactEffectComponents; // 0x668(0x10)
};

// Class ShooterGame.AresInitGauntletController
// Size: 0x68 (Inherited: 0x60)
struct UAresInitGauntletController : UAresGauntletControllerBase {
	char pad_60[0x8]; // 0x60(0x08)

	void PatchFinished(); // Function ShooterGame.AresInitGauntletController.PatchFinished // (Final|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.AresInputComponent
// Size: 0x1828 (Inherited: 0x180)
struct UAresInputComponent : UInputComponent {
	struct AShooterCharacter* ShooterCharacterOwner; // 0x180(0x08)
	struct FAresInputStream CurrentFrameInputStream; // 0x188(0x468)
	struct FAresInputStream RawSubFrameKeyInputStream; // 0x5f0(0x468)
	struct FAresInputStream OrderedSubFrameInputStream; // 0xa58(0x468)
	struct FAresInputStream UnusedSubFrameInputs; // 0xec0(0x468)
	struct TArray<float> SubFrameMousePositionXDeltas; // 0x1328(0x10)
	struct TArray<float> SubFrameMousePositionYDeltas; // 0x1338(0x10)
	struct FAresInputStream AccumulatedInputStream; // 0x1348(0x468)
	char pad_17B0[0x78]; // 0x17b0(0x78)

	void HandleTriggerSwapUnequip(); // Function ShooterGame.AresInputComponent.HandleTriggerSwapUnequip // (Final|Native|Private) // @ game+0x36eadb0
	void HandleReflexLatencyAnalyzerFeatureToggled(enum class EGameFeatureToggleName Feature, bool bEnabled); // Function ShooterGame.AresInputComponent.HandleReflexLatencyAnalyzerFeatureToggled // (Final|Native|Private) // @ game+0x36eace0
	void HandleRateLimitClientInputsToggled(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.AresInputComponent.HandleRateLimitClientInputsToggled // (Final|Native|Private) // @ game+0x36eac10
};

// Class ShooterGame.AresInputMethodEditor
// Size: 0x450 (Inherited: 0x2c8)
struct UAresInputMethodEditor : UUserWidget {
	struct FSlateFontInfo FontStyle; // 0x2c8(0x60)
	struct FMargin TextPadding; // 0x328(0x10)
	struct FLinearColor TextColor; // 0x338(0x10)
	struct FLinearColor BackgroundColor; // 0x348(0x10)
	struct FSlateFontInfo SelectedFontStyle; // 0x358(0x60)
	struct FMargin SelectedTextPadding; // 0x3b8(0x10)
	struct FLinearColor SelectedTextColor; // 0x3c8(0x10)
	struct FLinearColor HighlightColor; // 0x3d8(0x10)
	struct TArray<struct FString> DefaultCandidateStrings; // 0x3e8(0x10)
	struct TArray<struct FString> InGameCandidateStrings; // 0x3f8(0x10)
	char pad_408[0x48]; // 0x408(0x48)

	void RepositionOnViewport(); // Function ShooterGame.AresInputMethodEditor.RepositionOnViewport // (Final|Native|Public|BlueprintCallable) // @ game+0x36eb5c0
	void HandleInputMethodOnUpdate(struct TArray<struct FString>& NewCandidateStrings, int32_t NewSelectedIndex); // Function ShooterGame.AresInputMethodEditor.HandleInputMethodOnUpdate // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresInputMotionComponent
// Size: 0x120 (Inherited: 0xe8)
struct UAresInputMotionComponent : UActorComponent {
	char pad_E8[0x30]; // 0xe8(0x30)
	enum class EAresBoolSettingName GyroEnableSetting; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)

	void SetPaused(bool bInPaused); // Function ShooterGame.AresInputMotionComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x36f8510
	void OnGyroEnabledSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresInputMotionComponent.OnGyroEnabledSettingChanged // (Final|Native|Protected) // @ game+0x36f7f20
	bool CanActivate(); // Function ShooterGame.AresInputMotionComponent.CanActivate // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3655b50
	bool bIsPaused(); // Function ShooterGame.AresInputMotionComponent.bIsPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f8890
};

// Class ShooterGame.AresInputMotionAimingComponent
// Size: 0x1d0 (Inherited: 0x120)
struct UAresInputMotionAimingComponent : UAresInputMotionComponent {
	float GyroAimSensitivityScalarX; // 0x120(0x04)
	float GyroAimSensitivityScalarY; // 0x124(0x04)
	struct FName WalkAction; // 0x128(0x0c)
	char pad_134[0x4]; // 0x134(0x04)
	struct FMulticastInlineDelegate OnGyroMove; // 0x138(0x10)
	struct FMulticastInlineDelegate OnGyroStop; // 0x148(0x10)
	struct FMulticastInlineDelegate OnGyroShotDeadzonePassed; // 0x158(0x10)
	struct FMulticastInlineDelegate OnGyroShotMove; // 0x168(0x10)
	char pad_178[0x58]; // 0x178(0x58)

	void SetGyroMovementRestricted(bool NewValue); // Function ShooterGame.AresInputMotionAimingComponent.SetGyroMovementRestricted // (Final|Native|Public|BlueprintCallable) // @ game+0x36eb710
	void OnGyroFilteringMinCutoffSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringMinCutoffSettingChanged // (Final|Native|Public) // @ game+0x36eb4b0
	void OnGyroFilteringEnabledSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringEnabledSettingChanged // (Final|Native|Public) // @ game+0x36eb390
	void OnGyroFilteringDeltaCutoffSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringDeltaCutoffSettingChanged // (Final|Native|Public) // @ game+0x36eb280
	void OnGyroFilteringCutoffSlopeSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringCutoffSlopeSettingChanged // (Final|Native|Public) // @ game+0x36eb170
};

// Class ShooterGame.AresInputDebugHistory
// Size: 0x510 (Inherited: 0x30)
struct UAresInputDebugHistory : UObject {
	char pad_30[0x4e0]; // 0x30(0x4e0)
};

// Class ShooterGame.AresInputStateComponent
// Size: 0xc38 (Inherited: 0xe8)
struct UAresInputStateComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FMulticastInlineDelegate OnInputStateChanged; // 0x100(0x10)
	char pad_110[0x28]; // 0x110(0x28)
	bool bInputAimVectorIsValid; // 0x138(0x01)
	char pad_139[0x1f]; // 0x139(0x1f)
	struct AShooterCharacter* ShooterCharacterOwner; // 0x158(0x08)
	char pad_160[0xd8]; // 0x160(0xd8)
	struct FVector_NetQuantizeNormal CurrentInputAimVector; // 0x238(0x0c)
	char pad_244[0x4]; // 0x244(0x04)
	struct AAresEquippable* CurrentEquippableTarget; // 0x248(0x08)
	struct AAresEquippable* LastClientPredictedEquippable; // 0x250(0x08)
	int32_t ClientAcknowledgedCorrectionIndex; // 0x258(0x04)
	enum class EAresInputState CurrentEquippableInputStates[0x10]; // 0x25c(0x10)
	enum class EAresInputState CurrentActivationInputStates[0x10]; // 0x26c(0x10)
	enum class EAresInputState CurrentMovementInputStates; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
	struct TMap<enum class EUseKeyType, enum class EAresInputState> CurrentInteractableUseStates; // 0x280(0x50)
	struct TMap<enum class EUseKeyType, float> LastStartInteractableUseInputTime; // 0x2d0(0x50)
	float ViewRotationAbsPitchLimitDegrees; // 0x320(0x04)
	char pad_324[0x1c]; // 0x324(0x1c)
	struct FAresInputStream InputStreamPendingLocalProcessing; // 0x340(0x468)
	struct FAresInputStream InputStreamPendingSerialize; // 0x7a8(0x468)
	char pad_C10[0x10]; // 0xc10(0x10)
	struct UAresInputDebugHistory* DebugHistory; // 0xc20(0x08)
	char pad_C28[0x10]; // 0xc28(0x10)

	void OnEquippableChanged(struct AAresEquippable* Equippable); // Function ShooterGame.AresInputStateComponent.OnEquippableChanged // (Final|Native|Private) // @ game+0x36f7d60
	void ClientInternalDebugUpdateEventStatus(int32_t EventRangeStart, int32_t EventRangeEndInclusive, enum class EAresInputEventDebugStatus Status); // Function ShooterGame.AresInputStateComponent.ClientInternalDebugUpdateEventStatus // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x36f5500
	void AuthOnOwnerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AresInputStateComponent.AuthOnOwnerConnectionStatusChanged // (Final|Native|Public) // @ game+0x363f1c0
	void AuthHandleControllerChanged(struct AController* NewController); // Function ShooterGame.AresInputStateComponent.AuthHandleControllerChanged // (Final|Native|Public) // @ game+0x3634e00
};

// Class ShooterGame.AresInventory
// Size: 0x310 (Inherited: 0xe8)
struct UAresInventory : UActorComponent {
	char pad_E8[0xc]; // 0xe8(0x0c)
	struct FVector DropOffset; // 0xf4(0x0c)
	struct FMulticastInlineDelegate AuthOnInventoryTransaction; // 0x100(0x10)
	struct FMulticastInlineDelegate OnEquippableEquipped; // 0x110(0x10)
	struct FMulticastInlineDelegate OnEquippableUnequipped; // 0x120(0x10)
	struct FMulticastInlineDelegate OnEquippableChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnEquippableRestrictionError; // 0x140(0x10)
	struct FMulticastInlineDelegate OnItemsChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnAuthTryPickup; // 0x160(0x10)
	char pad_170[0x18]; // 0x170(0x18)
	struct UItemSlot* ItemSlots[0x10]; // 0x188(0x80)
	struct TArray<struct AAresItem*> ItemsTrashedThisRound; // 0x208(0x10)
	struct TArray<struct AAresEquippable*> LastEquippables; // 0x218(0x10)
	enum class EAresItemSlot LatestDesiredEquippableSlot; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct AAresEquippable* DesiredEquippable; // 0x230(0x08)
	enum class EEquippableRestrictions DesiredEquippableRestrictions; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct AAresEquippable* PreviousDesiredEquippable; // 0x240(0x08)
	struct AAresEquippable* CurrentEquippable; // 0x248(0x08)
	bool bInitialEquippableChanged; // 0x250(0x01)
	char pad_251[0x17]; // 0x251(0x17)
	struct FPendingEquippableChange EquippableChange; // 0x268(0x18)
	struct TArray<struct FPendingEquippableChange> PendingEquippableChanges; // 0x280(0x10)
	float DesiredEquippableStartTime; // 0x290(0x04)
	float LastCycleEquippableTimestamp; // 0x294(0x04)
	struct TArray<struct USlotModifierComponent*> SlotModifiers; // 0x298(0x10)
	struct AShooterCharacter* ShooterCharacterOwner; // 0x2a8(0x08)
	int32_t OwningClientCurrentCorrectionIndex; // 0x2b0(0x04)
	enum class EServerCorrectionState AuthCorrectionState; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float DisagreementTimeStamp; // 0x2b8(0x04)
	float LastPendingReplicationWarning; // 0x2bc(0x04)
	float DisagreementGracePeriodDuration; // 0x2c0(0x04)
	bool bInitialServerCorrectionSent; // 0x2c4(0x01)
	bool bInitialServerCorrectionProcessed; // 0x2c5(0x01)
	char pad_2C6[0x2]; // 0x2c6(0x02)
	float bNeedsEquipWeaponAfterRespawn; // 0x2c8(0x04)
	bool bIsReplacingEquippableWithPickup; // 0x2cc(0x01)
	char pad_2CD[0xb]; // 0x2cd(0x0b)
	struct FInventoryServerCorrectRepVariables AuthServerCorrectRepVariables; // 0x2d8(0x10)
	struct TArray<struct FEquipDebugRecord> EquipDebugRecordHistory; // 0x2e8(0x10)
	struct TArray<struct AAresItem*> DroppedItems; // 0x2f8(0x10)
	enum class EAresItemSlot CycleEquippableSlotOverride; // 0x308(0x01)
	bool bIsSuppressible; // 0x309(0x01)
	enum class EEquipSpeed SuppressedUnequipSpeed; // 0x30a(0x01)
	enum class EStorageClashBehavior StorageClashBehavior; // 0x30b(0x01)
	char pad_30C[0x4]; // 0x30c(0x04)

	void UpdatePendingEquippableChange(float Timestamp); // Function ShooterGame.AresInventory.UpdatePendingEquippableChange // (Final|Native|Private) // @ game+0x36f8810
	bool TryEquipSpecificEquippable(struct AAresEquippable* Equippable, enum class EEquipSource EquipSource, enum class EEquippableRestrictions EquippableRestrictions); // Function ShooterGame.AresInventory.TryEquipSpecificEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x36f8700
	bool TryAutoEquipNextWeapon(enum class EEquipSpeed EquipSpeed, enum class EEquipSource EquipSource); // Function ShooterGame.AresInventory.TryAutoEquipNextWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x36f8630
	bool SlotCompatibilityIsModified(enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.SlotCompatibilityIsModified // (Final|Native|Public) // @ game+0x36f85a0
	void SetIsReplacingEquippableWithPickup(bool bIsReplacing); // Function ShooterGame.AresInventory.SetIsReplacingEquippableWithPickup // (Final|Native|Public|BlueprintCallable) // @ game+0x36f8480
	void ServerRequestCorrection(int32_t ClientCorrectionIndex); // Function ShooterGame.AresInventory.ServerRequestCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36f83f0
	void PossessedBy(struct AController* Controller); // Function ShooterGame.AresInventory.PossessedBy // (Final|Native|Public) // @ game+0x36f8360
	void OverrideEquipSpeed(enum class EEquipSpeed EquipSpeed); // Function ShooterGame.AresInventory.OverrideEquipSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x36f82e0
	void OnUnequipCurrentEquippableChanged(enum class EAresInputState InputState); // Function ShooterGame.AresInventory.OnUnequipCurrentEquippableChanged // (Final|Native|Public) // @ game+0x36f8260
	void OnRep_ItemSlots(); // Function ShooterGame.AresInventory.OnRep_ItemSlots // (Final|Native|Public) // @ game+0x36f8240
	void OnRep_EquippableChange(); // Function ShooterGame.AresInventory.OnRep_EquippableChange // (Final|Native|Private) // @ game+0x36f8220
	void OnRep_AuthServerCorrectRepVariables(); // Function ShooterGame.AresInventory.OnRep_AuthServerCorrectRepVariables // (Final|Native|Private) // @ game+0x36f8200
	void OnPrevEquippableInput(); // Function ShooterGame.AresInventory.OnPrevEquippableInput // (Final|Native|Public) // @ game+0x36f81e0
	void OnNextEquippableInput(); // Function ShooterGame.AresInventory.OnNextEquippableInput // (Final|Native|Public) // @ game+0x36f81c0
	void OnItemSlotChanged(); // Function ShooterGame.AresInventory.OnItemSlotChanged // (Final|Native|Public) // @ game+0x36f81a0
	void OnInputStateChanged(enum class EAresEquippableInput Input, enum class EAresInputState NewInputState, float InputTimestamp, float SubTickMovementTimestamp); // Function ShooterGame.AresInventory.OnInputStateChanged // (Final|Native|Public) // @ game+0x36f8040
	void OnGamepadWeaponSwapTapInput(); // Function ShooterGame.AresInventory.OnGamepadWeaponSwapTapInput // (Final|Native|Public) // @ game+0x36f7f00
	void OnGamepadWeaponSwapPressInput(); // Function ShooterGame.AresInventory.OnGamepadWeaponSwapPressInput // (Final|Native|Public) // @ game+0x36f7ee0
	void OnGamepadWeaponSwapHoldInput(); // Function ShooterGame.AresInventory.OnGamepadWeaponSwapHoldInput // (Final|Native|Public) // @ game+0x36f7ec0
	void OnGamepadDropItemsTapInput(); // Function ShooterGame.AresInventory.OnGamepadDropItemsTapInput // (Final|Native|Public) // @ game+0x36f7ea0
	void OnGamepadDropItemsHoldInput(); // Function ShooterGame.AresInventory.OnGamepadDropItemsHoldInput // (Final|Native|Public) // @ game+0x36f7e80
	void OnEquippableDropChanged(struct AAresEquippable* Equippable); // Function ShooterGame.AresInventory.OnEquippableDropChanged // (Final|Native|Public) // @ game+0x36f7df0
	void OnEquipLastUsedInput(); // Function ShooterGame.AresInventory.OnEquipLastUsedInput // (Final|Native|Public) // @ game+0x36f7d40
	void OnDroppedEquippableOwnerChanged(struct AAresItem* Item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AresInventory.OnDroppedEquippableOwnerChanged // (Final|Native|Private) // @ game+0x36f7c30
	void OnDroppedEquippableDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.AresInventory.OnDroppedEquippableDestroyed // (Final|Native|Private) // @ game+0x36f7ba0
	void OnDropEquippableInput(); // Function ShooterGame.AresInventory.OnDropEquippableInput // (Final|Native|Public) // @ game+0x36f7b80
	void OnAuthInventoryTransaction(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* Item); // Function ShooterGame.AresInventory.OnAuthInventoryTransaction // (Final|Native|Private) // @ game+0x36f7a70
	void OnActivationInputStateChanged(enum class EAresItemSlot ItemSlot, char IndexInItemSlot, enum class EAresInputState NewInputState, enum class EAresActivationInputType ActivationType, float InputTimestamp); // Function ShooterGame.AresInventory.OnActivationInputStateChanged // (Final|Native|Public) // @ game+0x36f78d0
	void MulticastCurrentEquippableForServerOwnedActors(struct AAresEquippable* NewCurrentEquippable); // Function ShooterGame.AresInventory.MulticastCurrentEquippableForServerOwnedActors // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x36f7840
	bool IsStorageSlot(enum class EAresItemSlot EquipSlot); // Function ShooterGame.AresInventory.IsStorageSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f77b0
	bool IsReplacingEquippableWithPickup(); // Function ShooterGame.AresInventory.IsReplacingEquippableWithPickup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f7790
	bool IsDesiredEquippable(struct AAresEquippable* Equippable); // Function ShooterGame.AresInventory.IsDesiredEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f76f0
	bool IsCurrentEquippable(struct AAresEquippable* Equippable); // Function ShooterGame.AresInventory.IsCurrentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f7650
	bool HasSecondaryEquippable(); // Function ShooterGame.AresInventory.HasSecondaryEquippable // (Final|Native|Public|Const) // @ game+0x36f7620
	bool HasPrimaryEquippable(); // Function ShooterGame.AresInventory.HasPrimaryEquippable // (Final|Native|Public|Const) // @ game+0x36f75f0
	bool HasItemByClass(struct AAresItem* ItemClass); // Function ShooterGame.AresInventory.HasItemByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f7550
	struct AAresItem* GetTrashedItemForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.GetTrashedItemForSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x36f74c0
	int32_t GetTotalLoadoutValue(); // Function ShooterGame.AresInventory.GetTotalLoadoutValue // (Final|Native|Public|Const) // @ game+0x36f7490
	struct AShooterCharacter* GetShooterCharacterOwner(); // Function ShooterGame.AresInventory.GetShooterCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fc10
	int32_t GetNumChargesForEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.GetNumChargesForEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x36f73f0
	struct AAresEquippable* GetNextEquippableOnUnequip(struct AAresEquippable* Equippable, bool bIgnoreAutoEquipSettings, bool bIncludeStorageSlots, bool bIncludeAbilitySlots); // Function ShooterGame.AresInventory.GetNextEquippableOnUnequip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f7260
	struct AAresEquippable* GetLastEquippable(); // Function ShooterGame.AresInventory.GetLastEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f7230
	int32_t GetItemSlotTotal(enum class EAresItemSlot ItemSlot, bool bIncludeStorageSlots); // Function ShooterGame.AresInventory.GetItemSlotTotal // (Final|Native|Public|Const) // @ game+0x36f70e0
	int32_t GetItemSlotLimit(enum class EAresItemSlot ItemSlot, bool bIncludeStorageSlots); // Function ShooterGame.AresInventory.GetItemSlotLimit // (Final|Native|Public|Const) // @ game+0x36f7010
	struct TArray<struct AAresItem*> GetItems(); // Function ShooterGame.AresInventory.GetItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f71b0
	int32_t GetItemQuantityByClass(struct AAresItem* ItemClass); // Function ShooterGame.AresInventory.GetItemQuantityByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6f70
	struct AAresItem* GetFirstItemFromSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.GetFirstItemFromSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6ee0
	struct AAresEquippable* GetFirstEquippableFromSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.GetFirstEquippableFromSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6e50
	struct TArray<struct AAresEquippable*> GetEquippables(); // Function ShooterGame.AresInventory.GetEquippables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6dd0
	struct AAresEquippable* GetEquippableByClass(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.GetEquippableByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6d30
	struct AAresEquippable* GetDesiredEquippable(); // Function ShooterGame.AresInventory.GetDesiredEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6d00
	struct AAresEquippable* GetCurrentEquippable(); // Function ShooterGame.AresInventory.GetCurrentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6cd0
	struct TArray<enum class EAresItemSlot> GetCompatibleSlotTypesForItem(enum class EAresItemSlot ItemSlotType); // Function ShooterGame.AresInventory.GetCompatibleSlotTypesForItem // (Final|Native|Public|Const) // @ game+0x36f6bf0
	struct TArray<enum class EAresItemSlot> GetCompatibleItemTypesForSlot(enum class EAresItemSlot SlotType); // Function ShooterGame.AresInventory.GetCompatibleItemTypesForSlot // (Final|Native|Public|Const) // @ game+0x36f6b10
	enum class EAresItemSlot GetAssociatedStorageSlot(enum class EAresItemSlot EquipSlot); // Function ShooterGame.AresInventory.GetAssociatedStorageSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6a80
	enum class EAresItemSlot GetAssociatedEquipSlot(enum class EAresItemSlot StorageSlot); // Function ShooterGame.AresInventory.GetAssociatedEquipSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f69f0
	struct TArray<struct AAresEquippable*> GetAllEquippablesWithCharges(); // Function ShooterGame.AresInventory.GetAllEquippablesWithCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f6970
	void ForceUnequipCurrentEquippableInput(); // Function ShooterGame.AresInventory.ForceUnequipCurrentEquippableInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36f6950
	void ForceEquippableDropInput(struct AAresEquippable* EquippableToDrop); // Function ShooterGame.AresInventory.ForceEquippableDropInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36f68c0
	void ForceActivateSlotInput(enum class EAresItemSlot ItemSlot, enum class EAresActivationInputType ActivationType); // Function ShooterGame.AresInventory.ForceActivateSlotInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36f67f0
	void ForceActivatePreviousEquippableInput(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function ShooterGame.AresInventory.ForceActivatePreviousEquippableInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36f66f0
	void ForceActivateEquippableInput(struct AAresEquippable* Equippable, enum class EAresActivationInputType ActivationType); // Function ShooterGame.AresInventory.ForceActivateEquippableInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36f6620
	void ForceActivateBestRotatableEquippableInput(); // Function ShooterGame.AresInventory.ForceActivateBestRotatableEquippableInput // (Final|Native|Public) // @ game+0x36f6600
	struct AAresItem* FindPreviousItemBySlot(enum class EAresItemSlot WhichSlot, struct AAresItem* StartingItem); // Function ShooterGame.AresInventory.FindPreviousItemBySlot // (Final|Native|Public|Const) // @ game+0x36f6530
	struct AAresItem* FindPreviousItem(struct AAresItem* StartItem, enum class EItemWrap Wrapped); // Function ShooterGame.AresInventory.FindPreviousItem // (Final|Native|Public|Const) // @ game+0x36f6460
	struct AAresEquippable* FindPreviousEquippableBySlot(enum class EAresItemSlot WhichSlot, struct AAresEquippable* StartingEquippable); // Function ShooterGame.AresInventory.FindPreviousEquippableBySlot // (Final|Native|Public|Const) // @ game+0x36f6390
	struct AAresEquippable* FindPreviousEquippable(struct AAresEquippable* StartingEquippable, enum class EItemWrap Wrapped); // Function ShooterGame.AresInventory.FindPreviousEquippable // (Final|Native|Public|Const) // @ game+0x36f62c0
	struct AAresItem* FindNextItemBySlot(enum class EAresItemSlot WhichSlot, struct AAresItem* StartingItem); // Function ShooterGame.AresInventory.FindNextItemBySlot // (Final|Native|Public|Const) // @ game+0x36f61f0
	struct AAresItem* FindNextItem(struct AAresItem* StartItem, enum class EItemWrap Wrapped, bool bIncludeNonRotateables, bool bIncludeStorageSlots); // Function ShooterGame.AresInventory.FindNextItem // (Final|Native|Public|Const) // @ game+0x36f6070
	struct AAresEquippable* FindNextEquippableBySlot(enum class EAresItemSlot WhichSlot, struct AAresEquippable* StartingEquippable); // Function ShooterGame.AresInventory.FindNextEquippableBySlot // (Final|Native|Public|Const) // @ game+0x36f5fa0
	struct AAresEquippable* FindNextEquippable(struct AAresEquippable* StartingEquippable, enum class EItemWrap Wrapped); // Function ShooterGame.AresInventory.FindNextEquippable // (Final|Native|Public|Const) // @ game+0x36f5ed0
	struct AAresEquippable* FindMostRecentEquippable(struct AAresEquippable* StartingItem, bool bIgnoreCurrentEquippable, bool bOnlyWithResources, bool bIncludeStorageSlots, bool bIncludeAbilitySlots); // Function ShooterGame.AresInventory.FindMostRecentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f5cf0
	struct TArray<enum class EAresItemSlot> FindItemSlotTypes(struct AAresItem* ItemClass); // Function ShooterGame.AresInventory.FindItemSlotTypes // (Final|Native|Public|Const) // @ game+0x36f5c10
	enum class EAresItemSlot FindItemSlotType(struct AAresItem* Item); // Function ShooterGame.AresInventory.FindItemSlotType // (Final|Native|Public|Const) // @ game+0x36f5b70
	struct UItemSlot* FindItemSlot(struct AAresItem* Item); // Function ShooterGame.AresInventory.FindItemSlot // (Final|Native|Public|Const) // @ game+0x36f5ad0
	struct AAresItem* FindItemBySlotAndIndex(enum class EAresItemSlot WhichSlot, int32_t Index); // Function ShooterGame.AresInventory.FindItemBySlotAndIndex // (Final|Native|Public|Const) // @ game+0x36f5a00
	struct AAresItem* FindItemBySlot(enum class EAresItemSlot WhichSlot); // Function ShooterGame.AresInventory.FindItemBySlot // (Final|Native|Public|Const) // @ game+0x36f5970
	struct AAresItem* FindItemByClass(struct AAresItem* ItemClass, enum class EAresItemSlot InSlot); // Function ShooterGame.AresInventory.FindItemByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f58a0
	struct AAresEquippable* FindEquippableByClass(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.FindEquippableByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f5800
	struct AAresItem* FindBestReplacementCandidate(struct AAresItem* Item, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.FindBestReplacementCandidate // (Final|Native|Public|Const) // @ game+0x36f5730
	void CycleEquippable(bool bPrevious); // Function ShooterGame.AresInventory.CycleEquippable // (Final|Native|Public) // @ game+0x36f56a0
	void ClientOnEquippableAdded(struct AAresEquippable* NewEquippable); // Function ShooterGame.AresInventory.ClientOnEquippableAdded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36f5610
	void ClientHandleEquippableDisagreement(struct AAresEquippable* Equippable, int32_t CorrectionIndex); // Function ShooterGame.AresInventory.ClientHandleEquippableDisagreement // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x36f5420
	bool CanAddItemByClass(struct AAresItem* WhichClass, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.CanAddItemByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f5350
	bool CanAddItem(struct AAresItem* WhichItem); // Function ShooterGame.AresInventory.CanAddItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f52b0
	bool AuthValidateAndAddItem(struct AAresItem* Item, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AuthValidateAndAddItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f51a0
	void AuthTryTransferWeaponFromStorage(enum class EAresItemSlot EquippableSlot); // Function ShooterGame.AresInventory.AuthTryTransferWeaponFromStorage // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void AuthTransferValidItem(struct UAresInventory* TargetInventory, struct AAresItem* Item); // Function ShooterGame.AresInventory.AuthTransferValidItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3669300
	bool AuthStoreEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.AresInventory.AuthStoreEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f4b90
	void AuthRemoveSlotModifier(struct USlotModifierComponent* SlotModifier); // Function ShooterGame.AresInventory.AuthRemoveSlotModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	bool AuthRemoveItem(struct AAresItem* ItemToRemove, enum class EInventoryTransaction TransactionType); // Function ShooterGame.AresInventory.AuthRemoveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f50d0
	void AuthRemoveAllEquippablesByClass(struct AAresEquippable* EquippableClass, enum class EInventoryTransaction TransactionType); // Function ShooterGame.AresInventory.AuthRemoveAllEquippablesByClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36eab40
	bool AuthRecoverTrashedItemForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.AuthRecoverTrashedItemForSlot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f5040
	struct AAresEquippable* AuthPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.AresInventory.AuthPickupEquippable // (Final|Native|Public) // @ game+0x36f4fa0
	bool AuthIsInitialServerCorrectionProcessed(); // Function ShooterGame.AresInventory.AuthIsInitialServerCorrectionProcessed // (Final|Native|Public|Const) // @ game+0x36f4f70
	struct TArray<struct AAresItem*> AuthGetDroppedItems(); // Function ShooterGame.AresInventory.AuthGetDroppedItems // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f4ee0
	void AuthForceDesiredEquippable(struct AAresEquippable* Equippable, enum class EEquipSpeed Speed, enum class EEquipSource EquipSource); // Function ShooterGame.AresInventory.AuthForceDesiredEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x363f1c0
	void AuthEquipLastEquippedWeapon(); // Function ShooterGame.AresInventory.AuthEquipLastEquippedWeapon // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthEquipFirstEquippedWeapon(enum class EEquipSpeed Speed, bool bSkipCurrentEquippable, bool bWithAmmo); // Function ShooterGame.AresInventory.AuthEquipFirstEquippedWeapon // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f4dc0
	bool AuthDropEquippableWithDirection(struct AAresEquippable* TargetEquippable, struct FRotator DropRotation, float SpeedScale, bool bIsSilentDrop); // Function ShooterGame.AresInventory.AuthDropEquippableWithDirection // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x36f4c30
	bool AuthDropEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.AresInventory.AuthDropEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f4b90
	void AuthDestroyInventory(); // Function ShooterGame.AresInventory.AuthDestroyInventory // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	struct AAresItem* AuthCreateAndAddItem(struct AAresItem* ItemClass, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AuthCreateAndAddItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f49e0
	struct AAresEquippable* AuthCreateAndAddEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.AuthCreateAndAddEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f4af0
	void AuthAddValidItem(struct AAresItem* Item, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AuthAddValidItem // (Final|Native|Public) // @ game+0x363f1c0
	struct USlotModifierComponent* AuthAddSlotModifier(struct UObject* Owner, enum class EAresItemSlot TargetSlot, enum class EAresItemSlot AddedCompatibility); // Function ShooterGame.AresInventory.AuthAddSlotModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x36f49e0
	struct AAresItem* AddExistingItem(struct AAresItem* TargetItem, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AddExistingItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f49e0
};

// Class ShooterGame.AresItemPlatformIdentifierComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UAresItemPlatformIdentifierComponent : UActorComponent {
	enum class EAresPlatformType PlatformType; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class ShooterGame.AresJoinGameGauntletControllerBase
// Size: 0x130 (Inherited: 0x60)
struct UAresJoinGameGauntletControllerBase : UAresGauntletControllerBase {
	struct UMemoryPerfStatsReport* MemoryReportStatsReport; // 0x60(0x08)
	char pad_68[0xc8]; // 0x68(0xc8)

	void TestJoinGame(enum class EGameFlowStateType NewGameStateType); // Function ShooterGame.AresJoinGameGauntletControllerBase.TestJoinGame // (Final|Native|Public) // @ game+0x36908e0
	void StartCustomGame(); // Function ShooterGame.AresJoinGameGauntletControllerBase.StartCustomGame // (Native|Protected) // @ game+0x3702ad0
	void SetGameMode(); // Function ShooterGame.AresJoinGameGauntletControllerBase.SetGameMode // (Native|Protected) // @ game+0x3702790
	void SendMemoryTelemetry(struct FString TestScenarioName); // Function ShooterGame.AresJoinGameGauntletControllerBase.SendMemoryTelemetry // (Final|Native|Protected) // @ game+0x2024240
	void OnTestSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnTestSuccess // (Native|Protected) // @ game+0x37021b0
	void OnStartCustomGameSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnStartCustomGameSuccess // (Native|Protected) // @ game+0x3702180
	void OnStartCustomGameError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnStartCustomGameError // (Native|Protected) // @ game+0x37020f0
	void OnLockCharacterFailure(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnLockCharacterFailure // (Native|Protected) // @ game+0x37020c0
	void OnCustomGameDisassociateSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnCustomGameDisassociateSuccess // (Native|Protected) // @ game+0x3702090
	void OnConvertCustomGameSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnConvertCustomGameSuccess // (Native|Protected) // @ game+0x2024340
	void OnConvertCustomGameError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnConvertCustomGameError // (Native|Protected) // @ game+0x3702000
	struct FString GenerateMemreportCommand(); // Function ShooterGame.AresJoinGameGauntletControllerBase.GenerateMemreportCommand // (Final|Native|Protected) // @ game+0x3701500
	void GenerateMemreport(); // Function ShooterGame.AresJoinGameGauntletControllerBase.GenerateMemreport // (Final|Native|Protected) // @ game+0x2024060
	void DisassociateGame(); // Function ShooterGame.AresJoinGameGauntletControllerBase.DisassociateGame // (Native|Protected) // @ game+0x3701310
	void CloseGame(); // Function ShooterGame.AresJoinGameGauntletControllerBase.CloseGame // (Native|Protected) // @ game+0x37011a0
};

// Class ShooterGame.AresJoinGameGauntletController
// Size: 0x130 (Inherited: 0x130)
struct UAresJoinGameGauntletController : UAresJoinGameGauntletControllerBase {
};

// Class ShooterGame.AresScreenBase
// Size: 0x428 (Inherited: 0x398)
struct UAresScreenBase : UAresCommonActivatableWidget {
	char pad_398[0x8]; // 0x398(0x08)
	struct FMulticastInlineDelegate OnScreenUrlChanged; // 0x3a0(0x10)
	bool bIsUrlInitialized; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)
	struct TArray<struct FName> ScreenUrl; // 0x3b8(0x10)
	struct TArray<struct FAresConditionalInputActionData> ConditionalInputActions; // 0x3c8(0x10)
	char pad_3D8[0x50]; // 0x3d8(0x50)

	void SetScreenUrl(struct TArray<struct FName>& InUrl); // Function ShooterGame.AresScreenBase.SetScreenUrl // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374ddf0
	void NotifyScreenOpened(); // Function ShooterGame.AresScreenBase.NotifyScreenOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x374c850
	void NotifyScreenClosed(); // Function ShooterGame.AresScreenBase.NotifyScreenClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x374c830
	struct TArray<struct FName> GetScreenUrl(); // Function ShooterGame.AresScreenBase.GetScreenUrl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374c060
	void BP_NotifyScreenOpened(); // Function ShooterGame.AresScreenBase.BP_NotifyScreenOpened // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BP_NotifyScreenClosed(); // Function ShooterGame.AresScreenBase.BP_NotifyScreenClosed // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresLandingScreen
// Size: 0x438 (Inherited: 0x428)
struct UAresLandingScreen : UAresScreenBase {
	struct UCommonActivatableWidgetSwitcher* WidgetSwitcher; // 0x428(0x08)
	struct ULandingScreenViewModel* LandingViewModelClass; // 0x430(0x08)

	void RemoveScreenFromWidgetSwitcher(struct FName InScreenName); // Function ShooterGame.AresLandingScreen.RemoveScreenFromWidgetSwitcher // (Final|Native|Public|BlueprintCallable) // @ game+0x3702290
	void AddScreenToWidgetSwitcher(struct UAresScreenBase* InScreenClass, struct FName InScreenName); // Function ShooterGame.AresLandingScreen.AddScreenToWidgetSwitcher // (Final|Native|Public|BlueprintCallable) // @ game+0x36ffcc0
};

// Class ShooterGame.AresLevelSpatialAudioDataActor
// Size: 0x3d8 (Inherited: 0x3d8)
struct AAresLevelSpatialAudioDataActor : AActor {

	bool SaveArrayText(struct FString SaveDirectory, struct FString Filename, struct TArray<struct FString> SaveText, bool bAllowOverwriting); // Function ShooterGame.AresLevelSpatialAudioDataActor.SaveArrayText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37023e0
};

// Class ShooterGame.AresListenerTrackerComponent
// Size: 0x128 (Inherited: 0xe8)
struct UAresListenerTrackerComponent : UActorComponent {
	enum class EListenerTrackerType ListenerTrackerType; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float SphericalTrackerRadius; // 0xec(0x04)
	bool bEmitterMatchListenerHeight; // 0xf0(0x01)
	bool bDrawDebug; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)
	struct AActor* TrackerActor; // 0xf8(0x08)
	struct USceneComponent* TrackerSceneComponent; // 0x100(0x08)
	struct USplineComponent* TrackerSplineComponent; // 0x108(0x08)
	struct UStaticMeshComponent* TrackerStaticMeshComponent; // 0x110(0x08)
	struct UAkComponent* AudioEmitterForLocOverride; // 0x118(0x08)
	char pad_120[0x8]; // 0x120(0x08)

	bool IsTrackerEnabled(); // Function ShooterGame.AresListenerTrackerComponent.IsTrackerEnabled // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3701de0
	void EnableTracking(struct UObject* TrackerObject, struct UAkComponent* AudioEmitter); // Function ShooterGame.AresListenerTrackerComponent.EnableTracking // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3701340
	void DisableTracking(); // Function ShooterGame.AresListenerTrackerComponent.DisableTracking // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37012f0
};

// Class ShooterGame.AresListView
// Size: 0x6f0 (Inherited: 0x148)
struct UAresListView : UTableViewBase {
	float ItemHeight; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct TArray<struct UObject*> Items; // 0x150(0x10)
	enum class ESelectionMode SelectionMode; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	struct FDelegate OnGenerateRowEvent; // 0x164(0x14)
	struct FScrollBarStyle WidgetBarStyle; // 0x178(0x518)
	enum class ESlateVisibility ScrollBarVisibility; // 0x690(0x01)
	char pad_691[0x3]; // 0x691(0x03)
	struct FVector2D ScrollbarThickness; // 0x694(0x08)
	bool AlwaysShowScrollbar; // 0x69c(0x01)
	char pad_69D[0x3]; // 0x69d(0x03)
	struct FVector2D HeaderSpacerSize; // 0x6a0(0x08)
	struct FVector2D FooterSpacerSize; // 0x6a8(0x08)
	char pad_6B0[0x40]; // 0x6b0(0x40)

	void SetHeaderSpacerSize(struct FVector2D NewSize); // Function ShooterGame.AresListView.SetHeaderSpacerSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37027c0
	void SetFooterSpacerSize(struct FVector2D NewSize); // Function ShooterGame.AresListView.SetFooterSpacerSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3702710
	void ScrollToTop(); // Function ShooterGame.AresListView.ScrollToTop // (Final|Native|Public|BlueprintCallable) // @ game+0x37026f0
	void ScrollToBottom(); // Function ShooterGame.AresListView.ScrollToBottom // (Final|Native|Public|BlueprintCallable) // @ game+0x37026d0
	void RequestScrollIntoView(struct UObject* ItemToView); // Function ShooterGame.AresListView.RequestScrollIntoView // (Final|Native|Public|BlueprintCallable) // @ game+0x3702350
	void RequestListRefresh(); // Function ShooterGame.AresListView.RequestListRefresh // (Final|Native|Public|BlueprintCallable) // @ game+0x3702330
	bool IsScrolledBottom(); // Function ShooterGame.AresListView.IsScrolledBottom // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3701db0
};

// Class ShooterGame.AresListViewModel
// Size: 0xa8 (Inherited: 0x48)
struct UAresListViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnListUpdated; // 0x48(0x10)
	char pad_58[0x18]; // 0x58(0x18)
	struct UArrayListModel* ListModel; // 0x70(0x08)
	struct USortedListModel* SortedListModel; // 0x78(0x08)
	struct UFilteredListModel* FilteredListModel; // 0x80(0x08)
	char pad_88[0x20]; // 0x88(0x20)

	bool SortItems(struct FWildcard& ObjectA, struct FWildcard& ObjectB); // Function ShooterGame.AresListViewModel.SortItems // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3702960
	void SetObjects(struct TArray<struct FWildcard>& Objects); // Function ShooterGame.AresListViewModel.SetObjects // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3702840
	void ResortItems(); // Function ShooterGame.AresListViewModel.ResortItems // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2024340
	void RemoveAllObjects(); // Function ShooterGame.AresListViewModel.RemoveAllObjects // (Final|Native|Public|BlueprintCallable) // @ game+0x3702270
	void RefilterItems(); // Function ShooterGame.AresListViewModel.RefilterItems // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37020c0
	bool KeyMatchFunction(struct FWildcard& Item, struct FWildcard& Key); // Function ShooterGame.AresListViewModel.KeyMatchFunction // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void InstantiateListModels(); // Function ShooterGame.AresListViewModel.InstantiateListModels // (Native|Event|Public|BlueprintEvent) // @ game+0x37011a0
	void HandleListChanged(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.AresListViewModel.HandleListChanged // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3701c50
	struct TArray<struct UObject*> GetSortProviderObjects(); // Function ShooterGame.AresListViewModel.GetSortProviderObjects // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3701bd0
	struct TArray<struct UObject*> GetFilterProviderObjects(); // Function ShooterGame.AresListViewModel.GetFilterProviderObjects // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3701880
	bool FilterItem(struct FWildcard& Object); // Function ShooterGame.AresListViewModel.FilterItem // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3701410
	void ClearSortProviders(); // Function ShooterGame.AresListViewModel.ClearSortProviders // (Native|Event|Public|BlueprintEvent) // @ game+0x3701030
	void ClearFilterProviders(); // Function ShooterGame.AresListViewModel.ClearFilterProviders // (Native|Event|Public|BlueprintEvent) // @ game+0x36a0cf0
	void AddSortProvider(struct TScriptInterface<ISortProvider>& SortProvider); // Function ShooterGame.AresListViewModel.AddSortProvider // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x36ffdb0
	void AddObjects(struct TArray<struct FWildcard>& Objects); // Function ShooterGame.AresListViewModel.AddObjects // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x36ffbd0
	void AddObject(struct FWildcard& Object); // Function ShooterGame.AresListViewModel.AddObject // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x36ffae0
	void AddFilterProvider(struct TScriptInterface<IFilterProvider>& FilterProvider); // Function ShooterGame.AresListViewModel.AddFilterProvider // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x36ffa40
};

// Class ShooterGame.AresLocalizationBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresLocalizationBlueprintLibrary : UBlueprintFunctionLibrary {

	void LocalizedStringToFloat(struct FString inString, float& OutConvertedFloat, bool& OutIsValid); // Function ShooterGame.AresLocalizationBlueprintLibrary.LocalizedStringToFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3701e10
	bool IsCurrentCultureRightToLeft(); // Function ShooterGame.AresLocalizationBlueprintLibrary.IsCurrentCultureRightToLeft // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3701d80
	struct FText GetFormattedDateTimeText(struct FDateTime& DateTime); // Function ShooterGame.AresLocalizationBlueprintLibrary.GetFormattedDateTimeText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3701900
	struct FString GetCurrentCultureName(); // Function ShooterGame.AresLocalizationBlueprintLibrary.GetCurrentCultureName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3701800
	struct TMap<struct FString, struct FString> GetAllAvailableCultures(); // Function ShooterGame.AresLocalizationBlueprintLibrary.GetAllAvailableCultures // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3701580
	void DateTime_UTCToLocal(struct FDateTime& LocalDateTime, struct FTimespan& DSTOffset, struct FDateTime& UTCDateTime); // Function ShooterGame.AresLocalizationBlueprintLibrary.DateTime_UTCToLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37011d0
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle TimeStyle, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3700c70
	struct FText AsTimeZoneDateTime_DateTime_Skeleton(struct FDateTime& InDateTime, struct FText Skeleton, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDateTime_DateTime_Skeleton // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37008b0
	struct FText AsTimeZoneDateTime_DateTime_Pattern(struct FDateTime& InDateTime, struct FText Pattern, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDateTime_DateTime_Pattern // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37006a0
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle DateStyle, enum class EAresDateTimeStyle TimeStyle, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3700490
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle DateStyle, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3700ac0
	struct FText AsTime_DateTime(struct FDateTime& In, enum class EAresDateTimeStyle TimeStyle); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3700e20
	struct FText AsDateTime_DateTime_Skeleton(struct FDateTime& InDateTime, struct FText Skeleton); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDateTime_DateTime_Skeleton // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3700190
	struct FText AsDateTime_DateTime_Pattern(struct FDateTime& InDateTime, struct FText Pattern); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDateTime_DateTime_Pattern // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x36fffd0
	struct FText AsDateTime_DateTime(struct FDateTime& In, enum class EAresDateTimeStyle DateStyle, enum class EAresDateTimeStyle TimeStyle); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x36ffe50
	struct FText AsDate_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle DateStyle); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3700350
};

// Class ShooterGame.AresManifestExportInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresManifestExportInterface : UInterface {
};

// Class ShooterGame.MapUIData
// Size: 0x108 (Inherited: 0x90)
struct UMapUIData : UBaseContentUIData {
	float XScalarToAdd; // 0x90(0x04)
	float XMultiplier; // 0x94(0x04)
	float YScalarToAdd; // 0x98(0x04)
	float YMultiplier; // 0x9c(0x04)
	struct UTexture* ListViewIcon; // 0xa0(0x08)
	struct UTexture2D* ListViewIconTall; // 0xa8(0x08)
	struct FText Coordinates; // 0xb0(0x18)
	struct FText NarrativeDescription; // 0xc8(0x18)
	struct FText TacticalDescription; // 0xe0(0x18)
	struct UTexture2D* StylizedBackgroundImage; // 0xf8(0x08)
	struct UTexture2D* PremierBackgroundImage; // 0x100(0x08)

	struct FVector2D ConvertWorldToScaleCoordinates(struct FVector2D& WorldCoordinates); // Function ShooterGame.MapUIData.ConvertWorldToScaleCoordinates // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3707d80
};

// Class ShooterGame.MapDataAsset
// Size: 0xd0 (Inherited: 0x50)
struct UMapDataAsset : UAresBasePrimaryDataAsset {
	struct FString MapURL; // 0x50(0x10)
	struct TSoftClassPtr<UObject> UIData; // 0x60(0x30)
	struct TSoftObjectPtr<UTexture2D> LevelSplashScreen; // 0x90(0x30)
	struct TArray<struct FName> MapToModeTags; // 0xc0(0x10)
};

// Class ShooterGame.AresMarker
// Size: 0x3e0 (Inherited: 0x3d8)
struct AAresMarker : AActor {
	enum class EAresTeam Team; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
};

// Class ShooterGame.AresMaterialToggleButton
// Size: 0x1078 (Inherited: 0x1028)
struct UAresMaterialToggleButton : UAresCommonButton {
	bool bListenForLeftRightNavigation; // 0x1028(0x01)
	char pad_1029[0x7]; // 0x1029(0x07)
	struct UMaterialInstance* ToggleMaterial; // 0x1030(0x08)
	struct UMaterialInstanceDynamic* ToggleMaterialInst; // 0x1038(0x08)
	struct FText OnText; // 0x1040(0x18)
	struct FText OffText; // 0x1058(0x18)
	bool bImmediateToggleAnimation; // 0x1070(0x01)
	char pad_1071[0x7]; // 0x1071(0x07)

	void SetOnText(struct FText& InOnText); // Function ShooterGame.AresMaterialToggleButton.SetOnText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x37089f0
	void SetOffText(struct FText& InOffText); // Function ShooterGame.AresMaterialToggleButton.SetOffText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3708900
	void OnToggleStateChanged(bool bIsSelected); // Function ShooterGame.AresMaterialToggleButton.OnToggleStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x3708300
	void OnMaterialCreated(); // Function ShooterGame.AresMaterialToggleButton.OnMaterialCreated // (Native|Event|Protected|BlueprintEvent) // @ game+0x37082d0
	bool IsImmediateToggleAnimation(); // Function ShooterGame.AresMaterialToggleButton.IsImmediateToggleAnimation // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3708280
};

// Class ShooterGame.SettingsOptionViewModel
// Size: 0xf8 (Inherited: 0x48)
struct USettingsOptionViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnSettingDataAssetChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnDisplayNameChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnDependentStateChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnNestedLevelChanged; // 0x78(0x10)
	struct UAresSettingUIData* SettingDataAsset; // 0x88(0x08)
	struct UAresSettingUIData* SettingUIDataClass; // 0x90(0x08)
	struct FText SettingDisplayName; // 0x98(0x18)
	bool bIsEditable; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t NestedLevel; // 0xb4(0x04)
	struct TArray<struct FText> CachedOptionTexts; // 0xb8(0x10)
	struct UAresSettingsManager* SettingsManager; // 0xc8(0x08)
	struct UAresSettingUIData* DependentSettingDataAsset; // 0xd0(0x08)
	char pad_D8[0x20]; // 0xd8(0x20)

	void SetSettingDataAssetClass(struct UAresSettingUIData* SettingClass); // Function ShooterGame.SettingsOptionViewModel.SetSettingDataAssetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3b17740
	void SetSettingDataAsset(struct UAresSettingUIData* InSettingDataAsset); // Function ShooterGame.SettingsOptionViewModel.SetSettingDataAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x3b176b0
	void SetOptionTextsFromDataAsset(); // Function ShooterGame.SettingsOptionViewModel.SetOptionTextsFromDataAsset // (Final|Native|Protected|BlueprintCallable) // @ game+0x3b17690
	void SetOptionTexts(struct TArray<struct FText>& InOptionTexts); // Function ShooterGame.SettingsOptionViewModel.SetOptionTexts // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b17580
	void SetNestedLevel(int32_t Level); // Function ShooterGame.SettingsOptionViewModel.SetNestedLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3b174f0
	void SetDisplayName(struct FText InDisplayName); // Function ShooterGame.SettingsOptionViewModel.SetDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x3b17400
	void InternalOnDependentSettingChanged(enum class EAresWidgetDependentState NewState); // Function ShooterGame.SettingsOptionViewModel.InternalOnDependentSettingChanged // (Native|Protected) // @ game+0x36a0520
	void HandleOnSettingDataAssetChanged(); // Function ShooterGame.SettingsOptionViewModel.HandleOnSettingDataAssetChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x288aab0
	struct TArray<struct FText> GetSettingOptionTexts(); // Function ShooterGame.SettingsOptionViewModel.GetSettingOptionTexts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16c20
	struct UAresSettingUIData* GetSettingDataAsset(); // Function ShooterGame.SettingsOptionViewModel.GetSettingDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16b10
	int32_t GetNumberOfSettingOptionTexts(); // Function ShooterGame.SettingsOptionViewModel.GetNumberOfSettingOptionTexts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b168e0
	int32_t GetNestedLevel(); // Function ShooterGame.SettingsOptionViewModel.GetNestedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b168c0
	struct FText GetDisplayName(); // Function ShooterGame.SettingsOptionViewModel.GetDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a4d670
};

// Class ShooterGame.SettingsBoolViewModel
// Size: 0x198 (Inherited: 0xf8)
struct USettingsBoolViewModel : USettingsOptionViewModel {
	struct FMulticastInlineDelegate OnSettingsBoolChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnSettingValueChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnOnTextChanged; // 0x118(0x10)
	struct FMulticastInlineDelegate OnOffTextChanged; // 0x128(0x10)
	bool bSettingValue; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
	struct USettingBoolUIData* BoolSettingDataAsset; // 0x140(0x08)
	char pad_148[0x50]; // 0x148(0x50)

	void SetSettingValue(bool bValue); // Function ShooterGame.SettingsBoolViewModel.SetSettingValue // (Native|Public|BlueprintCallable) // @ game+0x3b17850
	void SetSettingsBool(bool Value); // Function ShooterGame.SettingsBoolViewModel.SetSettingsBool // (Final|Native|Public|BlueprintCallable) // @ game+0x3b17ab0
	void SetSettingName(enum class EAresBoolSettingName SettingName); // Function ShooterGame.SettingsBoolViewModel.SetSettingName // (Final|Native|Public|BlueprintCallable) // @ game+0x3b177d0
	void InternalOnSettingChangedFromManager(enum class EAresBoolSettingName BoolSettingName, bool OldValue, bool NewValue); // Function ShooterGame.SettingsBoolViewModel.InternalOnSettingChangedFromManager // (Native|Protected) // @ game+0x3b16f50
	bool GetSettingValue(); // Function ShooterGame.SettingsBoolViewModel.GetSettingValue // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a0d20
	bool GetSettingsBool(); // Function ShooterGame.SettingsBoolViewModel.GetSettingsBool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16d80
	enum class EAresBoolSettingName GetSettingName(); // Function ShooterGame.SettingsBoolViewModel.GetSettingName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cc60
	struct USettingBoolUIData* GetSettingDataAssetAsBoolSetting(); // Function ShooterGame.SettingsBoolViewModel.GetSettingDataAssetAsBoolSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16b30
	struct FText GetOnText(); // Function ShooterGame.SettingsBoolViewModel.GetOnText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b169c0
	struct FText GetOffText(); // Function ShooterGame.SettingsBoolViewModel.GetOffText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16900
};

// Class ShooterGame.AresMatureContentBoolViewModel
// Size: 0x1e0 (Inherited: 0x198)
struct UAresMatureContentBoolViewModel : USettingsBoolViewModel {
	char pad_198[0x8]; // 0x198(0x08)
	struct USettingsBoolViewModel* ShowCorpseInternalViewModel; // 0x1a0(0x08)
	struct USettingsBoolViewModel* ShowBloodInternalViewModel; // 0x1a8(0x08)
	struct USettingsBoolViewModel* ShowCorpseVisualViewModel; // 0x1b0(0x08)
	struct USettingsBoolViewModel* ShowBloodVisualViewModel; // 0x1b8(0x08)
	char pad_1C0[0x20]; // 0x1c0(0x20)
};

// Class ShooterGame.AresMegamapViewModel
// Size: 0x68 (Inherited: 0x48)
struct UAresMegamapViewModel : UAresViewModelBase {
	float MegamapRadius; // 0x48(0x04)
	float MapEdgePanSpeed; // 0x4c(0x04)
	float ToggleZoomScale; // 0x50(0x04)
	float ToggleZoomMapSpeedScale; // 0x54(0x04)
	struct FMulticastInlineDelegate OnMegamapZoomToggle; // 0x58(0x10)

	void UpdateZoom(float ZoomDelta); // Function ShooterGame.AresMegamapViewModel.UpdateZoom // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void UpdateCommInput(bool bIsDown); // Function ShooterGame.AresMegamapViewModel.UpdateCommInput // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void MoveMapCenter(struct FVector2D NewCenter); // Function ShooterGame.AresMegamapViewModel.MoveMapCenter // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresMenuTouchWidget
// Size: 0x960 (Inherited: 0x960)
struct UAresMenuTouchWidget : UAresTouchWidget {
};

// Class ShooterGame.AresMinimapCamera
// Size: 0x3f8 (Inherited: 0x3f0)
struct AAresMinimapCamera : ASceneCapture2D {
	bool bOnlyCaptureActorsWithMinimapShowTag; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	int32_t DefaultRenderClearMethod; // 0x3f4(0x04)
};

// Class ShooterGame.AresMinimapComponent
// Size: 0x500 (Inherited: 0x290)
struct UAresMinimapComponent : USceneComponent {
	bool bUpdateWidgetEveryUpdate; // 0x290(0x01)
	bool bUpdateComponentEveryUpdate; // 0x291(0x01)
	bool bForceUpdateNextTick; // 0x292(0x01)
	enum class EAresMinimapPositionSource PositionSource; // 0x293(0x01)
	enum class EAresMinimapRotationSource RotationSource; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct FVector WidgetLocation; // 0x298(0x0c)
	float Rotation; // 0x2a4(0x04)
	bool bPositioningPresetOverrides; // 0x2a8(0x01)
	bool bMoves; // 0x2a9(0x01)
	bool bRotates; // 0x2aa(0x01)
	enum class EAresMinimapPositionSpace PositionSpace; // 0x2ab(0x01)
	enum class EAresMinimapRotationSpace RotationSpace; // 0x2ac(0x01)
	bool bDriveWidgetSizing; // 0x2ad(0x01)
	char pad_2AE[0x2]; // 0x2ae(0x02)
	struct FVector WidgetSize; // 0x2b0(0x0c)
	enum class EAresMinimapSizeSpace SizeSpace; // 0x2bc(0x01)
	bool bDriveWidgetAttributes; // 0x2bd(0x01)
	enum class EAresMinimapLayer Layer; // 0x2be(0x01)
	char pad_2BF[0x1]; // 0x2bf(0x01)
	struct FVector2D Alignment; // 0x2c0(0x08)
	bool bDrawOffMap; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	struct FVector EdgeSize; // 0x2cc(0x0c)
	enum class EAresMinimapSizeSpace EdgeSizeSpace; // 0x2d8(0x01)
	enum class EAresMinimapRotationSpace EdgeRotationSpace; // 0x2d9(0x01)
	bool bDriveWidgetAppearance; // 0x2da(0x01)
	char pad_2DB[0x1]; // 0x2db(0x01)
	struct FLinearColor WidgetColor; // 0x2dc(0x10)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct FSlateBrush WidgetBrush; // 0x2f0(0x90)
	struct FLinearColor WidgetBrushTint; // 0x380(0x10)
	bool bUsingMaskingMaterial; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)
	struct TArray<enum class EAresMapIdentifier> RegisterOnMaps; // 0x398(0x10)
	struct TMap<struct UAresMinimapPanel*, struct UUserWidget*> Widgets; // 0x3a8(0x50)
	struct TMap<struct UUserWidget*, bool> VisibilityMap; // 0x3f8(0x50)
	struct UUserWidget* WidgetClass; // 0x448(0x08)
	struct UUserWidget* EdgeWidgetClass; // 0x450(0x08)
	char pad_458[0x10]; // 0x458(0x10)
	bool bProblematic; // 0x468(0x01)
	bool bRespectPlayspaceVisibility; // 0x469(0x01)
	char pad_46A[0x6]; // 0x46a(0x06)
	struct TMap<struct UUserWidget*, struct FRecycledWidgetArray> RecycledWidgets; // 0x470(0x50)
	struct UAresMinimapManager* MinimapManager; // 0x4c0(0x08)
	char pad_4C8[0x38]; // 0x4c8(0x38)

	void UpdateWidget(struct UUserWidget* Widget, bool bForce); // Function ShooterGame.AresMinimapComponent.UpdateWidget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37092c0
	void Update(bool bForce); // Function ShooterGame.AresMinimapComponent.Update // (Native|Event|Public|BlueprintEvent) // @ game+0x3709220
	bool UnregisterWithManager(); // Function ShooterGame.AresMinimapComponent.UnregisterWithManager // (Native|Public|BlueprintCallable) // @ game+0x37091e0
	void SetWidgetLocation(struct FVector InWidgetLocation, enum class EAresMinimapPositionSource InPositionSpace); // Function ShooterGame.AresMinimapComponent.SetWidgetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3709110
	void SetWidgetColor(struct FLinearColor InWidgetColor); // Function ShooterGame.AresMinimapComponent.SetWidgetColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3709080
	bool SetWidgetClass(struct UUserWidget* InWidgetClass); // Function ShooterGame.AresMinimapComponent.SetWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3708fe0
	void SetWidgetBrushTint(struct FLinearColor InWidgetBrushTint); // Function ShooterGame.AresMinimapComponent.SetWidgetBrushTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3708f50
	void SetWidgetBrush(struct FSlateBrush InWidgetBrush); // Function ShooterGame.AresMinimapComponent.SetWidgetBrush // (Final|Native|Public|BlueprintCallable) // @ game+0x3708e30
	void SetSize(struct FVector InSize, enum class EAresMinimapSizeSpace SizeSpace); // Function ShooterGame.AresMinimapComponent.SetSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3708d60
	void SetRotationSpace(enum class EAresMinimapRotationSpace InRotationSpace); // Function ShooterGame.AresMinimapComponent.SetRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3708ce0
	void SetRotationSource(enum class EAresMinimapRotationSource InRotationSource); // Function ShooterGame.AresMinimapComponent.SetRotationSource // (Final|Native|Public|BlueprintCallable) // @ game+0x3708c60
	void SetRotation(float InRotation); // Function ShooterGame.AresMinimapComponent.SetRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x3708be0
	void SetPositionSpace(enum class EAresMinimapPositionSpace InPositionSpace); // Function ShooterGame.AresMinimapComponent.SetPositionSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3708b60
	void SetPositionSource(enum class EAresMinimapPositionSource InPositionSource); // Function ShooterGame.AresMinimapComponent.SetPositionSource // (Final|Native|Public|BlueprintCallable) // @ game+0x3708ae0
	void SetNeedsWidgetUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsWidgetUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x37088e0
	void SetNeedsWidgetAttributesUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsWidgetAttributesUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x37088c0
	void SetNeedsWidgetAppearanceUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsWidgetAppearanceUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x37088a0
	void SetNeedsPositionAimUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsPositionAimUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x3708880
	void SetNeedsPanelVisibilityUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsPanelVisibilityUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x3708860
	void SetLayer(enum class EAresMinimapLayer InLayer); // Function ShooterGame.AresMinimapComponent.SetLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x37087e0
	bool SetEdgeWidgetClass(struct UUserWidget* InWidgetClass); // Function ShooterGame.AresMinimapComponent.SetEdgeWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3708740
	void SetEdgeSizeSpace(enum class EAresMinimapSizeSpace InEdgeSizeSpace); // Function ShooterGame.AresMinimapComponent.SetEdgeSizeSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x37086c0
	void SetEdgeSize(struct FVector InEdgeSize); // Function ShooterGame.AresMinimapComponent.SetEdgeSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3708630
	void SetEdgeRotationSpace(enum class EAresMinimapRotationSpace InEdgeRotationSpace); // Function ShooterGame.AresMinimapComponent.SetEdgeRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x37085b0
	void SetDrawOffMap(bool bInDrawOffMap); // Function ShooterGame.AresMinimapComponent.SetDrawOffMap // (Final|Native|Public|BlueprintCallable) // @ game+0x3708520
	void SetAlignment(struct FVector2D InAlignment); // Function ShooterGame.AresMinimapComponent.SetAlignment // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37084a0
	struct UUserWidget* RemoveWidget(struct UAresMinimapPanel* MinimapPanel); // Function ShooterGame.AresMinimapComponent.RemoveWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3708400
	void RemoveAllWidgets(); // Function ShooterGame.AresMinimapComponent.RemoveAllWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0x37083e0
	bool RegisterWithManager(); // Function ShooterGame.AresMinimapComponent.RegisterWithManager // (Native|Public|BlueprintCallable) // @ game+0x37083a0
	bool IsRegisteredWithManager(); // Function ShooterGame.AresMinimapComponent.IsRegisteredWithManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37082a0
	void InitializeWidget(struct UUserWidget* Widget); // Function ShooterGame.AresMinimapComponent.InitializeWidget // (Native|Event|Public|BlueprintEvent) // @ game+0x36a87e0
	void HandleOwnerPlayspaceChanged(struct UPlayspaceComponent* PlayspaceComponent); // Function ShooterGame.AresMinimapComponent.HandleOwnerPlayspaceChanged // (Final|Native|Protected) // @ game+0x37081f0
	void HandleMinimapVisibilityChanged(bool bInVisible); // Function ShooterGame.AresMinimapComponent.HandleMinimapVisibilityChanged // (Final|Native|Public) // @ game+0x3708160
	struct TMap<struct UAresMinimapPanel*, struct UUserWidget*> GetWidgets(); // Function ShooterGame.AresMinimapComponent.GetWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0x3708060
	struct UUserWidget* GetWidgetClass(); // Function ShooterGame.AresMinimapComponent.GetWidgetClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3708020
	struct UAresMinimapManager* GetMinimapManager(); // Function ShooterGame.AresMinimapComponent.GetMinimapManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x369f030
	struct UUserWidget* GetEdgeWidgetClass(); // Function ShooterGame.AresMinimapComponent.GetEdgeWidgetClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3707fe0
	struct TArray<struct UUserWidget*> GetAllWidgetsOfClass(struct UUserWidget* ClassToSearch); // Function ShooterGame.AresMinimapComponent.GetAllWidgetsOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3707f20
	void ForceUpdateNextTick(); // Function ShooterGame.AresMinimapComponent.ForceUpdateNextTick // (Final|Native|Public|BlueprintCallable) // @ game+0x3707f00
	struct UUserWidget* FindOrCreateWidget(struct UAresMinimapPanel* MinimapPanel, bool bEdgeWidget); // Function ShooterGame.AresMinimapComponent.FindOrCreateWidget // (Native|Public|BlueprintCallable) // @ game+0x3707e20
	struct FVector ComputeMinimapPosition(); // Function ShooterGame.AresMinimapComponent.ComputeMinimapPosition // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3707d30
	struct FVector ComputeMinimapAim(); // Function ShooterGame.AresMinimapComponent.ComputeMinimapAim // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3707ce0
};

// Class ShooterGame.AresMinimapManager
// Size: 0x390 (Inherited: 0xe8)
struct UAresMinimapManager : UActorComponent {
	struct FMulticastInlineDelegate WorldToMinimapUpdated; // 0xe8(0x10)
	char pad_F8[0x40]; // 0xf8(0x40)
	struct TSet<struct UAresMinimapComponent*> MinimapComponents; // 0x138(0x50)
	struct TSet<struct UAresMinimapComponent*> ActiveMinimapComponents; // 0x188(0x50)
	struct TSet<struct UAresMinimapComponent*> RecentlyUpdatedMinimapComponents; // 0x1d8(0x50)
	char pad_228[0xb8]; // 0x228(0xb8)
	struct TSet<struct UAresMinimapComponent*> ProblematicMinimapComponents; // 0x2e0(0x50)
	char pad_330[0x10]; // 0x330(0x10)
	struct AAresMinimapCamera* MinimapCamera; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)
	struct FMatrix WorldToMinimap; // 0x350(0x40)

	void RefreshMinimapVisibility(); // Function ShooterGame.AresMinimapManager.RefreshMinimapVisibility // (Final|Native|Public) // @ game+0x370e810
	void HandleMinimapComponentShouldUpdateChanged(struct UAresMinimapComponent* MinimapComponent, bool bNewShouldUpdate); // Function ShooterGame.AresMinimapManager.HandleMinimapComponentShouldUpdateChanged // (Final|Native|Public) // @ game+0x370dcc0
	struct FMatrix GetWorldToMinimap(); // Function ShooterGame.AresMinimapManager.GetWorldToMinimap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370db00
	struct AAresMinimapCamera* GetMinimapCamera(); // Function ShooterGame.AresMinimapManager.GetMinimapCamera // (Final|Native|Public|Const) // @ game+0x369f400
};

// Class ShooterGame.AresMinimapPanel
// Size: 0x3a0 (Inherited: 0x160)
struct UAresMinimapPanel : UPanelWidget {
	char pad_160[0x3]; // 0x160(0x03)
	bool bRotateMinimap; // 0x163(0x01)
	float FixedMinimapRotation; // 0x164(0x04)
	bool bKeepPlayerCentered; // 0x168(0x01)
	char pad_169[0x3]; // 0x169(0x03)
	float Zoom; // 0x16c(0x04)
	enum class EAresMapIdentifier MapIdentifier; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	struct AAresPlayerController* Controller; // 0x178(0x08)
	struct FMatrix WorldToMinimap; // 0x180(0x40)
	struct FMatrix MinimapToWidget; // 0x1c0(0x40)
	struct FMatrix WidgetToMinimap; // 0x200(0x40)
	struct FMatrix MinimapToWorld; // 0x240(0x40)
	struct FMatrix WidgetToWorld; // 0x280(0x40)
	struct FVector2D MinimapCenter; // 0x2c0(0x08)
	struct FVector2D MinimapTransformOffset; // 0x2c8(0x08)
	float MinimapRotation; // 0x2d0(0x04)
	int32_t VisibleLayers; // 0x2d4(0x04)
	bool bDrawEdgeWidgets; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct TMap<struct UAresMinimapComponent*, struct UUserWidget*> ComponentWidgetMap; // 0x2e0(0x50)
	struct FMulticastInlineDelegate OnMinimapWidgetAdded; // 0x330(0x10)
	struct FMulticastInlineDelegate OnMinimapWidgetRemoved; // 0x340(0x10)
	bool bUseCustomMapCenter; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	struct FVector2D CustomMapCenterOffset; // 0x354(0x08)
	struct FVector2D CustomMapCenter; // 0x35c(0x08)
	char pad_364[0x14]; // 0x364(0x14)
	struct UTexture2D* MinimapTexture; // 0x378(0x08)
	struct FMulticastInlineDelegate OnMinimapTextureUpdated; // 0x380(0x10)
	int32_t MinimapFloorIndex; // 0x390(0x04)
	char pad_394[0xc]; // 0x394(0x0c)

	void UpdateWorldToMinimap(); // Function ShooterGame.AresMinimapPanel.UpdateWorldToMinimap // (Final|Native|Public|BlueprintCallable) // @ game+0x370faa0
	void UpdateMinimapToWidget(); // Function ShooterGame.AresMinimapPanel.UpdateMinimapToWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x370fa80
	void UpdateMinimapTexture(); // Function ShooterGame.AresMinimapPanel.UpdateMinimapTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x370fa60
	void UpdateInverseMatrices(); // Function ShooterGame.AresMinimapPanel.UpdateInverseMatrices // (Final|Native|Public|BlueprintCallable) // @ game+0x370fa40
	struct FVector2D TransformWorldVectorToMinimap(struct FVector& WorldDirection); // Function ShooterGame.AresMinimapPanel.TransformWorldVectorToMinimap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f990
	struct FVector2D TransformWorldToMinimap(struct FVector& WorldPos); // Function ShooterGame.AresMinimapPanel.TransformWorldToMinimap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f8e0
	struct FVector TransformWidgetToWorld(struct FVector2D& LocalPos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformWidgetToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f7e0
	struct FVector2D TransformWidgetToAbsolute(struct FVector2D& MinimapPos); // Function ShooterGame.AresMinimapPanel.TransformWidgetToAbsolute // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f740
	struct FVector TransformMinimapToWorld(struct FVector2D& PercentagePos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformMinimapToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f640
	struct FVector2D TransformMinimapToAbsolute(struct FVector2D& PercentagePos); // Function ShooterGame.AresMinimapPanel.TransformMinimapToAbsolute // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f5a0
	struct FVector TransformLocalToWorld(struct FVector2D& LocalPos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformLocalToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f4a0
	struct FVector TransformAbsoluteToWorld(struct FVector2D& AbsolutePos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformAbsoluteToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370f3a0
	void SetRotateMinimap(bool bRotate, bool bFixedRotion); // Function ShooterGame.AresMinimapPanel.SetRotateMinimap // (Final|Native|Public|BlueprintCallable) // @ game+0x370f0c0
	void SetMinimapTexture(struct UTexture2D* NewMinimapTexture); // Function ShooterGame.AresMinimapPanel.SetMinimapTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x370ef20
	void SetMapIdentifier(enum class EAresMapIdentifier InMapIdentifier); // Function ShooterGame.AresMinimapPanel.SetMapIdentifier // (Final|Native|Public|BlueprintCallable) // @ game+0x370eea0
	void RefreshWidgetVisibility(); // Function ShooterGame.AresMinimapPanel.RefreshWidgetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x370e830
	bool ProjectWidgetToWorld(struct FVector2D& LocalPos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectWidgetToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370e670
	bool ProjectPointToNavigation(struct FVector Point, float ZSearchHeight, float ZSearchAdditionalDepth, float XExtent, float YExtent, struct FVector& ProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectPointToNavigation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x370e470
	bool ProjectPointToFloorNavigation(struct FVector Point, float ZSearchHeight, float ZSearchAdditionalDepth, float XExtent, float YExtent, struct FVector& ProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectPointToFloorNavigation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x370e270
	bool ProjectMinimapToWorld(struct FVector2D& PercentagePos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectMinimapToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370e0d0
	bool ProjectLocalToWorld(struct FVector2D& LocalPos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectLocalToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370df30
	bool ProjectAbsoluteToWorld(struct FVector2D& AbsolutePos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectAbsoluteToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370dd90
	void HandleComponentRemoved(struct UAresMinimapComponent* MinimapComponent); // Function ShooterGame.AresMinimapPanel.HandleComponentRemoved // (Final|Native|Public) // @ game+0x370dc30
	void HandleComponentAdded(struct UAresMinimapComponent* MinimapComponent); // Function ShooterGame.AresMinimapPanel.HandleComponentAdded // (Final|Native|Public) // @ game+0x370dba0
	struct FMatrix GetWorldToMinimapMatrix(); // Function ShooterGame.AresMinimapPanel.GetWorldToMinimapMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370db50
	struct FMatrix GetWidgetToWorldMatrix(); // Function ShooterGame.AresMinimapPanel.GetWidgetToWorldMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370dab0
	struct FMatrix GetWidgetToMinimapMatrix(); // Function ShooterGame.AresMinimapPanel.GetWidgetToMinimapMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370da60
	struct FMatrix GetWidgetToLocalMatrix(); // Function ShooterGame.AresMinimapPanel.GetWidgetToLocalMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370da10
	struct FMatrix GetMinimapToWorldMatrix(); // Function ShooterGame.AresMinimapPanel.GetMinimapToWorldMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d880
	struct FMatrix GetMinimapToWidgetMatrix(); // Function ShooterGame.AresMinimapPanel.GetMinimapToWidgetMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d830
	struct FMatrix GetMinimapToAbsoluteMatrix(); // Function ShooterGame.AresMinimapPanel.GetMinimapToAbsoluteMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d7e0
	struct UTexture2D* GetMinimapTexture(); // Function ShooterGame.AresMinimapPanel.GetMinimapTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ff60
	struct UAresMinimapManager* GetMinimapManager(); // Function ShooterGame.AresMinimapPanel.GetMinimapManager // (Final|Native|Protected|Const) // @ game+0x370d7b0
	struct UTexture2D* GetMinimapFloorOverlayTexture(int32_t FloorIndex); // Function ShooterGame.AresMinimapPanel.GetMinimapFloorOverlayTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d710
	struct FMatrix GetLocalToWidgetMatrix(); // Function ShooterGame.AresMinimapPanel.GetLocalToWidgetMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d6c0
	struct FMatrix GetLocalToAbsoluteMatrix(); // Function ShooterGame.AresMinimapPanel.GetLocalToAbsoluteMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d670
	float GetFloorZHeightUpperBound(int32_t FloorIndex); // Function ShooterGame.AresMinimapPanel.GetFloorZHeightUpperBound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d5a0
	float GetFloorZHeightLowerBound(int32_t FloorIndex); // Function ShooterGame.AresMinimapPanel.GetFloorZHeightLowerBound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d500
	int32_t GetFloorIndexForZHeight(float ZHeight); // Function ShooterGame.AresMinimapPanel.GetFloorIndexForZHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d470
	float GetCurrentFloorZHeight(); // Function ShooterGame.AresMinimapPanel.GetCurrentFloorZHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d340
	int32_t GetCurrentFloorIndex(); // Function ShooterGame.AresMinimapPanel.GetCurrentFloorIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d320
	struct FMatrix GetAbsoluteToLocalMatrix(); // Function ShooterGame.AresMinimapPanel.GetAbsoluteToLocalMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d250
	int32_t CycleNextFloor(); // Function ShooterGame.AresMinimapPanel.CycleNextFloor // (Final|Native|Public|BlueprintCallable) // @ game+0x370d220
	struct FMatrix ComputeWorldToMinimap(); // Function ShooterGame.AresMinimapPanel.ComputeWorldToMinimap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d1d0
	struct FVector2D ComputeMinimapTransformOffset(struct FVector2D& CurMinimapCenter, float CurMinimapRotation); // Function ShooterGame.AresMinimapPanel.ComputeMinimapTransformOffset // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x370d0e0
	float ComputeMinimapRotation(); // Function ShooterGame.AresMinimapPanel.ComputeMinimapRotation // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x370d0a0
	struct FVector2D ComputeMinimapCenter(); // Function ShooterGame.AresMinimapPanel.ComputeMinimapCenter // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x370d050
	struct UAresMinimapPanelSlot* AddChildToAresMinimap(struct UWidget* Content); // Function ShooterGame.AresMinimapPanel.AddChildToAresMinimap // (Final|Native|Public|BlueprintCallable) // @ game+0x370cfb0
};

// Class ShooterGame.AresMinimapPanelSlot
// Size: 0xc0 (Inherited: 0x40)
struct UAresMinimapPanelSlot : UPanelSlot {
	enum class EAresMinimapLayer Layer; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FVector Position; // 0x44(0x0c)
	enum class EAresMinimapPositionSpace PositionSpace; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FVector Size; // 0x54(0x0c)
	enum class EAresMinimapSizeSpace SizeSpace; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	struct FVector Aim; // 0x64(0x0c)
	float Rotation; // 0x70(0x04)
	enum class EAresMinimapRotationSpace RotationSpace; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct FVector2D Alignment; // 0x78(0x08)
	bool bDrawOffMap; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct UWidget* EdgeWidget; // 0x88(0x08)
	struct FVector EdgeSize; // 0x90(0x0c)
	enum class EAresMinimapSizeSpace EdgeSizeSpace; // 0x9c(0x01)
	enum class EAresMinimapRotationSpace EdgeRotationSpace; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct UWidget* EventHandlerWidget; // 0xa0(0x08)
	float EdgeVisibleLifetime; // 0xa8(0x04)
	float EdgeFadeoutTime; // 0xac(0x04)
	float EdgeLastSeenTime; // 0xb0(0x04)
	char pad_B4[0xc]; // 0xb4(0x0c)

	void SetSizeSpace(enum class EAresMinimapSizeSpace InSizeSpace); // Function ShooterGame.AresMinimapPanelSlot.SetSizeSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x370f320
	void SetSize(struct FVector InSize); // Function ShooterGame.AresMinimapPanelSlot.SetSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x370f290
	void SetRotationSpace(enum class EAresMinimapRotationSpace InRotationSpace); // Function ShooterGame.AresMinimapPanelSlot.SetRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x370f210
	void SetRotation(float InRotation); // Function ShooterGame.AresMinimapPanelSlot.SetRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x370f190
	void SetPositionSpace(enum class EAresMinimapPositionSpace InPositonSpace); // Function ShooterGame.AresMinimapPanelSlot.SetPositionSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x370f040
	void SetPosition(struct FVector InPosition); // Function ShooterGame.AresMinimapPanelSlot.SetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x370efb0
	void SetLayer(enum class EAresMinimapLayer InLayer); // Function ShooterGame.AresMinimapPanelSlot.SetLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x370ee20
	void SetEventHandlerWidget(struct UWidget* InEventHandlerWidget); // Function ShooterGame.AresMinimapPanelSlot.SetEventHandlerWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x370ed90
	void SetEdgeWidgetVisibleLifetime(float InLifetime); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeWidgetVisibleLifetime // (Final|Native|Public|BlueprintCallable) // @ game+0x370ed10
	void SetEdgeWidgetLastSeen(float InLastSeen); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeWidgetLastSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x370ec90
	void SetEdgeWidgetFadeoutTime(float InFadeoutTime); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeWidgetFadeoutTime // (Final|Native|Public|BlueprintCallable) // @ game+0x370ec10
	void SetEdgeWidget(struct UWidget* InEdgeWidget); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x370eb80
	void SetEdgeSizeSpace(enum class EAresMinimapSizeSpace InSizeSpace); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeSizeSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x370eb00
	void SetEdgeSize(struct FVector InSize); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x370ea70
	void SetEdgeRotationSpace(enum class EAresMinimapRotationSpace InRotationSpace); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x370e9f0
	void SetDrawOffMap(bool bInDrawOffMap); // Function ShooterGame.AresMinimapPanelSlot.SetDrawOffMap // (Final|Native|Public|BlueprintCallable) // @ game+0x370e960
	void SetAlignment(struct FVector2D InAlignment); // Function ShooterGame.AresMinimapPanelSlot.SetAlignment // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x370e8e0
	void SetAim(struct FVector InAim); // Function ShooterGame.AresMinimapPanelSlot.SetAim // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x370e850
	enum class EAresMinimapSizeSpace GetSizeSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetSizeSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d9e0
	struct FVector GetSize(); // Function ShooterGame.AresMinimapPanelSlot.GetSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d9a0
	enum class EAresMinimapRotationSpace GetRotationSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetRotationSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d970
	float GetRotation(); // Function ShooterGame.AresMinimapPanelSlot.GetRotation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d940
	enum class EAresMinimapPositionSpace GetPositionSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetPositionSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d910
	struct FVector GetPosition(); // Function ShooterGame.AresMinimapPanelSlot.GetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d8d0
	enum class EAresMinimapLayer GetLayer(); // Function ShooterGame.AresMinimapPanelSlot.GetLayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d640
	struct UWidget* GetEdgeWidget(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d440
	enum class EAresMinimapSizeSpace GetEdgeSizeSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeSizeSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d410
	struct FVector GetEdgeSize(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d3d0
	enum class EAresMinimapRotationSpace GetEdgeRotationSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeRotationSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d3a0
	bool GetDrawOffMap(); // Function ShooterGame.AresMinimapPanelSlot.GetDrawOffMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d370
	struct FVector2D GetAlignment(); // Function ShooterGame.AresMinimapPanelSlot.GetAlignment // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d2e0
	struct FVector GetAim(); // Function ShooterGame.AresMinimapPanelSlot.GetAim // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x370d2a0
};

// Class ShooterGame.AresMinimapWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresMinimapWidget : UUserWidget {
	struct UImage* MinimapIcon; // 0x2c8(0x08)
	bool bMinimapDebug; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct UAresMinimapComponent* MinimapComponent; // 0x2d8(0x08)

	void SetDebug(bool bDebug); // Function ShooterGame.AresMinimapWidget.SetDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x37170e0
	void ReceiveSetState(); // Function ShooterGame.AresMinimapWidget.ReceiveSetState // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void HandleEdgeStateChange(bool bIsEdgeWidget); // Function ShooterGame.AresMinimapWidget.HandleEdgeStateChange // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.MissionDataAsset
// Size: 0x130 (Inherited: 0x50)
struct UMissionDataAsset : UAresBasePrimaryDataAsset {
	enum class EAresMissionType Type; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<enum class EAresMissionTag> Tags; // 0x58(0x10)
	struct FDateTime ExpirationDate; // 0x68(0x08)
	struct FDateTime ActivationDate; // 0x70(0x08)
	int32_t XPGrant; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TSoftClassPtr<UObject> Mission; // 0x80(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, int32_t> Objectives; // 0xb0(0x50)
	struct TSoftClassPtr<UObject> UIData; // 0x100(0x30)
};

// Class ShooterGame.AccordMissionDataAsset
// Size: 0x190 (Inherited: 0x130)
struct UAccordMissionDataAsset : UMissionDataAsset {
	struct TSoftClassPtr<UObject> AccordAgent; // 0x130(0x30)
	struct TSoftClassPtr<UObject> AccordContract; // 0x160(0x30)
};

// Class ShooterGame.MissionUIData
// Size: 0xa8 (Inherited: 0x90)
struct UMissionUIData : UBaseContentUIData {
	struct FText Title; // 0x90(0x18)
};

// Class ShooterGame.ObjectiveUIData
// Size: 0xa8 (Inherited: 0x90)
struct UObjectiveUIData : UBaseContentUIData {
	struct FText Directive; // 0x90(0x18)
};

// Class ShooterGame.ObjectiveDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UObjectiveDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> ObjectiveComponent; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
};

// Class ShooterGame.AresMouseListenerOverlay
// Size: 0x180 (Inherited: 0x170)
struct UAresMouseListenerOverlay : UOverlay {
	struct FMulticastInlineDelegate OnAresPreviewMouseDown; // 0x170(0x10)
};

// Class ShooterGame.AresMovementToolingTuningAsset
// Size: 0x80 (Inherited: 0x38)
struct UAresMovementToolingTuningAsset : UDataAsset {
	bool bMovementToolingModule; // 0x38(0x01)
	bool bMovementToolingShotRooting; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	struct FMovementToolingShotRootingSharedTuningSet ShotRootingSharedTuningSet; // 0x3c(0x10)
	bool bMovementToolingFastStrafing; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	struct FMovementToolingFastStrafingSharedTuningSet FastStrafingSharedTuningSet; // 0x50(0x24)
	bool bMovementToolingFastRelease; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct FMovementToolingFastReleaseSharedTuningSet FastReleaseSharedTuningSet; // 0x78(0x08)
};

// Class ShooterGame.AresMovementToolingTuningComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresMovementToolingTuningComponent : UActorComponent {
	int32_t CurrentTuningMode; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FString> TuningModeAssetPaths; // 0xf0(0x10)
	struct UAresMovementToolingTuningAsset* CurrentTuningAsset; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)

	void OnMovementToolingGameRuleChanged(enum class EGameRuleBoolName RuleName, bool RuleValue); // Function ShooterGame.AresMovementToolingTuningComponent.OnMovementToolingGameRuleChanged // (Final|Native|Protected) // @ game+0x37169e0
	void HandleTuningAssetLoaded(); // Function ShooterGame.AresMovementToolingTuningComponent.HandleTuningAssetLoaded // (Final|Native|Protected) // @ game+0x37167d0
	void HandleMovementToolingTuningModeChanged(enum class EGameFeatureFloatConfigName TuningModeName, float NewValue); // Function ShooterGame.AresMovementToolingTuningComponent.HandleMovementToolingTuningModeChanged // (Final|Native|Protected) // @ game+0x3716560
};

// Class ShooterGame.AresNetConnection
// Size: 0x1cf8 (Inherited: 0x1ca0)
struct UAresNetConnection : UIpConnection {
	char pad_1CA0[0x58]; // 0x1ca0(0x58)
};

// Class ShooterGame.AresNetDriver
// Size: 0xad0 (Inherited: 0x868)
struct UAresNetDriver : UIpNetDriver {
	char pad_868[0x34]; // 0x868(0x34)
	float SoftDisconnectTimeout; // 0x89c(0x04)
	char pad_8A0[0x5c]; // 0x8a0(0x5c)
	struct FNetworkDegradationSettings SimulatedNetworkDegradation; // 0x8fc(0x3c)
	bool bWasSimulatingBurstLossLastFrame; // 0x938(0x01)
	char pad_939[0x7]; // 0x939(0x07)
	struct TSet<struct FString> PlayersExperiencingBurstLoss; // 0x940(0x50)
	char pad_990[0x140]; // 0x990(0x140)
};

// Class ShooterGame.AresNetworkingGlobals
// Size: 0x48 (Inherited: 0x30)
struct UAresNetworkingGlobals : UObject {
	float TimeBetweenUnreliablePingUpdates; // 0x30(0x04)
	float UnreliablePingAckGiveupTime; // 0x34(0x04)
	int32_t NumUnreliablePingSamples; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UValueDisagreementTimer* DefaultValueDisagreementTimerClass; // 0x40(0x08)
};

// Class ShooterGame.AresNonLookingPickupHUDWidget
// Size: 0x300 (Inherited: 0x300)
struct UAresNonLookingPickupHUDWidget : UAresCommonUserWidget {

	void UpdateBestEquippable(struct AAresOnGroundEquippable* NewBestGroundEquippable); // Function ShooterGame.AresNonLookingPickupHUDWidget.UpdateBestEquippable // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.NonVerbalCommGlobalsDataAssetDefinition
// Size: 0x30 (Inherited: 0x30)
struct UNonVerbalCommGlobalsDataAssetDefinition : UObject {

	void AuthPlayTacticalComm(int32_t WheelGroupIndex, int32_t WheelIndex, int32_t WheelItemIndex, struct FVector PingLocation, struct UObject* PlayerNonVerbalChatComponent); // Function ShooterGame.NonVerbalCommGlobalsDataAssetDefinition.AuthPlayTacticalComm // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|Const) // @ game+0x40572e0
};

// Class ShooterGame.NonVerbalCommGlobalsDataAsset
// Size: 0x70 (Inherited: 0x40)
struct UNonVerbalCommGlobalsDataAsset : UAresPlatformDataAsset {
	struct TSoftClassPtr<UObject> ClassToLoad; // 0x40(0x30)
};

// Class ShooterGame.AresOnGroundEquippable
// Size: 0x438 (Inherited: 0x410)
struct AAresOnGroundEquippable : AGameObject {
	char pad_410[0x8]; // 0x410(0x08)
	struct USphereComponent* Collision; // 0x418(0x08)
	struct AAresEquippable* MyEquippable; // 0x420(0x08)
	struct AShooterCharacter* LastOwner; // 0x428(0x08)
	bool bIsSilentDrop; // 0x430(0x01)
	char pad_431[0x7]; // 0x431(0x07)

	void OnRep_MyEquippable(); // Function ShooterGame.AresOnGroundEquippable.OnRep_MyEquippable // (Final|Native|Protected) // @ game+0x3716ab0
	void MyEquippableChanged(); // Function ShooterGame.AresOnGroundEquippable.MyEquippableChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	float GetOriginalEquippableCost(); // Function ShooterGame.AresOnGroundEquippable.GetOriginalEquippableCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3716380
	void AuthInitialize(struct AAresEquippable* OnGroundEquippable, struct AShooterCharacter* LastOwner, bool bRequestSilentDrop); // Function ShooterGame.AresOnGroundEquippable.AuthInitialize // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37160f0
	void AuthEquippableRemoved(); // Function ShooterGame.AresOnGroundEquippable.AuthEquippableRemoved // (Final|Native|Protected) // @ game+0x2024060
	void AuthEquippableOwnerChanged(struct AAresEquippable* Equippable, struct AActor* EquippableOwner); // Function ShooterGame.AresOnGroundEquippable.AuthEquippableOwnerChanged // (Final|Native|Protected) // @ game+0x3669300
	void AuthEquippableDestroyed(struct AActor* Equippable); // Function ShooterGame.AresOnGroundEquippable.AuthEquippableDestroyed // (Final|Native|Protected) // @ game+0x3634e00
};

// Class ShooterGame.AresOutlineComponent
// Size: 0x2c0 (Inherited: 0x290)
struct UAresOutlineComponent : USceneComponent {
	struct AAresPlayerStateBase* LastLocalPlayerState; // 0x290(0x08)
	struct AShooterCharacter* ShooterCharacterOwner; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	enum class EAresOutlineMode AllyOutline; // 0x2b0(0x01)
	enum class EAresOutlineMode EnemyOutline; // 0x2b1(0x01)
	enum class EAresOutlineMode NeutralOutline; // 0x2b2(0x01)
	enum class EAresOutlineMode DeadAllyOutline; // 0x2b3(0x01)
	enum class EAresOutlineMode DeadEnemyOutline; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float DeathFadeDuration; // 0x2b8(0x04)
	bool bAffectChildren; // 0x2bc(0x01)
	char pad_2BD[0x3]; // 0x2bd(0x03)

	void UpdateOutlineMode(); // Function ShooterGame.AresOutlineComponent.UpdateOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3717270
	void SetOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x37171f0
	void SetNeutralOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetNeutralOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3717170
	void SetDeadEnemyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetDeadEnemyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3717060
	void SetDeadAllyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetDeadAllyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3716fe0
	void SetAllyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetAllyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3716f60
	struct UAresOutlineComponent* PushOutlineComponent(); // Function ShooterGame.AresOutlineComponent.PushOutlineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3716e40
	struct UAresOutlineComponent* PushMeshOutlineComponent(struct UMeshComponent* MeshComponent); // Function ShooterGame.AresOutlineComponent.PushMeshOutlineComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3716db0
	struct UAresOutlineComponent* PushMeshOutline(struct UMeshComponent* MeshComponent, enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.PushMeshOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3716ce0
	void PopOutlineComponent(); // Function ShooterGame.AresOutlineComponent.PopOutlineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3716cc0
	void HandleOwnerDied(struct UDamageResponse* Response); // Function ShooterGame.AresOutlineComponent.HandleOwnerDied // (Final|Native|Protected) // @ game+0x3716740
	void HandleOwnerChanged(struct AAresItem* Item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AresOutlineComponent.HandleOwnerChanged // (Final|Native|Protected) // @ game+0x3716630
	void HandleLocalPlayerStateChanged(struct AAresPlayerStateBase* NewState); // Function ShooterGame.AresOutlineComponent.HandleLocalPlayerStateChanged // (Final|Native|Protected) // @ game+0x37164d0
	struct UAresOutlineComponent* GetTopOutlineComponent(); // Function ShooterGame.AresOutlineComponent.GetTopOutlineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x37164a0
	enum class EAresOutlineMode GetNeutralOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetNeutralOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3716350
	enum class EAresOutlineMode GetEnemyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetEnemyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3716320
	enum class EAresOutlineMode GetDeadEnemyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetDeadEnemyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37162f0
	enum class EAresOutlineMode GetDeadAllyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetDeadAllyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37162c0
	enum class EAresOutlineMode GetAllyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetAllyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3716290
	void CopyOutlineModes(struct UAresOutlineComponent* OtherComponent); // Function ShooterGame.AresOutlineComponent.CopyOutlineModes // (Final|Native|Public|BlueprintCallable) // @ game+0x3716200
};

// Class ShooterGame.ParticleModuleTeamColor
// Size: 0xe8 (Inherited: 0x48)
struct UParticleModuleTeamColor : UParticleModuleCustomColor {
	struct FLinearColor BaseColor; // 0x48(0x10)
	struct FLinearColor DefaultEnemyColor; // 0x58(0x10)
	struct FLinearColor TritanopiaEnemyColor; // 0x68(0x10)
	struct FLinearColor DeuteranopiaEnemyColor; // 0x78(0x10)
	struct FLinearColor ProtanopiaEnemyColor; // 0x88(0x10)
	struct FLinearColor DefenderColor; // 0x98(0x10)
	struct FLinearColor ExampleCustomColor; // 0xa8(0x10)
	struct FVector MinInputCustomColor; // 0xb8(0x0c)
	struct FVector MaxInputCustomColor; // 0xc4(0x0c)
	struct FVector MinOutputCustomColor; // 0xd0(0x0c)
	struct FVector MaxOutputCustomColor; // 0xdc(0x0c)
};

// Class ShooterGame.ParticleModuleOutlineMode
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleOutlineMode : UParticleModuleCustomOutline {
	enum class EAresOutlineMode AllyOutline; // 0x38(0x01)
	enum class EAresOutlineMode EnemyOutline; // 0x39(0x01)
	enum class EAresOutlineMode NeutralOutline; // 0x3a(0x01)
	char pad_3B[0x5]; // 0x3b(0x05)
};

// Class ShooterGame.AresPartyFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresPartyFunctionLibrary : UBlueprintFunctionLibrary {

	bool RevertCustomPartyToDefaultParty(struct UObject* WorldContextObject, struct FString QueueID); // Function ShooterGame.AresPartyFunctionLibrary.RevertCustomPartyToDefaultParty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3716e70
	bool PlayersPartyIsFull(struct UPlatformPlayer* Player); // Function ShooterGame.AresPartyFunctionLibrary.PlayersPartyIsFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3716c30
	bool PlayersClientIsCompatibleWithLocalParty(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresPartyFunctionLibrary.PlayersClientIsCompatibleWithLocalParty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3716b60
	bool PlayerIsInDisplayableParty(struct UPlatformPlayer* Player); // Function ShooterGame.AresPartyFunctionLibrary.PlayerIsInDisplayableParty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3716ad0
	bool LocalPlayersPartyIsFull(struct UObject* WorldContextObject); // Function ShooterGame.AresPartyFunctionLibrary.LocalPlayersPartyIsFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3716950
	bool IsMemberOfLocalPlayersParty(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresPartyFunctionLibrary.IsMemberOfLocalPlayersParty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3716880
	bool IsInSoloParty(struct UPlatformPlayer* Player); // Function ShooterGame.AresPartyFunctionLibrary.IsInSoloParty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37167f0
	enum class EAresSocialPartyCompatibility GetPartyCompatibility(struct UObject* WorldContextObject, struct FString PartyID); // Function ShooterGame.AresPartyFunctionLibrary.GetPartyCompatibility // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37163b0
};

// Class ShooterGame.AresPartyInviteCountViewModel
// Size: 0x68 (Inherited: 0x60)
struct UAresPartyInviteCountViewModel : UAresSocialCountViewModelBase {
	struct UPartyModel* PartyModel; // 0x60(0x08)

	void HandleMessageRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyInviteCountViewModel.HandleMessageRemoved // (Final|Native|Private) // @ game+0x371ea40
	void HandleMessageAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyInviteCountViewModel.HandleMessageAdded // (Final|Native|Private) // @ game+0x371e890
};

// Class ShooterGame.AresPartyItemViewModel
// Size: 0x120 (Inherited: 0x78)
struct UAresPartyItemViewModel : UAresSocialListViewModel {
	struct FMulticastInlineDelegate OnPartyMemberAdded; // 0x78(0x10)
	struct FMulticastInlineDelegate OnPartyMemberRemoved; // 0x88(0x10)
	struct FMulticastInlineDelegate OnPartyLeaderChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnPartyMembersListSorted; // 0xc8(0x10)
	char pad_D8[0x40]; // 0xd8(0x40)
	struct UPartyListingManager* PartyListingManager; // 0x118(0x08)

	void Setup(struct FString PartyID, bool ExcludeLocalPlayer); // Function ShooterGame.AresPartyItemViewModel.Setup // (Final|Native|Public|BlueprintCallable) // @ game+0x371f620
	void RefreshParty(); // Function ShooterGame.AresPartyItemViewModel.RefreshParty // (Final|Native|Private) // @ game+0x371ef00
	int32_t GetPartySize(); // Function ShooterGame.AresPartyItemViewModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26277a0
	struct TArray<struct FString> GetPartyMembers(); // Function ShooterGame.AresPartyItemViewModel.GetPartyMembers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e120
	struct FString GetPartyLeader(); // Function ShooterGame.AresPartyItemViewModel.GetPartyLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e0a0
	int32_t GetMaxPartySize(); // Function ShooterGame.AresPartyItemViewModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e040
};

// Class ShooterGame.AresPartyMessageItemViewModel
// Size: 0x88 (Inherited: 0x48)
struct UAresPartyMessageItemViewModel : UAresViewModelBase {
	struct FPartyMessageItemModel CachePartyMessageItemData; // 0x48(0x40)

	void RejectPartyMessage(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.AresPartyMessageItemViewModel.RejectPartyMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x371ef20
	void Initialize(struct FPartyMessageItemModel PartyMessageItemModel); // Function ShooterGame.AresPartyMessageItemViewModel.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x371eca0
	struct UPlatformPlayer* GetSender(); // Function ShooterGame.AresPartyMessageItemViewModel.GetSender // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e860
	struct UPlatformPlayer* GetReceiver(); // Function ShooterGame.AresPartyMessageItemViewModel.GetReceiver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x289c5a0
	enum class EPartyMessageType GetMessageType(); // Function ShooterGame.AresPartyMessageItemViewModel.GetMessageType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e070
	struct FDateTime GetCreatedAt(); // Function ShooterGame.AresPartyMessageItemViewModel.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e000
	void AcceptPartyMessage(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.AresPartyMessageItemViewModel.AcceptPartyMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x371d480
};

// Class ShooterGame.AresPartyMessageListViewModel
// Size: 0x108 (Inherited: 0x78)
struct UAresPartyMessageListViewModel : UAresSocialListViewModel {
	struct FMulticastInlineDelegate PartyMessageAdded; // 0x78(0x10)
	struct FMulticastInlineDelegate PartyMessageRemoved; // 0x88(0x10)
	struct FString CurrentPartyID; // 0x98(0x10)
	enum class EPartyMessageType PartyMessageListType; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
	struct TMap<struct FString, struct FPartyMessageItemModel> PartyMessageCache; // 0xb0(0x50)
	struct UPartyModel* PartyModel; // 0x100(0x08)

	void Initialize(enum class EPartyMessageType MessageListType); // Function ShooterGame.AresPartyMessageListViewModel.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x371ee20
	void HandleMessageRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyMessageListViewModel.HandleMessageRemoved // (Final|Native|Private) // @ game+0x371ead0
	void HandleMessageAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyMessageListViewModel.HandleMessageAdded // (Final|Native|Private) // @ game+0x371e920
	struct TArray<struct FPartyMessageItemModel> GetPartyMessages(); // Function ShooterGame.AresPartyMessageListViewModel.GetPartyMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e200
	void AddMessage(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyMessageListViewModel.AddMessage // (Final|Native|Private) // @ game+0x371d5a0
};

// Class ShooterGame.AresPartyRequestCountViewModel
// Size: 0x68 (Inherited: 0x60)
struct UAresPartyRequestCountViewModel : UAresSocialCountViewModelBase {
	struct UPartyModel* PartyModel; // 0x60(0x08)

	void HandleMessageRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyRequestCountViewModel.HandleMessageRemoved // (Final|Native|Private) // @ game+0x371eb60
	void HandleMessageAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresPartyRequestCountViewModel.HandleMessageAdded // (Final|Native|Private) // @ game+0x371e9b0
};

// Class ShooterGame.AresPartyViewModel
// Size: 0x58 (Inherited: 0x48)
struct UAresPartyViewModel : UAresViewModelBase {
	struct UPartyManager* PartyManager; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)

	void SetQueueEntryTime(struct FAresParty Party, struct FDateTime& NewValue); // Function ShooterGame.AresPartyViewModel.SetQueueEntryTime // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x371f280
	bool RevertToDefaultParty(struct FString QueueID); // Function ShooterGame.AresPartyViewModel.RevertToDefaultParty // (Final|Native|Public|BlueprintCallable) // @ game+0x371f1c0
	void RetrieveRelevantModes(); // Function ShooterGame.AresPartyViewModel.RetrieveRelevantModes // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f1a0
	void RetrieveGameModes(); // Function ShooterGame.AresPartyViewModel.RetrieveGameModes // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f180
	void RetrieveCustomGameModes(); // Function ShooterGame.AresPartyViewModel.RetrieveCustomGameModes // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f160
	bool IsMatchmaking(); // Function ShooterGame.AresPartyViewModel.IsMatchmaking // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371eed0
	bool IsCustomParty(); // Function ShooterGame.AresPartyViewModel.IsCustomParty // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371eea0
	void HandleSendInviteSuccess(); // Function ShooterGame.AresPartyViewModel.HandleSendInviteSuccess // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleSendInviteFailure(); // Function ShooterGame.AresPartyViewModel.HandleSendInviteFailure // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandlePlayerUpdated(); // Function ShooterGame.AresPartyViewModel.HandlePlayerUpdated // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandlePartyUpdated(); // Function ShooterGame.AresPartyViewModel.HandlePartyUpdated // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleInviteActionSuccess(struct FString PartyID, enum class EPartyManagerInviteAction Action); // Function ShooterGame.AresPartyViewModel.HandleInviteActionSuccess // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleGameModeRetrieved(struct FString AssetPath, struct FString QueueID, struct UGameModeDataAsset* GameModeData); // Function ShooterGame.AresPartyViewModel.HandleGameModeRetrieved // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleGameModeRetrievalComplete(); // Function ShooterGame.AresPartyViewModel.HandleGameModeRetrievalComplete // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleContentUpdated(); // Function ShooterGame.AresPartyViewModel.HandleContentUpdated // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	struct FDateTime GetQueueEntryTime(struct FAresParty Party); // Function ShooterGame.AresPartyViewModel.GetQueueEntryTime // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e780
	enum class EAresPartyState GetPreviousPartyState(struct FAresParty Party); // Function ShooterGame.AresPartyViewModel.GetPreviousPartyState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e6b0
	enum class EAresPartyState GetPartyState(struct FAresParty Party); // Function ShooterGame.AresPartyViewModel.GetPartyState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e300
	void BindEventsToPartyManager(); // Function ShooterGame.AresPartyViewModel.BindEventsToPartyManager // (Final|Native|Protected|BlueprintCallable) // @ game+0x371d630
};

// Class ShooterGame.AresPeakMemoryUsageGauntletController
// Size: 0x130 (Inherited: 0x130)
struct UAresPeakMemoryUsageGauntletController : UAresJoinGameGauntletControllerBase {

	void ToggleMatchTimer(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.ToggleMatchTimer // (Final|Native|Private) // @ game+0x2024060
	void SuicidePlayer(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.SuicidePlayer // (Final|Native|Private) // @ game+0x2024060
	void SpawnMannequins(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.SpawnMannequins // (Final|Native|Private) // @ game+0x2024060
	void SetupTest(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.SetupTest // (Final|Native|Private) // @ game+0x2024060
	void OnInGame(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.OnInGame // (Native|Protected) // @ game+0x36b8220
	void OnCloseGame(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.OnCloseGame // (Native|Protected) // @ game+0x3701030
	void GoToInGamePhase(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GoToInGamePhase // (Final|Native|Private) // @ game+0x2024060
	struct FString GetControllerName(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GetControllerName // (Native|Protected) // @ game+0x371df70
	struct FString GenerateMannequinCommand(struct FString MannequinAgentName, struct FString TeamName, struct FString GunName, struct FString SkinName); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GenerateMannequinCommand // (Final|Native|Private) // @ game+0x371dc40
	struct FString GenerateGunSkinSetSkinCommand(struct FString SkinName); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GenerateGunSkinSetSkinCommand // (Final|Native|Private) // @ game+0x371db00
	struct FString GenerateFillTexturePoolCommand(bool fillPool); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GenerateFillTexturePoolCommand // (Final|Native|Private) // @ game+0x371da20
	void FillTexturePool(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.FillTexturePool // (Final|Native|Private) // @ game+0x2024060
	void EquipGun(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.EquipGun // (Final|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.AresPersonalizationViewModel
// Size: 0x68 (Inherited: 0x48)
struct UAresPersonalizationViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnViewModelDestroyed; // 0x48(0x10)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x58(0x08)
	struct UInventoryManager* InventoryManager; // 0x60(0x08)

	void UnequipBuddy(struct UEquippableDataAsset* Equippable); // Function ShooterGame.AresPersonalizationViewModel.UnequipBuddy // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f930
	void SetSkinWithLevelAndChromaForGun(struct UEquippableDataAsset* Equippable, struct UEquippableSkinDataAsset* Skin, struct UEquippableSkinLevelDataAsset* SkinLevel, struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.AresPersonalizationViewModel.SetSkinWithLevelAndChromaForGun // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f4c0
	void SetSkinAndChromaForGun(struct UEquippableDataAsset* Equippable, struct UEquippableSkinDataAsset* Skin, struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.AresPersonalizationViewModel.SetSkinAndChromaForGun // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f3b0
	void RemoveSkin(struct UEquippableInventoryModel* Value); // Function ShooterGame.AresPersonalizationViewModel.RemoveSkin // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f0d0
	void RemoveAttachment(struct UEquippableAttachmentInventoryModel* AttachmentModel); // Function ShooterGame.AresPersonalizationViewModel.RemoveAttachment // (Final|Native|Protected|BlueprintCallable) // @ game+0x371f040
	void EquipSkin(struct UEquippableSkinInventoryModel* Value); // Function ShooterGame.AresPersonalizationViewModel.EquipSkin // (Final|Native|Protected|BlueprintCallable) // @ game+0x371d990
	void EquipBuddy(struct UEquippableDataAsset* Equippable, struct UEquippableCharmInstanceInventoryModel* CharmInstance); // Function ShooterGame.AresPersonalizationViewModel.EquipBuddy // (Final|Native|Protected|BlueprintCallable) // @ game+0x371d8c0
	void EquipAttachment(struct UEquippableAttachmentInventoryModel* AttachmentModel); // Function ShooterGame.AresPersonalizationViewModel.EquipAttachment // (Final|Native|Protected|BlueprintCallable) // @ game+0x371d830
	bool CheckSkinOwnership(struct UEquippableSkinDataAsset* Skin); // Function ShooterGame.AresPersonalizationViewModel.CheckSkinOwnership // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371d790
	bool CheckSkinLevelOwnership(struct UEquippableSkinLevelDataAsset* SkinLevel); // Function ShooterGame.AresPersonalizationViewModel.CheckSkinLevelOwnership // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371d6f0
	bool CheckChromaOwnership(struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.AresPersonalizationViewModel.CheckChromaOwnership // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x371d650
};

// Class ShooterGame.PlatformSpecializedUIGlobalsDataAsset
// Size: 0x90 (Inherited: 0x40)
struct UPlatformSpecializedUIGlobalsDataAsset : UAresPlatformDataAsset {
	struct TMap<enum class EAresPlatformWidgetFamily, struct TSoftObjectPtr<UPlatformSpecializedWidgetFamily>> PlatformSpecializedWidgetFamilies; // 0x40(0x50)
};

// Class ShooterGame.PlatformSpecializedWidgetFamily
// Size: 0xd8 (Inherited: 0x38)
struct UPlatformSpecializedWidgetFamily : UDataAsset {
	struct TMap<struct FName, struct TSoftClassPtr<UObject>> WidgetBlueprints; // 0x38(0x50)
	struct TMap<struct FName, struct UUserWidget*> CachedWidgetBlueprints; // 0x88(0x50)

	bool TryGetWidgetClassBlocking(struct FName& WidgetID, struct UUserWidget*& OutClass); // Function ShooterGame.PlatformSpecializedWidgetFamily.TryGetWidgetClassBlocking // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x371f840
	bool TryGetClassReference(struct FName& WidgetID, struct TSoftClassPtr<UObject>& OutClassRef); // Function ShooterGame.PlatformSpecializedWidgetFamily.TryGetClassReference // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x371f710
	bool HasSpecializedWidgetClass(struct FName& WidgetID); // Function ShooterGame.PlatformSpecializedWidgetFamily.HasSpecializedWidgetClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x371ebf0
};

// Class ShooterGame.PlatformSpecializedUIBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UPlatformSpecializedUIBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool GetPlatformSpecializedWidgetClassForPlatform(enum class EAresPlatformWidgetFamily WidgetFamily, struct FName& WidgetID, enum class EAresPlatformType DesiredPlatform, struct UUserWidget*& OutClass); // Function ShooterGame.PlatformSpecializedUIBlueprintFunctionLibrary.GetPlatformSpecializedWidgetClassForPlatform // (Final|Native|Static|Public|HasOutParms) // @ game+0x371e540
	bool GetPlatformSpecializedWidgetClass(struct UObject* ContextObj, enum class EAresPlatformWidgetFamily WidgetFamily, struct FName WidgetID, struct UUserWidget*& OutClass); // Function ShooterGame.PlatformSpecializedUIBlueprintFunctionLibrary.GetPlatformSpecializedWidgetClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x371e3d0
};

// Class ShooterGame.AresPlatformBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresPlatformBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	void OpenAppPermissionSettings(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.OpenAppPermissionSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3730540
	bool IsRunningOnBattery(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.IsRunningOnBattery // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f8e0
	bool IsClientPlatformNativePlatform(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.IsClientPlatformNativePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f850
	bool IsClientPlatformConsole(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.IsClientPlatformConsole // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f850
	bool HasActiveWiFiConnection(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.HasActiveWiFiConnection // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f710
	struct TArray<int32_t> GetRefreshRates(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetRefreshRates // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f330
	enum class EAresPlatformType GetPlatformType(struct UObject* WorldContextObject); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetPlatformType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f090
	float GetDeviceTemperatureLevel(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetDeviceTemperatureLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372eff0
	enum class EAresDeviceQuality GetDefaultDeviceQuality(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetDefaultDeviceQuality // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372efc0
	enum class EAresNetworkConnectionQuality GetConnectionQuality(struct AShooterGameState* GameState); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetConnectionQuality // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372ef00
	enum class EAresPlatformType GetClientPlatformType(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetClientPlatformType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x244a2b0
	int32_t GetBatteryLevel(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetBatteryLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372eea0
	enum class EAresNetworkConnectionType GetAresNetworkConnectionType(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetAresNetworkConnectionType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372ed80
};

// Class ShooterGame.AresPlayerAutomation
// Size: 0x3f0 (Inherited: 0x3d8)
struct AAresPlayerAutomation : AActor {
	struct AAresPlayerStateBase* PlayerState; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)
	bool bReadyToTestFired; // 0x3e8(0x01)
	bool bIsComplete; // 0x3e9(0x01)
	bool bWaitForGameAutomation; // 0x3ea(0x01)
	bool bWaitForShooterCharacter; // 0x3eb(0x01)
	char pad_3EC[0x4]; // 0x3ec(0x04)

	void TryReadyToTest(); // Function ShooterGame.AresPlayerAutomation.TryReadyToTest // (Final|Native|Private) // @ game+0x2024060
	void Tick(float DeltaSeconds); // Function ShooterGame.AresPlayerAutomation.Tick // (Native|Public) // @ game+0x3690ff0
	void SimulateMovementInputUp(enum class EAresAutomationMovement Movement); // Function ShooterGame.AresPlayerAutomation.SimulateMovementInputUp // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void SimulateMovementInputDown(enum class EAresAutomationMovement Movement); // Function ShooterGame.AresPlayerAutomation.SimulateMovementInputDown // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void SimulateInputUp(enum class EAresAutomationInput Input); // Function ShooterGame.AresPlayerAutomation.SimulateInputUp // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void SimulateInputDown(enum class EAresAutomationInput Input); // Function ShooterGame.AresPlayerAutomation.SimulateInputDown // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void SimulateInput(enum class EAresAutomationInput Input); // Function ShooterGame.AresPlayerAutomation.SimulateInput // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void SetAimingPitch(float NewPitch); // Function ShooterGame.AresPlayerAutomation.SetAimingPitch // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void SetAiming(struct FRotator& Aiming); // Function ShooterGame.AresPlayerAutomation.SetAiming // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3731520
	void ServerPostPlayerAutomationComplete(); // Function ShooterGame.AresPlayerAutomation.ServerPostPlayerAutomationComplete // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2047f70
	void ReceivePostReadyToTestTick(float DeltaSeconds); // Function ShooterGame.AresPlayerAutomation.ReceivePostReadyToTestTick // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ReceiveBeginReadyToTest(); // Function ShooterGame.AresPlayerAutomation.ReceiveBeginReadyToTest // (Native|Event|Public|BlueprintEvent) // @ game+0x3730610
	void OnGameAutomationPassed(); // Function ShooterGame.AresPlayerAutomation.OnGameAutomationPassed // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void NotifyPlayerAutomationComplete(); // Function ShooterGame.AresPlayerAutomation.NotifyPlayerAutomationComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x372fae0
	void GrantAllAbilities(); // Function ShooterGame.AresPlayerAutomation.GrantAllAbilities // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	struct AAresPlayerStateBase* GetPlayerState(); // Function ShooterGame.AresPlayerAutomation.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36558b0
	struct APlayerController* GetController(); // Function ShooterGame.AresPlayerAutomation.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372ef90
	struct AShooterCharacter* GetCharacter(); // Function ShooterGame.AresPlayerAutomation.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372eed0
	enum class EAresAutomationInput GetAutomationInputForItemSlot(enum class EAresItemSlot ItemSlot); // Function ShooterGame.AresPlayerAutomation.GetAutomationInputForItemSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x372ee10
	struct AAresPlayerController* GetAresPlayerController(); // Function ShooterGame.AresPlayerAutomation.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x372edb0
	void ClientPassTest(); // Function ShooterGame.AresPlayerAutomation.ClientPassTest // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x372ddf0
	void ClientNotifyGameAutomationPassed(); // Function ShooterGame.AresPlayerAutomation.ClientNotifyGameAutomationPassed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2047fa0
	void ClientFailTest(struct FString Reason); // Function ShooterGame.AresPlayerAutomation.ClientFailTest // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x372d280
	void ClientAutomationLog(struct FString Reason); // Function ShooterGame.AresPlayerAutomation.ClientAutomationLog // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x372ca30
	void AuthSetPlayerState(struct AAresPlayerStateBase* NewPlayerState); // Function ShooterGame.AresPlayerAutomation.AuthSetPlayerState // (Final|Native|Public) // @ game+0x3634e00
	void AimAtCharacter(struct AShooterCharacter* Target, struct FName BoneName); // Function ShooterGame.AresPlayerAutomation.AimAtCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x372c730
};

// Class ShooterGame.AresGameDemo
// Size: 0x3f0 (Inherited: 0x3e8)
struct AAresGameDemo : AAresGameAutomation {
	char pad_3E8[0x8]; // 0x3e8(0x08)
};

// Class ShooterGame.AresClientDemo
// Size: 0x488 (Inherited: 0x3f0)
struct AAresClientDemo : AAresPlayerAutomation {
	char pad_3F0[0x98]; // 0x3f0(0x98)

	void DemoStop(); // Function ShooterGame.AresClientDemo.DemoStop // (Final|Exec|Native|Public) // @ game+0x2024060
	void DemoRecord(struct FString Name, int32_t FPS); // Function ShooterGame.AresClientDemo.DemoRecord // (Final|Exec|Native|Public) // @ game+0x373ab90
	void DemoPlayback(struct FString Name); // Function ShooterGame.AresClientDemo.DemoPlayback // (Final|Exec|Native|Public) // @ game+0x36d6150
};

// Class ShooterGame.OwnerExclusivePlayerInfo
// Size: 0x600 (Inherited: 0x3d8)
struct AOwnerExclusivePlayerInfo : AInfo {
	struct FMulticastInlineDelegate OnAuthLoadoutFinalized; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnRequestFulfilled; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnRequestRefunded; // 0x3f8(0x10)
	struct FRoundPersistentDataDefinition RoundPersistentData; // 0x408(0x10)
	struct FMulticastInlineDelegate OnPreviousRoundRewardsFinalized; // 0x418(0x10)
	char pad_428[0x10]; // 0x428(0x10)
	struct FMulticastInlineDelegate OnAuthLoadoutReset; // 0x438(0x10)
	struct AController* AresController; // 0x448(0x08)
	struct TArray<float> CurrentResources; // 0x450(0x10)
	int32_t NumDeathStreak; // 0x460(0x04)
	int32_t StartOfRoundMoneyCache; // 0x464(0x04)
	int32_t StartOfRoundLoadoutValueCache; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct TArray<struct FAresTrackedReward> TrackedRewards; // 0x470(0x10)
	int32_t EndOfRoundBeforeRewardsMoney; // 0x480(0x04)
	bool bLoadoutFinalized; // 0x484(0x01)
	bool bCanProgressAchievements; // 0x485(0x01)
	char pad_486[0x2]; // 0x486(0x02)
	struct UCombatReportComponent* CombatReportComponentType; // 0x488(0x08)
	struct UCombatReportComponent* CombatReportComponent; // 0x490(0x08)
	struct UContextAwareModuleManagerComponent* ContextAwareModuleManagerComponent; // 0x498(0x08)
	struct UBaseCombatReportComponent* ExtendedCombatReportComponent; // 0x4a0(0x08)
	struct UKillStreakComponent* KillStreakComponent; // 0x4a8(0x08)
	struct UPlayerTimelineDebugComponent* PlayerTimelineDebugComponent; // 0x4b0(0x08)
	struct UPlayerPurchaseablesComponent* PlayerPurchaseablesComponent; // 0x4b8(0x08)
	struct TArray<struct FAresPlayerRoundInfo> RoundInfos; // 0x4c0(0x10)
	enum class EPlayerDebugFlags DebugFlags; // 0x4d0(0x01)
	char pad_4D1[0x7]; // 0x4d1(0x07)
	struct UPersonalizationComponent* PersonalizationComponent; // 0x4d8(0x08)
	struct USprayLoadoutComponent* SprayLoadoutComponent; // 0x4e0(0x08)
	struct TArray<struct FObfuscatedPlayerInformation> AllPlayersObfuscatedPlayerInformation; // 0x4e8(0x10)
	char pad_4F8[0x108]; // 0x4f8(0x108)

	void ServerUpdateReflectedIntPlayerSetting(enum class EAresIntSettingName SettingName, int32_t NewValue); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerUpdateReflectedIntPlayerSetting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x373beb0
	void ServerUpdateReflectedFloatPlayerSetting(enum class EAresFloatSettingName SettingName, float NewValue); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerUpdateReflectedFloatPlayerSetting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x373bde0
	void ServerUpdateReflectedBoolPlayerSetting(enum class EAresBoolSettingName SettingName, bool NewValue); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerUpdateReflectedBoolPlayerSetting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x373bd00
	void ServerSwapSpawnedCharacter(struct APawn* DesiredClass); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerSwapSpawnedCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x373bc70
	void ServerInitializeReflectedPlayerSettings(struct FReflectedSettingsInitializationBlob InitialSettings); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerInitializeReflectedPlayerSettings // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x373b920
	void PostInitializeComponents(); // Function ShooterGame.OwnerExclusivePlayerInfo.PostInitializeComponents // (Native|Public) // @ game+0x373b8f0
	void OnRep_TrackedRewardsReplicated(); // Function ShooterGame.OwnerExclusivePlayerInfo.OnRep_TrackedRewardsReplicated // (Final|Native|Private) // @ game+0x373b540
	void OnRep_ObfuscatedPlayerInformation(); // Function ShooterGame.OwnerExclusivePlayerInfo.OnRep_ObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x373b490
	bool IsLoadoutFinalized(); // Function ShooterGame.OwnerExclusivePlayerInfo.IsLoadoutFinalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b430
	bool IsAlive(); // Function ShooterGame.OwnerExclusivePlayerInfo.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b400
	struct TArray<struct FAresTrackedReward> GetTrackedRewards(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetTrackedRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b3c0
	int32_t GetTotalLoadoutValue(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetTotalLoadoutValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ae30
	int32_t GetStartOfRoundMoneyCache(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetStartOfRoundMoneyCache // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b370
	struct USprayLoadoutComponent* GetSprayLoadoutComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetSprayLoadoutComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f520
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b310
	struct FString GetShortPlayerName(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetShortPlayerName // (Final|Native|Public|Const) // @ game+0x373b1e0
	struct TArray<struct FAresPlayerRoundInfo> GetRoundInfos(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetRoundInfos // (Final|Native|Public|Const) // @ game+0x373b0d0
	struct AAresRespawnManager* GetRespawnManager(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetRespawnManager // (Final|Native|Public|BlueprintCallable) // @ game+0x373b0a0
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373aff0
	struct UPlayerPurchaseablesComponent* GetPlayerPurchaseablesComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPlayerPurchaseablesComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f490
	int32_t GetPlayerId(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPlayerId // (Final|Native|Public|Const) // @ game+0x373afc0
	struct UPersonalizationComponent* GetPersonalizationComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPersonalizationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f770
	int32_t GetLoadoutValue(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetLoadoutValue // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373aec0
	struct UKillStreakComponent* GetKillStreakComponentMutable(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetKillStreakComponentMutable // (Final|Native|Public|BlueprintCallable) // @ game+0x369f460
	int32_t GetKills(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetKills // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ae90
	int32_t GetKillNumber(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetKillNumber // (Final|Native|Public|Const) // @ game+0x373ae60
	int32_t GetInventoryValue(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetInventoryValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ae30
	int32_t GetEndOfRoundBeforeRewardsMoney(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetEndOfRoundBeforeRewardsMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ae00
	bool GetDebugFlagIsActive(enum class EPlayerDebugFlags Flag); // Function ShooterGame.OwnerExclusivePlayerInfo.GetDebugFlagIsActive // (Final|Native|Public|Const) // @ game+0x373ad70
	int32_t GetDeaths(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetDeaths // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ad40
	struct UCombatReportComponent* GetCombatReportComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetCombatReportComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x369fc40
	int32_t GetAssists(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetAssists // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ace0
	struct AShooterPlayerController* GetAresPlayerController(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373acb0
	struct AController* GetAresController(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetAresController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fc70
	void ClientNotifyReflectedSettingsInitialized(); // Function ShooterGame.OwnerExclusivePlayerInfo.ClientNotifyReflectedSettingsInitialized // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x373aa20
	void ClientFinalizePreviousRoundRewards(struct TArray<struct FAresTrackedReward> PreviousRoundRewards); // Function ShooterGame.OwnerExclusivePlayerInfo.ClientFinalizePreviousRoundRewards // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x373a910
	bool CanTransact(); // Function ShooterGame.OwnerExclusivePlayerInfo.CanTransact // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x373a8d0
	bool CanProgressAchievements(); // Function ShooterGame.OwnerExclusivePlayerInfo.CanProgressAchievements // (Final|Native|Public|Const) // @ game+0x373a8a0
	bool CanOpenShop(); // Function ShooterGame.OwnerExclusivePlayerInfo.CanOpenShop // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3701a80
	void AuthSwapSpawnedCharacter(struct APawn* DesiredClass); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSwapSpawnedCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthSetPossessedCharacter(struct AShooterCharacter* PossessedCharacter); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetPossessedCharacter // (Final|Native|Public) // @ game+0x3634e00
	void AuthSetDebugFlag(enum class EPlayerDebugFlags Flag, bool bEnabled); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetDebugFlag // (Final|Native|Public) // @ game+0x3690810
	void AuthSetController(struct AController* NewController); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetController // (Final|Native|Public) // @ game+0x3634e00
	void AuthSetCanProgressAchievements(bool bCanProgress); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetCanProgressAchievements // (Final|Native|Public) // @ game+0x3635160
	void AuthRoundEnded(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthRoundEnded // (Final|Native|Public) // @ game+0x2024060
	void AuthResetTrackedRewards(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthResetTrackedRewards // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthResetRoundLoadout(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthResetRoundLoadout // (Final|Native|Public|BlueprintCallable) // @ game+0x3739c70
	void AuthResetChargeInfo(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthResetChargeInfo // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x373a5d0
	void AuthReset(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthReset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3739c70
	void AuthOnRoundBegin(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthOnRoundBegin // (Final|Native|Public) // @ game+0x2024060
	void AuthGiveDefaultRewardText(struct FName RewardName, struct FText LocalizedRewardName, struct FAresGameRewardMultiplier Multiplier); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveDefaultRewardText // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x373a390
	void AuthGiveDefaultReward(struct FName RewardName, struct FAresGameRewardMultiplier Multiplier); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveDefaultReward // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x373a230
	void AuthGiveCustomRewardText(struct FName RewardName, struct FText LocalizedRewardName, int32_t MoneyAmount, int32_t SignatureAbilityPoints, int32_t UltimatePoints, int32_t HealthAmount, enum class EAresRewardGrantStrategy WhenToGiveReward, enum class EAresRewardShouldIncrementInstances ShouldIncrementInstances, enum class ERewardSource Source); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveCustomRewardText // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3739f00
	void AuthGiveCustomReward(struct FName RewardName, int32_t MoneyAmount, int32_t SignatureAbilityPoints, int32_t UltimatePoints, int32_t HealthAmount, enum class EAresRewardGrantStrategy WhenToGiveReward, enum class EAresRewardShouldIncrementInstances ShouldIncrementInstances, enum class ERewardSource Source); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveCustomReward // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3739c90
	void AuthFinalizeRoundLoadout(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthFinalizeRoundLoadout // (Final|Native|Public|BlueprintCallable) // @ game+0x3739c70
	void AuthCancelReward(struct FName RewardName); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthCancelReward // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3739bd0
	void AuthAwardSignatureAbilityPoints(int32_t NumPoints); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthAwardSignatureAbilityPoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthApplyReward(struct FAresTrackedReward TrackedReward); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthApplyReward // (Final|Native|Private) // @ game+0x3739a60
};

// Class ShooterGame.AresPlayerInput
// Size: 0x478 (Inherited: 0x448)
struct UAresPlayerInput : UPlayerInput {
	char pad_448[0x30]; // 0x448(0x30)
};

// Class ShooterGame.AresPlayerStateBase
// Size: 0x678 (Inherited: 0x4e0)
struct AAresPlayerStateBase : APlayerState {
	char pad_4E0[0x104]; // 0x4e0(0x104)
	enum class EConnectionStatus ConnectionStatus; // 0x5e4(0x01)
	bool bHasEverConnected; // 0x5e5(0x01)
	char pad_5E6[0x2]; // 0x5e6(0x02)
	struct FMulticastInlineDelegate OnPlayersSpectatingUpdated; // 0x5e8(0x10)
	struct FMulticastInlineDelegate ConnectionStatusChangedDelegate; // 0x5f8(0x10)
	char pad_608[0x8]; // 0x608(0x08)
	bool bPendingDisassociate; // 0x610(0x01)
	char pad_611[0x3]; // 0x611(0x03)
	int32_t CompetitiveTier; // 0x614(0x04)
	struct FAresPlatformParticipantInfo PlatformParticipantInfo; // 0x618(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x628(0x08)
	struct UBaseTeamComponent* TeamComponent; // 0x630(0x08)
	struct AAresPlayerStateBase* SpectatedPlayer; // 0x638(0x08)
	struct AAresPlayerAutomation* PlayerAutomation; // 0x640(0x08)
	bool bHasEverBegunConnecting; // 0x648(0x01)
	char pad_649[0xf]; // 0x649(0x0f)
	struct FString AuthMegapacketGameName; // 0x658(0x10)
	struct FString AuthMegapacketTagLine; // 0x668(0x10)

	void UpdateSpectatedPlayer(struct AAresPlayerStateBase* NewSpectateTarget); // Function ShooterGame.AresPlayerStateBase.UpdateSpectatedPlayer // (Final|Native|Public) // @ game+0x373c0a0
	bool ShouldPopulateParticipantMissionResults(); // Function ShooterGame.AresPlayerStateBase.ShouldPopulateParticipantMissionResults // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x373c060
	bool ShouldPopulateParticipantMatchResults(); // Function ShooterGame.AresPlayerStateBase.ShouldPopulateParticipantMatchResults // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x373c020
	void SetAutomationClass(struct AAresPlayerAutomation*& AutomationClass); // Function ShooterGame.AresPlayerStateBase.SetAutomationClass // (Final|Native|Public|HasOutParms) // @ game+0x373bf90
	void ServerSetAutomation(struct UObject* PlayerAutomationClass); // Function ShooterGame.AresPlayerStateBase.ServerSetAutomation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x373bbe0
	void ServerReceiveTimeSyncHeartbeatUnreliable(struct FComponentDataStream ComponentDataStream); // Function ShooterGame.AresPlayerStateBase.ServerReceiveTimeSyncHeartbeatUnreliable // (Net|Native|Event|Public|NetServer) // @ game+0x373bb40
	void ServerReceiveTimeSyncHeartbeatReliable(struct FComponentDataStream ComponentDataStream); // Function ShooterGame.AresPlayerStateBase.ServerReceiveTimeSyncHeartbeatReliable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x373baa0
	void ServerClearAutomation(); // Function ShooterGame.AresPlayerStateBase.ServerClearAutomation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36c53f0
	void PopulateParticipantMissionResults(struct FParticipantMissionResults& OutParticpantMatchResults); // Function ShooterGame.AresPlayerStateBase.PopulateParticipantMissionResults // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x373b7e0
	void PopulateParticipantMatchResults(struct FParticipantMatchResults& OutParticpantMatchResults); // Function ShooterGame.AresPlayerStateBase.PopulateParticipantMatchResults // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x373b620
	void OnTeamChanged(); // Function ShooterGame.AresPlayerStateBase.OnTeamChanged // (Native|Public) // @ game+0x373b5f0
	void OnRep_UpdateSpectators(struct AAresPlayerStateBase* PrevSpectateTarget); // Function ShooterGame.AresPlayerStateBase.OnRep_UpdateSpectators // (Final|Native|Public) // @ game+0x373b560
	void OnRep_PendingDisassociate(bool NewPendingDisassociate); // Function ShooterGame.AresPlayerStateBase.OnRep_PendingDisassociate // (Final|Native|Public) // @ game+0x373b4b0
	bool OnObfuscatedPlayerInformationChanged(); // Function ShooterGame.AresPlayerStateBase.OnObfuscatedPlayerInformationChanged // (Final|Native|Public) // @ game+0x373b460
	bool IsLoadingForDropIn(); // Function ShooterGame.AresPlayerStateBase.IsLoadingForDropIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	struct UBaseTeamComponent* GetTeamComponent(); // Function ShooterGame.AresPlayerStateBase.GetTeamComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b3a0
	struct AAresPlayerStateBase* GetSpectatedPlayer(); // Function ShooterGame.AresPlayerStateBase.GetSpectatedPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b340
	struct FText GetShortPlayerNameText(); // Function ShooterGame.AresPlayerStateBase.GetShortPlayerNameText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b260
	struct FString GetShortPlayerName(); // Function ShooterGame.AresPlayerStateBase.GetShortPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b160
	struct FString GetPlayerSubject(); // Function ShooterGame.AresPlayerStateBase.GetPlayerSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373b020
	int32_t GetPlayerCompetitiveTier(); // Function ShooterGame.AresPlayerStateBase.GetPlayerCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373af90
	struct AAresPlayerAutomation* GetPlayerAutomation(); // Function ShooterGame.AresPlayerStateBase.GetPlayerAutomation // (Final|Native|Public|Const) // @ game+0x373af60
	struct FAresPlatformParticipantInfo GetPlatformParticipantInfo(); // Function ShooterGame.AresPlayerStateBase.GetPlatformParticipantInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373af20
	float GetNetworkPing(); // Function ShooterGame.AresPlayerStateBase.GetNetworkPing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373aef0
	enum class EConnectionStatus GetConnectionStatus(); // Function ShooterGame.AresPlayerStateBase.GetConnectionStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ad10
	struct AAresPlayerAutomation* GetAutomation(); // Function ShooterGame.AresPlayerStateBase.GetAutomation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288a7f0
	struct AAresPlayerController* GetAresPlayerController(); // Function ShooterGame.AresPlayerStateBase.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x373ac80
	void ClientReceiveTimeSyncHeartbeatUnreliable(struct FComponentDataStream ComponentDataStream); // Function ShooterGame.AresPlayerStateBase.ClientReceiveTimeSyncHeartbeatUnreliable // (Net|Native|Event|Public|NetClient) // @ game+0x373aaf0
	void ClientReceiveTimeSyncHeartbeatReliable(struct FComponentDataStream ComponentDataStream); // Function ShooterGame.AresPlayerStateBase.ClientReceiveTimeSyncHeartbeatReliable // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x373aa50
	void AuthUpdateSingleObfuscatedPlayerInformation(struct FObfuscatedPlayerInformation UpdatedInformation); // Function ShooterGame.AresPlayerStateBase.AuthUpdateSingleObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x373a760
	void AuthUpdateAllObfuscatedPlayerInformation(struct TArray<struct FObfuscatedPlayerInformation>& AllPlayerInformation); // Function ShooterGame.AresPlayerStateBase.AuthUpdateAllObfuscatedPlayerInformation // (Final|Native|Public|HasOutParms) // @ game+0x373a690
	bool AuthSetCompetitiveTier(int32_t NewCompetitiveTier); // Function ShooterGame.AresPlayerStateBase.AuthSetCompetitiveTier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x373a5f0
	void AuthOnRoundEnd(); // Function ShooterGame.AresPlayerStateBase.AuthOnRoundEnd // (Native|Public) // @ game+0x373a5a0
	void AuthOnRoundBegin(); // Function ShooterGame.AresPlayerStateBase.AuthOnRoundBegin // (Native|Public) // @ game+0x373a570
	void AuthClearAutomation(); // Function ShooterGame.AresPlayerStateBase.AuthClearAutomation // (Final|Native|Public) // @ game+0x2024060
	void AuthCleanAndFetchUpdatedObfuscatedPlayerInformation(); // Function ShooterGame.AresPlayerStateBase.AuthCleanAndFetchUpdatedObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.DamageResponse
// Size: 0xc0 (Inherited: 0x30)
struct UDamageResponse : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct AActor* DamagedActor; // 0x38(0x08)
	struct FNetworkedDamageResponseData DamageResponseData; // 0x40(0x80)

	enum class EAresRegionalDamage GetRegionalDamage(); // Function ShooterGame.DamageResponse.GetRegionalDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890de0
	struct APawn* GetEventInstigatorPawn(); // Function ShooterGame.DamageResponse.GetEventInstigatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890d20
	struct AController* GetEventInstigator(); // Function ShooterGame.DamageResponse.GetEventInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890cf0
	void GetDestroyedComponentsCopy(struct TArray<struct UDamageSectionComponent*>& Components); // Function ShooterGame.DamageResponse.GetDestroyedComponentsCopy // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890c40
	struct UDamageType* GetDamageTypeClass(); // Function ShooterGame.DamageResponse.GetDamageTypeClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890af0
	float GetDamageTaken(); // Function ShooterGame.DamageResponse.GetDamageTaken // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890ac0
	struct AShooterPlayerState* GetDamagerPlayerState(); // Function ShooterGame.DamageResponse.GetDamagerPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890c10
	struct FVector GetDamageOrigin(); // Function ShooterGame.DamageResponse.GetDamageOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890a80
	float GetDamageDealt(); // Function ShooterGame.DamageResponse.GetDamageDealt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890a50
	void GetDamagedComponentsCopy(struct TArray<struct UDamageSectionComponent*>& Components); // Function ShooterGame.DamageResponse.GetDamagedComponentsCopy // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890b60
	struct AActor* GetDamagedActor(); // Function ShooterGame.DamageResponse.GetDamagedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890b30
	struct AActor* GetDamageCauser(); // Function ShooterGame.DamageResponse.GetDamageCauser // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890a20
	bool DamageWasBlocked(); // Function ShooterGame.DamageResponse.DamageWasBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38908d0
	bool DamageKilledTarget(); // Function ShooterGame.DamageResponse.DamageKilledTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38908a0
};

// Class ShooterGame.AresPointDamageResponse
// Size: 0x1a8 (Inherited: 0xc0)
struct UAresPointDamageResponse : UDamageResponse {
	char pad_C0[0x18]; // 0xc0(0x18)
	struct FNetworkedPointDamageResponseData PointDamageResponseData; // 0xd8(0xd0)

	bool GetImpactLocationInfo(struct UPrimitiveComponent*& Component, struct FName& Bone, struct FVector& BoneRelativeLocation); // Function ShooterGame.AresPointDamageResponse.GetImpactLocationInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3743740
};

// Class ShooterGame.AresPrespawnedEquippableCacheComponent
// Size: 0x148 (Inherited: 0xe8)
struct UAresPrespawnedEquippableCacheComponent : UActorComponent {
	struct TMap<struct AAresEquippable*, struct AAresEquippable*> InstanceCache; // 0xe8(0x50)
	struct TArray<struct AAresEquippable*> PrespawnedArrayForReplicationOnly; // 0x138(0x10)

	void WarmupCache(bool ForceNewInstances); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.WarmupCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void ResetCache(); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.ResetCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void PrepareInstance(struct AAresEquippable* EquippableClass, bool ForceReplicationOnSpawn); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.PrepareInstance // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3743cd0
	struct AAresEquippable* GetInstanceFromCache(struct UAresPurchasableEquippable* EquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.GetInstanceFromCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f4fa0
	struct TMap<struct FString, struct FString> DebugGetInstanceCache(); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.DebugGetInstanceCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37435d0
	void AuthReturnInstanceToCache(struct AAresEquippable* EquippableInstance); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.AuthReturnInstanceToCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthRemoveClassFromCacheAsPurchasable(struct UAresPurchasableEquippable* PurchasableEquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.AuthRemoveClassFromCacheAsPurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthRemoveClassFromCache(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.AuthRemoveClassFromCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthOnEquippableDataAssetGunSkinModified(struct UEquippableDataAsset* EquippableDataAsset); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.AuthOnEquippableDataAssetGunSkinModified // (Final|Native|Private) // @ game+0x3634e00
	void AddClassToCache(struct UAresPurchasableEquippable* PurchasableEquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.AddClassToCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
};

// Class ShooterGame.AresPurchasable
// Size: 0x98 (Inherited: 0x30)
struct UAresPurchasable : UObject {
	struct UTexture* NewShopImage; // 0x30(0x08)
	enum class EAresCostType CostType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t Cost; // 0x3c(0x04)
	enum class EAresPurchasableType PurchasableType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct UAresPurchasable*> PrerequisitePurchasables; // 0x48(0x10)
	struct FName ShopCategory; // 0x58(0x0c)
	struct FName ShopSubcategory; // 0x64(0x0c)
	struct FText ShopCategoryText; // 0x70(0x18)
	struct FShopGridPosition ShopGridPosition; // 0x88(0x08)
	bool bCostCountsTowardsLoadout; // 0x90(0x01)
	bool bCanBeTrashed; // 0x91(0x01)
	char pad_92[0x6]; // 0x92(0x06)

	struct FName GetShopSubcategory(); // Function ShooterGame.AresPurchasable.GetShopSubcategory // (Final|Native|Public|Const) // @ game+0x3743b40
	struct FName GetShopCategory(); // Function ShooterGame.AresPurchasable.GetShopCategory // (Final|Native|Public|Const) // @ game+0x3743b00
	int32_t GetSellPrice(struct AOwnerExclusivePlayerInfo* PlayerInfo); // Function ShooterGame.AresPurchasable.GetSellPrice // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3743a50
	struct FText GetPurchasableNameText(struct UObject* WorldContextObject); // Function ShooterGame.AresPurchasable.GetPurchasableNameText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3743940
	int32_t GetLoadoutValue(struct AShooterCharacter* OwningCharacter); // Function ShooterGame.AresPurchasable.GetLoadoutValue // (Native|Public|Const) // @ game+0x3743890
	int32_t GetBaseCost(struct AOwnerExclusivePlayerInfo* PlayerInfo); // Function ShooterGame.AresPurchasable.GetBaseCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3743670
	bool CanSell(struct AOwnerExclusivePlayerInfo* PlayerInfo); // Function ShooterGame.AresPurchasable.CanSell // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3743520
};

// Class ShooterGame.AresPurchasableEquippable
// Size: 0xa8 (Inherited: 0x98)
struct UAresPurchasableEquippable : UAresPurchasable {
	char pad_98[0x1]; // 0x98(0x01)
	bool bCanAddToStorageSlot; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct AAresItem* EquippableClass; // 0xa0(0x08)

	struct AAresItem* GetEquippableClass(); // Function ShooterGame.AresPurchasableEquippable.GetEquippableClass // (Final|Native|Public|Const) // @ game+0x3743720
};

// Class ShooterGame.AresPurchasableAdvancement
// Size: 0xb0 (Inherited: 0xa8)
struct UAresPurchasableAdvancement : UAresPurchasableEquippable {
	int32_t ExperiencePurchased; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class ShooterGame.AresPurchasableCharge
// Size: 0xb0 (Inherited: 0xa8)
struct UAresPurchasableCharge : UAresPurchasableEquippable {
	int32_t ChargesAdded; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class ShooterGame.AresPurchasableEnergy
// Size: 0xa8 (Inherited: 0xa8)
struct UAresPurchasableEnergy : UAresPurchasableEquippable {
};

// Class ShooterGame.AresPurchasablePackage
// Size: 0x3f0 (Inherited: 0x3d8)
struct AAresPurchasablePackage : AInfo {
	struct AAresEquippable* AssociatedEquipable; // 0x3d8(0x08)
	struct UMaterialInterface* Material; // 0x3e0(0x08)
	struct USkeletalMesh* SkeletalMesh; // 0x3e8(0x08)
};

// Class ShooterGame.AresPurchasableRank
// Size: 0xb8 (Inherited: 0xa8)
struct UAresPurchasableRank : UAresPurchasableEquippable {
	struct TArray<int32_t> RankCost; // 0xa8(0x10)
};

// Class ShooterGame.AresPurchasableUlt
// Size: 0xa8 (Inherited: 0xa8)
struct UAresPurchasableUlt : UAresPurchasableEquippable {
};

// Class ShooterGame.AresRadialDamageResponse
// Size: 0x1c0 (Inherited: 0xc0)
struct UAresRadialDamageResponse : UDamageResponse {
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FNetworkedRadialDamageResponseData RadialDamageResponseData; // 0xc8(0xf8)
};

// Class ShooterGame.AresRepairModeGameInstance
// Size: 0x1e0 (Inherited: 0x1b0)
struct UAresRepairModeGameInstance : UGameInstance {
	struct UAresClientEvents* AresClientEvents; // 0x1b0(0x08)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x1b8(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x1c0(0x08)
	struct URiotProductManager* RiotProductManager; // 0x1c8(0x08)
	struct UApplicationRepairManager* ApplicationRepairManager; // 0x1d0(0x08)
	struct UPlatformInitializerV2* PlatformInitializer; // 0x1d8(0x08)

	void HandleRNetHealthChange(); // Function ShooterGame.AresRepairModeGameInstance.HandleRNetHealthChange // (Final|Native|Private) // @ game+0x3743c90
	void HandleRiotSDKConnectionSuccess(); // Function ShooterGame.AresRepairModeGameInstance.HandleRiotSDKConnectionSuccess // (Final|Native|Private) // @ game+0x3743cb0
	void HandlePlatformInitStatusChanged(enum class EAresPlatformInitStatus InitStatus); // Function ShooterGame.AresRepairModeGameInstance.HandlePlatformInitStatusChanged // (Final|Native|Private) // @ game+0x3743c10
	void HandlePlatformFault(enum class EPlatformFaultReason& Reason); // Function ShooterGame.AresRepairModeGameInstance.HandlePlatformFault // (Final|Native|Private|HasOutParms) // @ game+0x3743b80
};

// Class ShooterGame.AresRespawnManager
// Size: 0x3d8 (Inherited: 0x3d8)
struct AAresRespawnManager : AInfo {

	struct APawn* AuthRespawnPlayer(struct AShooterPlayerState* State, struct UPlayerSpawner* PlayerSpawner); // Function ShooterGame.AresRespawnManager.AuthRespawnPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x374aaf0
};

// Class ShooterGame.AresRGIFriendsClient
// Size: 0x98 (Inherited: 0x80)
struct UAresRGIFriendsClient : UInitSystem {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x80(0x08)
	struct UGameInstance* GameInstance; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
};

// Class ShooterGame.AresRichTextBlockInputDecorator
// Size: 0x1e0 (Inherited: 0x30)
struct UAresRichTextBlockInputDecorator : URichTextBlockDecorator {
	struct UDataTable* InputTable; // 0x30(0x08)
	struct FSlateBrush ProgressMaterialBrush; // 0x38(0x90)
	struct FName ProgressMaterialParam; // 0xc8(0x0c)
	struct FVector2D IconSize; // 0xd4(0x08)
	int32_t ProgressPadding; // 0xdc(0x04)
	struct UAresCommonButton* ButtonParent; // 0xe0(0x08)
	struct UMaterialInstanceDynamic* ProgressDynamicMaterial; // 0xe8(0x08)
	struct UCommonInputSubsystem* InputSubsystem; // 0xf0(0x08)
	char pad_F8[0xe8]; // 0xf8(0xe8)

	void UpdateProgressMaterial(float HeldPercent); // Function ShooterGame.AresRichTextBlockInputDecorator.UpdateProgressMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x374e760
	void HandleInputMethodChanged(enum class ECommonInputType CurrentInputType); // Function ShooterGame.AresRichTextBlockInputDecorator.HandleInputMethodChanged // (Final|Native|Private) // @ game+0x374c2d0
	struct FName GetProgressMaterialParameter(); // Function ShooterGame.AresRichTextBlockInputDecorator.GetProgressMaterialParameter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c030
	struct UMaterialInstanceDynamic* GetProgressMaterialInstance(); // Function ShooterGame.AresRichTextBlockInputDecorator.GetProgressMaterialInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c010
};

// Class ShooterGame.AresScrollBox
// Size: 0x930 (Inherited: 0x928)
struct UAresScrollBox : UScrollBox {
	bool InvertScrolling; // 0x928(0x01)
	char pad_929[0x7]; // 0x929(0x07)
};

// Class ShooterGame.AresServerGameInstance
// Size: 0x50 (Inherited: 0x30)
struct UAresServerGameInstance : UAresBaseGameInstance {
	struct UReflectedPlayerSettingsManager* ReflectedPlayerSettingsManagerClass; // 0x30(0x08)
	struct UReflectedPlayerSettingsManager* ReflectedPlayerSettingsManager; // 0x38(0x08)
	struct UTelemetryManager* TelemetryManagerInstance; // 0x40(0x08)
	struct UTelemetrySampler* TelemetrySamplerInstance; // 0x48(0x08)

	struct UReflectedPlayerSettingsManager* GetReflectedPlayerSettingsManager(); // Function ShooterGame.AresServerGameInstance.GetReflectedPlayerSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288a7f0
	struct UAresServerGameInstance* GetAresServerGameInstance(struct UObject* WorldContextObject); // Function ShooterGame.AresServerGameInstance.GetAresServerGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x374b1f0
};

// Class ShooterGame.AresSettingSliderPanel
// Size: 0x10d8 (Inherited: 0x1070)
struct UAresSettingSliderPanel : UAresSettingClickablePanel {
	struct UMaterialInterface* BaseMaterial; // 0x1070(0x08)
	struct UCurveFloat* StepMultiplierCurve; // 0x1078(0x08)
	struct FName MaterialProgressParameterName; // 0x1080(0x0c)
	char pad_108C[0x4]; // 0x108c(0x04)
	struct UAresButtonImageComponent* SliderImageComponent; // 0x1090(0x08)
	struct UAresButtonImageComponent* MuteIcon; // 0x1098(0x08)
	struct UTexture2D* UnmutedIconTexture; // 0x10a0(0x08)
	struct UTexture2D* MutedIconTexture; // 0x10a8(0x08)
	struct UAresButtonTextComponent* ValueText; // 0x10b0(0x08)
	bool bDisplaysPercent; // 0x10b8(0x01)
	bool bIsAudioSlider; // 0x10b9(0x01)
	char pad_10BA[0x6]; // 0x10ba(0x06)
	struct UAresSliderSettingComponent* SliderData; // 0x10c0(0x08)
	struct UMaterialInstanceDynamic* SliderMaterial; // 0x10c8(0x08)
	char pad_10D0[0x8]; // 0x10d0(0x08)

	void UpdateSliderValueDisplayInt(int32_t NewValue); // Function ShooterGame.AresSettingSliderPanel.UpdateSliderValueDisplayInt // (Final|Native|Private) // @ game+0x374e970
	void UpdateSliderValueDisplayFloat(float NewValue); // Function ShooterGame.AresSettingSliderPanel.UpdateSliderValueDisplayFloat // (Final|Native|Private) // @ game+0x374e8f0
	void UpdateSliderProgressInt(int32_t NewValue); // Function ShooterGame.AresSettingSliderPanel.UpdateSliderProgressInt // (Final|Native|Private) // @ game+0x374e860
	void UpdateSliderProgressFloat(float NewValue); // Function ShooterGame.AresSettingSliderPanel.UpdateSliderProgressFloat // (Final|Native|Private) // @ game+0x374e7e0
	void UpdateMuteStatusInt(int32_t NewValue); // Function ShooterGame.AresSettingSliderPanel.UpdateMuteStatusInt // (Final|Native|Private) // @ game+0x374e6d0
	void UpdateMuteStatusFloat(float NewValue); // Function ShooterGame.AresSettingSliderPanel.UpdateMuteStatusFloat // (Final|Native|Private) // @ game+0x374e650
	struct USettingsIntViewModel* GetViewModelAsIntVM(); // Function ShooterGame.AresSettingSliderPanel.GetViewModelAsIntVM // (Final|Native|Private|Const) // @ game+0x374c2a0
	struct USettingsFloatViewModel* GetViewModelAsFloatVM(); // Function ShooterGame.AresSettingSliderPanel.GetViewModelAsFloatVM // (Final|Native|Private|Const) // @ game+0x374c270
	void BindToIntViewModel(struct USettingsIntViewModel* VM, bool bBind); // Function ShooterGame.AresSettingSliderPanel.BindToIntViewModel // (Final|Native|Private) // @ game+0x374ad70
	void BindToFloatViewModel(struct USettingsFloatViewModel* VM, bool bBind); // Function ShooterGame.AresSettingSliderPanel.BindToFloatViewModel // (Final|Native|Private) // @ game+0x374aca0
};

// Class ShooterGame.AresSettingsManager
// Size: 0x420 (Inherited: 0x30)
struct UAresSettingsManager : UObject {
	struct FMulticastInlineDelegate OnSettingsInitialized; // 0x30(0x10)
	struct FDelegate OnAnyFloatSettingChangedEvent; // 0x40(0x14)
	struct FDelegate OnAnyIntSettingChangedEvent; // 0x54(0x14)
	struct FDelegate OnAnyBoolSettingChangedEvent; // 0x68(0x14)
	struct FDelegate OnAnyStringSettingChangedEvent; // 0x7c(0x14)
	struct TMap<struct FName, struct FAresFloatSetting> FloatSettings; // 0x90(0x50)
	struct TMap<struct FName, struct FAresIntSetting> IntSettings; // 0xe0(0x50)
	struct TMap<struct FName, struct FAresBoolSetting> BoolSettings; // 0x130(0x50)
	struct TMap<struct FName, struct FAresStringSetting> StringSettings; // 0x180(0x50)
	struct TMap<struct FName, struct FAresVoidSetting> VoidSettings; // 0x1d0(0x50)
	struct TMap<struct FName, struct FFloatSettingChangedDelegateList> FloatSettingChangedEvents; // 0x220(0x50)
	struct TMap<struct FName, struct FIntSettingChangedDelegateList> IntSettingChangedEvents; // 0x270(0x50)
	struct TMap<struct FName, struct FBoolSettingChangedDelegateList> BoolSettingChangedEvents; // 0x2c0(0x50)
	struct TMap<struct FName, struct FStringSettingChangedDelegateList> StringSettingChangedEvents; // 0x310(0x50)
	struct TArray<enum class EAresFloatSettingName> ReflectedFloatSettings; // 0x360(0x10)
	struct TArray<enum class EAresIntSettingName> ReflectedIntSettings; // 0x370(0x10)
	struct TArray<enum class EAresBoolSettingName> ReflectedBoolSettings; // 0x380(0x10)
	struct TMap<enum class EAresStringSettingName, struct TScriptInterface<IAresStringListSettingModel>> StringListSettingModels; // 0x390(0x50)
	struct UAresSettingsOverrides* SharedSettingOverrides; // 0x3e0(0x08)
	struct UAresSettingsOverrides* PlatformSettingOverrides; // 0x3e8(0x08)
	char pad_3F0[0x8]; // 0x3f0(0x08)
	struct FMulticastInlineDelegate OnAresCrosshairSettingsChanged; // 0x3f8(0x10)
	struct FCrosshairProfileData CachedCrosshairProfileData; // 0x408(0x18)

	void UpdateCachedCrosshairProfileData(); // Function ShooterGame.AresSettingsManager.UpdateCachedCrosshairProfileData // (Final|Native|Private) // @ game+0x374e630
	void SwitchCrosshairProfile(int32_t NewIndex); // Function ShooterGame.AresSettingsManager.SwitchCrosshairProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x374e5a0
	bool StealCrosshairAndAddCrosshairProfile(struct FString CrosshairProfileString, struct FText& OutMessage); // Function ShooterGame.AresSettingsManager.StealCrosshairAndAddCrosshairProfile // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374e450
	void SetStringSettingFromInputChord(enum class EAresStringSettingName SettingEnum, struct FInputChord Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetStringSettingFromInputChord // (Final|Native|Public|BlueprintCallable) // @ game+0x374e250
	void SetStringSettingFromActionChord(enum class EAresStringSettingName SettingEnum, struct FActionChord Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetStringSettingFromActionChord // (Final|Native|Public|BlueprintCallable) // @ game+0x374e0b0
	void SetStringSetting(enum class EAresStringSettingName SettingEnum, struct FString Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetStringSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x374df30
	void SetIntSetting(enum class EAresIntSettingName SettingEnum, int32_t Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetIntSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x374dce0
	void SetFloatSetting(enum class EAresFloatSettingName SettingEnum, float Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetFloatSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x374dbc0
	void SetCurrentCrosshairSettings(struct FCrosshairSettings NewCrosshairSettings); // Function ShooterGame.AresSettingsManager.SetCurrentCrosshairSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x374da70
	void SetBoolSetting(enum class EAresBoolSettingName SettingEnum, bool Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetBoolSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x374d950
	void SaveRoamingSettings(); // Function ShooterGame.AresSettingsManager.SaveRoamingSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x374d930
	void SaveCrosshairSettingsAndProfileData(struct FCrosshairProfileData& CrosshairProfileData); // Function ShooterGame.AresSettingsManager.SaveCrosshairSettingsAndProfileData // (Final|Native|Private|HasOutParms) // @ game+0x374d850
	void SaveCrosshairProfileData(struct FCrosshairProfileData& CrosshairProfileData); // Function ShooterGame.AresSettingsManager.SaveCrosshairProfileData // (Final|Native|Private|HasOutParms) // @ game+0x374d770
	void ResetStringToDefaultValue(enum class EAresStringSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetStringToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x374d6a0
	void ResetIntToDefaultValue(enum class EAresIntSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetIntToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x374d5d0
	void ResetFloatToDefaultValue(enum class EAresFloatSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetFloatToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x374d500
	void ResetBoolToDefaultValue(enum class EAresBoolSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetBoolToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x374d430
	void RemoveStringSettingChangedEvent(enum class EAresStringSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveStringSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374d330
	void RemoveIntSettingChangedEvent(enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374d230
	void RemoveFloatSettingChangedEvent(enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374d130
	void RemoveCurrentCrosshairProfile(); // Function ShooterGame.AresSettingsManager.RemoveCurrentCrosshairProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x374d110
	void RemoveBoolSettingChangedEvent(enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374d010
	void OnReflectedIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresSettingsManager.OnReflectedIntSettingChanged // (Final|Native|Private) // @ game+0x374ced0
	void OnReflectedFloatSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresSettingsManager.OnReflectedFloatSettingChanged // (Final|Native|Private) // @ game+0x374cdc0
	void OnReflectedBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresSettingsManager.OnReflectedBoolSettingChanged // (Final|Native|Private) // @ game+0x374cca0
	void OnCrosshairStringSettingUpdated(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.AresSettingsManager.OnCrosshairStringSettingUpdated // (Final|Native|Private) // @ game+0x374cac0
	void OnCrosshairFloatSettingUpdated(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresSettingsManager.OnCrosshairFloatSettingUpdated // (Final|Native|Private) // @ game+0x374c9b0
	void OnCrosshairBoolSettingUpdated(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresSettingsManager.OnCrosshairBoolSettingUpdated // (Final|Native|Private) // @ game+0x374c890
	void OnAnyCrosshairSettingsUpdated(); // Function ShooterGame.AresSettingsManager.OnAnyCrosshairSettingsUpdated // (Final|Native|Private) // @ game+0x374c870
	bool IsVoidSettingRelevantForPlatform(enum class EAresVoidSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsVoidSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c7a0
	bool IsStringSettingRelevantForPlatform(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsStringSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c710
	bool IsIntSettingRelevantForPlatform(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsIntSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c680
	bool IsFloatSettingRelevantForPlatform(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsFloatSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c5f0
	bool IsBoolSettingRelevantForPlatform(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsBoolSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c560
	bool IsBoolSettingAllowed(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsBoolSettingAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c4d0
	struct FString GetStringSettingDefaultValue(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetStringSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374c1d0
	struct FString GetStringSetting(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetStringSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374c130
	struct TScriptInterface<IAresStringListSettingModel> GetStringListSettingModel(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetStringListSettingModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374c090
	int32_t GetMaxCrosshairProfiles(); // Function ShooterGame.AresSettingsManager.GetMaxCrosshairProfiles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bfe0
	int32_t GetIntSettingMinValue(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSettingMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bf50
	int32_t GetIntSettingMaxValue(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSettingMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bec0
	int32_t GetIntSettingDefaultValue(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374be30
	int32_t GetIntSetting(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bda0
	struct FInputChord GetInputChordFromStringSetting(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetInputChordFromStringSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bc70
	bool GetFloatSettingShouldUseRealSettingSliderMinMax(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingShouldUseRealSettingSliderMinMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bbe0
	float GetFloatSettingRealSettingSliderStep(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingRealSettingSliderStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bb50
	float GetFloatSettingNormalizedMinValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingNormalizedMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374bac0
	float GetFloatSettingNormalizedMaxValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingNormalizedMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374ba30
	float GetFloatSettingMinValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b9a0
	float GetFloatSettingMaxValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b910
	int32_t GetFloatSettingIncrementCount(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingIncrementCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b880
	bool GetFloatSettingDisplayNormalizedValues(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingDisplayNormalizedValues // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b7f0
	float GetFloatSettingDefaultValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b760
	float GetFloatSetting(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b6d0
	struct FCrosshairSettings GetDefaultCrosshairSettings(); // Function ShooterGame.AresSettingsManager.GetDefaultCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b670
	struct FCrosshairSettings GetCurrentCrosshairSettingsFromLooseSettings(); // Function ShooterGame.AresSettingsManager.GetCurrentCrosshairSettingsFromLooseSettings // (Final|Native|Private|Const) // @ game+0x374b610
	struct FCrosshairSettings GetCurrentCrosshairSettings(); // Function ShooterGame.AresSettingsManager.GetCurrentCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b5b0
	struct FCrosshairProfileData GetCrosshairProfileData(); // Function ShooterGame.AresSettingsManager.GetCrosshairProfileData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374b4b0
	int32_t GetCrosshairColorPoolIndex(struct FColor Color); // Function ShooterGame.AresSettingsManager.GetCrosshairColorPoolIndex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x374b430
	struct FColor GetCrosshairColorFromPoolIndex(int32_t Index); // Function ShooterGame.AresSettingsManager.GetCrosshairColorFromPoolIndex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x374b3a0
	bool GetBoolSettingDefaultValue(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetBoolSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b310
	bool GetBoolSetting(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetBoolSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b280
	enum class EAresAntiAliasing GetAntiAliasing(); // Function ShooterGame.AresSettingsManager.GetAntiAliasing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b1c0
	struct FActionChord GetActionChordFromStringSetting(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetActionChordFromStringSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x374b090
	struct FString GenerateShareableCrosshairProfileString(struct FCrosshairSettings CrosshiarSettings); // Function ShooterGame.AresSettingsManager.GenerateShareableCrosshairProfileString // (Final|Native|Public|BlueprintCallable) // @ game+0x374af00
	void CopyCurrentShareableCrosshairStringToClipboard(); // Function ShooterGame.AresSettingsManager.CopyCurrentShareableCrosshairStringToClipboard // (Final|Native|Public|BlueprintCallable) // @ game+0x374aee0
	void ApplySettingsOverrides(struct UAresSettingsOverrides* InOverrides); // Function ShooterGame.AresSettingsManager.ApplySettingsOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x374aa60
	void ApplyCrosshairSettingsToCrosshairProfileData(struct FCrosshairProfileData& CrosshairProfileData, struct FCrosshairSettings CrosshairSettings, int32_t Index); // Function ShooterGame.AresSettingsManager.ApplyCrosshairSettingsToCrosshairProfileData // (Final|Native|Private|HasOutParms|Const) // @ game+0x374a830
	void AddStringSettingChangedEvent(enum class EAresStringSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddStringSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374a730
	void AddIntSettingChangedEvent(enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374a630
	void AddFloatSettingChangedEvent(enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374a530
	void AddBoolSettingChangedEvent(enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x374a430
	bool AddAndSwitchToNewCrosshairProfileFromString(struct FString CrosshairProfileString, struct FString NewProfileName); // Function ShooterGame.AresSettingsManager.AddAndSwitchToNewCrosshairProfileFromString // (Final|Native|Public|BlueprintCallable) // @ game+0x374a290
	void AddAndSwitchToNewCrosshairProfile(struct FCrosshairSettings NewCrosshairSettings); // Function ShooterGame.AresSettingsManager.AddAndSwitchToNewCrosshairProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x374a140
};

// Class ShooterGame.AresSettingTypes
// Size: 0x30 (Inherited: 0x30)
struct UAresSettingTypes : UObject {
};

// Class ShooterGame.AresSettingsOverrides
// Size: 0x170 (Inherited: 0x30)
struct UAresSettingsOverrides : UObject {
	struct TMap<enum class EAresFloatSettingName, struct FAresFloatSetting> FloatSettingsOverrides; // 0x30(0x50)
	struct TMap<enum class EAresIntSettingName, struct FAresIntSetting> IntSettingsOverrides; // 0x80(0x50)
	struct TMap<enum class EAresBoolSettingName, bool> BoolSettingsOverrides; // 0xd0(0x50)
	struct TMap<enum class EAresStringSettingName, struct FString> StringSettingsOverrides; // 0x120(0x50)
};

// Class ShooterGame.AresSettingsOverridesContainer
// Size: 0x48 (Inherited: 0x38)
struct UAresSettingsOverridesContainer : UDataAsset {
	struct TArray<struct UAresSettingsOverrides*> SettingsOverrides; // 0x38(0x10)
};

// Class ShooterGame.AresSettingsPresetsDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UAresSettingsPresetsDataAsset : UDataAsset {
	struct TArray<struct FAresSettingsPresetsOption> PresetOptions; // 0x38(0x10)
};

// Class ShooterGame.AresSettingComponent
// Size: 0x30 (Inherited: 0x30)
struct UAresSettingComponent : UObject {
};

// Class ShooterGame.AresTextOptionsSettingComponent
// Size: 0x40 (Inherited: 0x30)
struct UAresTextOptionsSettingComponent : UAresSettingComponent {
	struct TArray<struct FText> TextOptions; // 0x30(0x10)
};

// Class ShooterGame.AresSliderSettingComponent
// Size: 0x40 (Inherited: 0x30)
struct UAresSliderSettingComponent : UAresSettingComponent {
	float SliderMin; // 0x30(0x04)
	float SliderMax; // 0x34(0x04)
	float SliderStep; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.AresSettingUIData
// Size: 0xf0 (Inherited: 0x90)
struct UAresSettingUIData : UBaseContentUIData {
	struct TArray<struct UAresSettingComponent*> SettingComponents; // 0x90(0x10)
	struct USettingsOptionViewModel* ViewModelTemplate; // 0xa0(0x08)
	struct FText SettingDescription; // 0xa8(0x18)
	struct FGameplayTagContainer ValidPlatforms; // 0xc0(0x20)
	struct UAresSettingUIData* DependentSettingClass; // 0xe0(0x08)
	struct UAresSettingStateProvider* StateProvider; // 0xe8(0x08)

	struct UAresSettingUIData* GetSettingUIData(struct UAresSettingUIData* ForSetting); // Function ShooterGame.AresSettingUIData.GetSettingUIData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x376a1f0
	struct UAresSettingComponent* GetSettingsComponentOfType(struct UAresSettingComponent* ComponentType); // Function ShooterGame.AresSettingUIData.GetSettingsComponentOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x376a280
	int32_t GetIndentLevel(); // Function ShooterGame.AresSettingUIData.GetIndentLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x376a1c0
};

// Class ShooterGame.AresShellScreen
// Size: 0x480 (Inherited: 0x428)
struct UAresShellScreen : UAresScreenBase {
	struct TMap<struct FName, struct UCommonActivatableWidgetContainerBase*> MenuStackMap; // 0x428(0x50)
	struct UShellScreenViewModel* ShellViewModelClass; // 0x478(0x08)

	void RemoveScreenFromMenuStack(struct FName InStack, struct TArray<struct FName>& InUrl); // Function ShooterGame.AresShellScreen.RemoveScreenFromMenuStack // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3777800
	void PopulateMenuStackMap(); // Function ShooterGame.AresShellScreen.PopulateMenuStackMap // (Native|Event|Protected|BlueprintEvent) // @ game+0x37777d0
	void AddScreenToMenuStack(struct UAresScreenBase* InScreenClass, struct FName InStack, struct TArray<struct FName>& InUrl); // Function ShooterGame.AresShellScreen.AddScreenToMenuStack // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3777680
};

// Class ShooterGame.AresSkinCatalog
// Size: 0x468 (Inherited: 0x3d8)
struct AAresSkinCatalog : AInfo {
	struct TSoftClassPtr<UObject> GunSkinComponentBase; // 0x3d8(0x30)
	struct TSoftClassPtr<UObject> GunSkinChromaComponentBase; // 0x408(0x30)
	struct TSoftClassPtr<UObject> MeleeSkinComponentBase; // 0x438(0x30)
};

// Class ShooterGame.AresSlashCommands
// Size: 0x30 (Inherited: 0x30)
struct UAresSlashCommands : UObject {
};

// Class ShooterGame.AresSlateGlobals
// Size: 0x300 (Inherited: 0x30)
struct UAresSlateGlobals : UObject {
	struct FSlateBrush RedBrush; // 0x30(0x90)
	struct FSlateBrush GreenBrush; // 0xc0(0x90)
	struct FSlateBrush BlueBrush; // 0x150(0x90)
	struct FSlateBrush BlackBrush; // 0x1e0(0x90)
	struct FSlateBrush WhiteBrush; // 0x270(0x90)
};

// Class ShooterGame.AresSliderWidget
// Size: 0x1088 (Inherited: 0x1030)
struct UAresSliderWidget : UAresClickablePanel {
	struct UMaterialInterface* BaseMaterial; // 0x1030(0x08)
	struct UCurveFloat* StepMultiplierCurve; // 0x1038(0x08)
	struct FName MaterialProgressParameterName; // 0x1040(0x0c)
	char pad_104C[0x4]; // 0x104c(0x04)
	struct UAresButtonImageComponent* SliderImageComponent; // 0x1050(0x08)
	float MinValue; // 0x1058(0x04)
	float MaxValue; // 0x105c(0x04)
	float DefaultValue; // 0x1060(0x04)
	float Step; // 0x1064(0x04)
	float CurrentValue; // 0x1068(0x04)
	char pad_106C[0x4]; // 0x106c(0x04)
	struct UMaterialInstanceDynamic* SliderMaterial; // 0x1070(0x08)
	char pad_1078[0x10]; // 0x1078(0x10)

	void SetValue(float NewValue); // Function ShooterGame.AresSliderWidget.SetValue // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x377fe30
};

// Class ShooterGame.AresSocialExperienceModel
// Size: 0xe0 (Inherited: 0x80)
struct UAresSocialExperienceModel : UInitSystem {
	struct FMulticastInlineDelegate OnSocialExperienceOpened; // 0x80(0x10)
	struct FMulticastInlineDelegate OnSocialExperienceClosed; // 0x90(0x10)
	struct UGameFlowStateManager* GameFlowStateManager; // 0xa0(0x08)
	char pad_A8[0x38]; // 0xa8(0x38)

	void OpenSocialExperience(enum class EAresSocialTransitionType TransitionType); // Function ShooterGame.AresSocialExperienceModel.OpenSocialExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x377fa10
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.AresSocialExperienceModel.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x377f670
	bool GetSocialExperienceIsOpen(); // Function ShooterGame.AresSocialExperienceModel.GetSocialExperienceIsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377f1e0
	void CloseSocialExperience(enum class EAresSocialTransitionType TransitionType); // Function ShooterGame.AresSocialExperienceModel.CloseSocialExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x377ebd0
};

// Class ShooterGame.AresSocialExperienceViewModel
// Size: 0x78 (Inherited: 0x48)
struct UAresSocialExperienceViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnSocialExperienceOpened; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSocialExperienceClosed; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)
	struct UAresSocialExperienceModel* SocialExperienceModel; // 0x70(0x08)

	void OpenSocialExperience(enum class EAresSocialTransitionType TransitionType); // Function ShooterGame.AresSocialExperienceViewModel.OpenSocialExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x377fa90
	void HandleSocialExperienceOpened(enum class EAresSocialTransitionType& TransitionType); // Function ShooterGame.AresSocialExperienceViewModel.HandleSocialExperienceOpened // (Final|Native|Private|HasOutParms) // @ game+0x377f8f0
	void HandleSocialExperienceClosed(enum class EAresSocialTransitionType& TransitionType); // Function ShooterGame.AresSocialExperienceViewModel.HandleSocialExperienceClosed // (Final|Native|Private|HasOutParms) // @ game+0x377f860
	bool GetSocialExperienceIsOpen(); // Function ShooterGame.AresSocialExperienceViewModel.GetSocialExperienceIsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377f200
	void CloseSocialExperience(enum class EAresSocialTransitionType TransitionType); // Function ShooterGame.AresSocialExperienceViewModel.CloseSocialExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x377ec50
};

// Class ShooterGame.AresSocialFolderViewModel
// Size: 0xd8 (Inherited: 0x48)
struct UAresSocialFolderViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnVisibleElementCountChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnExpansionStateChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnVisibilityStateChanged; // 0x68(0x10)
	struct UAresSocialListViewModel* ListViewModel; // 0x78(0x08)
	char pad_80[0x58]; // 0x80(0x58)

	void SetListViewModel(struct UAresSocialListViewModel* InListViewModel); // Function ShooterGame.AresSocialFolderViewModel.SetListViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x377fc60
	void SetExpansionState(enum class EAresSocialFolderExpansionState InExpansionState); // Function ShooterGame.AresSocialFolderViewModel.SetExpansionState // (Final|Native|Public|BlueprintCallable) // @ game+0x377fbe0
	void HandleListVisibleElementCountChanged(struct UAresSocialListViewModel* ViewModel, int32_t& VisibleElementCount); // Function ShooterGame.AresSocialFolderViewModel.HandleListVisibleElementCountChanged // (Final|Native|Private|HasOutParms) // @ game+0x377f6f0
	int32_t GetVisibleElementCount(); // Function ShooterGame.AresSocialFolderViewModel.GetVisibleElementCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377f2e0
	enum class EAresSocialFolderVisibilityState GetVisibilityState(); // Function ShooterGame.AresSocialFolderViewModel.GetVisibilityState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x263c7a0
	enum class EAresSocialFolderExpansionState GetExpansionState(); // Function ShooterGame.AresSocialFolderViewModel.GetExpansionState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377ecd0
};

// Class ShooterGame.AresSocialPageSetDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UAresSocialPageSetDataAsset : UPrimaryDataAsset {
	struct TArray<struct FAresSocialPageDefinition> PageDefinitions; // 0x38(0x10)
};

// Class ShooterGame.AresSocialPartyListViewModel
// Size: 0xf0 (Inherited: 0x78)
struct UAresSocialPartyListViewModel : UAresSocialListViewModel {
	struct FMulticastInlineDelegate OnPartyAdded; // 0x78(0x10)
	struct FMulticastInlineDelegate OnPartyRemoved; // 0x88(0x10)
	struct FMulticastInlineDelegate OnPartyListSorted; // 0x98(0x10)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0xa8(0x08)
	struct URGIFriendsSubsystem* FriendsSubsystem; // 0xb0(0x08)
	struct UPartyListingManager* PartyListingManager; // 0xb8(0x08)
	struct UPartyManager* PartyManager; // 0xc0(0x08)
	enum class ESocialPartyCategory ListSocialPartyCategory; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct TArray<struct FString> CachedPartyIDs; // 0xd0(0x10)
	char pad_E0[0x10]; // 0xe0(0x10)

	void Setup(enum class ESocialPartyCategory ListSocialPartyCategory); // Function ShooterGame.AresSocialPartyListViewModel.Setup // (Final|Native|Public|BlueprintCallable) // @ game+0x377fec0
	void RefreshPartyList(); // Function ShooterGame.AresSocialPartyListViewModel.RefreshPartyList // (Final|Native|Private) // @ game+0x377fbc0
	void RefreshLocalParty(); // Function ShooterGame.AresSocialPartyListViewModel.RefreshLocalParty // (Final|Native|Private) // @ game+0x377fba0
	void HandleFriendsListUpdated(struct FRGIFriendsPlayers& FriendsList); // Function ShooterGame.AresSocialPartyListViewModel.HandleFriendsListUpdated // (Final|Native|Private|HasOutParms) // @ game+0x377f430
	struct TArray<struct FString> GetPartiesList(); // Function ShooterGame.AresSocialPartyListViewModel.GetPartiesList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377edb0
};

// Class ShooterGame.AresSocialPlayerFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresSocialPlayerFunctionLibrary : UBlueprintFunctionLibrary {

	bool PlayerIsOnlineInAres(struct UPlatformPlayer* Player); // Function ShooterGame.AresSocialPlayerFunctionLibrary.PlayerIsOnlineInAres // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x377fb10
	struct FAresSocialPresenceState GetSocialPresenceState(struct UObject* WorldContextObject, struct UPlatformPlayer* Player); // Function ShooterGame.AresSocialPlayerFunctionLibrary.GetSocialPresenceState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x377f220
};

// Class ShooterGame.AresSocialPlayerItemViewModel
// Size: 0x60 (Inherited: 0x48)
struct UAresSocialPlayerItemViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnPartyIdChanged; // 0x48(0x10)
	struct UPlatformPlayer* ObservedPlayer; // 0x58(0x08)

	void SetObservedPlayer(struct FString PlayerSubject); // Function ShooterGame.AresSocialPlayerItemViewModel.SetObservedPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x377fcf0
	void OnPlayerPartyIdChanged(struct UPlatformPlayer* PlatformPlayer); // Function ShooterGame.AresSocialPlayerItemViewModel.OnPlayerPartyIdChanged // (Final|Native|Private) // @ game+0x377f980
	struct FString GetPartyID(); // Function ShooterGame.AresSocialPlayerItemViewModel.GetPartyID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377ef10
};

// Class ShooterGame.AresSocialPlayerListViewModel
// Size: 0xc8 (Inherited: 0x78)
struct UAresSocialPlayerListViewModel : UAresSocialListViewModel {
	struct FMulticastInlineDelegate FriendAdded; // 0x78(0x10)
	struct FMulticastInlineDelegate FriendRemoved; // 0x88(0x10)
	struct FMulticastInlineDelegate FriendListSorted; // 0x98(0x10)
	struct URGIFriendsSubsystem* FriendsSubsystem; // 0xa8(0x08)
	enum class ESocialCategory ListSocialCategory; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct TArray<struct FString> CachedFriendsListIds; // 0xb8(0x10)

	void Setup(enum class ESocialCategory SocialCategory); // Function ShooterGame.AresSocialPlayerListViewModel.Setup // (Final|Native|Public|BlueprintCallable) // @ game+0x377ff40
	void HandleSentInvitesUpdated(struct UPartyMessageModel* MessageModel); // Function ShooterGame.AresSocialPlayerListViewModel.HandleSentInvitesUpdated // (Final|Native|Private) // @ game+0x377f7d0
	void HandleFriendsListUpdated(struct FRGIFriendsPlayers& FriendsList); // Function ShooterGame.AresSocialPlayerListViewModel.HandleFriendsListUpdated // (Final|Native|Private|HasOutParms) // @ game+0x377f550
	void HandleBlockedPlayerListUpdated(struct FRGIFriendsPlayers& BlockedPlayerList); // Function ShooterGame.AresSocialPlayerListViewModel.HandleBlockedPlayerListUpdated // (Final|Native|Private|HasOutParms) // @ game+0x377f310
	int32_t GetFriendsListCount(); // Function ShooterGame.AresSocialPlayerListViewModel.GetFriendsListCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x377ed80
	struct TArray<struct FString> GetFriendsList(); // Function ShooterGame.AresSocialPlayerListViewModel.GetFriendsList // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x377ed00
};

// Class ShooterGame.AresSocialPresenceColorSetDataAsset
// Size: 0x178 (Inherited: 0x38)
struct UAresSocialPresenceColorSetDataAsset : UPrimaryDataAsset {
	struct FSlateColor OnlineColor; // 0x38(0x28)
	struct FSlateColor BusyColor; // 0x60(0x28)
	struct FSlateColor AwayColor; // 0x88(0x28)
	struct FSlateColor OfflineColor; // 0xb0(0x28)
	struct FSlateColor ErrorColor; // 0xd8(0x28)
	struct FSlateColor CompatiblePartyColor; // 0x100(0x28)
	struct FSlateColor CrossplayUnsupportedPartyColor; // 0x128(0x28)
	struct FSlateColor IncompatiblePartyColor; // 0x150(0x28)

	struct FSlateColor GetPresenceTypeColor(enum class EAresSocialPresenceType PresenceType); // Function ShooterGame.AresSocialPresenceColorSetDataAsset.GetPresenceTypeColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377f0d0
	struct FSlateColor GetPresenceColor(struct FAresSocialPresenceState& PresenceState, bool bUsePartyOverride); // Function ShooterGame.AresSocialPresenceColorSetDataAsset.GetPresenceColor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x377ef90
	struct FSlateColor GetPartyColor(enum class EAresSocialPartyCompatibility PartyCompatibility); // Function ShooterGame.AresSocialPresenceColorSetDataAsset.GetPartyColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377ee30
};

// Class ShooterGame.AresSocialTabListBase
// Size: 0x430 (Inherited: 0x398)
struct UAresSocialTabListBase : UAresCommonActivatableWidget {
	struct FMulticastInlineDelegate OnTabSelected; // 0x398(0x10)
	struct FMulticastInlineDelegate OnTabButtonCreation; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnTabButtonRemoval; // 0x3b8(0x10)
	bool bShouldLoopDirectionalNavigation; // 0x3c8(0x01)
	bool bShouldLoopManualNavigation; // 0x3c9(0x01)
	enum class EAresSocialTransitionType DefaultTabTransitionType; // 0x3ca(0x01)
	char pad_3CB[0x5]; // 0x3cb(0x05)
	struct FDataTableRowHandle NextTabInputActionData; // 0x3d0(0x18)
	struct FDataTableRowHandle PreviousTabInputActionData; // 0x3e8(0x18)
	struct UAresCommonActionWidget* NextTabInputActionWidget; // 0x400(0x08)
	struct UAresCommonActionWidget* PreviousTabInputActionWidget; // 0x408(0x08)
	bool bAutoListenForInput; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct UCommonButtonGroupBase* TabButtonGroup; // 0x418(0x08)
	char pad_420[0x10]; // 0x420(0x10)

	bool SetSelectedTab(int32_t NewTabIndex, enum class EAresSocialTransitionType TransitionType); // Function ShooterGame.AresSocialTabListBase.SetSelectedTab // (Native|Public|BlueprintCallable) // @ game+0x3785da0
	void SetListeningForInput(bool bShouldListen); // Function ShooterGame.AresSocialTabListBase.SetListeningForInput // (Native|Public|BlueprintCallable) // @ game+0x3785d00
	bool RemoveTabButton(int32_t TabIndex); // Function ShooterGame.AresSocialTabListBase.RemoveTabButton // (Native|Public|BlueprintCallable) // @ game+0x3785c60
	void RemoveAllTabButtons(); // Function ShooterGame.AresSocialTabListBase.RemoveAllTabButtons // (Native|Public|BlueprintCallable) // @ game+0x3785c30
	void OnTabSelected__DelegateSignature(int32_t TabIndex, enum class EAresSocialTransitionType TransitionType); // DelegateFunction ShooterGame.AresSocialTabListBase.OnTabSelected__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
	void OnTabButtonRemoval__DelegateSignature(struct UCommonButtonBase* TabButton); // DelegateFunction ShooterGame.AresSocialTabListBase.OnTabButtonRemoval__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
	void OnTabButtonCreation__DelegateSignature(struct UCommonButtonBase* TabButton); // DelegateFunction ShooterGame.AresSocialTabListBase.OnTabButtonCreation__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
	void HandleTabButtonSelected(struct UCommonButtonBase* SelectedTabButton, int32_t ButtonIndex); // Function ShooterGame.AresSocialTabListBase.HandleTabButtonSelected // (Final|Native|Protected) // @ game+0x3785310
	void HandlePreviousTabInputAction(bool& bPassThrough); // Function ShooterGame.AresSocialTabListBase.HandlePreviousTabInputAction // (Final|Native|Protected|HasOutParms) // @ game+0x3785280
	void HandleNextTabInputAction(bool& bPassThrough); // Function ShooterGame.AresSocialTabListBase.HandleNextTabInputAction // (Final|Native|Protected|HasOutParms) // @ game+0x37850d0
	int32_t GetTabCount(); // Function ShooterGame.AresSocialTabListBase.GetTabCount // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3785040
	struct UCommonButtonBase* GetTabButtonBaseByIndex(int32_t TabIndex); // Function ShooterGame.AresSocialTabListBase.GetTabButtonBaseByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3784fa0
	int32_t GetSelectedTabIndex(); // Function ShooterGame.AresSocialTabListBase.GetSelectedTabIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3784f70
	bool AddTabButton(struct UCommonButtonBase* InTabButton); // Function ShooterGame.AresSocialTabListBase.AddTabButton // (Native|Public|BlueprintCallable) // @ game+0x3784380
};

// Class ShooterGame.AresSocialTriggerViewModel
// Size: 0xa8 (Inherited: 0x48)
struct UAresSocialTriggerViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnOnlineFriendCountChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnUnreadMessageCountChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnCurrentPlayerIDChanged; // 0x68(0x10)
	struct URGIFriendsSubsystem* FriendsSubsystem; // 0x78(0x08)
	char pad_80[0x28]; // 0x80(0x28)

	void HandleOnFriendsUpdated(struct FRGIFriendsPlayers& FriendList); // Function ShooterGame.AresSocialTriggerViewModel.HandleOnFriendsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3785160
	void HandleCurrentPlayerChanged(); // Function ShooterGame.AresSocialTriggerViewModel.HandleCurrentPlayerChanged // (Final|Native|Private) // @ game+0x37850b0
	int32_t GetUnreadMessagesCount(); // Function ShooterGame.AresSocialTriggerViewModel.GetUnreadMessagesCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3785080
	int32_t GetOnlineFriendsCount(); // Function ShooterGame.AresSocialTriggerViewModel.GetOnlineFriendsCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3784e60
	struct FString GetCurrentPlayerID(); // Function ShooterGame.AresSocialTriggerViewModel.GetCurrentPlayerID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3784de0
};

// Class ShooterGame.AresSoundHandler
// Size: 0x438 (Inherited: 0x3d8)
struct AAresSoundHandler : AActor {
	struct UAresAudioComponent* Reusable2DAudioComponent; // 0x3d8(0x08)
	struct UAresAudioComponent* TemporaryReusableAudioComponent; // 0x3e0(0x08)
	char pad_3E8[0x50]; // 0x3e8(0x50)

	void TriggerWorldImpactEffectSound(struct AActor* InstigatorActor, struct UWorld* World, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, struct FString Perspective, enum class EAresSurfaceType SurfaceType, bool bEnableOcclusion, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerWorldImpactEffectSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerWorldEquippableSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct USceneComponent* AttachComponent, struct FName AttachPoint, struct FString Perspective, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerWorldEquippableSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void TriggerHUDPing(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& Location, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerHUDPing // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerHUDKillConfirmSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, int32_t MultikillLevel, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerHUDKillConfirmSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void TriggerHUDError(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerHUDError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void TriggerExplosionEffectSound(struct AShooterExplosionEffect* ExplosionEffect, struct UAkAudioEvent* Event, struct FVector& Location, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerExplosionEffectSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerEquippablePickupSound(struct AActor* OwnerActor, struct AAresEquippable* NewEquippable, struct UAkAudioEvent* Event, struct USceneComponent* AttachComponent, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerEquippablePickupSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void TriggerEjectableBounceSound(struct AAresEjectable* Ejectable, struct UAkAudioEvent* Event, struct FVector& Location, enum class EAresSurfaceType SurfaceType, int32_t NumBounces, float BounceSpeed, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerEjectableBounceSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerCharacterRespawnSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& RespawnLocation, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterRespawnSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerCharacterImpactEffectSound(struct AActor* InstigatorActor, struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, enum class EAresImpactEffectHitspace HitSpace, enum class EAresRegionalDamage RegionalDamage, enum class EAresImpactEffectWithArmor HitImpactArmor, enum class EAresImpactEffectAllies Allies, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterImpactEffectSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerCharacterHitConfirmSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct USkeletalMeshComponent* AttachComponent, enum class EAresHitConfirmLocality HitLocality, enum class EAresRegionalDamage RegionalDamage, float FalloffMultiplier, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterHitConfirmSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void TriggerCharacterGroundSound(struct AShooterCharacter* ShooterCharacter, struct TArray<struct UAkAudioEvent*>& Events, struct FVector& SoundLocation, struct FRotator& SoundRotation, struct FString Perspective, enum class EAresSurfaceType SurfaceType, float VolumeMultiplier, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterGroundSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void TriggerCharacterEquippableSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct USceneComponent* AttachComponent, struct FName AttachPoint, struct FString Perspective, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterEquippableSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void TriggerBulletWhizSound(struct UBulletWhizByComponent* WhizByComponent, struct FAresWhizBySoundTuning& WhizByTuning, struct FVector& ShotStart, struct FVector& ShotEnd, struct FVector& ClosestPoint, float ClosestPointDistance, struct FVector& ListenerPoint, struct AShooterCharacter* InstigatorShooterCharacter, struct AShooterCharacter* LocalShooterCharacter, bool bIsFriendlyFire, enum class EAresImpactOrder ImpactOrder); // Function ShooterGame.AresSoundHandler.TriggerBulletWhizSound // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	bool OnWorldImpactSound(struct AActor* InstigatingActor, struct AActor* WorldContext, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, float MaxDistanceToListener, bool bRequiresLineOfSightToListener, struct FString Perspective, enum class EAresSurfaceType SurfaceType, struct UAresAudioComponent* ReuseAudioComponent, struct UAresAudioComponent*& ReturnAudioComponent); // Function ShooterGame.AresSoundHandler.OnWorldImpactSound // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3785900
	bool OnCharacterImpactSound(struct AActor* InstigatingActor, struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, enum class EAresImpactEffectHitspace HitSpace, enum class EAresRegionalDamage RegionalDamage, enum class EAresImpactEffectWithArmor HitImpactArmor, enum class EAresImpactEffectAllies Allies); // Function ShooterGame.AresSoundHandler.OnCharacterImpactSound // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37856a0
	bool OnCharacterGroundSound(struct AShooterCharacter* ShooterCharacter, struct TArray<struct UAkAudioEvent*>& Events, struct FVector& SoundLocation, struct FRotator& SoundRotation, struct FString Perspective, enum class EAresSurfaceType SurfaceType, float VolumeMultiplier, struct UAresAudioComponent* ReuseAudioComponent); // Function ShooterGame.AresSoundHandler.OnCharacterGroundSound // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37853e0
};

// Class ShooterGame.AresSoundActor
// Size: 0x438 (Inherited: 0x438)
struct AAresSoundActor : AAresSoundHandler {
};

// Class ShooterGame.AresSpray
// Size: 0x490 (Inherited: 0x3d8)
struct AAresSpray : AActor {
	struct TSet<struct TSoftClassPtr<UObject>> Sockets; // 0x3d8(0x50)
	struct TArray<struct AEffectContainer*> SprayEffects; // 0x428(0x10)
	struct FEffectData CommonSprayEffectData; // 0x438(0x58)

	void AuthTriggerSprayEffect(struct AEffectContainer* SprayFXC, struct AActor* HitActor, struct FVector HitLocation, struct FRotator HitRotation, struct AShooterCharacter* SprayingCharacter, struct FEffectData& EffectData); // Function ShooterGame.AresSpray.AuthTriggerSprayEffect // (Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3784ae0
	void AuthSprayAtLocation(struct AActor* HitActor, struct FVector HitLocation, struct FRotator HitRotation, struct AShooterCharacter* SprayingCharacter); // Function ShooterGame.AresSpray.AuthSprayAtLocation // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0x3784940
	struct FEffectData AuthModifyEffectDataForSprayAttempt(struct FEffectData CommonEffectData, struct AActor* HitActor, struct FVector HitLocation, struct FRotator HitRotation, struct AShooterCharacter* SprayingCharacter); // Function ShooterGame.AresSpray.AuthModifyEffectDataForSprayAttempt // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3784430
};

// Class ShooterGame.AresStore
// Size: 0xb0 (Inherited: 0x30)
struct UAresStore : UObject {
	struct TArray<struct TSoftClassPtr<UObject>> PurchasableAssets; // 0x30(0x10)
	struct FSoftObjectPath PurchasableAssetsDevOnlyDataTable; // 0x40(0x20)
	float SellbackPercent; // 0x60(0x04)
	uint32_t ArmorSellPriceRoundingValue; // 0x64(0x04)
	struct FPurchasableList CachedPurchasables; // 0x68(0x10)
	struct FPurchasableList CachedCombinedPurchasables; // 0x78(0x10)
	char pad_88[0x28]; // 0x88(0x28)

	struct FPurchasableList GetPurchasables(struct UObject* WorldContextObject); // Function ShooterGame.AresStore.GetPurchasables // (Final|Native|Public|BlueprintCallable) // @ game+0x3784e90
};

// Class ShooterGame.AresStringListSettingModel
// Size: 0x30 (Inherited: 0x30)
struct UAresStringListSettingModel : UInterface {

	void UnbindOnStringListSettingChanged(struct FDelegate& Event); // Function ShooterGame.AresStringListSettingModel.UnbindOnStringListSettingChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x378dcb0
	void RemoveFromStringSettingList(struct FString StringSetting); // Function ShooterGame.AresStringListSettingModel.RemoveFromStringSettingList // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x378d310
	struct TScriptInterface<IOrderedListModel> GetStringSettingListModel(); // Function ShooterGame.AresStringListSettingModel.GetStringSettingListModel // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x378cec0
	struct TArray<struct FString> GetStringSettingList(); // Function ShooterGame.AresStringListSettingModel.GetStringSettingList // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x378ce30
	struct FUnicodeStringLength GetMaxStringSize(); // Function ShooterGame.AresStringListSettingModel.GetMaxStringSize // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x378cd70
	int32_t GetMaxListSize(); // Function ShooterGame.AresStringListSettingModel.GetMaxListSize // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x378cd30
	void BindOnStringListSettingChanged(struct FDelegate& Event); // Function ShooterGame.AresStringListSettingModel.BindOnStringListSettingChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x378ca00
	enum class EAddToStringSettingListResult AddToStringSettingList(struct FString StringSetting); // Function ShooterGame.AresStringListSettingModel.AddToStringSettingList // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x378c940
};

// Class ShooterGame.AresTestGlobals
// Size: 0x40 (Inherited: 0x30)
struct UAresTestGlobals : UObject {
	struct TArray<struct FBlueprintAutomatedTest> BlueprintAutomatedTests; // 0x30(0x10)
};

// Class ShooterGame.TestGlobalsDataAsset
// Size: 0x78 (Inherited: 0x38)
struct UTestGlobalsDataAsset : UPrimaryDataAsset {
	struct TSoftClassPtr<UObject> AresTestGlobals; // 0x38(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> BlueprintsToIncludeInRemoting; // 0x68(0x10)
};

// Class ShooterGame.AresTestLogic
// Size: 0xd0 (Inherited: 0x30)
struct UAresTestLogic : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	bool bReadyToTest; // 0x48(0x01)
	enum class EGameFlowStateType CurrentGameFlowStateType; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct FString CurrentMatchID; // 0x50(0x10)
	char pad_60[0x18]; // 0x60(0x18)
	struct TArray<struct FAresAutomationEvent> Events; // 0x78(0x10)
	struct TArray<struct FString> Logs; // 0x88(0x10)
	struct FString FailureReason; // 0x98(0x10)
	enum class EAresTestAutomationStatus Status; // 0xa8(0x01)
	char ClientId; // 0xa9(0x01)
	bool bIsServer; // 0xaa(0x01)
	bool bCrashOnVoteFail; // 0xab(0x01)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FString TestCategory; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)

	void WaitForLocalPlayerControllerOfType(struct UObject* WorldContextObject, struct APlayerController* Type, float MaxWaitSeconds, struct APlayerController*& FoundController, struct FLatentActionInfo LatentInfo); // Function ShooterGame.AresTestLogic.WaitForLocalPlayerControllerOfType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378de00
	void VotePassTest(); // Function ShooterGame.AresTestLogic.VotePassTest // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void VoteFailTest(struct FString Reason); // Function ShooterGame.AresTestLogic.VoteFailTest // (Final|Native|Public|BlueprintCallable) // @ game+0x36d6150
	void TestRunningTick(float DeltaSeconds); // Function ShooterGame.AresTestLogic.TestRunningTick // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void Shutdown(); // Function ShooterGame.AresTestLogic.Shutdown // (Final|Native|Public) // @ game+0x2024060
	void RunLocalPlayerAutomation(struct AAresPlayerAutomation* Type); // Function ShooterGame.AresTestLogic.RunLocalPlayerAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void OnTestLoaded(); // Function ShooterGame.AresTestLogic.OnTestLoaded // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnPlayerAutomationComplete(struct AAresPlayerAutomation* PlayerAutomation); // Function ShooterGame.AresTestLogic.OnPlayerAutomationComplete // (Native|Event|Public|BlueprintEvent) // @ game+0x378d1f0
	void OnLeftMatch(struct FString MatchID); // Function ShooterGame.AresTestLogic.OnLeftMatch // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnJoinedMatch(struct FString MatchID); // Function ShooterGame.AresTestLogic.OnJoinedMatch // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnGameFlowStateChanged(enum class EGameFlowStateType OldState, enum class EGameFlowStateType NewState); // Function ShooterGame.AresTestLogic.OnGameFlowStateChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnBeginTest(); // Function ShooterGame.AresTestLogic.OnBeginTest // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct TArray<struct FString> LoadTestableCharactersWithFilter(struct TArray<struct FString>& PathsToIgnore); // Function ShooterGame.AresTestLogic.LoadTestableCharactersWithFilter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378d0c0
	struct TArray<struct FString> LoadTestableCharacters(); // Function ShooterGame.AresTestLogic.LoadTestableCharacters // (Final|Native|Public|BlueprintCallable) // @ game+0x378d040
	bool IsReadyToBeginTest(); // Function ShooterGame.AresTestLogic.IsReadyToBeginTest // (Native|Event|Public|BlueprintEvent) // @ game+0x220e430
	bool HasTestFailed(); // Function ShooterGame.AresTestLogic.HasTestFailed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cf80
	void HandleOnStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.AresTestLogic.HandleOnStateChanged // (Final|Native|Public) // @ game+0x36908e0
	void HandleCurrentMatchUpdated(); // Function ShooterGame.AresTestLogic.HandleCurrentMatchUpdated // (Final|Native|Public) // @ game+0x2024060
	struct UWorld* GetWorld(); // Function ShooterGame.AresTestLogic.GetWorld // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cf10
	struct FString GetStatusString(); // Function ShooterGame.AresTestLogic.GetStatusString // (Final|Native|Public|Const) // @ game+0x378cdb0
	struct UGameInstance* GetGameInstance(); // Function ShooterGame.AresTestLogic.GetGameInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cd00
	struct FString GetFailureReason(); // Function ShooterGame.AresTestLogic.GetFailureReason // (Final|Native|Public|Const) // @ game+0x378cc80
	struct TArray<struct FString> DequeueLogs(); // Function ShooterGame.AresTestLogic.DequeueLogs // (Final|Native|Public) // @ game+0x378cbe0
	struct TArray<struct FAresAutomationEvent> DequeueEvents(); // Function ShooterGame.AresTestLogic.DequeueEvents // (Final|Native|Public) // @ game+0x378cae0
	void AutomationLog(struct FString Log); // Function ShooterGame.AresTestLogic.AutomationLog // (Final|Native|Public|BlueprintCallable) // @ game+0x36d6150
	void AuthRunGameAutomation(struct AAresGameAutomation* Type); // Function ShooterGame.AresTestLogic.AuthRunGameAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
};

// Class ShooterGame.AresTextBlock
// Size: 0x388 (Inherited: 0x310)
struct UAresTextBlock : UTextBlock {
	bool bOverride_FontStyle; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct UFontStyleDataAsset* FontStyle; // 0x318(0x08)
	struct FAresFontStyle FontStyleOverride; // 0x320(0x68)

	void SetFontStyleOverride(struct FAresFontStyle InFontStyleOverride); // Function ShooterGame.AresTextBlock.SetFontStyleOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x378d560
	void SetFontStyle(struct UFontStyleDataAsset* InFontStyle); // Function ShooterGame.AresTextBlock.SetFontStyle // (Final|Native|Public|BlueprintCallable) // @ game+0x378d4d0
	bool HasSelectedFontStyle(); // Function ShooterGame.AresTextBlock.HasSelectedFontStyle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cf50
};

// Class ShooterGame.AresTextRenderComponent
// Size: 0x5a0 (Inherited: 0x5a0)
struct UAresTextRenderComponent : UTextRenderComponent {

	void SetYScaleCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetYScaleCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378dc30
	void SetXScaleCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetXScaleCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378dbb0
	void SetWorldSizeCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetWorldSizeCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378db30
	void SetTextRenderColorCached(struct FColor Value); // Function ShooterGame.AresTextRenderComponent.SetTextRenderColorCached // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x378dab0
	void SetTextMaterialCached(struct UMaterialInterface* Material); // Function ShooterGame.AresTextRenderComponent.SetTextMaterialCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378da20
	void SetTextCached(struct FString Value); // Function ShooterGame.AresTextRenderComponent.SetTextCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378d970
	void SetLocalizedTextCached(struct FText& Value); // Function ShooterGame.AresTextRenderComponent.SetLocalizedTextCached // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378d800
	void SetHorizSpacingAdjustCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetHorizSpacingAdjustCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378d680
	void SetHorizontalAlignmentCached(enum class EHorizTextAligment Value); // Function ShooterGame.AresTextRenderComponent.SetHorizontalAlignmentCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378d700
	void SetFontCached(struct UFont* Value); // Function ShooterGame.AresTextRenderComponent.SetFontCached // (Final|Native|Public|BlueprintCallable) // @ game+0x378d440
};

// Class ShooterGame.TipDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UTipDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Tip; // 0x50(0x30)
};

// Class ShooterGame.AresTouchAnimationComponent
// Size: 0x48 (Inherited: 0x30)
struct UAresTouchAnimationComponent : UObject {
	struct FTimerHandle RenderTickTimer; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)

	void RenderTick(); // Function ShooterGame.AresTouchAnimationComponent.RenderTick // (Final|Native|Private) // @ game+0x2024060
	void OnActiveAnimationFinished(); // Function ShooterGame.AresTouchAnimationComponent.OnActiveAnimationFinished // (Final|Native|Private) // @ game+0x2024060
	void AddActiveAnimation(struct UUserWidget* WidgetToAnimate, struct UWidgetAnimation* Animation, float RenderTickTime); // Function ShooterGame.AresTouchAnimationComponent.AddActiveAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x378c820
};

// Class ShooterGame.AresTouchBounds
// Size: 0x160 (Inherited: 0x148)
struct UAresTouchBounds : UWidget {
	enum class EAresTouchBoundsShape BoundsShape; // 0x148(0x01)
	char pad_149[0x17]; // 0x149(0x17)

	void SetBoundsShape(enum class EAresTouchBoundsShape InBoundsShape); // Function ShooterGame.AresTouchBounds.SetBoundsShape // (Final|Native|Public|BlueprintCallable) // @ game+0x378d3c0
	enum class EAresTouchBoundsShape GetBoundsShape(); // Function ShooterGame.AresTouchBounds.GetBoundsShape // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cc60
};

// Class ShooterGame.AresTouchComponent
// Size: 0x140 (Inherited: 0x30)
struct UAresTouchComponent : UObject {
	char pad_30[0x40]; // 0x30(0x40)
	struct FMulticastInlineDelegate OnTouchPress; // 0x70(0x10)
	struct FMulticastInlineDelegate OnTouchMove; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTouchRelease; // 0x90(0x10)
	struct FMulticastInlineDelegate OnTouchEnter; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTouchExit; // 0xb0(0x10)
	char pad_C0[0x30]; // 0xc0(0x30)
	struct TSet<struct TWeakObjectPtr<struct UAresTouchGesture>> Gestures; // 0xf0(0x50)

	void UnregisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchComponent.UnregisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x378dd70
	void SetMaxFingersSupported(int32_t InMaxFingersSupported); // Function ShooterGame.AresTouchComponent.SetMaxFingersSupported // (Native|Public|BlueprintCallable) // @ game+0x378d8e0
	void SetIgnoreTouchIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchComponent.SetIgnoreTouchIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x378d780
	void RegisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchComponent.RegisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x378d280
	bool IsIgnoreTouchIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchComponent.IsIgnoreTouchIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cfb0
	void ClearIgnoreTouchIndex(); // Function ShooterGame.AresTouchComponent.ClearIgnoreTouchIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x378cac0
};

// Class ShooterGame.AresTouchButtonComponent
// Size: 0x1a0 (Inherited: 0x140)
struct UAresTouchButtonComponent : UAresTouchComponent {
	struct FMulticastInlineDelegate OnTouchPressed; // 0x140(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0x150(0x10)
	struct FMulticastInlineDelegate OnTouchEntered; // 0x160(0x10)
	struct FMulticastInlineDelegate OnTouchExited; // 0x170(0x10)
	struct FMulticastInlineDelegate OnTouchMoved; // 0x180(0x10)
	struct FMulticastInlineDelegate OnTouchReset; // 0x190(0x10)
};

// Class ShooterGame.AresTouchBoundsDebugWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresTouchBoundsDebugWidget : UUserWidget {
	char pad_2C8[0x18]; // 0x2c8(0x18)
};

// Class ShooterGame.AresTouchJoystickDebugWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UAresTouchJoystickDebugWidget : UAresTouchBoundsDebugWidget {
	char pad_2E0[0x18]; // 0x2e0(0x18)
};

// Class ShooterGame.AresTouchTrackPadDebugWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UAresTouchTrackPadDebugWidget : UAresTouchBoundsDebugWidget {
	char pad_2E0[0x18]; // 0x2e0(0x18)
};

// Class ShooterGame.AresTouchSwipeDebugWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UAresTouchSwipeDebugWidget : UAresTouchBoundsDebugWidget {
	char pad_2E0[0x20]; // 0x2e0(0x20)
};

// Class ShooterGame.AresTouchDoubleTapFilter
// Size: 0x70 (Inherited: 0x30)
struct UAresTouchDoubleTapFilter : UObject {
	struct FMulticastInlineDelegate OnDoubleTap; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDoubleTapAtLocation; // 0x40(0x10)
	char pad_50[0x20]; // 0x50(0x20)

	void SetOwningWidget(struct UAresTouchWidget* InOwningWidget); // Function ShooterGame.AresTouchDoubleTapFilter.SetOwningWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3794d70
	void OnTouchStarted(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchDoubleTapFilter.OnTouchStarted // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3794590
	void OnTouchReleased(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchDoubleTapFilter.OnTouchReleased // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37944c0
	void OnTouchMoved(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchDoubleTapFilter.OnTouchMoved // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3794320
	void OnDistanceSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresTouchDoubleTapFilter.OnDistanceSettingChanged // (Final|Native|Public) // @ game+0x3793c70
	struct UAresTouchWidget* GetOwningWidget(); // Function ShooterGame.AresTouchDoubleTapFilter.GetOwningWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x37933d0
};

// Class ShooterGame.AresTouchGesture
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchGesture : UObject {

	void Reset(); // Function ShooterGame.AresTouchGesture.Reset // (Native|Public|BlueprintCallable) // @ game+0x2432e40
};

// Class ShooterGame.AresTouchDoubleTapGesture
// Size: 0x1d0 (Inherited: 0x30)
struct UAresTouchDoubleTapGesture : UAresTouchGesture {
	struct FMulticastInlineDelegate OnDoubleTapStart; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDoubleTapHoldStart; // 0x40(0x10)
	struct FMulticastInlineDelegate OnDoubleTapHoldChargeInterrupted; // 0x50(0x10)
	struct FMulticastInlineDelegate OnDoubleTapEnd; // 0x60(0x10)
	float MaxTimeBetweenTaps; // 0x70(0x04)
	float MaxDistanceBetweenTapsInInches; // 0x74(0x04)
	struct FAresTouchHoldGestureProperties InitialHoldProperties; // 0x78(0x0c)
	char pad_84[0x4]; // 0x84(0x04)
	struct UAresTouchHoldGesture* HoldGesture; // 0x88(0x08)
	char pad_90[0x140]; // 0x90(0x140)

	void OnHoldStart(struct FAresTouchHoldGestureData HoldGestureData); // Function ShooterGame.AresTouchDoubleTapGesture.OnHoldStart // (Final|Native|Private) // @ game+0x3793f40
	void OnHoldEnd(struct FAresTouchHoldGestureData HoldGestureData); // Function ShooterGame.AresTouchDoubleTapGesture.OnHoldEnd // (Final|Native|Private) // @ game+0x3793e60
	void OnHoldChargeInterrupted(struct FAresTouchHoldGestureData HoldGestureData); // Function ShooterGame.AresTouchDoubleTapGesture.OnHoldChargeInterrupted // (Final|Native|Private) // @ game+0x3793d80
	void Initialize(struct FAresTouchDoubleTapGestureProperties& InitData); // Function ShooterGame.AresTouchDoubleTapGesture.Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3793af0
};

// Class ShooterGame.AresTouchGesturesBase
// Size: 0x960 (Inherited: 0x960)
struct UAresTouchGesturesBase : UAresTouchWidget {

	enum class EAresIntSettingName GetCorrespondingRegion(int32_t XRegion, int32_t YRegion); // Function ShooterGame.AresTouchGesturesBase.GetCorrespondingRegion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3793290
};

// Class ShooterGame.AresTouchHoldGesture
// Size: 0xc0 (Inherited: 0x30)
struct UAresTouchHoldGesture : UAresTouchGesture {
	struct FMulticastInlineDelegate OnHoldStart; // 0x30(0x10)
	struct FMulticastInlineDelegate OnHoldEnd; // 0x40(0x10)
	struct FMulticastInlineDelegate OnHoldChargeInterrupted; // 0x50(0x10)
	float MinimumTimeToHold; // 0x60(0x04)
	float MaximumMoveDistanceInInches; // 0x64(0x04)
	char MaxTouchesTracked; // 0x68(0x01)
	bool bRestartChargeOnInterrupt; // 0x69(0x01)
	char pad_6A[0x56]; // 0x6a(0x56)

	void Initialize(struct FAresTouchHoldGestureProperties& InitData); // Function ShooterGame.AresTouchHoldGesture.Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3793b90
};

// Class ShooterGame.AresTouchJoystick
// Size: 0x9d8 (Inherited: 0x960)
struct UAresTouchJoystick : UAresTouchWidget {
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x960(0x10)
	struct FMulticastInlineDelegate OnThumbstickLocationChanged; // 0x970(0x10)
	struct FMulticastInlineDelegate OnJoystickPressLocationNormalized; // 0x980(0x10)
	struct FMulticastInlineDelegate OnJoystickReleased; // 0x990(0x10)
	struct FMulticastInlineDelegate OnJoystickIndexPressed; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnJoystickIndexMoved; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnJoystickIndexReleased; // 0x9c0(0x10)
	struct TWeakObjectPtr<struct UAresTouchJoystickComponent> TouchJoystickComponent; // 0x9d0(0x08)

	void OnTouchThumbstickLocationChanged(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchThumbstickLocationChanged // (Native|Protected|HasDefaults) // @ game+0x3794800
	void OnTouchThumbstickAbsoluteLocationChanged(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchThumbstickAbsoluteLocationChanged // (Native|Protected|HasDefaults) // @ game+0x3794730
	void OnTouchJoystickReleased(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchJoystickReleased // (Native|Protected|HasDefaults) // @ game+0x3794250
	void OnTouchJoystickPressLocationNormalized(struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchJoystickPressLocationNormalized // (Native|Protected|HasDefaults) // @ game+0x37940f0
	void OnTouchJoystickPressed(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchJoystickPressed // (Native|Protected|HasDefaults) // @ game+0x3794180
};

// Class ShooterGame.AresTouchJoystickComponent
// Size: 0x258 (Inherited: 0x140)
struct UAresTouchJoystickComponent : UAresTouchComponent {
	float JoystickSize; // 0x140(0x04)
	float RecenteringSpeed; // 0x144(0x04)
	bool bUseGyroDeadzone; // 0x148(0x01)
	enum class EJoystickStyle JoystickStyle; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	float DPIScaleDownFactor; // 0x14c(0x04)
	struct FVector2D JoystickLocation; // 0x150(0x08)
	struct FMulticastInlineDelegate OnXAxisChanged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnYAxisChanged; // 0x168(0x10)
	struct FMulticastInlineDelegate OnAxesChanged; // 0x178(0x10)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x188(0x10)
	struct FMulticastInlineDelegate OnJoystickReleased; // 0x198(0x10)
	struct FMulticastInlineDelegate OnThumbstickLocation; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnThumbstickAbsoluteLocation; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnPressLocationNormalized; // 0x1c8(0x10)
	struct FMulticastInlineDelegate OnThumbstickNeutral; // 0x1d8(0x10)
	struct FMulticastInlineDelegate OnEnterSprintZone; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnExitSprintZone; // 0x1f8(0x10)
	char pad_208[0x50]; // 0x208(0x50)

	void SetDPIScaleDownFactor(float DPIScaleDownFactor); // Function ShooterGame.AresTouchJoystickComponent.SetDPIScaleDownFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x3794c60
	float GetTouchVelocitySquared(); // Function ShooterGame.AresTouchJoystickComponent.GetTouchVelocitySquared // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37936a0
	enum class ETouchIndex GetCurrentTouchIndex(); // Function ShooterGame.AresTouchJoystickComponent.GetCurrentTouchIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793360
};

// Class ShooterGame.AresTouchLongPressFilter
// Size: 0x80 (Inherited: 0x30)
struct UAresTouchLongPressFilter : UObject {
	struct FMulticastInlineDelegate OnLongPress; // 0x30(0x10)
	struct FMulticastInlineDelegate OnLongPressCancelled; // 0x40(0x10)
	float MinimumTimeToHold; // 0x50(0x04)
	float MaximumMoveDistanceInInches; // 0x54(0x04)
	bool bMovementCancelsLongPressTimer; // 0x58(0x01)
	char pad_59[0x27]; // 0x59(0x27)

	void UpdateMovementCancelsTimer(bool CancelsTimer); // Function ShooterGame.AresTouchLongPressFilter.UpdateMovementCancelsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x3794f00
	void UpdateHoldTime(float HoldTime); // Function ShooterGame.AresTouchLongPressFilter.UpdateHoldTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3794e80
	void OnTouchStarted(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchLongPressFilter.OnTouchStarted // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3794660
	void OnTouchMoved(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchLongPressFilter.OnTouchMoved // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37943f0
	void OnTouchEnded(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchLongPressFilter.OnTouchEnded // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3794020
	bool GetMovementCancelsTimer(); // Function ShooterGame.AresTouchLongPressFilter.GetMovementCancelsTimer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37933b0
	float GetMinimumTimeToHold(); // Function ShooterGame.AresTouchLongPressFilter.GetMinimumTimeToHold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793390
};

// Class ShooterGame.AresTouchWidgetIndicatorInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchWidgetIndicatorInterface : UInterface {

	void SetTouchIndex(int32_t TouchIndex); // Function ShooterGame.AresTouchWidgetIndicatorInterface.SetTouchIndex // (BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresTouchManager
// Size: 0x170 (Inherited: 0x80)
struct UAresTouchManager : UInitSystem {
	struct FMulticastInlineDelegate OnTouchModeChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTouchPressed; // 0x90(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTouchMoved; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnForwardedTouchPressed; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnForwardedTouchReleased; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnForwardedTouchMoved; // 0xe0(0x10)
	enum class EAresTouchMode TouchMode; // 0xf0(0x01)
	char pad_F1[0x27]; // 0xf1(0x27)
	struct UUserWidget* TouchIndicatorClass; // 0x118(0x08)
	struct TMap<enum class ETouchIndex, struct UUserWidget*> TouchIndicatorMap; // 0x120(0x50)

	void SetTouchMode(enum class EAresTouchMode InTouchMode); // Function ShooterGame.AresTouchManager.SetTouchMode // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3794e00
	void SetInputPreProcessorActive(bool bActive); // Function ShooterGame.AresTouchManager.SetInputPreProcessorActive // (Final|Native|Public|BlueprintCallable) // @ game+0x3794ce0
	void ResetActiveTouches(); // Function ShooterGame.AresTouchManager.ResetActiveTouches // (Final|Native|Public|BlueprintCallable) // @ game+0x3794c40
	void ResetActiveTouch(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchManager.ResetActiveTouch // (Final|Native|Public|BlueprintCallable) // @ game+0x3794bc0
	void RegisterForwardedTouchInputWidget(struct FAresTouchEventInfo& TouchInfo, struct UUserWidget* Widget); // Function ShooterGame.AresTouchManager.RegisterForwardedTouchInputWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3794a20
	struct UUserWidget* QueryForwardedInputRegistry(enum class ETouchIndex TouchIndex, int32_t RegistryNumber); // Function ShooterGame.AresTouchManager.QueryForwardedInputRegistry // (Final|Native|Public|BlueprintCallable) // @ game+0x3794950
	void PopSpecificTouchRegistry(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchManager.PopSpecificTouchRegistry // (Final|Native|Public|BlueprintCallable) // @ game+0x37948d0
	bool IsInputPreProcessorActive(); // Function ShooterGame.AresTouchManager.IsInputPreProcessorActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793c40
	void IndicatorOnTouchReleased(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.IndicatorOnTouchReleased // (Final|Native|Protected|HasOutParms) // @ game+0x3793990
	void IndicatorOnTouchPressed(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.IndicatorOnTouchPressed // (Final|Native|Protected|HasOutParms) // @ game+0x3793830
	void IndicatorOnTouchMoved(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.IndicatorOnTouchMoved // (Final|Native|Protected|HasOutParms) // @ game+0x37936d0
	enum class EAresTouchMode GetTouchMode(); // Function ShooterGame.AresTouchManager.GetTouchMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793680
	struct TArray<struct UUserWidget*> GetTouchIndexRegistryEntries(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchManager.GetTouchIndexRegistryEntries // (Final|Native|Public|BlueprintCallable) // @ game+0x37935a0
	bool GetTouchEventInfo(enum class ETouchIndex TouchIndex, struct FAresTouchEventInfo& OutTouchInfo); // Function ShooterGame.AresTouchManager.GetTouchEventInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793400
	struct UAresTouchManager* GET(struct UObject* WorldContextObject); // Function ShooterGame.AresTouchManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3793200
	void ClearSpecificTouchRegistry(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.ClearSpecificTouchRegistry // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37930a0
	void ClearAllRegistries(); // Function ShooterGame.AresTouchManager.ClearAllRegistries // (Final|Native|Public|BlueprintCallable) // @ game+0x3793080
};

// Class ShooterGame.AresTouchScreenChildInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchScreenChildInterface : UInterface {
};

// Class ShooterGame.AresTouchScreen
// Size: 0x2e8 (Inherited: 0x2d8)
struct UAresTouchScreen : UCoordinatedHUDElement {
	double TouchSwipeAverageSpeed; // 0x2d8(0x08)
	double TouchSwipeTimeToMaintainInSeconds; // 0x2e0(0x08)

	void RegisterChildWidgetsForUserWidget(struct UUserWidget* UserWidget); // Function ShooterGame.AresTouchScreen.RegisterChildWidgetsForUserWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x379c3e0
	void RegisterChildWidgets(); // Function ShooterGame.AresTouchScreen.RegisterChildWidgets // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x373b8f0
	void OnShowTelButton(); // Function ShooterGame.AresTouchScreen.OnShowTelButton // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnShowDevButton(); // Function ShooterGame.AresTouchScreen.OnShowDevButton // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool GetVisibilityStateOverrideForWidget(struct UAresTouchWidget* Widget, enum class EWidgetVisibilityState& OutVisibilityStateOverride); // Function ShooterGame.AresTouchScreen.GetVisibilityStateOverrideForWidget // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x379bca0
	bool GetEnabledStateOverrideForWidget(struct UAresTouchWidget* Widget, enum class EWidgetEnabledState& OutEnabledStateOverride); // Function ShooterGame.AresTouchScreen.GetEnabledStateOverrideForWidget // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x379ba90
};

// Class ShooterGame.AresTouchSettingsNormalizationInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchSettingsNormalizationInterface : UInterface {

	void OnNormalizationModeEnabled(bool bEnabled); // Function ShooterGame.AresTouchSettingsNormalizationInterface.OnNormalizationModeEnabled // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresTouchSettingsList
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAresTouchSettingsList : UUserWidget {

	void OnNormalizationModeEnabled(bool bEnabled); // Function ShooterGame.AresTouchSettingsList.OnNormalizationModeEnabled // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnDevModeEnabled(bool bEnabled); // Function ShooterGame.AresTouchSettingsList.OnDevModeEnabled // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresTouchSwipeComponent
// Size: 0x190 (Inherited: 0x140)
struct UAresTouchSwipeComponent : UAresTouchComponent {
	struct FMulticastInlineDelegate OnSwipeGesture; // 0x140(0x10)
	struct FMulticastInlineDelegate OnSwipeDirection; // 0x150(0x10)
	float ConstraintAngle; // 0x160(0x04)
	float ConstraintRange; // 0x164(0x04)
	float SwipeRadius; // 0x168(0x04)
	char pad_16C[0x24]; // 0x16c(0x24)
};

// Class ShooterGame.AresTouchTrackPadComponent
// Size: 0x2b8 (Inherited: 0x140)
struct UAresTouchTrackPadComponent : UAresTouchComponent {
	struct UCurveFloat* AimingDeltaXScalingCurve; // 0x140(0x08)
	struct UCurveFloat* AimingDeltaYScalingCurve; // 0x148(0x08)
	struct UCurveFloat* AimingDeltaXScalingCurveADS; // 0x150(0x08)
	struct UCurveFloat* AimingDeltaYScalingCurveADS; // 0x158(0x08)
	struct UCurveFloat* AimingDeltaXScalingCurveSniper; // 0x160(0x08)
	struct UCurveFloat* AimingDeltaYScalingCurveSniper; // 0x168(0x08)
	float ScreenDensityInputAdjustment; // 0x170(0x04)
	bool bContinuesFilteringAfterRelease; // 0x174(0x01)
	char pad_175[0x3]; // 0x175(0x03)
	struct FMulticastInlineDelegate OnDeltaXChanged; // 0x178(0x10)
	struct FMulticastInlineDelegate OnDeltaYChanged; // 0x188(0x10)
	struct FMulticastInlineDelegate OnPressed; // 0x198(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnMoved; // 0x1b8(0x10)
	struct TArray<struct UCurveFloat*> AccelerationCurvesX; // 0x1c8(0x10)
	struct TArray<struct UCurveFloat*> AccelerationCurvesY; // 0x1d8(0x10)
	struct FMulticastInlineDelegate OnMinCutOffChanged; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnDeltaCutOffChanged; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnCutOffSlopeChanged; // 0x208(0x10)
	bool bSupportsTrackballMode; // 0x218(0x01)
	char pad_219[0x7]; // 0x219(0x07)
	struct UCurveFloat* TrackballDecelerationCurve; // 0x220(0x08)
	float TrackballVerticalAngleClearZone; // 0x228(0x04)
	bool bTrackballModeXAxis; // 0x22c(0x01)
	bool bTrackballModeYAxis; // 0x22d(0x01)
	char pad_22E[0x2]; // 0x22e(0x02)
	float TrackballTimeActive; // 0x230(0x04)
	struct FVector2D TrackballVelocityDirection; // 0x234(0x08)
	float TrackballVelocityMagnitude; // 0x23c(0x04)
	struct FVector2D TrackballVelocityMagnitudeVector; // 0x240(0x08)
	struct FVector2D TrackballPhysicalMagnitudeVector; // 0x248(0x08)
	struct FVector2D TrackballInitialDirection; // 0x250(0x08)
	float TimeSinceAccelerationStart; // 0x258(0x04)
	char pad_25C[0x5c]; // 0x25c(0x5c)

	void ClearTrackballVelocity(); // Function ShooterGame.AresTouchTrackPadComponent.ClearTrackballVelocity // (Final|Native|Public|BlueprintCallable) // @ game+0x379b980
};

// Class ShooterGame.AresTouchWheelSegment
// Size: 0x60 (Inherited: 0x30)
struct UAresTouchWheelSegment : UObject {
	struct FText SegmentText; // 0x30(0x18)
	struct UTexture2D* SegmentIconTexture; // 0x48(0x08)
	struct TArray<struct UAresTouchWheelSegment*> SegmentSuboptions; // 0x50(0x10)

	void DoWork(struct UAresTouchWheelMenu* WheelMenuContext); // Function ShooterGame.AresTouchWheelSegment.DoWork // (Native|Event|Public|BlueprintEvent) // @ game+0x379b9a0
};

// Class ShooterGame.AresTouchWheelMenu
// Size: 0x9d8 (Inherited: 0x960)
struct UAresTouchWheelMenu : UAresTouchWidget {
	struct TWeakObjectPtr<struct UAresTouchWheelMenuComponent> TouchWheelComponent; // 0x960(0x08)
	float TouchMoveScale; // 0x968(0x04)
	float SelectionDeadzoneThreshold; // 0x96c(0x04)
	float SelectionInputBufferWidth; // 0x970(0x04)
	float SegmentWidth; // 0x974(0x04)
	float SelectionConfirmDelay; // 0x978(0x04)
	float SwitchSuboptionsDelay; // 0x97c(0x04)
	float ResetSuboptionsOnNoSelectionDelay; // 0x980(0x04)
	bool bDisableResetSuboptionsOnNoSelection; // 0x984(0x01)
	bool bCanTapToSelectSegments; // 0x985(0x01)
	char pad_986[0x2]; // 0x986(0x02)
	float StaticSectionSize; // 0x988(0x04)
	char pad_98C[0x4]; // 0x98c(0x04)
	struct UDataTable* SegmentDataTable; // 0x990(0x08)
	struct TArray<struct UAresTouchWheelSegment*> StaticSegmentData; // 0x998(0x10)
	struct TArray<struct UAresTouchWheelSegment*> DynamicSegmentData; // 0x9a8(0x10)
	int32_t SelectionIndex; // 0x9b8(0x04)
	int32_t SuboptionsParentIndex; // 0x9bc(0x04)
	char pad_9C0[0x18]; // 0x9c0(0x18)

	void ShowWheelMenuInternal(); // Function ShooterGame.AresTouchWheelMenu.ShowWheelMenuInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x26206b0
	void ShowWheelMenu(int32_t StartingTouchIndex); // Function ShooterGame.AresTouchWheelMenu.ShowWheelMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x379c610
	void RebuildDynamicSectionSegments(struct TArray<float>& SegmentStartOffsets, struct FVector2D StaticStartDirection); // Function ShooterGame.AresTouchWheelMenu.RebuildDynamicSectionSegments // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void OnTouchWheelTapReleased(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelTapReleased // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnTouchWheelTapPressed(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelTapPressed // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnTouchWheelTapBoundsChanged(int32_t Index, bool IsInBounds); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelTapBoundsChanged // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnTouchWheelReleased(struct FVector2D AbsoluteWidgetLocation); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelReleased // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void OnTouchWheelPressed(struct FVector2D AbsoluteWidgetLocation); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelPressed // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void OnTouchWheelMoved(struct FVector2D AbsoluteWidgetLocation, float Angle); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelMoved // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void OnSelectionChangedInternal(int32_t SelectedIndex); // Function ShooterGame.AresTouchWheelMenu.OnSelectionChangedInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x379c190
	void NativeOnTouchWheelTapReleased(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelTapReleased // (Native|Protected) // @ game+0x379c100
	void NativeOnTouchWheelTapPressed(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelTapPressed // (Native|Protected) // @ game+0x379c070
	void NativeOnTouchWheelTapBoundsChanged(int32_t Index, bool IsInBounds); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelTapBoundsChanged // (Native|Protected) // @ game+0x379bf90
	void NativeOnTouchWheelReleased(struct FVector2D Location); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelReleased // (Native|Protected|HasDefaults) // @ game+0x379bf00
	void NativeOnTouchWheelPressed(struct FVector2D Location); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelPressed // (Native|Protected|HasDefaults) // @ game+0x37940f0
	void NativeOnTouchWheelMoved(struct FVector2D Location, float Angle); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelMoved // (Native|Protected|HasDefaults) // @ game+0x379be30
	void NativeOnSelectionChanged(int32_t SelectedIndex); // Function ShooterGame.AresTouchWheelMenu.NativeOnSelectionChanged // (Final|Native|Protected) // @ game+0x379bda0
	void HideWheelMenuInternal(); // Function ShooterGame.AresTouchWheelMenu.HideWheelMenuInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x3671a30
	void HideWheelMenu(); // Function ShooterGame.AresTouchWheelMenu.HideWheelMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x379bd80
	struct UAresTouchWheelSegment* GetSuboptionsParentSegmentData(); // Function ShooterGame.AresTouchWheelMenu.GetSuboptionsParentSegmentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x379bc70
	struct UAresTouchWheelSegment* GetSelectedSegmentData(); // Function ShooterGame.AresTouchWheelMenu.GetSelectedSegmentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x379bc40
	struct UAresTouchWheelSegment* GetSegmentDataFromIndex(int32_t Index, bool bIgnoreSuboptions); // Function ShooterGame.AresTouchWheelMenu.GetSegmentDataFromIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x379bb70
	int32_t GetAlternateSelectionIndex(); // Function ShooterGame.AresTouchWheelMenu.GetAlternateSelectionIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x379ba60
	bool DoesHaveSelection(); // Function ShooterGame.AresTouchWheelMenu.DoesHaveSelection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x379ba30
	void BuildWidgetSegments(struct TArray<float>& SegmentStartOffsets, struct FVector2D StaticStartDirection); // Function ShooterGame.AresTouchWheelMenu.BuildWidgetSegments // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresTouchWheelMenuComponent
// Size: 0x250 (Inherited: 0x140)
struct UAresTouchWheelMenuComponent : UAresTouchComponent {
	struct FMulticastInlineDelegate OnWheelPressed; // 0x140(0x10)
	struct FMulticastInlineDelegate OnWheelReleased; // 0x150(0x10)
	struct FMulticastInlineDelegate OnWheelLocation; // 0x160(0x10)
	struct FMulticastInlineDelegate OnInDeadzoneChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnWheelSelectionChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnWheelTapPress; // 0x190(0x10)
	struct FMulticastInlineDelegate OnWheelTapBoundsChange; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnWheelTapRelease; // 0x1b0(0x10)
	struct UWidget* VisualWheelMenu; // 0x1c0(0x08)
	char pad_1C8[0x88]; // 0x1c8(0x88)
};

// Class ShooterGame.AresTouchWidgetComponentInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchWidgetComponentInterface : UInterface {

	void SetParentTouchWidget(struct UAresTouchWidget* ParentTouchWidget); // Function ShooterGame.AresTouchWidgetComponentInterface.SetParentTouchWidget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x36a7e30
	void GetParentTouchWidget(struct UAresTouchWidget*& Result); // Function ShooterGame.AresTouchWidgetComponentInterface.GetParentTouchWidget // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x37b0f60
};

// Class ShooterGame.AresTouchWidgetCTAInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchWidgetCTAInterface : UInterface {

	void SetWidgetCallToActionState(enum class EWidgetCallToActionState CallToActionState); // Function ShooterGame.AresTouchWidgetCTAInterface.SetWidgetCallToActionState // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37b44e0
	void BindWidgetCallToActionEvents(bool bBindEvents); // Function ShooterGame.AresTouchWidgetCTAInterface.BindWidgetCallToActionEvents // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37b0560
};

// Class ShooterGame.AresTracerInstance
// Size: 0x188 (Inherited: 0x178)
struct UAresTracerInstance : UAresTracerInstanceInterface {
	float LastTickTime; // 0x178(0x04)
	bool bImpacted; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float EndDistance; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
};

// Class ShooterGame.AresTracer
// Size: 0x660 (Inherited: 0x650)
struct AAresTracer : AAresTracerInterface {
	float BeamLength; // 0x648(0x04)
	float LastTickTime; // 0x64c(0x04)
	bool bImpacted; // 0x650(0x01)
	float EndDistance; // 0x654(0x04)
	char pad_65D[0x3]; // 0x65d(0x03)
};

// Class ShooterGame.AresTracerComponent
// Size: 0x290 (Inherited: 0x290)
struct UAresTracerComponent : USceneComponent {

	void TickTracer(struct UAresTracerInstanceInterface* Instance); // Function ShooterGame.AresTracerComponent.TickTracer // (Native|Event|Public|BlueprintEvent) // @ game+0x36eb970
	void StopTracer(struct UAresTracerInstanceInterface* Instance); // Function ShooterGame.AresTracerComponent.StopTracer // (Native|Event|Public|BlueprintEvent) // @ game+0x36a87e0
	void StartTracer(struct UAresTracerInstanceInterface* Instance); // Function ShooterGame.AresTracerComponent.StartTracer // (Native|Event|Public|BlueprintEvent) // @ game+0x36eb8e0
	void InitTracer(struct UAresTracerInstanceInterface* Instance); // Function ShooterGame.AresTracerComponent.InitTracer // (Native|Event|Public|BlueprintEvent) // @ game+0x37b1d20
};

// Class ShooterGame.AresTrailComponent
// Size: 0x128 (Inherited: 0xe8)
struct UAresTrailComponent : UActorComponent {
	struct UParticleSystem* TrailBeamParticleTemplate; // 0xe8(0x08)
	struct FLinearColor TrailColor; // 0xf0(0x10)
	float MinimumSegmentLength; // 0x100(0x04)
	float TrailFadeTime; // 0x104(0x04)
	enum class ETrailDrawRule DrawRule; // 0x108(0x01)
	bool bDrawInLoS; // 0x109(0x01)
	char pad_10A[0x2]; // 0x10a(0x02)
	float MaxTrailDistance; // 0x10c(0x04)
	char pad_110[0x18]; // 0x110(0x18)

	void OnShooterCharacterTeleported(struct AShooterCharacter* Character); // Function ShooterGame.AresTrailComponent.OnShooterCharacterTeleported // (Final|Native|Public) // @ game+0x37b20d0
	void OnOwnerActorTeleported(); // Function ShooterGame.AresTrailComponent.OnOwnerActorTeleported // (Final|Native|Public) // @ game+0x37b1f70
};

// Class ShooterGame.AresUIDirector
// Size: 0x58 (Inherited: 0x30)
struct UAresUIDirector : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	bool bUIStarted; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct UAresUIManager* UIManager; // 0x50(0x08)
};

// Class ShooterGame.UIGlobalsDataAsset
// Size: 0x148 (Inherited: 0x40)
struct UUIGlobalsDataAsset : UAresPlatformDataAsset {
	struct UCurveFloat* DPICurve; // 0x40(0x08)
	struct UAresUIDirector* UIDirector; // 0x48(0x08)
	struct UAresUIManager* UIManager; // 0x50(0x08)
	struct UAresDeveloperMenuScreen* DeveloperMenuScreen; // 0x58(0x08)
	struct TSoftClassPtr<UObject> SettingsScreenAsset; // 0x60(0x30)
	struct TSoftClassPtr<UObject> ExitGameScreenAsset; // 0x90(0x30)
	struct TArray<struct FAresUserWidgetAsset> AdditionalUserWidgets; // 0xc0(0x10)
	struct TArray<struct FAresGenericAsset> AdditionalAssets; // 0xd0(0x10)
	struct FAresFontStyle AresFontStyle; // 0xe0(0x68)
};

// Class ShooterGame.AresUIManager
// Size: 0x70 (Inherited: 0x30)
struct UAresUIManager : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	enum class EUIFocus OldFocus; // 0x48(0x01)
	enum class EUIMouseMode OldMouseMode; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct UAresUIScreen* Channels[0x3]; // 0x50(0x18)
	struct UShooterUICoordinator* UICoordinator; // 0x68(0x08)

	void UpdateFocus(); // Function ShooterGame.AresUIManager.UpdateFocus // (Final|Native|Private) // @ game+0x37b49c0
	void TickHighPrecisionMouse(); // Function ShooterGame.AresUIManager.TickHighPrecisionMouse // (Final|Native|Private) // @ game+0x37b4690
	struct FString TickDebugRawMouse(); // Function ShooterGame.AresUIManager.TickDebugRawMouse // (Final|Native|Private) // @ game+0x37b4610
	struct FString TickDebugFocus(); // Function ShooterGame.AresUIManager.TickDebugFocus // (Final|Native|Private) // @ game+0x37b4590
	void TickDebug(); // Function ShooterGame.AresUIManager.TickDebug // (Final|Native|Private) // @ game+0x37b4570
};

// Class ShooterGame.UINavigationGlobalsDataAsset
// Size: 0xe0 (Inherited: 0x40)
struct UUINavigationGlobalsDataAsset : UAresPlatformDataAsset {
	struct TMap<enum class EMenuShellGameLoop, struct UAresShellScreen*> MenuShells; // 0x40(0x50)
	struct TMap<struct FName, struct FUINavigationGlobalsEntry> MenuScreens; // 0x90(0x50)
};

// Class ShooterGame.UINavigationGlobalsBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UUINavigationGlobalsBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	struct UUINavigationGlobalsDataAsset* GetUINavigationGlobalsForObject(struct UObject* Requester); // Function ShooterGame.UINavigationGlobalsBlueprintFunctionLibrary.GetUINavigationGlobalsForObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b1450
};

// Class ShooterGame.AresUIPropertyRegistry
// Size: 0x5d0 (Inherited: 0x30)
struct UAresUIPropertyRegistry : UObject {
	char pad_30[0x5a0]; // 0x30(0x5a0)

	void UpdateVector2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateVector2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4e00
	void UpdateTexture2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateTexture2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4d50
	void UpdateTextPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateTextPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4ca0
	void UpdateMaterialInterfacePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateMaterialInterfacePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4bf0
	void UpdateMaterialInstancePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateMaterialInstancePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4b40
	void UpdateLinearColorPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateLinearColorPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4a90
	void UpdateIntPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateIntPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b49e0
	void UpdateFloatPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateFloatPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4910
	void UpdateBoolPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateBoolPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4860
	void UpdateAllDefaultValues(); // Function ShooterGame.AresUIPropertyRegistry.UpdateAllDefaultValues // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4840
	void SetVector2DPropertyValue(struct FString PropertyID, struct FVector2D NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetVector2DPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37b43f0
	void SetVector2DPropertyDefaultValue(struct FString PropertyID, struct FVector2D NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetVector2DPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37b4300
	void SetTexture2DPropertyValue(struct FString PropertyID, struct UTexture2D* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTexture2DPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4210
	void SetTexture2DPropertyDefaultValue(struct FString PropertyID, struct UTexture2D* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTexture2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b4120
	void SetTextPropertyValue(struct FString PropertyID, struct FText NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTextPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3fc0
	void SetTextPropertyDefaultValue(struct FString PropertyID, struct FText NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTextPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3e60
	void SetPropertyValues(struct FAresUIPropertyMap& NewPropertyValues, bool bOnlyUpdateExistingKeys, bool bRemoveMissingKeys); // Function ShooterGame.AresUIPropertyRegistry.SetPropertyValues // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b3cf0
	void SetMaterialInterfacePropertyValue(struct FString PropertyID, struct UMaterialInterface* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInterfacePropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3c00
	void SetMaterialInterfacePropertyDefaultValue(struct FString PropertyID, struct UMaterialInterface* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInterfacePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3b10
	void SetMaterialInstancePropertyValue(struct FString PropertyID, struct UMaterialInstance* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInstancePropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3a20
	void SetMaterialInstancePropertyDefaultValue(struct FString PropertyID, struct UMaterialInstance* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInstancePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3930
	void SetLinearColorPropertyValue(struct FString PropertyID, struct FLinearColor NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetLinearColorPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37b3840
	void SetLinearColorPropertyDefaultValue(struct FString PropertyID, struct FLinearColor NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetLinearColorPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37b3750
	void SetIntPropertyValue(struct FString PropertyID, int32_t NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetIntPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3660
	void SetIntPropertyDefaultValue(struct FString PropertyID, int32_t NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetIntPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3570
	void SetFloatPropertyValue(struct FString PropertyID, float NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetFloatPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3480
	void SetFloatPropertyDefaultValue(struct FString PropertyID, float NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetFloatPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3390
	void SetBoolPropertyValue(struct FString PropertyID, bool NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetBoolPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b32a0
	void SetBoolPropertyDefaultValue(struct FString PropertyID, bool NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetBoolPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x37b31b0
	void ResetVector2DPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetVector2DPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3100
	void ResetTexture2DPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetTexture2DPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b3050
	void ResetTextPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetTextPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2fa0
	void ResetMaterialInterfacePropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetMaterialInterfacePropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2ef0
	void ResetMaterialInstancePropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetMaterialInstancePropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2e40
	void ResetLinearColorPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetLinearColorPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2d90
	void ResetIntPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetIntPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2ce0
	void ResetFloatPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetFloatPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2c30
	void ResetBoolPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetBoolPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x37b2b80
	void RemoveVector2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveVector2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b2a60
	void RemoveTexture2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveTexture2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b2940
	void RemoveTextPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveTextPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b2820
	void RemoveMaterialInterfacePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveMaterialInterfacePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b2700
	void RemoveMaterialInstancePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveMaterialInstancePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b25e0
	void RemoveLinearColorPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveLinearColorPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b24c0
	void RemoveIntPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveIntPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b23a0
	void RemoveFloatPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveFloatPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b2280
	void RemoveBoolPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveBoolPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b2160
	bool HasVector2DProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasVector2DProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1c60
	bool HasTexture2DProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasTexture2DProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1ba0
	bool HasTextProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasTextProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1ae0
	bool HasMaterialInterfaceProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasMaterialInterfaceProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1a20
	bool HasMaterialInstanceProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasMaterialInstanceProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1960
	bool HasLinearColorProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasLinearColorProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b18a0
	bool HasIntProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasIntProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b17e0
	bool HasFloatProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasFloatProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1720
	bool HasBoolProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasBoolProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b1660
	struct FVector2D GetVector2DPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetVector2DPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37b15a0
	struct FVector2D GetVector2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetVector2DPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37b14e0
	struct UTexture2D* GetTexture2DPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTexture2DPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b1300
	struct UTexture2D* GetTexture2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTexture2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b1240
	struct FText GetTextPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTextPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b1120
	struct FText GetTextPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTextPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b1000
	struct UMaterialInterface* GetMaterialInterfacePropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInterfacePropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0ea0
	struct UMaterialInterface* GetMaterialInterfacePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInterfacePropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0de0
	struct UMaterialInstance* GetMaterialInstancePropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInstancePropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0d20
	struct UMaterialInstance* GetMaterialInstancePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInstancePropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0c60
	struct FLinearColor GetLinearColorPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetLinearColorPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37b0ba0
	struct FLinearColor GetLinearColorPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetLinearColorPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37b0ae0
	int32_t GetIntPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetIntPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0a20
	int32_t GetIntPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetIntPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0960
	float GetFloatPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetFloatPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b08a0
	float GetFloatPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetFloatPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b07e0
	bool GetBoolPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetBoolPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0720
	bool GetBoolPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetBoolPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37b0660
	struct FAresUIPropertyMap GeneratePropertyMap(); // Function ShooterGame.AresUIPropertyRegistry.GeneratePropertyMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37b05f0
	void AddVector2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddVector2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b03f0
	void AddTexture2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddTexture2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b0280
	void AddTextPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddTextPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37b0110
	void AddMaterialInterfacePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddMaterialInterfacePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37affa0
	void AddMaterialInstancePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddMaterialInstancePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37afe30
	void AddLinearColorPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddLinearColorPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37afcc0
	void AddIntPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddIntPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37afb50
	void AddFloatPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddFloatPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37af9e0
	void AddBoolPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddBoolPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37af870
};

// Class ShooterGame.AresUIStateProvider
// Size: 0x58 (Inherited: 0x30)
struct UAresUIStateProvider : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct FUIDependentState> DependentStates; // 0x48(0x10)
};

// Class ShooterGame.AresSettingStateProvider
// Size: 0x60 (Inherited: 0x58)
struct UAresSettingStateProvider : UAresUIStateProvider {
	struct UAresSettingUIData* DependentDataAsset; // 0x58(0x08)
};

// Class ShooterGame.AresBoolSettingStateProvider
// Size: 0x78 (Inherited: 0x60)
struct UAresBoolSettingStateProvider : UAresSettingStateProvider {
	char pad_60[0x14]; // 0x60(0x14)
	enum class EAresBoolSettingName BoolDependentSetting; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)

	void HandleDependentBoolSettingUpdated(enum class EAresBoolSettingName BoolSettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresBoolSettingStateProvider.HandleDependentBoolSettingUpdated // (Final|Native|Protected) // @ game+0x37ba770
};

// Class ShooterGame.AresCycleSettingStateProvider
// Size: 0x80 (Inherited: 0x60)
struct UAresCycleSettingStateProvider : UAresSettingStateProvider {
	char pad_60[0x1c]; // 0x60(0x1c)
	enum class EAresIntSettingName IntDependentSetting; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)

	void HandleDependentIntSettingUpdated(enum class EAresIntSettingName BoolSettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresCycleSettingStateProvider.HandleDependentIntSettingUpdated // (Final|Native|Protected) // @ game+0x37ba9a0
};

// Class ShooterGame.AresSliderSettingStateProvider
// Size: 0xc8 (Inherited: 0x60)
struct UAresSliderSettingStateProvider : UAresSettingStateProvider {
	char pad_60[0x30]; // 0x60(0x30)
	struct TArray<struct FSliderRange> UserSliderStates; // 0x90(0x10)
	float CachedMin; // 0xa0(0x04)
	float CachedMax; // 0xa4(0x04)
	float CachedStep; // 0xa8(0x04)
	char pad_AC[0x14]; // 0xac(0x14)
	enum class EAresFloatSettingName FloatDependentSetting; // 0xc0(0x01)
	enum class EAresIntSettingName IntDependentSetting; // 0xc1(0x01)
	bool bIsFloatSlider; // 0xc2(0x01)
	char pad_C3[0x5]; // 0xc3(0x05)

	void HandleDependentIntSettingUpdated(enum class EAresIntSettingName BoolSettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresSliderSettingStateProvider.HandleDependentIntSettingUpdated // (Final|Native|Protected) // @ game+0x37baab0
	void HandleDependentFloatSettingUpdated(enum class EAresFloatSettingName BoolSettingName, float OldValue, float NewValue); // Function ShooterGame.AresSliderSettingStateProvider.HandleDependentFloatSettingUpdated // (Final|Native|Protected) // @ game+0x37ba890
};

// Class ShooterGame.AresUniversalButtonWidget
// Size: 0x320 (Inherited: 0x2c8)
struct UAresUniversalButtonWidget : UUserWidget {
	struct FMulticastInlineDelegate OnClicked; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnButtonPressed; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnButtonReleased; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnButtonEntered; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnButtonExited; // 0x308(0x10)
	bool bAnyMouseButtonCanTriggerClickEvent; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)

	void SetEnabled(bool bInValue); // Function ShooterGame.AresUniversalButtonWidget.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x37bb630
	void SetDisabled(bool bIsDisabled); // Function ShooterGame.AresUniversalButtonWidget.SetDisabled // (Final|Native|Public|BlueprintCallable) // @ game+0x37bb5a0
	bool IsDesignerPreview(); // Function ShooterGame.AresUniversalButtonWidget.IsDesignerPreview // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2865b20
	void HandleEnabledChanged(bool bNowEnabled); // Function ShooterGame.AresUniversalButtonWidget.HandleEnabledChanged // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleButtonReleased(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonReleased // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleButtonPressed(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonPressed // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleButtonExited(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonExited // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleButtonEntered(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonEntered // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void HandleButtonClicked(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonClicked // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.AresVisionConesWidget
// Size: 0x340 (Inherited: 0x2c8)
struct UAresVisionConesWidget : UUserWidget {
	struct UMaterialInterface* Material; // 0x2c8(0x08)
	struct UMaterialInterface* ObserverMaterial; // 0x2d0(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x2d8(0x08)
	char pad_2E0[0x60]; // 0x2e0(0x60)
};

// Class ShooterGame.AresVoiceParticipantViewModel
// Size: 0x118 (Inherited: 0x48)
struct UAresVoiceParticipantViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnPrimaryVoiceSessionTypeChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnIsInRoomChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnIsMutedChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnIsRestrictedChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnIsPTTPressedChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnIsSpeakingChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnEnergyChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnVolumeChanged; // 0xb8(0x10)
	char pad_C8[0x20]; // 0xc8(0x20)
	struct UVoiceModel* VoiceModel; // 0xe8(0x08)
	struct UVoiceSessionParticipantModel* PartyVoiceSessionParticipantModel; // 0xf0(0x08)
	struct UVoiceSessionParticipantModel* TeamVoiceSessionParticipantModel; // 0xf8(0x08)
	char pad_100[0x18]; // 0x100(0x18)

	void SetObservedPlayer(struct FString InPlayerSubject); // Function ShooterGame.AresVoiceParticipantViewModel.SetObservedPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x37bb750
	void Initialize(bool bInBindToPartyVoice, bool bInBindToTeamVoice); // Function ShooterGame.AresVoiceParticipantViewModel.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x37bb070
	void HandleVolumeChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleVolumeChanged // (Final|Native|Private) // @ game+0x37baff0
	void HandleVoiceSessionParticipantRemoved(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.AresVoiceParticipantViewModel.HandleVoiceSessionParticipantRemoved // (Final|Native|Private) // @ game+0x37baf60
	void HandleVoiceSessionParticipantAdded(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.AresVoiceParticipantViewModel.HandleVoiceSessionParticipantAdded // (Final|Native|Private) // @ game+0x37baed0
	void HandleIsSpeakingChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleIsSpeakingChanged // (Final|Native|Private) // @ game+0x37bae40
	void HandleIsRestrictedChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleIsRestrictedChanged // (Final|Native|Private) // @ game+0x37badc0
	void HandleIsPTTPressedChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleIsPTTPressedChanged // (Final|Native|Private) // @ game+0x37bad40
	void HandleIsMutedChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleIsMutedChanged // (Final|Native|Private) // @ game+0x37bacc0
	void HandleIsInRoomChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleIsInRoomChanged // (Final|Native|Private) // @ game+0x37bac40
	void HandleEnergyChanged(struct UObject* Source); // Function ShooterGame.AresVoiceParticipantViewModel.HandleEnergyChanged // (Final|Native|Private) // @ game+0x37babc0
	int32_t GetVolume(); // Function ShooterGame.AresVoiceParticipantViewModel.GetVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba750
	enum class EVoiceSessionType GetPrimaryVoiceSession(); // Function ShooterGame.AresVoiceParticipantViewModel.GetPrimaryVoiceSession // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba700
	float GetNormalizedVolume(); // Function ShooterGame.AresVoiceParticipantViewModel.GetNormalizedVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba6b0
	float GetNormalizedEnergy(); // Function ShooterGame.AresVoiceParticipantViewModel.GetNormalizedEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba690
	bool GetIsSpeaking(); // Function ShooterGame.AresVoiceParticipantViewModel.GetIsSpeaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba670
	bool GetIsRestricted(); // Function ShooterGame.AresVoiceParticipantViewModel.GetIsRestricted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba650
	bool GetIsPTTPressed(); // Function ShooterGame.AresVoiceParticipantViewModel.GetIsPTTPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba630
	bool GetIsMuted(); // Function ShooterGame.AresVoiceParticipantViewModel.GetIsMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba610
	bool GetIsInRoom(); // Function ShooterGame.AresVoiceParticipantViewModel.GetIsInRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba5f0
	int32_t GetEnergy(); // Function ShooterGame.AresVoiceParticipantViewModel.GetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b01e0
};

// Class ShooterGame.AresWallPenetration
// Size: 0x48 (Inherited: 0x30)
struct UAresWallPenetration : UObject {
	float EnergyReductionMultiplier; // 0x30(0x04)
	bool bParticipatesInAirDropoff; // 0x34(0x01)
	bool bShowsRicochet; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	struct FString DebugWallPenetrationTypeName; // 0x38(0x10)
};

// Class ShooterGame.AresWallPenetrationGlobals
// Size: 0x8a0 (Inherited: 0x30)
struct UAresWallPenetrationGlobals : UObject {
	bool bShowWallPenHitConfirms; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TSoftClassPtr<UObject> WallPenetrationType[0x24]; // 0x38(0x6c0)
	struct UAresWallPenetration* WallPenetrationTypeCDOCached[0x24]; // 0x6f8(0x120)
	struct FRuntimeFloatCurve GlobalPenetrationCurve; // 0x818(0x88)
};

// Class ShooterGame.AresWatermarkManager
// Size: 0xe8 (Inherited: 0x80)
struct UAresWatermarkManager : UInitSystem {
	struct URSOManager* RSOManager; // 0x80(0x08)
	struct UConfigManager* ConfigManager; // 0x88(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x90(0x08)
	struct UMaterialInstanceDynamic* UIMaterialInstance; // 0x98(0x08)
	struct UCanvasRenderTarget2D* CanvasRenderTarget; // 0xa0(0x08)
	struct FString WatermarkString; // 0xa8(0x10)
	bool bWatermarkEnabled; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float MinOpacity; // 0xbc(0x04)
	float MaxOpacity; // 0xc0(0x04)
	float MinUIOpacity; // 0xc4(0x04)
	float MaxUIOpacity; // 0xc8(0x04)
	float TilingFactor; // 0xcc(0x04)
	bool bInitialized; // 0xd0(0x01)
	char pad_D1[0x17]; // 0xd1(0x17)

	void RenderWatermark(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function ShooterGame.AresWatermarkManager.RenderWatermark // (Final|Native|Protected) // @ game+0x37bb490
	void OnWatermarkConfigChanged(); // Function ShooterGame.AresWatermarkManager.OnWatermarkConfigChanged // (Final|Native|Public) // @ game+0x37bb420
	void OnLevelLoaded(struct UWorld* World); // Function ShooterGame.AresWatermarkManager.OnLevelLoaded // (Final|Native|Public) // @ game+0x37bb2c0
	void OnGameFlowStateChanged(enum class EGameFlowStateType State); // Function ShooterGame.AresWatermarkManager.OnGameFlowStateChanged // (Final|Native|Public) // @ game+0x37bb240
};

// Class ShooterGame.AresWeaponAttachmentComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresWeaponAttachmentComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t AttachmentCost; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct UMeshComponent*> AddedMeshes; // 0xf8(0x10)
	struct UAresBasePrimaryDataAsset* DataAsset; // 0x108(0x08)
	struct UBaseInventoryModel* UIModel; // 0x110(0x08)

	void RemoveMeshFromParent(struct UStaticMeshComponent* MeshComponent); // Function ShooterGame.AresWeaponAttachmentComponent.RemoveMeshFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x37c3890
	void OnUIModelRecieved(struct UBaseInventoryModel* Model); // Function ShooterGame.AresWeaponAttachmentComponent.OnUIModelRecieved // (Final|Native|Public) // @ game+0x37c36f0
	void K2_OnAssetsLoaded(int32_t AssetTypes); // Function ShooterGame.AresWeaponAttachmentComponent.K2_OnAssetsLoaded // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void K2_GetPreloadAssetPaths(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.AresWeaponAttachmentComponent.K2_GetPreloadAssetPaths // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	struct UBaseInventoryModel* GetUIModel(); // Function ShooterGame.AresWeaponAttachmentComponent.GetUIModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37c3360
	struct FName GetSocketNameForReconstruction(); // Function ShooterGame.AresWeaponAttachmentComponent.GetSocketNameForReconstruction // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct TArray<struct UMaterialInterface*> GetMaterialOverridesForReconstruction(); // Function ShooterGame.AresWeaponAttachmentComponent.GetMaterialOverridesForReconstruction // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct UStaticMesh* Get3PMeshForReconstruction(); // Function ShooterGame.AresWeaponAttachmentComponent.Get3PMeshForReconstruction // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct USkeletalMeshComponent* AddSkeletalMeshToMesh(struct UMeshComponent* Parent, struct USkeletalMesh* MeshToSpawn, struct FName SocketName, bool bDisableCollision); // Function ShooterGame.AresWeaponAttachmentComponent.AddSkeletalMeshToMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x37c13d0
	struct UStaticMeshComponent* AddMeshToMesh(struct UMeshComponent* Parent, struct UStaticMesh* MeshToSpawn, struct FName SocketName, bool bDisableCollision); // Function ShooterGame.AresWeaponAttachmentComponent.AddMeshToMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x37c1240
};

// Class ShooterGame.AresWeaponSkinInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresWeaponSkinInterface : UInterface {
};

// Class ShooterGame.AresWidgetBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresWidgetBlueprintLibrary : UBlueprintFunctionLibrary {

	bool IsDesignTime(struct UWidget* Widget); // Function ShooterGame.AresWidgetBlueprintLibrary.IsDesignTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37c3390
	struct FVector2D GetTextDisplayDimensions(struct FString Text, struct FSlateFontInfo& Font, float FontScale); // Function ShooterGame.AresWidgetBlueprintLibrary.GetTextDisplayDimensions // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37c31c0
	void GetOptionTextsOfDataAsset(struct UAresSettingUIData* DataAsset, struct TArray<struct FText>& ArrayToAssign); // Function ShooterGame.AresWidgetBlueprintLibrary.GetOptionTextsOfDataAsset // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37c2e20
	struct FSlateBrush GetDesignTimeIconForInputActions(struct TArray<struct FDataTableRowHandle>& InputActions, struct FName& GamepadName); // Function ShooterGame.AresWidgetBlueprintLibrary.GetDesignTimeIconForInputActions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37c29a0
	struct TArray<struct UWidget*> GetAllWidgetsOfType(struct UUserWidget* Root, struct UWidget* ClassType, bool bExactMatch); // Function ShooterGame.AresWidgetBlueprintLibrary.GetAllWidgetsOfType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37c2850
	void DisableConditionalInputActions(struct UUserWidget* Root); // Function ShooterGame.AresWidgetBlueprintLibrary.DisableConditionalInputActions // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37c26e0
	struct UBlueprint* CreateBlueprintClassFromSelectedAndActor(struct FString Path, struct AActor* Parent, struct TArray<struct AActor*>& Actors, bool bReplaceActors, bool bOpenBlueprint); // Function ShooterGame.AresWidgetBlueprintLibrary.CreateBlueprintClassFromSelectedAndActor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37c2500
	struct UBlueprint* CreateBlueprintClassFromSelected(struct FString Path, struct UObject* Parent, struct TArray<struct AActor*>& Actors, bool bReplaceActors, bool bOpenBlueprint); // Function ShooterGame.AresWidgetBlueprintLibrary.CreateBlueprintClassFromSelected // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37c2500
};

// Class ShooterGame.AresWidgetComponent
// Size: 0x890 (Inherited: 0x6c0)
struct UAresWidgetComponent : UWidgetComponent {
	enum class EAresWidgetPlayerVisibility PlayerVisibility; // 0x6b8(0x01)
	bool bAliveOnly; // 0x6b9(0x01)
	struct FNormalizedScreenDistanceCheck VisibleScreenDistanceCheck; // 0x6bc(0x08)
	struct FRuntimeFloatCurve OpacityWorldDistanceCurve; // 0x6c8(0x88)
	struct FRuntimeFloatCurve OpacityScreenDistanceCurve; // 0x750(0x88)
	struct FRuntimeFloatCurve ScaleDistanceCurve; // 0x7d8(0x88)
	char pad_862[0x9]; // 0x862(0x09)
	bool bAllowTeamComponentCachingOptimization; // 0x86b(0x01)
	char pad_86C[0x4]; // 0x86c(0x04)
	struct UBaseTeamComponent* CachedOwnerTeamComponent; // 0x870(0x08)
	struct UBaseTeamComponent* CachedLocalPlayerControllerTeamComponent; // 0x878(0x08)
	struct AActor* CachedViewTarget; // 0x880(0x08)
	struct UPlayspaceComponent* OwnerPlayspaceComponent; // 0x888(0x08)

	void RefreshViewTargetValues(); // Function ShooterGame.AresWidgetComponent.RefreshViewTargetValues // (Final|Native|Private) // @ game+0x37c3870
	void RefreshOwnerAlive(); // Function ShooterGame.AresWidgetComponent.RefreshOwnerAlive // (Final|Native|Private) // @ game+0x37c3850
	void RefreshObserverOutlines(); // Function ShooterGame.AresWidgetComponent.RefreshObserverOutlines // (Final|Native|Private) // @ game+0x37c3830
	void RefreshLocalAlliance(); // Function ShooterGame.AresWidgetComponent.RefreshLocalAlliance // (Final|Native|Private) // @ game+0x37c3810
	void OnViewTargetChanged(struct FViewTargetInfo& Info); // Function ShooterGame.AresWidgetComponent.OnViewTargetChanged // (Final|Native|Private|HasOutParms) // @ game+0x37c3780
	void OnViewedPlayspacesChanged(struct APlayerController* ViewingController); // Function ShooterGame.AresWidgetComponent.OnViewedPlayspacesChanged // (Final|Native|Private) // @ game+0x37c3660
	void OnOwnerPlayspaceChanged(struct UPlayspaceComponent* PlayspaceComponent); // Function ShooterGame.AresWidgetComponent.OnOwnerPlayspaceChanged // (Final|Native|Private) // @ game+0x37c3660
	void OnOwnerDamageableComponentAliveStateChanged(bool bAlive); // Function ShooterGame.AresWidgetComponent.OnOwnerDamageableComponentAliveStateChanged // (Final|Native|Private) // @ game+0x37c35d0
	bool GetDesiredVisibility(struct APlayerController* LocalPlayerController, struct FVector2D& ScreenDistanceToViewpointNormalized01, float AspectRatio); // Function ShooterGame.AresWidgetComponent.GetDesiredVisibility // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x37c2cf0
	struct FVector2D GetDesiredScale(float InWorldDistanceToViewpoint); // Function ShooterGame.AresWidgetComponent.GetDesiredScale // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x37c2c40
	float GetDesiredOpacity(float InWorldDistanceToViewpoint, struct FVector2D& ScreenDistanceToViewpointNormalized01); // Function ShooterGame.AresWidgetComponent.GetDesiredOpacity // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x37c2b50
};

// Class ShooterGame.AresWidgetOwningCharacterInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresWidgetOwningCharacterInterface : UInterface {

	void UnbindEventFromOwningCharacterChanged(struct FDelegate& Event); // Function ShooterGame.AresWidgetOwningCharacterInterface.UnbindEventFromOwningCharacterChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x365eb00
	struct AShooterCharacter* FetchOwningCharacter(); // Function ShooterGame.AresWidgetOwningCharacterInterface.FetchOwningCharacter // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37c2760
	void BindEventToOwningCharacterChanged(struct FDelegate& Event); // Function ShooterGame.AresWidgetOwningCharacterInterface.BindEventToOwningCharacterChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x365da90
};

// Class ShooterGame.AresWidgetRegistry
// Size: 0x90 (Inherited: 0x30)
struct UAresWidgetRegistry : UObject {
	struct TMap<struct UUserWidget*, struct TSoftObjectPtr<UUserWidget>> WidgetLookup; // 0x30(0x50)
	struct FName WorldContextHandle; // 0x80(0x0c)
	char pad_8C[0x4]; // 0x8c(0x04)

	void Reset(); // Function ShooterGame.AresWidgetRegistry.Reset // (Final|Native|Protected) // @ game+0x37c39f0
	void RemoveWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.AresWidgetRegistry.RemoveWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37c3920
	struct UUserWidget* LookupWidget(struct UUserWidget* WidgetClass); // Function ShooterGame.AresWidgetRegistry.LookupWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37c3460
	struct UAresWidgetRegistry* GET(struct UObject* WorldContextObject); // Function ShooterGame.AresWidgetRegistry.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37c27c0
	void AddWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.AresWidgetRegistry.AddWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37c1560
};

// Class ShooterGame.AresWidgetSwitcher
// Size: 0x188 (Inherited: 0x178)
struct UAresWidgetSwitcher : UWidgetSwitcher {
	char pad_178[0x10]; // 0x178(0x10)
};

// Class ShooterGame.AresWorldSettings
// Size: 0x6d0 (Inherited: 0x5a0)
struct AAresWorldSettings : AWorldSettings {
	bool bDrawMinimapForThisLevel; // 0x5a0(0x01)
	char pad_5A1[0x7]; // 0x5a1(0x07)
	struct UTexture2D* MinimapOverlay; // 0x5a8(0x08)
	struct TArray<struct FMinimapFloorConfig> MinimapFloors; // 0x5b0(0x10)
	struct UTexture2D* MegamapOverlay; // 0x5c0(0x08)
	struct UTexture2D* MinimapVisionOverlay; // 0x5c8(0x08)
	struct UTexture2D* MinimapDangerZoneOverlay; // 0x5d0(0x08)
	struct UTexture2D* MinimapDangerZoneLUT; // 0x5d8(0x08)
	struct UDataTable* MinimapVisionOccluders; // 0x5e0(0x08)
	float DefaultMinimapRotation; // 0x5e8(0x04)
	float DefaultTeamMinimapRotation; // 0x5ec(0x04)
	float OtherTeamMinimapRotation; // 0x5f0(0x04)
	char pad_5F4[0x4]; // 0x5f4(0x04)
	struct TArray<struct FVisionOccluderGroup> VisionOccluderGroups; // 0x5f8(0x10)
	bool bOverlayOverridesMinimap; // 0x608(0x01)
	bool bProceduralOverlayOverridesMinimap; // 0x609(0x01)
	char pad_60A[0x6]; // 0x60a(0x06)
	struct TMap<struct FString, struct FCalloutRegion> CalloutRegions; // 0x610(0x50)
	bool bDeathCamEnabledOnMap; // 0x660(0x01)
	char pad_661[0x7]; // 0x661(0x07)
	struct TArray<struct FGameModeSpecificSublevelsByKey> GameModeSpecificSublevelsByKey; // 0x668(0x10)
	struct TArray<struct TSoftObjectPtr<UWorld>> ClientOnlySublevels; // 0x678(0x10)
	struct FMulticastInlineDelegate OnVisionOccludersGenerated; // 0x688(0x10)
	struct FMaterialParamCollectionOverrides MaterialParamCollectionOverrides; // 0x698(0x10)
	struct URPCManager* RPCManager; // 0x6a8(0x08)
	struct UGameFeatureTogglesComponent* GameFeatureTogglesComponent; // 0x6b0(0x08)
	struct AShooterHUD* LocalShooterHUD; // 0x6b8(0x08)
	struct TArray<struct FDelegate> OnShooterHUDCreatedCallbacks; // 0x6c0(0x10)

	void OnLocalShooterHUDEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function ShooterGame.AresWorldSettings.OnLocalShooterHUDEndPlay // (Final|Native|Private) // @ game+0x37c3500
	struct TSet<struct TSoftObjectPtr<UWorld>> GetSublevelsToStreamForGameMode(struct AShooterGameMode* GameMode, struct TSet<enum class EGameModeSublevelKey> SubLevelKeys); // Function ShooterGame.AresWorldSettings.GetSublevelsToStreamForGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37c2f70
	void GenerateVisionOccluders(); // Function ShooterGame.AresWorldSettings.GenerateVisionOccluders // (Final|Native|Public) // @ game+0x37c27a0
	void CallNowOrWhenShooterHUDCreated(struct UObject* WorldContextObject, struct FDelegate Callback); // Function ShooterGame.AresWorldSettings.CallNowOrWhenShooterHUDCreated // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37c23c0
};

// Class ShooterGame.ArmorUIData
// Size: 0xa8 (Inherited: 0x90)
struct UArmorUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.ArmorDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UArmorDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Item; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
};

// Class ShooterGame.OrderedListModelBase
// Size: 0x48 (Inherited: 0x30)
struct UOrderedListModelBase : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.ArrayListModel
// Size: 0x68 (Inherited: 0x48)
struct UArrayListModel : UOrderedListModelBase {
	struct TArray<struct FWildcard> Items; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)

	void SwapRanges(struct FIndexRange& RangeA, struct FIndexRange& RangeB); // Function ShooterGame.ArrayListModel.SwapRanges // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37cdec0
	void RemoveItems(struct FIndexRange& Range); // Function ShooterGame.ArrayListModel.RemoveItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37cdb20
	void RemoveItemAt(int32_t IndexToRemove); // Function ShooterGame.ArrayListModel.RemoveItemAt // (Final|Native|Public|BlueprintCallable) // @ game+0x37cda90
	void NotifyItemsReplaced(struct FIndexRange& Range); // Function ShooterGame.ArrayListModel.NotifyItemsReplaced // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37cd8d0
	bool KeyMatchDynamicDelegate__DelegateSignature(struct FWildcard& Item, struct FWildcard& Key); // DelegateFunction ShooterGame.ArrayListModel.KeyMatchDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x40572e0
	struct UArrayListModel* Create(struct TArray<struct FWildcard>& InitialItems, struct FDelegate& KeyMatchDelegate, struct UObject* Outer); // Function ShooterGame.ArrayListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37ccfb0
	void Clear(); // Function ShooterGame.ArrayListModel.Clear // (Final|Native|Public|BlueprintCallable) // @ game+0x37ccf90
	void BP_SetKeyMatchFunction(struct FDelegate& NewValue); // Function ShooterGame.ArrayListModel.BP_SetKeyMatchFunction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37cced0
	void BP_SetItems(struct TArray<struct FWildcard>& NewValue); // Function ShooterGame.ArrayListModel.BP_SetItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37ccdf0
	void BP_ReplaceItems(int32_t StartIndex, struct TArray<struct FWildcard>& NewItems); // Function ShooterGame.ArrayListModel.BP_ReplaceItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37cccd0
	bool BP_RemoveItem(int32_t ItemToRemove); // Function ShooterGame.ArrayListModel.BP_RemoveItem // (Final|Native|Public|BlueprintCallable) // @ game+0x358b3d0
	void BP_InsertItems(int32_t StartIndex, struct TArray<struct FWildcard>& NewItems); // Function ShooterGame.ArrayListModel.BP_InsertItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37ccbb0
	void BP_InsertItem(int32_t StartIndex, int32_t NewItem); // Function ShooterGame.ArrayListModel.BP_InsertItem // (Final|Native|Public|BlueprintCallable) // @ game+0x358b2b0
	struct FIndexRange BP_AppendItems(struct TArray<struct FWildcard>& NewItems); // Function ShooterGame.ArrayListModel.BP_AppendItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37ccab0
	int32_t BP_AddItem(int32_t NewItem); // Function ShooterGame.ArrayListModel.BP_AddItem // (Final|Native|Public|BlueprintCallable) // @ game+0x358b050
};

// Class ShooterGame.ArsenalViewController
// Size: 0xb0 (Inherited: 0x80)
struct UArsenalViewController : UInitSystem {
	struct UArsenalViewModel* ViewModel; // 0x80(0x08)
	struct UInventoryManager* InventoryManager; // 0x88(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x90(0x08)
	struct TArray<struct UEquippableInventoryModel*> GunModels; // 0x98(0x10)
	struct UConfigManager* ConfigManager; // 0xa8(0x08)

	void UnequipSpray(struct USprayEquipSlotDataAsset* SprayEquipSlot); // Function ShooterGame.ArsenalViewController.UnequipSpray // (Final|Native|Public|BlueprintCallable) // @ game+0x37ce040
	void UnequipBuddy(struct UEquippableDataAsset* Equippable); // Function ShooterGame.ArsenalViewController.UnequipBuddy // (Final|Native|Public|BlueprintCallable) // @ game+0x37cdfb0
	void SetSkinWithLevelAndChromaForGun(struct UEquippableDataAsset* Equippable, struct UEquippableSkinDataAsset* Skin, struct UEquippableSkinLevelDataAsset* SkinLevel, struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.ArsenalViewController.SetSkinWithLevelAndChromaForGun // (Final|Native|Public|BlueprintCallable) // @ game+0x37cdd60
	void SetSkinAndChromaForGun(struct UEquippableDataAsset* Equippable, struct UEquippableSkinDataAsset* Skin, struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.ArsenalViewController.SetSkinAndChromaForGun // (Final|Native|Public|BlueprintCallable) // @ game+0x37cdc50
	void RemoveSkin(struct UEquippableInventoryModel* Value); // Function ShooterGame.ArsenalViewController.RemoveSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x37cdbc0
	void RemoveAttachment(struct UEquippableAttachmentInventoryModel* AttachmentModel); // Function ShooterGame.ArsenalViewController.RemoveAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x37cda00
	void HandleOnEquippedContentChanged(); // Function ShooterGame.ArsenalViewController.HandleOnEquippedContentChanged // (Final|Native|Private) // @ game+0x37cd7f0
	void HandleDisableSkinUpgradesChanged(); // Function ShooterGame.ArsenalViewController.HandleDisableSkinUpgradesChanged // (Final|Native|Private) // @ game+0x37cd7d0
	struct UArsenalViewModel* GetViewModel(); // Function ShooterGame.ArsenalViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37cd7b0
	void EquipSpray(struct USprayEquipSlotDataAsset* SprayEquipSlot, struct USprayDataAsset* Spray); // Function ShooterGame.ArsenalViewController.EquipSpray // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd500
	void EquipSkin(struct UEquippableSkinInventoryModel* Value); // Function ShooterGame.ArsenalViewController.EquipSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd470
	void EquipPlayerTitle(struct UPlayerTitleDataAsset* PlayerTitle); // Function ShooterGame.ArsenalViewController.EquipPlayerTitle // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd3e0
	void EquipPlayerCard(struct UPlayerCardDataAsset* PlayerCard); // Function ShooterGame.ArsenalViewController.EquipPlayerCard // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd350
	void EquipLevelBorder(struct ULevelBorderDataAsset* LevelBorder); // Function ShooterGame.ArsenalViewController.EquipLevelBorder // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd2c0
	void EquipBuddy(struct UEquippableDataAsset* Equippable, struct UEquippableCharmInstanceInventoryModel* CharmInstance); // Function ShooterGame.ArsenalViewController.EquipBuddy // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd1f0
	void EquipAttachment(struct UEquippableAttachmentInventoryModel* AttachmentModel); // Function ShooterGame.ArsenalViewController.EquipAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd160
};

// Class ShooterGame.ArsenalViewModel
// Size: 0xb0 (Inherited: 0x30)
struct UArsenalViewModel : UObject {
	struct FMulticastInlineDelegate OnGunModelsChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnEquippedPlayerCardChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEquippedPlayerTitleChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnEquippedLevelBorderChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnSkinUpgradesDisabledChanged; // 0x70(0x10)
	struct TArray<struct UEquippableInventoryModel*> GunModels; // 0x80(0x10)
	struct UPlayerCardInventoryModel* EquippedPlayerCard; // 0x90(0x08)
	struct UPlayerTitleInventoryModel* EquippedPlayerTitle; // 0x98(0x08)
	struct ULevelBorderInventoryModel* EquippedLevelBorder; // 0xa0(0x08)
	bool bAreSkinUpgradesDisabled; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)

	struct TArray<struct UEquippableInventoryModel*> GetGunModels(); // Function ShooterGame.ArsenalViewModel.GetGunModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cd730
	struct UPlayerTitleInventoryModel* GetEquippedPlayerTitle(); // Function ShooterGame.ArsenalViewModel.GetEquippedPlayerTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cd700
	struct UPlayerCardInventoryModel* GetEquippedPlayerCard(); // Function ShooterGame.ArsenalViewModel.GetEquippedPlayerCard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cd6d0
	struct ULevelBorderInventoryModel* GetEquippedLevelBorder(); // Function ShooterGame.ArsenalViewModel.GetEquippedLevelBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cd6a0
	bool AreSkinUpgradesDisabled(); // Function ShooterGame.ArsenalViewModel.AreSkinUpgradesDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cc870
};

// Class ShooterGame.AssistTrackingComponent
// Size: 0x238 (Inherited: 0xe8)
struct UAssistTrackingComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float DamageRequiredForAssist; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct FGameplayTag> BuffAssistTags; // 0xf8(0x10)
	struct TArray<struct FGameplayTag> DebuffAssistTags; // 0x108(0x10)
	struct TArray<struct FDamagingAssistThreshold> DamagingAssistThresholds; // 0x118(0x10)
	struct FSoftObjectPath DevOnlyAssistDefinitionDataTable; // 0x128(0x20)
	struct TMap<struct FGameplayTag, enum class EAresAssistType> AssistDefinitions; // 0x148(0x50)
	struct TMap<struct AShooterPlayerState*, float> DamageTracking; // 0x198(0x50)
	struct TMap<struct AShooterPlayerState*, struct FDamageTrackingEntry> TimedDamageTracking; // 0x1e8(0x50)

	void AuthOnOwningCharacterTookDamage(struct AShooterCharacter* VictimCharacter, struct AController* DamageInstigator, struct AActor* DamageCauser, float Damage); // Function ShooterGame.AssistTrackingComponent.AuthOnOwningCharacterTookDamage // (Final|Native|Private) // @ game+0x37cc950
};

// Class ShooterGame.AttachedAbilityObjectComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UAttachedAbilityObjectComponent : UActorComponent {
	enum class ERemovalType RemovalType; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class ShooterGame.DamageSectionComponent
// Size: 0x148 (Inherited: 0xe8)
struct UDamageSectionComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate AuthOnSectionDamaged; // 0xf0(0x10)
	struct FMulticastInlineDelegate AuthOnSectionDestroyed; // 0x100(0x10)
	struct FMulticastInlineDelegate AuthOnSectionHealed; // 0x110(0x10)
	struct UDamageableComponent* DamageOwner; // 0x120(0x08)
	enum class DamageSectionType Type; // 0x128(0x01)
	bool bCanBeDestroyed; // 0x129(0x01)
	char pad_12A[0x2]; // 0x12a(0x02)
	uint32_t Priority; // 0x12c(0x04)
	bool bAlive; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	float Life; // 0x134(0x04)
	float MaximumLife; // 0x138(0x04)
	float DamageScale; // 0x13c(0x04)
	bool bAllowDamagePenetration; // 0x140(0x01)
	bool bCanBeHealed; // 0x141(0x01)
	char pad_142[0x6]; // 0x142(0x06)

	void OnRep_MaximumLife(); // Function ShooterGame.DamageSectionComponent.OnRep_MaximumLife // (Final|Native|Private) // @ game+0x3890f20
	void OnRep_Life(); // Function ShooterGame.DamageSectionComponent.OnRep_Life // (Final|Native|Private) // @ game+0x3890f20
	void MulticastNotifySetLife(float NewLife, bool bNewAlive); // Function ShooterGame.DamageSectionComponent.MulticastNotifySetLife // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3890e40
	bool IsAlive(); // Function ShooterGame.DamageSectionComponent.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ac5ef0
	enum class DamageSectionType GetType(); // Function ShooterGame.DamageSectionComponent.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890e10
	float GetNormalizedLife(); // Function ShooterGame.DamageSectionComponent.GetNormalizedLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890db0
	float GetMaximumLife(); // Function ShooterGame.DamageSectionComponent.GetMaximumLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890d80
	float GetLife(); // Function ShooterGame.DamageSectionComponent.GetLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890d50
	bool GetCanBeDestroyed(); // Function ShooterGame.DamageSectionComponent.GetCanBeDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38909f0
	void AuthSetMaximumLife(float NewMaximumLife); // Function ShooterGame.DamageSectionComponent.AuthSetMaximumLife // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthSetLife(float NewLife); // Function ShooterGame.DamageSectionComponent.AuthSetLife // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	float AuthRestore(struct AController* EventInstigator, struct AActor* HealCauser); // Function ShooterGame.DamageSectionComponent.AuthRestore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x38907d0
	float AuthDestroy(struct FDamageEvent& DamageEvent, struct AController* EventInstigator, struct AActor* DamageCauser, bool bForceDie); // Function ShooterGame.DamageSectionComponent.AuthDestroy // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3890640
	float AuthApplyDamage(float Damage, struct UDamageType* DamageType, struct AController* EventInstigator, struct AActor* DamageCauser, struct ADamageSource* DamageSource, enum class EAresRegionalDamage RegionalDamage, float& DamageApplied, float& DamageRemaining, bool bSimulation); // Function ShooterGame.DamageSectionComponent.AuthApplyDamage // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3890360
};

// Class ShooterGame.AttachedDamageSectionComponent
// Size: 0x150 (Inherited: 0x148)
struct UAttachedDamageSectionComponent : UDamageSectionComponent {
	struct UDamageableComponent* LastKnownDamageOwner; // 0x148(0x08)

	void OnRep_LastKnownDamageOwner(struct UDamageableComponent* OldValue); // Function ShooterGame.AttachedDamageSectionComponent.OnRep_LastKnownDamageOwner // (Final|Native|Protected) // @ game+0x37cd970
	void MulticastSetNewDamageOwner(struct UDamageableComponent* NewDamageOwner); // Function ShooterGame.AttachedDamageSectionComponent.MulticastSetNewDamageOwner // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x37cd840
	void MulticastClearDamageOwner(); // Function ShooterGame.AttachedDamageSectionComponent.MulticastClearDamageOwner // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x37cd810
	void AuthDetachDamageSection(); // Function ShooterGame.AttachedDamageSectionComponent.AuthDetachDamageSection // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37cc930
	void AuthAttachDamageSection(struct UDamageableComponent* Component); // Function ShooterGame.AttachedDamageSectionComponent.AuthAttachDamageSection // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37cc8a0
};

// Class ShooterGame.AttachmentControllerComponent
// Size: 0x2c0 (Inherited: 0x290)
struct UAttachmentControllerComponent : USceneComponent {
	struct TArray<struct USceneComponent*> ManagedAttachments; // 0x288(0x10)
	bool bShowInFirstPerson; // 0x298(0x01)
	struct FAttachmentSettings FirstPersonSettings; // 0x29c(0x0c)
	bool bShowInThirdPerson; // 0x2a8(0x01)
	struct FAttachmentSettings ThirdPersonSettings; // 0x2ac(0x0c)
	char pad_2BA[0x6]; // 0x2ba(0x06)

	struct FAttachmentSettings GetAttachmentSettings(enum class EAttachmentPerspective AttachmentPerspective); // Function ShooterGame.AttachmentControllerComponent.GetAttachmentSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cd5d0
};

// Class ShooterGame.AudioOccluderMaterial
// Size: 0x118 (Inherited: 0x88)
struct UAudioOccluderMaterial : UPhysicalMaterial {
	enum class EAudioOcclusionOperation OcclusionOperation; // 0x88(0x01)
	enum class EAudioOcclusionType OcclusionType; // 0x89(0x01)
	char pad_8A[0x2]; // 0x8a(0x02)
	float FixedOcclusionAmount; // 0x8c(0x04)
	struct FRuntimeFloatCurve DistanceToOcclusionCurve; // 0x90(0x88)
};

// Class ShooterGame.AudioVisualizationDispatcherComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UAudioVisualizationDispatcherComponent : UActorComponent {
	struct FMulticastInlineDelegate HandleAudioVisualization; // 0xe8(0x10)

	bool GetAudioVisEnabled(); // Function ShooterGame.AudioVisualizationDispatcherComponent.GetAudioVisEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37cd670
};

// Class ShooterGame.AudioVisualizerWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAudioVisualizerWidget : UUserWidget {

	void VisualizeSound(enum class EVisualizedSoundTypes SoundType, struct AActor* OwningActor, struct FVector Location, float SoundFacingAngle); // Function ShooterGame.AudioVisualizerWidget.VisualizeSound // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.CountdownTimerComponent
// Size: 0x108 (Inherited: 0xe8)
struct UCountdownTimerComponent : UActorComponent {
	float AuthTime; // 0xe8(0x04)
	float AuthInitTime; // 0xec(0x04)
	struct FTimerState AuthTimerState; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	float ClientPredictedTime; // 0xf4(0x04)
	float ClientInitTime; // 0xf8(0x04)
	struct FTimerState ClientTimerState; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float AllowedClientPredictionTimeDrift; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_AuthTimerState(struct FTimerState PreviousAuthTimerState); // Function ShooterGame.CountdownTimerComponent.OnRep_AuthTimerState // (Final|Native|Private) // @ game+0x3874a20
	void OnRep_AuthTime(float PreviousAuthTime); // Function ShooterGame.CountdownTimerComponent.OnRep_AuthTime // (Final|Native|Private) // @ game+0x38749a0
	void OnRep_AuthInitTime(float PreviousAuthInitTime); // Function ShooterGame.CountdownTimerComponent.OnRep_AuthInitTime // (Final|Native|Private) // @ game+0x3874920
};

// Class ShooterGame.AutoCountdownTimerComponent
// Size: 0x108 (Inherited: 0x108)
struct UAutoCountdownTimerComponent : UCountdownTimerComponent {
};

// Class ShooterGame.AutoEquipTransitionContext
// Size: 0x38 (Inherited: 0x30)
struct UAutoEquipTransitionContext : UStateTransitionContext {
	enum class EEquipSpeed AutoEquipSpeed; // 0x30(0x01)
	enum class EEquipSource EquipSource; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)

	void SetupAutoEquipTransition(enum class EEquipSpeed EquipSpeed, enum class EEquipSource Source); // Function ShooterGame.AutoEquipTransitionContext.SetupAutoEquipTransition // (Final|Native|Public|BlueprintCallable) // @ game+0x37d6bf0
	enum class EEquipSpeed GetAutoEquipSpeed(); // Function ShooterGame.AutoEquipTransitionContext.GetAutoEquipSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37d5f60
};

// Class ShooterGame.AutomationHelpers
// Size: 0x30 (Inherited: 0x30)
struct UAutomationHelpers : UObject {

	bool IsAutomationEnabled(); // Function ShooterGame.AutomationHelpers.IsAutomationEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x244a2b0
	struct UAresTestLogic* GetTestLogic(struct UObject* WorldContextObject); // Function ShooterGame.AutomationHelpers.GetTestLogic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x374b1f0
};

// Class ShooterGame.AutomationTestProgressModelWatcher
// Size: 0x80 (Inherited: 0x30)
struct UAutomationTestProgressModelWatcher : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct TScriptInterface<IProgressModel> ObservedObject; // 0x38(0x10)
	char pad_48[0x38]; // 0x48(0x38)

	void HandleProgressValueChanged(struct UObject* Source); // Function ShooterGame.AutomationTestProgressModelWatcher.HandleProgressValueChanged // (Final|Native|Protected) // @ game+0x37d63b0
	void HandleProgressStateChanged(struct UObject* Source); // Function ShooterGame.AutomationTestProgressModelWatcher.HandleProgressStateChanged // (Final|Native|Protected) // @ game+0x37d6320
	void HandleProgressCompleted(struct UObject* Source); // Function ShooterGame.AutomationTestProgressModelWatcher.HandleProgressCompleted // (Final|Native|Protected) // @ game+0x37d6290
};

// Class ShooterGame.AutomationTestAnimationConductorNodeWatcher
// Size: 0x98 (Inherited: 0x80)
struct UAutomationTestAnimationConductorNodeWatcher : UAutomationTestProgressModelWatcher {
	char pad_80[0x18]; // 0x80(0x18)

	void HandleCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.AutomationTestAnimationConductorNodeWatcher.HandleCueEvent // (Final|Native|Protected) // @ game+0x37d61b0
};

// Class ShooterGame.DebugListModelWatcherBase
// Size: 0x48 (Inherited: 0x30)
struct UDebugListModelWatcherBase : UObject {
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)

	void SetListModel(struct TScriptInterface<IOrderedListModel>& NewValue); // Function ShooterGame.DebugListModelWatcherBase.SetListModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3899110
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.DebugListModelWatcherBase.HandleListModelChange // (Native|Protected|HasOutParms) // @ game+0x3898b10
	struct TScriptInterface<IOrderedListModel> GetListModel(); // Function ShooterGame.DebugListModelWatcherBase.GetListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38989c0
};

// Class ShooterGame.AutomationTestDebugListModelWatcher
// Size: 0x70 (Inherited: 0x48)
struct UAutomationTestDebugListModelWatcher : UDebugListModelWatcherBase {
	char pad_48[0x28]; // 0x48(0x28)
};

// Class ShooterGame.AutoResetAnimationConductorNode
// Size: 0xd8 (Inherited: 0xa8)
struct UAutoResetAnimationConductorNode : UAnimationConductorNodeBase {
	struct TScriptInterface<IAnimationConductorNode> ChildNode; // 0xa8(0x10)
	struct FAnimationConductorNodeSignalCondition ChildNodeSettings; // 0xb8(0x14)
	char pad_CC[0xc]; // 0xcc(0x0c)

	void SetSettings(struct FAnimationConductorNodeSignalCondition InChildNodeSettings); // Function ShooterGame.AutoResetAnimationConductorNode.SetSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x37d6b40
	void SetChildNode(struct TScriptInterface<IAnimationConductorNode> InChildNode); // Function ShooterGame.AutoResetAnimationConductorNode.SetChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x37d6aa0
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.AutoResetAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x37d6120
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.AutoResetAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x37d6040
	struct UAutoResetAnimationConductorNode* Create(struct TScriptInterface<IAnimationConductorNode> ChildNode, struct FAnimationConductorNodeSignalCondition& ChildNodeSettings, struct UObject* Outer); // Function ShooterGame.AutoResetAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37d5a40
};

// Class ShooterGame.AVSManager
// Size: 0x108 (Inherited: 0x80)
struct UAVSManager : UInitSystem {
	struct FMulticastInlineDelegate OnAVSStatusChanged; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct URMSManager* RMSManager; // 0xa0(0x08)
	struct UAVSService* AVSService; // 0xa8(0x08)
	struct TMap<struct FString, struct FAVSResponseCallback> ActiveRequests; // 0xb0(0x50)
	char pad_100[0x8]; // 0x100(0x08)

	bool IsEnabled(struct FString Country); // Function ShooterGame.AVSManager.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37d6550
	bool IsAccountVerified(); // Function ShooterGame.AVSManager.IsAccountVerified // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37d6440
	struct UAVSManager* GET(struct UWorld* FromWorld); // Function ShooterGame.AVSManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37d5ed0
};

// Class ShooterGame.AVSScreenV1
// Size: 0x2d0 (Inherited: 0x2c8)
struct UAVSScreenV1 : UUserWidget {
	struct UAVSViewController* AVSViewController; // 0x2c8(0x08)
};

// Class ShooterGame.AVSService
// Size: 0x38 (Inherited: 0x30)
struct UAVSService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.AVSViewController
// Size: 0x48 (Inherited: 0x30)
struct UAVSViewController : UObject {
	struct FMulticastInlineDelegate OnVerificationStatusChanged; // 0x30(0x10)
	struct UAVSManager* AVSManager; // 0x40(0x08)

	void SendDeactivationPin(struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.SendDeactivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37d6960
	void SendActivationPin(struct FString CountryCode, struct FString PhoneNumber, struct FString Locale, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.SendActivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37d6710
	bool IsVerified(); // Function ShooterGame.AVSViewController.IsVerified // (Final|Native|Public|BlueprintCallable) // @ game+0x37d6610
	void HandleAVSStatusUpdated(bool IsVerified); // Function ShooterGame.AVSViewController.HandleAVSStatusUpdated // (Final|Native|Private) // @ game+0x37d5fb0
	void DebugVerifyAccount(struct FString CountryCode, struct FString PhoneNumber, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.DebugVerifyAccount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37d5ce0
	void DebugUnverifyAccount(struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.DebugUnverifyAccount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37d5ba0
	void ConfirmDeactivationPin(struct FString OneTimePin, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.ConfirmDeactivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37d58b0
	void ConfirmActivationPin(struct FString OneTimePin, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.ConfirmActivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37d5720
};

// Class ShooterGame.BaseActorTargetingStateComponent
// Size: 0x478 (Inherited: 0x3d0)
struct UBaseActorTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnActorSelected; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnInvalidActor; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnActorTargetedLocally; // 0x3f0(0x10)
	struct FClassInclusionExclusionFilter ActorFilter; // 0x400(0x50)
	enum class EAresTeamTargeting TeamFilter; // 0x450(0x01)
	bool bCheckLineOfSight; // 0x451(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x452(0x01)
	bool bTargetOnRemoteClients; // 0x453(0x01)
	char pad_454[0x4]; // 0x454(0x04)
	struct AActor* CurrentActorTarget; // 0x458(0x08)
	bool bDrawDebugTargeting; // 0x460(0x01)
	char pad_461[0x17]; // 0x461(0x17)

	bool IsActorValid(struct AActor* Actor); // Function ShooterGame.BaseActorTargetingStateComponent.IsActorValid // (Native|Event|Public|BlueprintEvent) // @ game+0x37d6470
	struct AActor* GetCurrentTarget(); // Function ShooterGame.BaseActorTargetingStateComponent.GetCurrentTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37d5f90
	void BP_GetPossibleActorTargets(struct TArray<struct UPrimitiveComponent*>& OutPossibleTargetActors); // Function ShooterGame.BaseActorTargetingStateComponent.BP_GetPossibleActorTargets // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x37d5670
	float BP_GetActorScore(struct AActor* Actor); // Function ShooterGame.BaseActorTargetingStateComponent.BP_GetActorScore // (Native|Event|Public|BlueprintEvent) // @ game+0x37d55c0
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.BaseActorTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x37d5300
};

// Class ShooterGame.BaseConcussComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UBaseConcussComponent : UActorComponent {
	bool ConcussActive; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float ConcussStartTime; // 0xec(0x04)
	float ConcussEndTime; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)

	bool IsConcussed(); // Function ShooterGame.BaseConcussComponent.IsConcussed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37d6520
	void AuthSetConcussTimes(float StartTime, float EndTime); // Function ShooterGame.BaseConcussComponent.AuthSetConcussTimes // (Final|Native|Public|BlueprintCallable) // @ game+0x37d54f0
};

// Class ShooterGame.BaseCrosshairHudElement
// Size: 0x178 (Inherited: 0x58)
struct UBaseCrosshairHudElement : UAresHudElement {
	char pad_58[0x4]; // 0x58(0x04)
	float MinAngleBetweenCrosshairPoints; // 0x5c(0x04)
	bool bApplyAngleOvershootInterpolation; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float OvershootPercentOfTimeToNextShot; // 0x64(0x04)
	float OvershootMaxTimeSeconds; // 0x68(0x04)
	float OvershootPercentOfAngle; // 0x6c(0x04)
	float MinOvershootAngle; // 0x70(0x04)
	float FallbackPercentOfTimeToNextShot; // 0x74(0x04)
	float FallbackMaxTimeSeconds; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FAresHitConfirmTuning HitConfirmTuning; // 0x80(0x58)
	struct FAresHitConfirmTuning KillConfirmTuning; // 0xd8(0x58)
	char pad_130[0x18]; // 0x130(0x18)
	struct TArray<struct FCrosshairShape> NewSystem_CrosshairShapes; // 0x148(0x10)
	char pad_158[0x20]; // 0x158(0x20)
};

// Class ShooterGame.BaseGameStateComponent
// Size: 0x170 (Inherited: 0xf8)
struct UBaseGameStateComponent : UStateComponent {
	bool bControlsGameModePhase; // 0xf8(0x01)
	enum class EAresGamePhase GamePhase; // 0xf9(0x01)
	bool bAllowAdvanceByCheat; // 0xfa(0x01)
	bool bShouldPerformanceInstabilityTrackingBeEnabledInThisState; // 0xfb(0x01)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FQueuedStateTransition QueuedStateTransition; // 0x100(0x38)
	struct FMulticastInlineDelegate OnStateEnter; // 0x138(0x10)
	struct FMulticastInlineDelegate OnStateExit; // 0x148(0x10)
	struct FMulticastInlineDelegate OnStateTick; // 0x158(0x10)
	struct UGameStateHUDConfig* DefaultHUDConfig; // 0x168(0x08)

	void OnStateTickImplementation(); // Function ShooterGame.BaseGameStateComponent.OnStateTickImplementation // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnStateExitImplementation(); // Function ShooterGame.BaseGameStateComponent.OnStateExitImplementation // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnStateEnterImplementation(); // Function ShooterGame.BaseGameStateComponent.OnStateEnterImplementation // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void GoToStateWithContext(struct UStateComponent* NewState, struct UStateTransitionContext* Context, float TimeUntilTransition); // Function ShooterGame.BaseGameStateComponent.GoToStateWithContext // (Native|Public|BlueprintCallable) // @ game+0x37ded20
	void GoToState(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.BaseGameStateComponent.GoToState // (Native|Public|BlueprintCallable) // @ game+0x37dec40
	void GoToNextStateOfPhase(enum class EAresGamePhase Phase); // Function ShooterGame.BaseGameStateComponent.GoToNextStateOfPhase // (Final|Native|Public|BlueprintCallable) // @ game+0x37debc0
	void EndGamePhase(); // Function ShooterGame.BaseGameStateComponent.EndGamePhase // (Final|Native|Public|BlueprintCallable) // @ game+0x37de280
};

// Class ShooterGame.BaseHitScanEffectComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UBaseHitScanEffectComponent : UActorComponent {

	void TriggerHitEffect(struct FHitResult& ImpactHit); // Function ShooterGame.BaseHitScanEffectComponent.TriggerHitEffect // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void OnEntranceHit(struct FHitResult& LastHitResult, struct FHitResult& EntranceHit); // Function ShooterGame.BaseHitScanEffectComponent.OnEntranceHit // (Final|Native|Public|HasOutParms) // @ game+0x37df850
};

// Class ShooterGame.BaseMainMenuPlayerController
// Size: 0x790 (Inherited: 0x750)
struct ABaseMainMenuPlayerController : ABasePlayerController {
	struct UPlayerUIAutomationBase* UIAutomation; // 0x750(0x08)
	struct FMulticastInlineDelegate OnMainMenuViewControllerInitCompleted; // 0x758(0x10)
	struct UMainMenuParentWidget* MainMenuParentWidget; // 0x768(0x08)
	struct UMainMenuViewModel* ViewModel; // 0x770(0x08)
	struct UMainMenuViewController* ViewController; // 0x778(0x08)
	struct UAresShellScreen* MainMenuShell; // 0x780(0x08)
	char pad_788[0x8]; // 0x788(0x08)

	void InitializePlayerAutomation(struct UPlayerUIAutomationBase* PlayerUIAutomationClass, struct UMainMenuAutomationBase* MenuAutomationClass, struct UHUDAutomationBase* HUDAutomationClass); // Function ShooterGame.BaseMainMenuPlayerController.InitializePlayerAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x37defa0
	void HandleStateManagerOnEnterTransitionToInGame(); // Function ShooterGame.BaseMainMenuPlayerController.HandleStateManagerOnEnterTransitionToInGame // (Final|Native|Private) // @ game+0x37dee30
	void EndMenus(); // Function ShooterGame.BaseMainMenuPlayerController.EndMenus // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ClientSaveRiotProfiling(); // Function ShooterGame.BaseMainMenuPlayerController.ClientSaveRiotProfiling // (Final|Native|Private) // @ game+0x2024060
	void CheatUnlockAllTotems(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllTotems // (Final|Native|Public) // @ game+0x2024060
	void CheatUnlockAllSprays(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllSprays // (Final|Native|Public) // @ game+0x2024060
	void CheatUnlockAllSkins(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllSkins // (Final|Native|Public) // @ game+0x2024060
	void CheatUnlockAllPlayerTitles(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllPlayerTitles // (Final|Native|Public) // @ game+0x2024060
	void CheatUnlockAllPlayerCards(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllPlayerCards // (Final|Native|Public) // @ game+0x2024060
	void CheatUnlockAllBuddies(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllBuddies // (Final|Native|Public) // @ game+0x2024060
	void AddRiotProfileInstantMarker(); // Function ShooterGame.BaseMainMenuPlayerController.AddRiotProfileInstantMarker // (Final|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.BasePerformanceMonitoringComponent
// Size: 0x118 (Inherited: 0xe8)
struct UBasePerformanceMonitoringComponent : UActorComponent {
	struct UMetricInstabilityTrackingDetails* LocalFrameRateInstability; // 0xe8(0x08)
	char pad_F0[0x28]; // 0xf0(0x28)
};

// Class ShooterGame.BasePlayerStateTelemetryComponent
// Size: 0x100 (Inherited: 0xe8)
struct UBasePlayerStateTelemetryComponent : UActorComponent {
	struct UTelemetrySampler* TelemetrySampler; // 0xe8(0x08)
	struct UTelemetryManager* TelemetryManager; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)

	void OnGameStatePhaseChanged(enum class EAresGamePhase NewGamePhase, int32_t RoundNumberEnded); // Function ShooterGame.BasePlayerStateTelemetryComponent.OnGameStatePhaseChanged // (Final|Native|Protected) // @ game+0x37dfb10
	void Init(struct AShooterPlayerState* ShooterPlayerState, struct UTelemetrySampler* InTelemetrySampler, struct UTelemetryManager* InTelemetryManager); // Function ShooterGame.BasePlayerStateTelemetryComponent.Init // (Native|Public) // @ game+0x37dee90
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.BasePlayerStateTelemetryComponent.GetPlayerState // (Final|Native|Protected|Const) // @ game+0x37de6f0
	void BeginPlay(); // Function ShooterGame.BasePlayerStateTelemetryComponent.BeginPlay // (Native|Public) // @ game+0x37de250
};

// Class ShooterGame.GameModifierComponent
// Size: 0x158 (Inherited: 0xe8)
struct UGameModifierComponent : UActorComponent {
	struct FMulticastInlineDelegate OnGameModifierAllowedChanged; // 0xe8(0x10)
	int32_t AllowedRoleConditions; // 0xf8(0x04)
	int32_t AllowedUseConditions; // 0xfc(0x04)
	struct TSoftClassPtr<UObject> DisplayWidgetClass; // 0x100(0x30)
	struct FText ModifierName; // 0x130(0x18)
	bool bIsUniquePerPlayer; // 0x148(0x01)
	bool bIsAvailableToObservers; // 0x149(0x01)
	char pad_14A[0xe]; // 0x14a(0x0e)

	bool Validate(struct AAresPlayerController* CallingPlayer, struct FString Argument); // Function ShooterGame.GameModifierComponent.Validate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3936050
	void TryActivateOnClient(struct FString Argument); // Function ShooterGame.GameModifierComponent.TryActivateOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x3935f80
	bool IsRoleAllowed(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsRoleAllowed // (Final|Native|Protected|Const) // @ game+0x3935be0
	bool IsModifierShownInMenuForPlayer(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsModifierShownInMenuForPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3935b40
	bool IsModifierAllowedThisGame(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsModifierAllowedThisGame // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3935a90
	bool IsModifierAllowed(struct AAresPlayerController* CallingPlayer, struct FString Argument); // Function ShooterGame.GameModifierComponent.IsModifierAllowed // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3935980
	bool IsGameConditionsMet(); // Function ShooterGame.GameModifierComponent.IsGameConditionsMet // (Final|Native|Protected|Const) // @ game+0x39358c0
	bool IsBasicModifierRequirementsMet(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsBasicModifierRequirementsMet // (Final|Native|Protected|Const) // @ game+0x3935820
	struct FText GetModifierName(); // Function ShooterGame.GameModifierComponent.GetModifierName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3935590
	void AuthActivate(struct AAresPlayerController* CallingPlayer, struct FString Argument); // Function ShooterGame.GameModifierComponent.AuthActivate // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x3934e90
};

// Class ShooterGame.BaseScoreboardModifier
// Size: 0x158 (Inherited: 0x158)
struct UBaseScoreboardModifier : UGameModifierComponent {

	void TrySetUltimatePointsOnClient(struct AShooterPlayerState* PlayerState, int32_t NewPoints); // Function ShooterGame.BaseScoreboardModifier.TrySetUltimatePointsOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x37e01b0
	void TrySetStatOnClient(struct AShooterPlayerState* PlayerState, enum class EScoreboardModifierStatType Stat, int32_t NewValue); // Function ShooterGame.BaseScoreboardModifier.TrySetStatOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x37e00a0
	void TrySetMoneyOnClient(struct AShooterPlayerState* PlayerState, int32_t NewMoney); // Function ShooterGame.BaseScoreboardModifier.TrySetMoneyOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x37dffd0
	void TrySetArmorOnClient(struct AShooterPlayerState* PlayerState, int32_t NewArmorValue); // Function ShooterGame.BaseScoreboardModifier.TrySetArmorOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x37dff00
	void TryRestartGameOnClient(struct TArray<struct FAresRoundResult>& RoundResults, bool bShouldSwapRoles); // Function ShooterGame.BaseScoreboardModifier.TryRestartGameOnClient // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37dfdd0
	void TryFinalizePlayerOnClient(struct AShooterPlayerState* PlayerState); // Function ShooterGame.BaseScoreboardModifier.TryFinalizePlayerOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x37dfd40
	void AuthHandleRestartGameCommand(struct TArray<struct FAresRoundResult>& RoundResults, bool bShouldSwapRoles); // Function ShooterGame.BaseScoreboardModifier.AuthHandleRestartGameCommand // (BlueprintAuthorityOnly|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.BaseSettingsWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UBaseSettingsWidget : UDesignableUserWidget {

	void TryDisplay(); // Function ShooterGame.BaseSettingsWidget.TryDisplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	bool ShouldDisplay(); // Function ShooterGame.BaseSettingsWidget.ShouldDisplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SaveSetting(); // Function ShooterGame.BaseSettingsWidget.SaveSetting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.BaseSettingsWidgetGamepad
// Size: 0x2e0 (Inherited: 0x2c8)
struct UBaseSettingsWidgetGamepad : UBaseSettingsWidget {
	struct FMulticastInlineDelegate OnNavigation; // 0x2c8(0x10)
	struct UWidget* NavigationWidget; // 0x2d8(0x08)

	void SetNavigationWidget(struct UWidget* InternalWidget); // Function ShooterGame.BaseSettingsWidgetGamepad.SetNavigationWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x37dfc20
	struct FKey GetVirtualBackKey(); // Function ShooterGame.BaseSettingsWidgetGamepad.GetVirtualBackKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37deb20
	struct FKey GetVirtualAcceptKey(); // Function ShooterGame.BaseSettingsWidgetGamepad.GetVirtualAcceptKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37dea80
	struct UWidget* GetNavigationWidget(); // Function ShooterGame.BaseSettingsWidgetGamepad.GetNavigationWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37de5f0
};

// Class ShooterGame.BaseSpawnBarrier
// Size: 0x410 (Inherited: 0x410)
struct ABaseSpawnBarrier : AGameObject {

	void OnControllerAdded(struct AController* Controller); // Function ShooterGame.BaseSpawnBarrier.OnControllerAdded // (Final|Native|Private) // @ game+0x37df7c0
	void InitializeSpawnBarrier(); // Function ShooterGame.BaseSpawnBarrier.InitializeSpawnBarrier // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2047f70
};

// Class ShooterGame.BaseTeamComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UBaseTeamComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTeamChanged; // 0xe8(0x10)

	bool UseEnemyColoring(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.UseEnemyColoring // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37e0310
	bool UseEnemyAudio(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.UseEnemyAudio // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37e0280
	bool ShowAllyInformation(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.ShowAllyInformation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37dfcb0
	bool LocalTeamIsValid(struct UObject* WorldContextObject); // Function ShooterGame.BaseTeamComponent.LocalTeamIsValid // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37df6a0
	bool LocalTeamIsObserver(struct UObject* WorldContextObject); // Function ShooterGame.BaseTeamComponent.LocalTeamIsObserver // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37df610
	bool IsTeamEnemy(struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.BaseTeamComponent.IsTeamEnemy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37df570
	bool IsTeamAlly(struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.BaseTeamComponent.IsTeamAlly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37df4d0
	bool IsObserver(); // Function ShooterGame.BaseTeamComponent.IsObserver // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37df490
	bool IsObjectEnemy(struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsObjectEnemy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37df3f0
	bool IsObjectAlly(struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsObjectAlly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37df350
	bool IsObjectAlliance(enum class EAresAlliance Alliance, struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsObjectAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37df250
	bool IsEnemy(struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsEnemy // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37df180
	bool IsAlly(struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsAlly // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37df0b0
	bool HasValidTeam(); // Function ShooterGame.BaseTeamComponent.HasValidTeam // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37dee50
	enum class EAresTeamRole GetTeamRole(); // Function ShooterGame.BaseTeamComponent.GetTeamRole // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37dea10
	struct FName GetTeamName(); // Function ShooterGame.BaseTeamComponent.GetTeamName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37de9c0
	struct UBaseTeamComponent* GetTeamComponent(struct UObject* SourceActor); // Function ShooterGame.BaseTeamComponent.GetTeamComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37de930
	struct FColor GetTeamColoring(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.GetTeamColoring // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37de8a0
	enum class EAresAlliance GetTeamAlliance(struct UBaseTeamComponent* SourceTeamComponent, struct UBaseTeamComponent* TargetTeamComponent); // Function ShooterGame.BaseTeamComponent.GetTeamAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37de7d0
	enum class EAresAlliance GetRoleAlliance(struct UBaseTeamComponent* TargetTeamComponent); // Function ShooterGame.BaseTeamComponent.GetRoleAlliance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37de720
	enum class EAresAlliance GetObjectAlliance(struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.GetObjectAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37de620
	struct UBaseTeamComponent* GetMutableTeamComponent(struct UObject* SourceActor); // Function ShooterGame.BaseTeamComponent.GetMutableTeamComponent // (Final|Native|Static|Public) // @ game+0x37de560
	enum class EAresAlliance GetAllianceWithRole(enum class EAresTeamRole TargetRole); // Function ShooterGame.BaseTeamComponent.GetAllianceWithRole // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37de4c0
	enum class EAresAlliance GetAllianceFromTeamName(struct FName& TeamName); // Function ShooterGame.BaseTeamComponent.GetAllianceFromTeamName // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x37de410
	enum class EAresAlliance GetAllianceBetweenRoles(enum class EAresTeamRole SourceRole, enum class EAresTeamRole TargetRole); // Function ShooterGame.BaseTeamComponent.GetAllianceBetweenRoles // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37de350
	enum class EAresAlliance GetAlliance(struct UBaseTeamComponent* TargetTeamComponent); // Function ShooterGame.BaseTeamComponent.GetAlliance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37de2a0
	bool AuthSetTeamFromTeamName(struct FName& TeamName); // Function ShooterGame.BaseTeamComponent.AuthSetTeamFromTeamName // (Native|Public|HasOutParms) // @ game+0x37de1a0
	void AuthCopyTeam(struct UBaseTeamComponent* TeamToDuplicate); // Function ShooterGame.BaseTeamComponent.AuthCopyTeam // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36354c0
};

// Class ShooterGame.BasicCombatStatsComponent
// Size: 0x100 (Inherited: 0xe8)
struct UBasicCombatStatsComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t AggregateKills; // 0xf0(0x04)
	int32_t AggregateDeaths; // 0xf4(0x04)
	int32_t AggregateAssists; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	int32_t GetKills(); // Function ShooterGame.BasicCombatStatsComponent.GetKills // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635f90
	int32_t GetDeaths(); // Function ShooterGame.BasicCombatStatsComponent.GetDeaths // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e5fd0
	int32_t GetAssists(); // Function ShooterGame.BasicCombatStatsComponent.GetAssists // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e5fa0
	void AuthSetCombatStatsPaused(bool bPaused); // Function ShooterGame.BasicCombatStatsComponent.AuthSetCombatStatsPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x37e5d60
};

// Class ShooterGame.BehaviorScoreTracker
// Size: 0x458 (Inherited: 0x3d8)
struct ABehaviorScoreTracker : AInfo {
	char pad_3D8[0x70]; // 0x3d8(0x70)
	struct FString FactorName; // 0x448(0x10)

	void SetSpawnedCharacter(struct AShooterCharacter* Character); // Function ShooterGame.BehaviorScoreTracker.SetSpawnedCharacter // (Final|Native|Public) // @ game+0x37e6e80
	void SetFactorName(struct FString InFactorName); // Function ShooterGame.BehaviorScoreTracker.SetFactorName // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6b30
	void SendMetricsEvent(struct FBehaviorScoreTrackerMouseMovementTelemetry InMouseMovementTelemetry); // Function ShooterGame.BehaviorScoreTracker.SendMetricsEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x37e69e0
	void OnSpawnedCharacterChanged(struct AShooterCharacter* Character); // Function ShooterGame.BehaviorScoreTracker.OnSpawnedCharacterChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.BehaviorScoreTracker.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0340
	struct AShooterPlayerState* GetOwningPlayerState(); // Function ShooterGame.BehaviorScoreTracker.GetOwningPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36558b0
	struct UBehaviorScoreTrackerManagerComponent* GetManager(); // Function ShooterGame.BehaviorScoreTracker.GetManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a02e0
	struct FString GetFactorName(); // Function ShooterGame.BehaviorScoreTracker.GetFactorName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e6030
	float GetFactor(); // Function ShooterGame.BehaviorScoreTracker.GetFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e6000
	struct TMap<struct AShooterPlayerState*, struct ABehaviorScoreTracker*> GetAllSameTypeTrackers(); // Function ShooterGame.BehaviorScoreTracker.GetAllSameTypeTrackers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e5ed0
	float CalculateFactor(enum class EMatchCompletionState CompletionState); // Function ShooterGame.BehaviorScoreTracker.CalculateFactor // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginTracking(); // Function ShooterGame.BehaviorScoreTracker.BeginTracking // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.BehaviorScoreTrackerManagerComponent
// Size: 0x150 (Inherited: 0xe8)
struct UBehaviorScoreTrackerManagerComponent : UActorComponent {
	struct TArray<struct ABehaviorScoreTracker*> ActiveTrackerClasses; // 0xe8(0x10)
	char pad_F8[0x58]; // 0xf8(0x58)
};

// Class ShooterGame.BlindConfig
// Size: 0x138 (Inherited: 0x30)
struct UBlindConfig : UObject {
	struct AEffectContainer* BlindedEffectContainer; // 0x30(0x08)
	struct FInheritedTagContainer InheritableGameplayEffectTags; // 0x38(0x60)
	struct FInheritedTagContainer InheritableOwnedTagsContainer; // 0x98(0x60)
	struct FGameplayTagRequirements ApplicationTagRequirements; // 0xf8(0x40)
};

// Class ShooterGame.BlindManagerComponent
// Size: 0x1c8 (Inherited: 0xe8)
struct UBlindManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnBlindedChanged; // 0xf0(0x10)
	struct FBlindManagerState AuthBlindManagerState; // 0x100(0x18)
	struct FBlindManagerState LocalBlindManagerState; // 0x118(0x18)
	char pad_130[0x98]; // 0x130(0x98)

	void ServerReportClientBlindResult(struct FBlindSpawnParams BlindSpawnParams); // Function ShooterGame.BlindManagerComponent.ServerReportClientBlindResult // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x37e6a80
	void OnRep_BlindManagerState(struct FBlindManagerState Previous); // Function ShooterGame.BlindManagerComponent.OnRep_BlindManagerState // (Final|Native|Private) // @ game+0x37e68b0
	bool IsBlinded(); // Function ShooterGame.BlindManagerComponent.IsBlinded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e67e0
	void HandleBlindApplication(float BlindDuration, struct UBlindConfig* BlindConfig, struct FVector BlindExplosionLocation, struct AActor* CausingActor); // Function ShooterGame.BlindManagerComponent.HandleBlindApplication // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x37e6140
	float GetTimeSinceLastBlindedChange(); // Function ShooterGame.BlindManagerComponent.GetTimeSinceLastBlindedChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e6110
	float GetLongestActiveBlindTimeRemaining(); // Function ShooterGame.BlindManagerComponent.GetLongestActiveBlindTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e60e0
	float GetLongestActiveBlindDuration(); // Function ShooterGame.BlindManagerComponent.GetLongestActiveBlindDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e60b0
	void ClientNotifyBlindExpired(struct FActiveBlind ExpiredBlind); // Function ShooterGame.BlindManagerComponent.ClientNotifyBlindExpired // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x37e5e40
	void ClientCleanseBlinds(); // Function ShooterGame.BlindManagerComponent.ClientCleanseBlinds // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x37e5e10
	void AuthOnOwnerPossessionChanged(struct AController* Controller); // Function ShooterGame.BlindManagerComponent.AuthOnOwnerPossessionChanged // (Final|Native|Private) // @ game+0x3634e00
	void AuthOnBlindRemovalTagChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayTag Tag, bool TagActive); // Function ShooterGame.BlindManagerComponent.AuthOnBlindRemovalTagChanged // (Final|Native|Private) // @ game+0x37e5c30
	void AuthOnBlindRelevantTagChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayTag Tag, bool TagActive); // Function ShooterGame.BlindManagerComponent.AuthOnBlindRelevantTagChanged // (Final|Native|Public) // @ game+0x37e5c30
	void AuthOnBlindRelevantPropertyChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.BlindManagerComponent.AuthOnBlindRelevantPropertyChanged // (Final|Native|Public|HasOutParms) // @ game+0x37e5a70
	void AuthMarkBlindManagerUnstable(); // Function ShooterGame.BlindManagerComponent.AuthMarkBlindManagerUnstable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthHandleOnRoundEnd(int32_t RoundNumberEnded); // Function ShooterGame.BlindManagerComponent.AuthHandleOnRoundEnd // (Final|Native|Public) // @ game+0x3635550
};

// Class ShooterGame.ProjectileCollisionResponseComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UProjectileCollisionResponseComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t Priority; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)

	void SetPriority(int32_t NewPriority); // Function ShooterGame.ProjectileCollisionResponseComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x3889dc0
	int32_t GetPriority(); // Function ShooterGame.ProjectileCollisionResponseComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635f90
};

// Class ShooterGame.BlueprintProjectileCollisionComponent
// Size: 0x108 (Inherited: 0xf8)
struct UBlueprintProjectileCollisionComponent : UProjectileCollisionResponseComponent {
	char pad_F8[0x10]; // 0xf8(0x10)

	void SetProjectileVelocity(struct FVector& NewVelocity); // Function ShooterGame.BlueprintProjectileCollisionComponent.SetProjectileVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37e6d60
	enum class EProjectileCollisionProcessInstruction RespondToCollision(struct FHitResult& Collision); // Function ShooterGame.BlueprintProjectileCollisionComponent.RespondToCollision // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.BlueprintResourceComponent
// Size: 0x158 (Inherited: 0x158)
struct UBlueprintResourceComponent : UAbilityResourceComponent {

	void ReplenishResource(); // Function ShooterGame.BlueprintResourceComponent.ReplenishResource // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool ConsumeResource(); // Function ShooterGame.BlueprintResourceComponent.ConsumeResource // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool CanConsumeResource(); // Function ShooterGame.BlueprintResourceComponent.CanConsumeResource // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
};

// Class ShooterGame.BombMinimapComponent
// Size: 0x580 (Inherited: 0x500)
struct UBombMinimapComponent : UAresMinimapComponent {
	struct UUserWidget* MissingWidgetClass; // 0x4f8(0x08)
	bool bNeedsBombUpdate; // 0x500(0x01)
	float LastSeen; // 0x504(0x04)
	bool bIsEnemy; // 0x508(0x01)
	bool bOnGround; // 0x509(0x01)
	char pad_50F[0x1]; // 0x50f(0x01)
	struct UVisibilityComponent* VisibilityComponent; // 0x510(0x08)
	struct UUserWidget* OriginalWidgetClass; // 0x518(0x08)
	struct TSet<struct UShooterCharacterMinimapComponent*> HoldingBombComponents; // 0x520(0x50)
	bool bBeingDestroyed; // 0x570(0x01)
	bool bInFogOfWar; // 0x571(0x01)
	bool bLocalObserver; // 0x572(0x01)
	char pad_573[0xd]; // 0x573(0x0d)

	void SetNeedsBombParameterUpdate(); // Function ShooterGame.BombMinimapComponent.SetNeedsBombParameterUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6cb0
	void HandleOwnerSetOwner(struct AAresEquippable* Equippable, struct AActor* Owner); // Function ShooterGame.BombMinimapComponent.HandleOwnerSetOwner // (Final|Native|Protected) // @ game+0x37e65f0
	void HandleOwnerHiddenChanged(struct AActor* Actor); // Function ShooterGame.BombMinimapComponent.HandleOwnerHiddenChanged // (Final|Native|Protected) // @ game+0x37e6560
	void HandleOwnerExitedTeamSight(struct AActor* Actor); // Function ShooterGame.BombMinimapComponent.HandleOwnerExitedTeamSight // (Final|Native|Protected) // @ game+0x37e64d0
	void HandleOwnerEnteredTeamSight(struct AActor* Actor, struct TArray<struct AShooterCharacter*>& CharactersWithVisibility); // Function ShooterGame.BombMinimapComponent.HandleOwnerEnteredTeamSight // (Final|Native|Protected|HasOutParms) // @ game+0x37e63e0
	void HandleOwnerDropped(struct AAresEquippable* DroppedEquippable); // Function ShooterGame.BombMinimapComponent.HandleOwnerDropped // (Final|Native|Protected) // @ game+0x37e6350
	void HandleOwnerDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.BombMinimapComponent.HandleOwnerDestroyed // (Final|Native|Protected) // @ game+0x37e62c0
};

// Class ShooterGame.BombTeamComponent
// Size: 0x100 (Inherited: 0xf8)
struct UBombTeamComponent : UBaseTeamComponent {
	enum class EAresTeam Team; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OnRep_TeamChanged(); // Function ShooterGame.BombTeamComponent.OnRep_TeamChanged // (Final|Native|Protected) // @ game+0x37e69c0
	bool IsEnemyTeam(enum class EAresTeam OtherTeam); // Function ShooterGame.BombTeamComponent.IsEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e6820
	bool IsAllyTeam(enum class EAresTeam OtherTeam); // Function ShooterGame.BombTeamComponent.IsAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e6750
	void AuthToggleTeam(); // Function ShooterGame.BombTeamComponent.AuthToggleTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37e5df0
	void AuthSetTeam(enum class EAresTeam NewTeam); // Function ShooterGame.BombTeamComponent.AuthSetTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
};

// Class ShooterGame.ListEntrySlotConfigurerFactoryBase
// Size: 0x38 (Inherited: 0x30)
struct UListEntrySlotConfigurerFactoryBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.ListEntrySlotConfigurerBase
// Size: 0x50 (Inherited: 0x38)
struct UListEntrySlotConfigurerBase : UListEntrySlotConfigurerFactoryBase {
	char pad_38[0x18]; // 0x38(0x18)

	void BroadcastSlotSettingsChanged(); // Function ShooterGame.ListEntrySlotConfigurerBase.BroadcastSlotSettingsChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x398d850
};

// Class ShooterGame.BoxSlotConfigurer
// Size: 0x70 (Inherited: 0x50)
struct UBoxSlotConfigurer : UListEntrySlotConfigurerBase {
	struct FMargin Padding; // 0x50(0x10)
	struct FSlateChildSize Size; // 0x60(0x08)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x68(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.BoxSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6f10
	void SetSize(struct FSlateChildSize InSize); // Function ShooterGame.BoxSlotConfigurer.SetSize // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6df0
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.BoxSlotConfigurer.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6cd0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.BoxSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6c30
};

// Class ShooterGame.BracketBuilderExtensionBase
// Size: 0x38 (Inherited: 0x30)
struct UBracketBuilderExtensionBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.BracketBuilderAdvancements2024
// Size: 0x70 (Inherited: 0x38)
struct UBracketBuilderAdvancements2024 : UBracketBuilderExtensionBase {
	struct FMulticastInlineDelegate OnAdvancementWidgetCreated; // 0x38(0x10)
	struct UUserWidget* KickoffStageAdvancmentWidgetClass; // 0x48(0x08)
	struct UUserWidget* KickoffTournamentAdvancmentWidgetClass; // 0x50(0x08)
	struct UUserWidget* SwissStageAdvancmentWidgetClass; // 0x58(0x08)
	float AdvancementsSeedingMiddlePadding; // 0x60(0x04)
	float KickoffSeedLeadOffAdvancmentPercent; // 0x64(0x04)
	enum class E2024VCTEvent VCTEvent; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	void InitWithBracketBuilder(struct UBracketBuilderWidget* InBracketBuilder); // Function ShooterGame.BracketBuilderAdvancements2024.InitWithBracketBuilder // (Final|Native|Public|BlueprintCallable) // @ game+0x37e66c0
	void AddAdvancements(struct FBracketLineLayout& LineLayout, enum class EBracketType BracketType); // Function ShooterGame.BracketBuilderAdvancements2024.AddAdvancements // (Final|Native|Public|HasOutParms) // @ game+0x37e5900
};

// Class ShooterGame.BracketBuilderWidget
// Size: 0x4b0 (Inherited: 0x300)
struct UBracketBuilderWidget : UAresCommonUserWidget {
	struct UEsportsBracketViewModel* BracketViewModel; // 0x300(0x08)
	struct UCanvasPanel* BracketCanvas; // 0x308(0x08)
	struct UUserWidget* MatchupWidgetClass; // 0x310(0x08)
	float MatchupVerticalSpacing; // 0x318(0x04)
	float MatchupPairVerticalSpacing; // 0x31c(0x04)
	int32_t NumEliminationColumns; // 0x320(0x04)
	int32_t NumSwissColumns; // 0x324(0x04)
	struct TMap<enum class EEsportsSubBracketType, struct UUserWidget*> SubBracketBackgroundWidgetMap; // 0x328(0x50)
	struct TMap<enum class EEsportsSubBracketType, struct FMargin> SubBracketBackgroundWidgetPaddingMap; // 0x378(0x50)
	struct UUserWidget* SwissSectionBackgroundWidgetClass; // 0x3c8(0x08)
	struct FMargin SwissBackgroundWidgetPadding; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnMatchupWidgetCreated; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnSubBracketBackgroundWidgetCreated; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnSwissBackgroundSectionWidgetCreated; // 0x400(0x10)
	struct FMulticastInlineDelegate OnExtensionsCreateLines; // 0x410(0x10)
	struct FBracketLineConfig LineWidgetConfig; // 0x420(0x38)
	struct UBracketLinesWidget* LinesWidget; // 0x458(0x08)
	struct UCanvasPanel* MatchupCanvas; // 0x460(0x08)
	struct UCanvasPanel* BackgroundCanvas; // 0x468(0x08)
	char pad_470[0x40]; // 0x470(0x40)

	void SetViewModel(struct UEsportsBracketViewModel* InBracketViewModel); // Function ShooterGame.BracketBuilderWidget.SetViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x37f5340
	void ForceLayout(); // Function ShooterGame.BracketBuilderWidget.ForceLayout // (Final|Native|Private) // @ game+0x37f3d00
	void CreateLines(struct FBracketLineLayout& LineLayout, enum class EBracketType BracketType); // Function ShooterGame.BracketBuilderWidget.CreateLines // (Final|Native|Private|HasOutParms) // @ game+0x37f3b90
	void ClearBracket(); // Function ShooterGame.BracketBuilderWidget.ClearBracket // (Final|Native|Private) // @ game+0x37f3b70
	void AddSwissSectionBackgroundWidgetToCanvas(struct FBracketWinLoss& SectionWinLoss, struct FVector2D& TopLeft, struct FVector2D& BottomRight); // Function ShooterGame.BracketBuilderWidget.AddSwissSectionBackgroundWidgetToCanvas // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x37f39c0
	void AddSubBracketBackgroundWidgetToCanvas(enum class EEsportsSubBracketType BracketType, struct FVector2D& TopLeft, struct FVector2D& BottomRight); // Function ShooterGame.BracketBuilderWidget.AddSubBracketBackgroundWidgetToCanvas // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x37f38a0
	void AddMatchupWidgetToCanvas(struct FVector2D& Position, struct FString MatchID); // Function ShooterGame.BracketBuilderWidget.AddMatchupWidgetToCanvas // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x37f37a0
};

// Class ShooterGame.BracketLinesWidget
// Size: 0x360 (Inherited: 0x300)
struct UBracketLinesWidget : UAresCommonUserWidget {
	char pad_300[0x60]; // 0x300(0x60)
};

// Class ShooterGame.BTDecorator_GameFeatureToggle
// Size: 0x88 (Inherited: 0x70)
struct UBTDecorator_GameFeatureToggle : UBTDecorator {
	enum class EGameFeatureToggleName FeatureToggleName; // 0x70(0x01)
	bool bExpectedValue; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)
	struct UBehaviorTreeComponent* OwnerBehaviorTreeComp; // 0x78(0x08)
	char pad_80[0x8]; // 0x80(0x08)
};

// Class ShooterGame.BTDecorator_NearNavMesh
// Size: 0xb8 (Inherited: 0x70)
struct UBTDecorator_NearNavMesh : UBTDecorator {
	float AbortTestTickRate; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FBlackboardKeySelector TestLocationKey; // 0x78(0x30)
	struct FVector NavQueryExtents; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class ShooterGame.BTDecorator_SetAimPriority
// Size: 0x118 (Inherited: 0x70)
struct UBTDecorator_SetAimPriority : UBTDecorator {
	struct TMap<enum class EAIAimTargetType, float> PrioritiesToSet; // 0x70(0x50)
	struct UAIAimPriorityComponent* AimPriorityComponent; // 0xc0(0x08)
	char pad_C8[0x50]; // 0xc8(0x50)
};

// Class ShooterGame.BTEUIData
// Size: 0x90 (Inherited: 0x90)
struct UBTEUIData : UBaseContentUIData {
};

// Class ShooterGame.BTEMilestoneUIData
// Size: 0xa8 (Inherited: 0x90)
struct UBTEMilestoneUIData : UBaseContentUIData {
	struct FText ButtonText; // 0x90(0x18)
};

// Class ShooterGame.BTEDataAsset
// Size: 0xa0 (Inherited: 0x50)
struct UBTEDataAsset : UAresBasePrimaryDataAsset {
	bool bShipIt; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<struct FBTEMilestone> Milestones; // 0x58(0x10)
	struct TSoftClassPtr<UObject> UIData; // 0x68(0x30)
	struct UObject* BannerWidget; // 0x98(0x08)
};

// Class ShooterGame.BTService_SetAimTarget
// Size: 0xb0 (Inherited: 0xa8)
struct UBTService_SetAimTarget : UBTService_BlackboardBase {
	enum class EAIAimTargetType TargetType; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class ShooterGame.BTTask_FollowCustomPath
// Size: 0xb8 (Inherited: 0x78)
struct UBTTask_FollowCustomPath : UBTTaskNode {
	float ReachedNodeAcceptDistXY; // 0x78(0x04)
	float ReachedNodeAcceptDistZ; // 0x7c(0x04)
	enum class ECustomPathFollowStartBehavior StartBehavior; // 0x80(0x01)
	enum class ECustomPathFollowMoveType MoveType; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct FBlackboardKeySelector CustomPath; // 0x88(0x30)
};

// Class ShooterGame.ZoomLevelStateComponent
// Size: 0x438 (Inherited: 0x3d0)
struct UZoomLevelStateComponent : URespondToEventStateComponent {
	enum class EZoomStateLevel ZoomLevel; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct FMulticastInlineDelegate OnRejectZoomInvalidState; // 0x3d8(0x10)
	bool bCanInterruptTransitions; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)
	struct UEquippableStateMachineComponent* PrimaryStateMachine; // 0x3f0(0x08)
	struct UScriptStateComponent* ZoomDisabledState; // 0x3f8(0x08)
	struct TArray<struct UFiringStateComponent*> FiringStates; // 0x400(0x10)
	enum class EZoomFiringBehavior FiringBehavior; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct UZoomComponent* ZoomComponent; // 0x418(0x08)
	struct AShooterCharacter* CurrentOwningCharacter; // 0x420(0x08)
	struct TArray<struct FZoomValidStates> ValidStates; // 0x428(0x10)

	void ZoomTransitionStatusChanged(struct UZoomComponent* InZoomComponent); // Function ShooterGame.ZoomLevelStateComponent.ZoomTransitionStatusChanged // (Final|Native|Private) // @ game+0x3c7f340
	void ZoomDisabledChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ZoomLevelStateComponent.ZoomDisabledChanged // (Final|Native|Private|HasOutParms) // @ game+0x3c7f180
	void TryForceInputToggle(enum class EAresEquippableInput Input, enum class EAresInputState InputState); // Function ShooterGame.ZoomLevelStateComponent.TryForceInputToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7ef60
	void SetZoomDisabledState(struct UScriptStateComponent* DisabledState); // Function ShooterGame.ZoomLevelStateComponent.SetZoomDisabledState // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7ed30
	void SetValidStates(struct TArray<struct UScriptStateComponent*>& StateList, bool bInvalidStates, struct UScriptStateComponent* StateToTransitionTo); // Function ShooterGame.ZoomLevelStateComponent.SetValidStates // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7eae0
	void SetFiringBehavior(struct TArray<struct UFiringStateComponent*>& NewFiringStates, enum class EZoomFiringBehavior Behavior); // Function ShooterGame.ZoomLevelStateComponent.SetFiringBehavior // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7e790
	void PrimaryStateChanged(struct UStateComponent* OldState, struct UStateComponent* EnteredState); // Function ShooterGame.ZoomLevelStateComponent.PrimaryStateChanged // (Final|Native|Private) // @ game+0x3c7e4a0
	bool IsValidZoomState(enum class EZoomStateLevel CurrentZoomLevel); // Function ShooterGame.ZoomLevelStateComponent.IsValidZoomState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7dfb0
	void HandleReadyToFire(struct UFiringStateComponent* FiringState); // Function ShooterGame.ZoomLevelStateComponent.HandleReadyToFire // (Final|Native|Private) // @ game+0x3c7ddf0
	void ClearValidStates(); // Function ShooterGame.ZoomLevelStateComponent.ClearValidStates // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7dc80
};

// Class ShooterGame.BufferedZoomLevelStateComponent
// Size: 0x440 (Inherited: 0x438)
struct UBufferedZoomLevelStateComponent : UZoomLevelStateComponent {
	struct UZoomLevelStateComponent* PendingReturnState; // 0x438(0x08)

	void SetPendingReturnState(struct UZoomLevelStateComponent* ReturnState); // Function ShooterGame.BufferedZoomLevelStateComponent.SetPendingReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x37f52b0
};

// Class ShooterGame.BulletWhizByComponent
// Size: 0x128 (Inherited: 0xf8)
struct UBulletWhizByComponent : UBaseProjectileEffectComponent {
	struct UAkAudioEvent* WhizByAudioEvent; // 0xf8(0x08)
	struct FAresWhizBySoundTuning WhizByTuning; // 0x100(0x18)
	struct FName StartBoneName; // 0x118(0x0c)
	char pad_124[0x4]; // 0x124(0x04)

	void OnStop(); // Function ShooterGame.BulletWhizByComponent.OnStop // (Final|Native|Public) // @ game+0x37f5190
};

// Class ShooterGame.CachedEquippableTrackerComponent
// Size: 0x100 (Inherited: 0xe8)
struct UCachedEquippableTrackerComponent : UActorComponent {
	struct FMulticastInlineDelegate WeaponCached; // 0xe8(0x10)
	char pad_F8[0x8]; // 0xf8(0x08)
};

// Class ShooterGame.CameraAttachedWidgetComponent
// Size: 0x5e0 (Inherited: 0x590)
struct UCameraAttachedWidgetComponent : UMeshComponent {
	float DistanceFromCamera; // 0x590(0x04)
	char pad_594[0x4]; // 0x594(0x04)
	struct UUserWidget* Widget; // 0x598(0x08)
	char pad_5A0[0x28]; // 0x5a0(0x28)
	struct UTextureRenderTarget2D* RenderTarget; // 0x5c8(0x08)
	struct UMaterialInterface* TranslucentMaterial; // 0x5d0(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x5d8(0x08)

	void SetWidget(struct UUserWidget* Widget); // Function ShooterGame.CameraAttachedWidgetComponent.SetWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x37f53d0
};

// Class ShooterGame.CanDisarmComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UCanDisarmComponent : UActorComponent {
	struct AEffectContainer* DisarmedEquippableEffect; // 0xe8(0x08)
};

// Class ShooterGame.CapConstants
// Size: 0x30 (Inherited: 0x30)
struct UCapConstants : UObject {
};

// Class ShooterGame.CausedDamageListener
// Size: 0x30 (Inherited: 0x30)
struct UCausedDamageListener : UInterface {
};

// Class ShooterGame.CellularPatch
// Size: 0x730 (Inherited: 0x3d8)
struct ACellularPatch : AActor {
	struct URoundPersistenceComponent* Persistence; // 0x3d8(0x08)
	struct USceneComponent* SceneRoot; // 0x3e0(0x08)
	struct UBoxComponent* BoxOverlap; // 0x3e8(0x08)
	struct UShapeComponent* ShapeOverlap; // 0x3f0(0x08)
	float CellSize; // 0x3f8(0x04)
	bool bAxisAligned; // 0x3fc(0x01)
	char pad_3FD[0x3]; // 0x3fd(0x03)
	int32_t MaxNumberOfCells; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	float StepUp; // 0x408(0x04)
	float StepDown; // 0x40c(0x04)
	float InitialFloorSearchRadius; // 0x410(0x04)
	enum class ECollisionChannel CollisionChannel; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	struct FName IgnoreObjectsWithTag; // 0x418(0x0c)
	enum class EPatchType PatchType; // 0x424(0x01)
	enum class EPatchSpreadStyle PatchSpreadStyle; // 0x425(0x01)
	char pad_426[0x2]; // 0x426(0x02)
	float JumpOverlapCompensation; // 0x428(0x04)
	float WallDetectionCutoffAngle; // 0x42c(0x04)
	float OverlapDepth; // 0x430(0x04)
	float WallOverlapToleranceSmall; // 0x434(0x04)
	float WallOverlapToleranceLarge; // 0x438(0x04)
	float StairsDetectionTolerance; // 0x43c(0x04)
	float ZLayerTolerance; // 0x440(0x04)
	int32_t MaximumJumpEnergy; // 0x444(0x04)
	bool bDilateHeights; // 0x448(0x01)
	char pad_449[0x3]; // 0x449(0x03)
	int32_t MinimumValidVolume; // 0x44c(0x04)
	bool bExtendIntoWalls; // 0x450(0x01)
	bool bTrackPatchOverlaps; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	float PatchOverlapExtent; // 0x454(0x04)
	struct FClassInclusionExclusionFilter OverlapFilter; // 0x458(0x50)
	char pad_4A8[0x8]; // 0x4a8(0x08)
	struct TArray<struct AActor*> OverlappingActors; // 0x4b0(0x10)
	struct TMap<struct FIntPoint, struct FPatchNode> NodeMap; // 0x4c0(0x50)
	struct FVector ForwardVector; // 0x510(0x0c)
	struct FVector RightVector; // 0x51c(0x0c)
	char pad_528[0x8]; // 0x528(0x08)
	struct FTransform GridTransform; // 0x530(0x30)
	struct FNodeGrid NodeGrid; // 0x560(0x48)
	float OverlapHeight; // 0x5a8(0x04)
	char pad_5AC[0x184]; // 0x5ac(0x184)

	void SetOverlapHeightWithGFTBeforeBeginPlay(float NewOverlapHeight, enum class EGameFeatureToggleName GFTToCheck); // Function ShooterGame.CellularPatch.SetOverlapHeightWithGFTBeforeBeginPlay // (Final|Native|Protected|BlueprintCallable) // @ game+0x37f51e0
	bool PatchBuilt(); // Function ShooterGame.CellularPatch.PatchBuilt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f51b0
	void OnNodeGridFailed(); // Function ShooterGame.CellularPatch.OnNodeGridFailed // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnNodeGridCreated(); // Function ShooterGame.CellularPatch.OnNodeGridCreated // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnActorEndOverlapPatch(struct AActor* Actor); // Function ShooterGame.CellularPatch.OnActorEndOverlapPatch // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnActorBeginOverlapPatch(struct AActor* Actor); // Function ShooterGame.CellularPatch.OnActorBeginOverlapPatch // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void NetMulticastUpdateNodeGrid(struct FNodeGrid NewGrid); // Function ShooterGame.CellularPatch.NetMulticastUpdateNodeGrid // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x37f5020
	bool IsLocationInsideCellVolume(struct FVector& Location, float ZWorldHeight, int32_t ValidOverlapDistance, bool bCheckConvexHullOnPartiallyOutsideCells); // Function ShooterGame.CellularPatch.IsLocationInsideCellVolume // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f4ea0
	bool IsAdjacentToNodeWithStatus(struct FIntPoint Coords, enum class ENodeStatus Status); // Function ShooterGame.CellularPatch.IsAdjacentToNodeWithStatus // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x37f4dd0
	bool IsActorInsideCellVolume(struct AActor* Actor, int32_t ValidOverlapDistance, bool bCheckConvexHullOnPartiallyOutsideCells); // Function ShooterGame.CellularPatch.IsActorInsideCellVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x37f4cc0
	void GetSortedInsideNodeList(struct TArray<struct FSortedNode>& Nodes); // Function ShooterGame.CellularPatch.GetSortedInsideNodeList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x37f4c10
	struct FString GetPatchDebugString(); // Function ShooterGame.CellularPatch.GetPatchDebugString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f4b90
	float GetNodeScore(struct FIntPoint Location, float NodeDistance, bool& bValidNode); // Function ShooterGame.CellularPatch.GetNodeScore // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x37f4a60
	struct FVector GetNodeLocation(struct FIntPoint Coords); // Function ShooterGame.CellularPatch.GetNodeLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f49c0
	bool GetNodeAt(struct FIntPoint& Location, struct FPatchNode& FoundNode); // Function ShooterGame.CellularPatch.GetNodeAt // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f47f0
	float GetMaxNodeDistance(); // Function ShooterGame.CellularPatch.GetMaxNodeDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f47c0
	struct TArray<struct FIntPoint> GetLocalPoints(struct FVector& Location); // Function ShooterGame.CellularPatch.GetLocalPoints // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f46e0
	void GetGridSize(struct FIntPoint& GridMin, struct FIntPoint& GridMax); // Function ShooterGame.CellularPatch.GetGridSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f4610
	enum class EEdgeStatus GetEdgesInCell(struct FIntPoint OriginNode, struct TArray<struct FCellEdge>& Edges); // Function ShooterGame.CellularPatch.GetEdgesInCell // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f4510
	float GetDistanceToEdgeOfPatch(struct FVector& Location); // Function ShooterGame.CellularPatch.GetDistanceToEdgeOfPatch // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f4470
	float GetDistanceToCenterOfPatch(struct FVector& Location); // Function ShooterGame.CellularPatch.GetDistanceToCenterOfPatch // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f43d0
	struct FIntPoint GetClosestGridPoint(struct FVector& Location, struct FVector& GridOffset); // Function ShooterGame.CellularPatch.GetClosestGridPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f42e0
	bool GetCellVolumeInfoIfInside(struct FVector& Location, float WorldZHeight, bool bCheckConvexHullOnPartiallyOutsideVolumes, struct FPatchCellVolumeInfo& OutFoundCellInfo); // Function ShooterGame.CellularPatch.GetCellVolumeInfoIfInside // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f4100
	bool GetCellVolumeAt(struct FIntPoint& Location, struct FPatchCellVolume& FoundVolume); // Function ShooterGame.CellularPatch.GetCellVolumeAt // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f3fd0
	struct FVector GetCellLocation(struct FIntPoint Coords); // Function ShooterGame.CellularPatch.GetCellLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x37f3f30
	bool GetCellHeight(struct FVector& Location, float& OutMinHeight, float& OutMaxHeight, float& BlendedFloorHeight, float& BlendedCeilingHeight); // Function ShooterGame.CellularPatch.GetCellHeight // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37f3d20
	void ExitOverlapPatchTimer(); // Function ShooterGame.CellularPatch.ExitOverlapPatchTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x2024060
	void EnterOverlapPatchTimer(); // Function ShooterGame.CellularPatch.EnterOverlapPatchTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x2024060
	void AuthSetPatchOverlapExtent(float NewPatchOverlapExtent); // Function ShooterGame.CellularPatch.AuthSetPatchOverlapExtent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37f3af0
};

// Class ShooterGame.CeremonyUIData
// Size: 0x90 (Inherited: 0x90)
struct UCeremonyUIData : UBaseContentUIData {
};

// Class ShooterGame.CeremonyDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UCeremonyDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.CharacterAbilityWidget
// Size: 0x358 (Inherited: 0x338)
struct UCharacterAbilityWidget : UAresTouchWidgetComponent {
	struct AShooterCharacter* OwningCharacter; // 0x338(0x08)
	struct AAresEquippable* Equippable; // 0x340(0x08)
	char pad_348[0x10]; // 0x348(0x10)

	void StopWidget(bool bForceStop); // Function ShooterGame.CharacterAbilityWidget.StopWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37fec10
	struct UPanelSlot* StartWidget(struct AShooterCharacter* WidgetCharacter, struct AAresEquippable* WidgetEquippable, struct UPanelWidget* Parent); // Function ShooterGame.CharacterAbilityWidget.StartWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37feb00
	void OverrideIcon(struct UTexture* OverrideTexture); // Function ShooterGame.CharacterAbilityWidget.OverrideIcon // (BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnStopWidget(); // Function ShooterGame.CharacterAbilityWidget.OnStopWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnStartWidget(); // Function ShooterGame.CharacterAbilityWidget.OnStartWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnDeactivateWidget(); // Function ShooterGame.CharacterAbilityWidget.OnDeactivateWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnActivateWidget(); // Function ShooterGame.CharacterAbilityWidget.OnActivateWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void DeactivateWidget(); // Function ShooterGame.CharacterAbilityWidget.DeactivateWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37fcdd0
	void ActivateWidget(struct AShooterCharacter* WidgetCharacter, struct AAresEquippable* WidgetEquippable); // Function ShooterGame.CharacterAbilityWidget.ActivateWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x37fc540
};

// Class ShooterGame.CharacterAdvancementComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UCharacterAdvancementComponent : UActorComponent {
	int32_t MaxEnergyForAbilities; // 0xe8(0x04)
	int32_t MaxExperience; // 0xec(0x04)

	void AuthExperienceChanged(int32_t OldExperience, int32_t NewExperience); // Function ShooterGame.CharacterAdvancementComponent.AuthExperienceChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.CharacterDataViewModel
// Size: 0xe0 (Inherited: 0x48)
struct UCharacterDataViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnCharacterHandlesChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnCharacterLoaded; // 0x58(0x10)
	struct FCharacterHandles CharacterHandles; // 0x68(0x50)
	char pad_B8[0x28]; // 0xb8(0x28)

	void SetCharacterHandles(struct FCharacterHandles NewCharacterHandles); // Function ShooterGame.CharacterDataViewModel.SetCharacterHandles // (Final|Native|Protected|BlueprintCallable) // @ game+0x37fe630
	void Refresh(); // Function ShooterGame.CharacterDataViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x37fe580
	void OnCharacterHandlesLoaded(struct FCharacterHandles& LoadedCharacterHandles); // Function ShooterGame.CharacterDataViewModel.OnCharacterHandlesLoaded // (Final|Native|Private|HasOutParms) // @ game+0x37fe240
	void OnCharacterHandleLoaded(struct UCharacterHandle* LoadedCharacterHandle); // Function ShooterGame.CharacterDataViewModel.OnCharacterHandleLoaded // (Final|Native|Private) // @ game+0x37fe1b0
	void LoadCharacterDataAsset(struct UCharacterDataAsset* CharacterDataAsset, struct FCharacterHandleLoadOptions CharacterHandleLoadOptions); // Function ShooterGame.CharacterDataViewModel.LoadCharacterDataAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x37fdf50
	void InitFromCharacter(struct UCharacterDataAsset* CharacterDataAsset, struct FCharacterHandleLoadOptions CharacterHandleLoadOptions); // Function ShooterGame.CharacterDataViewModel.InitFromCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x37fdb30
	void InitAllCharacters(struct FCharacterHandleLoadOptions CharacterHandleLoadOptions); // Function ShooterGame.CharacterDataViewModel.InitAllCharacters // (Final|Native|Public|BlueprintCallable) // @ game+0x37fda90
	struct FCharacterHandles GetCharacterHandles(); // Function ShooterGame.CharacterDataViewModel.GetCharacterHandles // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x37fd060
	void BindContentLibraryDelegates(); // Function ShooterGame.CharacterDataViewModel.BindContentLibraryDelegates // (Final|Native|Private) // @ game+0x37fcaf0
};

// Class ShooterGame.CharacterHudComponent
// Size: 0x100 (Inherited: 0xe8)
struct UCharacterHudComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	bool bDisplayInHud; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	uint32_t DisplayPriority; // 0xfc(0x04)

	bool ShouldDisplay(); // Function ShooterGame.CharacterHudComponent.ShouldDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37fe940
	void GetCharacterHudDrawValues(struct FCharacterHudDrawValues& Out); // Function ShooterGame.CharacterHudComponent.GetCharacterHudDrawValues // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
};

// Class ShooterGame.CharacterHudManagerComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UCharacterHudManagerComponent : UActorComponent {
	struct TArray<struct UCharacterHudComponent*> RegisteredComponents; // 0xe8(0x10)

	void UnregisterComponent(struct UCharacterHudComponent* Component); // Function ShooterGame.CharacterHudManagerComponent.UnregisterComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x37fed90
	void RegisterComponent(struct UCharacterHudComponent* Component); // Function ShooterGame.CharacterHudManagerComponent.RegisterComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x37fe5a0
};

// Class ShooterGame.AresCharacterHUDUIDataAsset
// Size: 0x88 (Inherited: 0x38)
struct UAresCharacterHUDUIDataAsset : UDataAsset {
	struct TMap<struct TSoftClassPtr<UObject>, struct FCharacterHUDUIDataStruct> HUDData; // 0x38(0x50)
};

// Class ShooterGame.CharacterSelectScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct UCharacterSelectScreen : UDesignableUserWidget {
};

// Class ShooterGame.CharacterShopResponseComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UCharacterShopResponseComponent : UActorComponent {

	void SetShopVisibility(bool bIsVisible); // Function ShooterGame.CharacterShopResponseComponent.SetShopVisibility // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.CharacterSprayComponent
// Size: 0x138 (Inherited: 0xe8)
struct UCharacterSprayComponent : UActorComponent {
	float MaxSprayDistance; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FNoiseEventData NoiseEventData; // 0xf0(0x38)
	struct FMulticastInlineDelegate OnSprayFailureOutOfRange; // 0x128(0x10)

	void OnRep_SprayFailureOutOfRange(); // Function ShooterGame.CharacterSprayComponent.OnRep_SprayFailureOutOfRange // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x36355e0
	bool AuthValidateAndTriggerSpray(struct AAresSpray* SprayToTrigger, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.CharacterSprayComponent.AuthValidateAndTriggerSpray // (Final|Native|Public) // @ game+0x37fca20
	bool AuthTraceSpray(struct FVector& TraceStart, struct FVector& TraceEnd, struct FHitResult& OutHit); // Function ShooterGame.CharacterSprayComponent.AuthTraceSpray // (BlueprintAuthorityOnly|Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x37fc880
	bool AuthTracePawnChannel(struct FVector& TraceStart, struct FVector& TraceEnd, struct FHitResult& OutHit); // Function ShooterGame.CharacterSprayComponent.AuthTracePawnChannel // (Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x37fc6f0
	void AuthOnCharacterSprayed(struct AAresSpray* UsedSpray, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.CharacterSprayComponent.AuthOnCharacterSprayed // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x37fc610
	bool AuthCanCharacterSpray(); // Function ShooterGame.CharacterSprayComponent.AuthCanCharacterSpray // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x37df490
};

// Class ShooterGame.ChatFriendsMetadataManager
// Size: 0x128 (Inherited: 0x80)
struct UChatFriendsMetadataManager : UInitSystem {
	struct FMulticastInlineDelegate OnChatFriendsMetadataUpdated; // 0x80(0x10)
	bool bInitialized; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UChatFriendsMetadataService* ChatFriendsMetadataService; // 0x98(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0xa0(0x08)
	char pad_A8[0x30]; // 0xa8(0x30)
	struct TMap<struct FString, struct FChatFriendMetadata> FriendMetadataByPuuid; // 0xd8(0x50)

	void SetChatFriendNote(struct FString Subject, struct FString Note); // Function ShooterGame.ChatFriendsMetadataManager.SetChatFriendNote // (Final|Native|Public|BlueprintCallable) // @ game+0x37fe7a0
	void HandleChatSessionDisconnected(); // Function ShooterGame.ChatFriendsMetadataManager.HandleChatSessionDisconnected // (Final|Native|Private) // @ game+0x37fda70
	void HandleChatSessionConnected(); // Function ShooterGame.ChatFriendsMetadataManager.HandleChatSessionConnected // (Final|Native|Private) // @ game+0x37fda50
	struct UChatFriendsMetadataManager* GetChatFriendsMetadataManager(struct UObject* WorldContextObject); // Function ShooterGame.ChatFriendsMetadataManager.GetChatFriendsMetadataManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37fd340
	struct FChatFriendMetadata GetChatFriendMetadata(struct FString Subject); // Function ShooterGame.ChatFriendsMetadataManager.GetChatFriendMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37fd1a0
};

// Class ShooterGame.ChatFriendsMetadataService
// Size: 0x38 (Inherited: 0x30)
struct UChatFriendsMetadataService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ChatSessionManager
// Size: 0x178 (Inherited: 0x80)
struct UChatSessionManager : UInitSystem {
	struct FMulticastInlineDelegate OnChatSessionConnected; // 0x80(0x10)
	struct FMulticastInlineDelegate OnChatSessionDisconnected; // 0x90(0x10)
	struct FMulticastInlineDelegate OnChatSessionLoaded; // 0xa0(0x10)
	char pad_B0[0x20]; // 0xb0(0x20)
	struct UChatSessionService* ChatSessionService; // 0xd0(0x08)
	char pad_D8[0xa0]; // 0xd8(0xa0)

	bool IsChatSessionLoaded(); // Function ShooterGame.ChatSessionManager.IsChatSessionLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37fdc50
	bool IsChatSessionConnected(); // Function ShooterGame.ChatSessionManager.IsChatSessionConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37fdc20
	struct UChatSessionManager* GetChatSessionManager(struct UObject* WorldContextObject); // Function ShooterGame.ChatSessionManager.GetChatSessionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37fd3d0
};

// Class ShooterGame.ChatSessionService
// Size: 0x38 (Inherited: 0x30)
struct UChatSessionService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ChatUtils
// Size: 0x30 (Inherited: 0x30)
struct UChatUtils : UObject {

	struct FString SubjectToChatPid(struct FString InSubject); // Function ShooterGame.ChatUtils.SubjectToChatPid // (Final|Native|Static|Public) // @ game+0x37feca0
	struct TArray<struct FString> SortStringList(struct TArray<struct FString>& Input); // Function ShooterGame.ChatUtils.SortStringList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fe970
	void ParseMessageParts(struct FString Message, struct UEmojiMapping* EmojiMapping, enum class EMessagePartType PartType, struct TArray<struct FMessagePart>& Out); // Function ShooterGame.ChatUtils.ParseMessageParts // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fe380
	struct FString MessagePartsToRichText(struct TArray<struct FMessagePart>& Parts); // Function ShooterGame.ChatUtils.MessagePartsToRichText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fe040
	bool IsFromObserver(struct FUnifiedChatMessage& UnifiedChatMessage); // Function ShooterGame.ChatUtils.IsFromObserver // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fdea0
	bool IsFromLocalPlayer(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.IsFromLocalPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fdd90
	bool IsFromEnemyTeam(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.IsFromEnemyTeam // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fdc80
	struct FText GetUnformattedChatMessageText(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.GetUnformattedChatMessageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37fd8d0
	struct FTextBlockStyle GetStyle(struct FRichTextStyleRow& Input); // Function ShooterGame.ChatUtils.GetStyle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x37fd780
	int64_t GetMUCMessageUnixTime(struct FMUCMessage& MUCMessage); // Function ShooterGame.ChatUtils.GetMUCMessageUnixTime // (Final|Native|Static|Public|HasOutParms) // @ game+0x37fd6d0
	struct FDateTime GetMUCMessageTimeStamp(struct FMUCMessage& MUCMessage); // Function ShooterGame.ChatUtils.GetMUCMessageTimeStamp // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x37fd610
	struct FText GetFormattedChatMessageText(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.GetFormattedChatMessageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37fd490
	struct UEmojiMapping* GetEmojiMapping(); // Function ShooterGame.ChatUtils.GetEmojiMapping // (Final|Native|Static|Public) // @ game+0x37fd460
	struct FText GetChannelText(enum class EChatRoomType ChatRoomType); // Function ShooterGame.ChatUtils.GetChannelText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x37fcf70
	struct FText GetAuthorText(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.GetAuthorText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x37fcdf0
	bool CompareStrings(struct FString LHS, struct FString Rhs); // Function ShooterGame.ChatUtils.CompareStrings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x37fccc0
	bool ChatPidToSubject(struct FString InPid, struct FString& Out); // Function ShooterGame.ChatUtils.ChatPidToSubject // (Final|Native|Static|Public|HasOutParms) // @ game+0x37fcbb0
	void CachePid(struct FString Pid); // Function ShooterGame.ChatUtils.CachePid // (Final|Native|Static|Public) // @ game+0x37fcb10
};

// Class ShooterGame.ResourceInteractionStateComponent
// Size: 0x2e8 (Inherited: 0x2e0)
struct UResourceInteractionStateComponent : UScriptStateComponent {
	struct UResourceComponent* ExplicitResourceComponent; // 0x2e0(0x08)

	void SetResourceComponent(struct UResourceComponent* ResourceComponent); // Function ShooterGame.ResourceInteractionStateComponent.SetResourceComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3ac5360
	struct UResourceComponent* GetResourceComponent(); // Function ShooterGame.ResourceInteractionStateComponent.GetResourceComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ac3b80
};

// Class ShooterGame.CheckResourcesStateComponent
// Size: 0x2f8 (Inherited: 0x2e8)
struct UCheckResourcesStateComponent : UResourceInteractionStateComponent {
	bool bReportErrorOnFailure; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct UScriptStateComponent* FailState; // 0x2f0(0x08)

	void SetFailState(struct UScriptStateComponent* NewFailState); // Function ShooterGame.CheckResourcesStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x3805440
};

// Class ShooterGame.ChildDamageSectionComponent
// Size: 0x148 (Inherited: 0x148)
struct UChildDamageSectionComponent : UDamageSectionComponent {
};

// Class ShooterGame.ChildRegionDamageSectionComponent
// Size: 0x160 (Inherited: 0x148)
struct UChildRegionDamageSectionComponent : UChildDamageSectionComponent {
	bool bCanCauseDamageWithNullDamageEventComponent; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct TArray<struct UPrimitiveComponent*> DamageRegions; // 0x150(0x10)

	struct TArray<struct UPrimitiveComponent*> GetDamageRegions(); // Function ShooterGame.ChildRegionDamageSectionComponent.GetDamageRegions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3804ac0
	void AddDamageRegion(struct UPrimitiveComponent* Component); // Function ShooterGame.ChildRegionDamageSectionComponent.AddDamageRegion // (Final|Native|Public|BlueprintCallable) // @ game+0x3804a00
};

// Class ShooterGame.ChromaBase
// Size: 0x150 (Inherited: 0x118)
struct UChromaBase : UAresWeaponAttachmentComponent {
	struct FBaseUIData UIData; // 0x118(0x38)
};

// Class ShooterGame.ChromaMatConstants
// Size: 0x230 (Inherited: 0x150)
struct UChromaMatConstants : UChromaBase {
	bool bOverrideAlbedo; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct TSoftClassPtr<UObject> Albedo; // 0x158(0x30)
	bool bOverrideMask; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
	struct TSoftClassPtr<UObject> Mask; // 0x190(0x30)
	bool bOverrideMRAS; // 0x1c0(0x01)
	char pad_1C1[0x7]; // 0x1c1(0x07)
	struct TSoftClassPtr<UObject> MRAS; // 0x1c8(0x30)
	bool bOverrideNormal; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct TSoftClassPtr<UObject> Normal; // 0x200(0x30)
};

// Class ShooterGame.ChromaMatOverride
// Size: 0x160 (Inherited: 0x150)
struct UChromaMatOverride : UChromaBase {
	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x150(0x10)
};

// Class ShooterGame.ChromaSkinOverride
// Size: 0x150 (Inherited: 0x150)
struct UChromaSkinOverride : UChromaBase {
};

// Class ShooterGame.SpectateActionComponent
// Size: 0x108 (Inherited: 0xe8)
struct USpectateActionComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	struct UScreenTransitionComponent* CachedTransitionComponent; // 0xf8(0x08)
	struct UViewTargetComponent* CachedViewTargetComponent; // 0x100(0x08)
};

// Class ShooterGame.CinematicCameraComponent
// Size: 0x120 (Inherited: 0x108)
struct UCinematicCameraComponent : USpectateActionComponent {
	char pad_108[0x8]; // 0x108(0x08)
	struct FMulticastInlineDelegate OnAuthEnterCinematicCamera; // 0x110(0x10)

	void ServerEnterCinematicCamera(struct FCinematicCameraData CameraData); // Function ShooterGame.CinematicCameraComponent.ServerEnterCinematicCamera // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x38052a0
};

// Class ShooterGame.CinematicCameraMarker
// Size: 0xa30 (Inherited: 0xa20)
struct ACinematicCameraMarker : ACameraActor {
	struct FName Layer; // 0xa20(0x0c)
	char pad_A2C[0x4]; // 0xa2c(0x04)
};

// Class ShooterGame.CinematicsDebugComponent
// Size: 0x108 (Inherited: 0xe8)
struct UCinematicsDebugComponent : UActorComponent {
	struct TArray<struct FCinematicCameraDebugData> DebugClientCinematicCameras; // 0xe8(0x10)
	struct TArray<struct FCinematicCameraDebugData> DebugServerCinematicCameras; // 0xf8(0x10)

	void OnCinematicCamerasInitialized(struct TArray<struct FCinematicCameraData>& CameraDataArray); // Function ShooterGame.CinematicsDebugComponent.OnCinematicCamerasInitialized // (Final|Native|Private|HasOutParms) // @ game+0x3804e60
	void NetMulticastDebugUpdateCinematicCameraData(struct TArray<struct FCinematicCameraDebugData> DebugServerData); // Function ShooterGame.CinematicsDebugComponent.NetMulticastDebugUpdateCinematicCameraData // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x3804ca0
};

// Class ShooterGame.CinematicsManagerComponent
// Size: 0x1e0 (Inherited: 0xe8)
struct UCinematicsManagerComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	float DefaultViewBoxSize; // 0xf8(0x04)
	float LookAheadTime; // 0xfc(0x04)
	float FieldOfViewDegreesMax; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct TArray<struct FCinematicCameraData> CinematicCameras; // 0x108(0x10)
	char pad_118[0x50]; // 0x118(0x50)
	struct TArray<struct FName> AuthActiveCinematicCameraLayers; // 0x168(0x10)
	char pad_178[0x68]; // 0x178(0x68)

	float ScoreCamera(struct FCinematicCameraScoreData& CameraToScore); // Function ShooterGame.CinematicsManagerComponent.ScoreCamera // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void OnRep_CinematicCameras(); // Function ShooterGame.CinematicsManagerComponent.OnRep_CinematicCameras // (Final|Native|Private) // @ game+0x38050b0
	void OnRep_ActiveCinematicCameraLayers(); // Function ShooterGame.CinematicsManagerComponent.OnRep_ActiveCinematicCameraLayers // (Final|Native|Private) // @ game+0x3805090
	void NetMulticastInitializeCinematics(struct TArray<struct FCinematicCameraData> InCinematicCameras); // Function ShooterGame.CinematicsManagerComponent.NetMulticastInitializeCinematics // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3804d90
	bool IsCameraAvailable(struct FCinematicCameraData& CameraData); // Function ShooterGame.CinematicsManagerComponent.IsCameraAvailable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3804ba0
	void AuthSetCinematicCameraLayerInactive(struct FName LayerName); // Function ShooterGame.CinematicsManagerComponent.AuthSetCinematicCameraLayerInactive // (Final|Native|Public|BlueprintCallable) // @ game+0x3739bd0
	void AuthSetCinematicCameraLayerActive(struct FName LayerName); // Function ShooterGame.CinematicsManagerComponent.AuthSetCinematicCameraLayerActive // (Final|Native|Public|BlueprintCallable) // @ game+0x3739bd0
};

// Class ShooterGame.CircleCrosshairHudElement
// Size: 0x180 (Inherited: 0x178)
struct UCircleCrosshairHudElement : UBaseCrosshairHudElement {
	struct UTexture* CrosshairImage; // 0x178(0x08)
};

// Class ShooterGame.ClientPerformanceMonitoringComponent
// Size: 0x1a0 (Inherited: 0x118)
struct UClientPerformanceMonitoringComponent : UBasePerformanceMonitoringComponent {
	struct FMulticastInlineDelegate OnWipeAllInstabilityData; // 0x118(0x10)
	struct FMulticastInlineDelegate OnDeveloperItemRegistered; // 0x128(0x10)
	struct FMulticastInlineDelegate OnDeveloperItemUnregistered; // 0x138(0x10)
	struct FMulticastInlineDelegate OnPopulateDeveloperItems; // 0x148(0x10)
	struct FMulticastInlineDelegate OnClearDeveloperItems; // 0x158(0x10)
	struct UMetricInstabilityTrackingDetails* ServerFramerateInstability; // 0x168(0x08)
	struct UMetricInstabilityTrackingDetails* AveragePing; // 0x170(0x08)
	struct UNetworkOutageInstabilityTrackingDetails* ServerResponsiveness; // 0x178(0x08)
	struct URemoteClientPredictionTrackingDetails* RemoteClientPredicition; // 0x180(0x08)
	struct UMetricInstabilityTrackingDetails* ClientLogInstability; // 0x188(0x08)
	struct UMetricInstabilityTrackingDetails* ServerLogInstability; // 0x190(0x08)
	char pad_198[0x8]; // 0x198(0x08)

	void UnregisterDeveloperItem(struct UInstabilityTrackingDetails* Item); // Function ShooterGame.ClientPerformanceMonitoringComponent.UnregisterDeveloperItem // (Final|Native|Public|BlueprintCallable) // @ game+0x38054d0
	void RegisterDeveloperItem(struct UInstabilityTrackingDetails* NewItem); // Function ShooterGame.ClientPerformanceMonitoringComponent.RegisterDeveloperItem // (Final|Native|Public|BlueprintCallable) // @ game+0x3805210
	void PopulateDeveloperItems(); // Function ShooterGame.ClientPerformanceMonitoringComponent.PopulateDeveloperItems // (Final|Native|Public|BlueprintCallable) // @ game+0x38051f0
	struct UNetworkOutageInstabilityTrackingDetails* GetServerResponsivenessInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetServerResponsivenessInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3804b70
	struct UMetricInstabilityTrackingDetails* GetServerFramerateInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetServerFramerateInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3804b40
	struct UMetricInstabilityTrackingDetails* GetClientFramerateInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetClientFramerateInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36cd8f0
	struct UMetricInstabilityTrackingDetails* GetAveragePingInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetAveragePingInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3804a90
};

// Class ShooterGame.ClientPerRoundTelemetryComponent
// Size: 0x210 (Inherited: 0xe8)
struct UClientPerRoundTelemetryComponent : UActorComponent {
	char pad_E8[0x128]; // 0xe8(0x128)

	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x3805160
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnRoundBegin // (Final|Native|Public) // @ game+0x38050d0
	void OnMatchEnd(struct FAresMatchResult& MatchResult); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnMatchEnd // (Final|Native|Public|HasOutParms) // @ game+0x3804f50
	void OnMatchBegin(); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnMatchBegin // (Final|Native|Public) // @ game+0x3804f30
};

// Class ShooterGame.ClientPlayerStateTelemetryComponent
// Size: 0x290 (Inherited: 0x100)
struct UClientPlayerStateTelemetryComponent : UBasePlayerStateTelemetryComponent {
	char pad_100[0x190]; // 0x100(0x190)

	void OnMatchEnd(struct FAresMatchResult& MatchResult); // Function ShooterGame.ClientPlayerStateTelemetryComponent.OnMatchEnd // (Final|Native|Protected|HasOutParms) // @ game+0x3804ff0
};

// Class ShooterGame.ClientTelemetryPersistence
// Size: 0x68 (Inherited: 0x30)
struct UClientTelemetryPersistence : UObject {
	char pad_30[0x38]; // 0x30(0x38)
};

// Class ShooterGame.CloudMesh
// Size: 0x7f0 (Inherited: 0x600)
struct UCloudMesh : UProceduralMeshComponent {
	float CloudBottomOffset; // 0x600(0x04)
	float MinDistanceFromCenterClamp; // 0x604(0x04)
	float ClientPercentTimePerTick; // 0x608(0x04)
	float ClientMaxTimePerTick; // 0x60c(0x04)
	float ServerPerStepTime; // 0x610(0x04)
	float ClientTargetEdgeLength; // 0x614(0x04)
	float ServerTargetEdgeLength; // 0x618(0x04)
	int32_t ClientNumSmoothingSteps; // 0x61c(0x04)
	bool bClientGenerateCollision; // 0x620(0x01)
	char pad_621[0x3]; // 0x621(0x03)
	int32_t ServerNumSmoothingSteps; // 0x624(0x04)
	bool bServerGenerateCollision; // 0x628(0x01)
	char pad_629[0x3]; // 0x629(0x03)
	int32_t ClientNumMeshes; // 0x62c(0x04)
	char pad_630[0x1a0]; // 0x630(0x1a0)
	struct FMulticastInlineDelegate OnCloudMeshGenerated; // 0x7d0(0x10)
	bool bForceFinish; // 0x7e0(0x01)
	char pad_7E1[0xf]; // 0x7e1(0x0f)

	bool MeshBuilt(); // Function ShooterGame.CloudMesh.MeshBuilt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x380cde0
	float GetVisualDistanceFromCenter(float ActualDistance); // Function ShooterGame.CloudMesh.GetVisualDistanceFromCenter // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x380c8f0
};

// Class ShooterGame.CNAntiAddictionManager
// Size: 0x220 (Inherited: 0x80)
struct UCNAntiAddictionManager : UInitSystem {
	struct FMulticastInlineDelegate OnCNAntiAddictionQueueRestrictionChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnCNAntiAddictionTimeRemainingChanged; // 0x90(0x10)
	char pad_A0[0x120]; // 0xa0(0x120)
	struct UCNAntiAddictionService* CNAntiAddictionService; // 0x1c0(0x08)
	struct UNotificationManager* NotificationManager; // 0x1c8(0x08)
	struct UConfigManager* ConfigManager; // 0x1d0(0x08)
	struct URMSManager* RMSManager; // 0x1d8(0x08)
	struct UModalManager* ModalManager; // 0x1e0(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x1e8(0x08)
	struct FUINotification ShutdownNotification; // 0x1f0(0x20)
	char pad_210[0x10]; // 0x210(0x10)

	bool HasQueueRestriction(struct FString QueueID); // Function ShooterGame.CNAntiAddictionManager.HasQueueRestriction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x380ca60
	void HandleCNAntiAddictionModalAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.CNAntiAddictionManager.HandleCNAntiAddictionModalAction // (Final|Native|Public) // @ game+0x380c990
	int64_t GetTimeRequiredForQueue(struct FString QueueID); // Function ShooterGame.CNAntiAddictionManager.GetTimeRequiredForQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x380c7f0
	int64_t GetTimeRemaining(); // Function ShooterGame.CNAntiAddictionManager.GetTimeRemaining // (Final|Native|Public|BlueprintCallable) // @ game+0x380c7c0
	struct FUINotification GetShutdownNotification(); // Function ShooterGame.CNAntiAddictionManager.GetShutdownNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x380c610
	struct UCNAntiAddictionManager* GetCNAntiAddictionManager(struct UObject* WorldContextObject); // Function ShooterGame.CNAntiAddictionManager.GetCNAntiAddictionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x380c220
};

// Class ShooterGame.CNAntiAddictionService
// Size: 0x40 (Inherited: 0x30)
struct UCNAntiAddictionService : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UConfigManager* ConfigManager; // 0x38(0x08)
};

// Class ShooterGame.CoachDebugComponent
// Size: 0x148 (Inherited: 0xe8)
struct UCoachDebugComponent : UActorComponent {
	char pad_E8[0x50]; // 0xe8(0x50)
	struct FName LastCoachTeamName; // 0x138(0x0c)
	char pad_144[0x4]; // 0x144(0x04)

	void OnRoundEnded(int32_t RoundNumber); // Function ShooterGame.CoachDebugComponent.OnRoundEnded // (Final|Native|Private) // @ game+0x380d000
};

// Class ShooterGame.CollectionsContentGridViewModel
// Size: 0xc8 (Inherited: 0x48)
struct UCollectionsContentGridViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnContentItemsChanged; // 0x48(0x10)
	struct UAresBasePrimaryDataAsset* ContentItemClass; // 0x58(0x08)
	char pad_60[0x68]; // 0x60(0x68)

	void SetContentItems(struct TArray<struct UBaseHandle*> NewContentItems); // Function ShooterGame.CollectionsContentGridViewModel.SetContentItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x380d360
	void Refresh(); // Function ShooterGame.CollectionsContentGridViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x380d120
	void OnSpraysLoaded(struct FSprayHandles& Sprays); // Function ShooterGame.CollectionsContentGridViewModel.OnSpraysLoaded // (Final|Native|Private|HasOutParms) // @ game+0x380ce10
	void OnPlayerCardsLoaded(struct FPlayerCardHandles& PlayerCards); // Function ShooterGame.CollectionsContentGridViewModel.OnPlayerCardsLoaded // (Final|Native|Private|HasOutParms) // @ game+0x380ce10
	void OnEquippableSkinsLoaded(struct FEquippableSkinHandles& EquippableSkins); // Function ShooterGame.CollectionsContentGridViewModel.OnEquippableSkinsLoaded // (Final|Native|Private|HasOutParms) // @ game+0x380ce10
	void OnEquippableCharmsLoaded(struct FEquippableCharmHandles& EquippableCharms); // Function ShooterGame.CollectionsContentGridViewModel.OnEquippableCharmsLoaded // (Final|Native|Private|HasOutParms) // @ game+0x380ce10
	void Init(struct UAresBasePrimaryDataAsset* AssetClass, bool AllowItemsWithInvalidInventories); // Function ShooterGame.CollectionsContentGridViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x380cb60
	struct TArray<struct UBaseHandle*> GetContentItems(); // Function ShooterGame.CollectionsContentGridViewModel.GetContentItems // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x380c2d0
	void ClearContentItems(); // Function ShooterGame.CollectionsContentGridViewModel.ClearContentItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x380c200
};

// Class ShooterGame.CollectionsGunSkinViewModel
// Size: 0xd0 (Inherited: 0x48)
struct UCollectionsGunSkinViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnSkinHandleChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnChromaHandleChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnSkinNameChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnSkinRarityIconChanged; // 0x78(0x10)
	char pad_88[0x48]; // 0x88(0x48)

	void SetSkinRarityIcon(struct UTexture2D* NewSkinRarityIcon); // Function ShooterGame.CollectionsGunSkinViewModel.SetSkinRarityIcon // (Final|Native|Protected|BlueprintCallable) // @ game+0x380d5e0
	void SetSkinName(struct FText NewSkinName); // Function ShooterGame.CollectionsGunSkinViewModel.SetSkinName // (Final|Native|Protected|BlueprintCallable) // @ game+0x380d4f0
	void SetSkinHandle(struct UEquippableSkinHandle* NewSkinHandle); // Function ShooterGame.CollectionsGunSkinViewModel.SetSkinHandle // (Final|Native|Protected|BlueprintCallable) // @ game+0x380d460
	void SetChromaHandle(struct UEquippableSkinChromaHandle* NewChromaHandle); // Function ShooterGame.CollectionsGunSkinViewModel.SetChromaHandle // (Final|Native|Protected|BlueprintCallable) // @ game+0x380d1e0
	void Refresh(); // Function ShooterGame.CollectionsGunSkinViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x380d140
	void OnSkinLoaded(struct UEquippableSkinHandle* EquippableSkinHandle); // Function ShooterGame.CollectionsGunSkinViewModel.OnSkinLoaded // (Final|Native|Private) // @ game+0x380d090
	void OnEquippableLoaded(struct UEquippableHandle* EquippableHandle); // Function ShooterGame.CollectionsGunSkinViewModel.OnEquippableLoaded // (Final|Native|Private) // @ game+0x380cf50
	void InitFromSkinHandle(struct UEquippableSkinHandle* SkinHandle); // Function ShooterGame.CollectionsGunSkinViewModel.InitFromSkinHandle // (Final|Native|Public|BlueprintCallable) // @ game+0x380ccc0
	void Init(struct UEquippableDataAsset* EquippableData); // Function ShooterGame.CollectionsGunSkinViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x380cc30
	struct UTexture2D* GetSkinRarityIcon(); // Function ShooterGame.CollectionsGunSkinViewModel.GetSkinRarityIcon // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x380c7a0
	struct FText GetSkinName(); // Function ShooterGame.CollectionsGunSkinViewModel.GetSkinName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x380c6e0
	struct UEquippableSkinHandle* GetSkinHandle(); // Function ShooterGame.CollectionsGunSkinViewModel.GetSkinHandle // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3743720
	struct UEquippableSkinChromaHandle* GetChromaHandle(); // Function ShooterGame.CollectionsGunSkinViewModel.GetChromaHandle // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x380c2b0
};

// Class ShooterGame.ColorPickerWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UColorPickerWidget : UBaseSettingsWidget {

	bool SetColorFromHexString(struct FString InHex, struct FColor& OutColor); // Function ShooterGame.ColorPickerWidget.SetColorFromHexString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x380d270
	struct FColor ResetAlpha(struct FColor InColor); // Function ShooterGame.ColorPickerWidget.ResetAlpha // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x380d160
	bool IsValidColor(struct FColor& InColor); // Function ShooterGame.ColorPickerWidget.IsValidColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x380cd50
	struct FString GetHexStringFromColor(struct FColor& InColor); // Function ShooterGame.ColorPickerWidget.GetHexStringFromColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x380c390
};

// Class ShooterGame.RoundReportEvent
// Size: 0xb8 (Inherited: 0x30)
struct URoundReportEvent : UObject {
	enum class ERoundReportEventType EventType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t CombatReportIndex; // 0x34(0x04)
	int32_t RoundNum; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRoundTimestamp Timestamp; // 0x40(0x18)
	struct FAresDamageInstance DamageInstance; // 0x58(0x20)
	struct UCombatReportTrackingConfigComponent* TrackingConfig; // 0x78(0x08)
	struct FCombatReportTrackingConfig TrackingConfigSnapshot; // 0x80(0x10)
	struct AShooterPlayerState* AssociatedPlayerState; // 0x90(0x08)
	struct FAresAssist AssistInfo; // 0x98(0x10)
	struct FVector Location; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class ShooterGame.CombatReportTrackingConfigComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UCombatReportTrackingConfigComponent : UActorComponent {
	bool bTrackParticipantkHits; // 0xe8(0x01)
	bool bTrackParticipantDamage; // 0xe9(0x01)
	bool bTrackInteractionHits; // 0xea(0x01)
	bool bTrackInteractionDamage; // 0xeb(0x01)
	bool bTrackDamagedRegionally; // 0xec(0x01)
	bool bTrackArmorBreaks; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	struct UCombatReportDamagedDisplayConfig* DamagedDisplayConfig; // 0xf0(0x08)
};

// Class ShooterGame.CombatReportComponent
// Size: 0x180 (Inherited: 0xe8)
struct UCombatReportComponent : UActorComponent {
	char pad_E8[0x28]; // 0xe8(0x28)
	struct TMap<struct URoundReportEvent*, struct FRoundReportEventDeferral> EventDeferrals; // 0x110(0x50)
	struct TArray<struct FRoundReports> Rounds; // 0x160(0x10)
	struct TArray<struct FRoundReportEvents> RoundEvents; // 0x170(0x10)

	void ResetRoundReports(int32_t RoundNum); // Function ShooterGame.CombatReportComponent.ResetRoundReports // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void OnRep_Rounds(); // Function ShooterGame.CombatReportComponent.OnRep_Rounds // (Final|Native|Private) // @ game+0x380cfe0
	struct FRoundReports GetReports(int32_t RoundNum); // Function ShooterGame.CombatReportComponent.GetReports // (Final|Native|Public|BlueprintCallable) // @ game+0x380c460
	bool DamageIsVisionDeferrable(struct AActor* DamageCauser); // Function ShooterGame.CombatReportComponent.DamageIsVisionDeferrable // (Native|Event|Protected|BlueprintEvent) // @ game+0x37de2a0
	void AuthHandleRoundEnded(int32_t RoundNum); // Function ShooterGame.CombatReportComponent.AuthHandleRoundEnded // (Final|Native|Private) // @ game+0x3635550
	void AuthHandlePlayerKill(struct AShooterPlayerState* KillerPlayerState, struct AShooterPlayerState* KilledPlayerState, int32_t KillNumberInRoundForKiller, int32_t KillNumberInRoundForKilled, struct UDamageResponse* Response, struct AAresEquippable* EquippableUsed, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.CombatReportComponent.AuthHandlePlayerKill // (Final|Native|Private|HasOutParms) // @ game+0x380bfd0
};

// Class ShooterGame.CombatReportDamagedDisplayConfig
// Size: 0x48 (Inherited: 0x30)
struct UCombatReportDamagedDisplayConfig : UObject {
	struct FTextureWrapper DamagedIcon; // 0x30(0x08)
	struct FLinearColor DamagedIconTint; // 0x38(0x10)
};

// Class ShooterGame.CombatReportContentWidget
// Size: 0x2e8 (Inherited: 0x2c8)
struct UCombatReportContentWidget : UUserWidget {
	struct UUserWidget* AbilityCastsReportWidget; // 0x2c8(0x08)
	struct UOverlay* ColumnNamesOverlay; // 0x2d0(0x08)
	struct UVerticalBox* InteractionListBox; // 0x2d8(0x08)
	struct UUserWidget* KilledByWidget; // 0x2e0(0x08)
};

// Class ShooterGame.CombatReportHUDElementBase
// Size: 0x2d0 (Inherited: 0x2c8)
struct UCombatReportHUDElementBase : UUserWidget {
	struct UCombatReportContentWidget* CombatReportContentWidget; // 0x2c8(0x08)
};

// Class ShooterGame.CombatTracker
// Size: 0x30 (Inherited: 0x30)
struct UCombatTracker : UInterface {
};

// Class ShooterGame.CommsUtils
// Size: 0x30 (Inherited: 0x30)
struct UCommsUtils : UObject {
};

// Class ShooterGame.CompetitiveSeasonDataAsset
// Size: 0x230 (Inherited: 0x50)
struct UCompetitiveSeasonDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> season; // 0x80(0x30)
	struct TArray<struct UEditableReward*> IronRewards; // 0xb0(0x10)
	struct TArray<struct UEditableReward*> BronzeRewards; // 0xc0(0x10)
	struct TArray<struct UEditableReward*> SilverRewards; // 0xd0(0x10)
	struct TArray<struct UEditableReward*> GoldRewards; // 0xe0(0x10)
	struct TArray<struct UEditableReward*> PlatinumRewards; // 0xf0(0x10)
	struct TArray<struct UEditableReward*> DiamondRewards; // 0x100(0x10)
	struct TArray<struct UEditableReward*> AscendantRewards; // 0x110(0x10)
	struct TArray<struct UEditableReward*> ImmortalRewards; // 0x120(0x10)
	struct TArray<struct UEditableReward*> RadiantRewards; // 0x130(0x10)
	struct TArray<struct FActRankBorderInstance> Borders; // 0x140(0x10)
	struct FDateTime StartTime; // 0x150(0x08)
	struct FDateTime EndTime; // 0x158(0x08)
	struct UDataTable* CompetitiveTierDataTable; // 0x160(0x08)
	struct FCompetitiveSeasonConfig Config; // 0x168(0x78)
	struct TMap<struct TSoftClassPtr<UObject>, struct FCompetitiveSeasonArchives> Archives; // 0x1e0(0x50)

	void OnRequestLoadArchives(); // Function ShooterGame.CompetitiveSeasonDataAsset.OnRequestLoadArchives // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	int32_t GetWinsToNextBorder(int32_t Wins); // Function ShooterGame.CompetitiveSeasonDataAsset.GetWinsToNextBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38155a0
	float GetProgressToNextBorder(int32_t Wins); // Function ShooterGame.CompetitiveSeasonDataAsset.GetProgressToNextBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3815500
	bool GetNextBorder(int32_t Wins, struct FActRankBorderInstance& OutBorder); // Function ShooterGame.CompetitiveSeasonDataAsset.GetNextBorder // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38153b0
	bool GetCurrentBorder(int32_t Wins, struct FActRankBorderInstance& OutBorder); // Function ShooterGame.CompetitiveSeasonDataAsset.GetCurrentBorder // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38151e0
	bool GetCompetitiveTierDataForTier(int32_t Tier, struct FCompetitiveTierData& OutCompetitiveTierData); // Function ShooterGame.CompetitiveSeasonDataAsset.GetCompetitiveTierDataForTier // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38150a0
};

// Class ShooterGame.CompetitiveSeasonUIData
// Size: 0x90 (Inherited: 0x90)
struct UCompetitiveSeasonUIData : UBaseContentUIData {
};

// Class ShooterGame.CompetitiveTierUpdater
// Size: 0x40 (Inherited: 0x30)
struct UCompetitiveTierUpdater : UObject {
	struct UPartyManager* PartyManager; // 0x30(0x08)
	struct UMMRManager* MMRManager; // 0x38(0x08)

	void HandleMMRUpdated(); // Function ShooterGame.CompetitiveTierUpdater.HandleMMRUpdated // (Final|Native|Private) // @ game+0x3815760
};

// Class ShooterGame.ConcatenatedListModel
// Size: 0x60 (Inherited: 0x48)
struct UConcatenatedListModel : UOrderedListModelBase {
	struct TArray<struct FConcatenatedListModel_Entry> ListModels; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)

	void SetListModelList(struct TArray<struct TScriptInterface<IOrderedListModel>>& NewValue); // Function ShooterGame.ConcatenatedListModel.SetListModelList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3815d20
	void SetListModelAt(int32_t ListModelIndex, struct TScriptInterface<IOrderedListModel> ListModel); // Function ShooterGame.ConcatenatedListModel.SetListModelAt // (Final|Native|Public|BlueprintCallable) // @ game+0x3815c30
	void RemoveListModels(struct FIndexRange ListModelRange); // Function ShooterGame.ConcatenatedListModel.RemoveListModels // (Final|Native|Public|BlueprintCallable) // @ game+0x3815ba0
	struct FConcatenatedListModel_MapIndexOuterToInnerResult MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.ConcatenatedListModel.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3815af0
	int32_t MapIndexInnerToOuterByModel(struct TScriptInterface<IOrderedListModel> InnerModel, int32_t InnerIndex); // Function ShooterGame.ConcatenatedListModel.MapIndexInnerToOuterByModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38159f0
	int32_t MapIndexInnerToOuterByListModelIndex(int32_t InnerModelIndex, int32_t InnerIndex); // Function ShooterGame.ConcatenatedListModel.MapIndexInnerToOuterByListModelIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3815920
	void InsertListModels(int32_t StartModelIndex, struct TArray<struct TScriptInterface<IOrderedListModel>>& Models); // Function ShooterGame.ConcatenatedListModel.InsertListModels // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3815830
	int32_t IndexOfListModel(struct TScriptInterface<IOrderedListModel> ListModel); // Function ShooterGame.ConcatenatedListModel.IndexOfListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3815780
	void HandleChildListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.ConcatenatedListModel.HandleChildListModelChange // (Final|Native|Private|HasOutParms) // @ game+0x3815640
	int32_t GetNumListModels(); // Function ShooterGame.ConcatenatedListModel.GetNumListModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38154d0
	struct TScriptInterface<IOrderedListModel> GetListModelAt(int32_t ListModelIndex); // Function ShooterGame.ConcatenatedListModel.GetListModelAt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3815300
	struct UConcatenatedListModel* Create(struct TArray<struct TScriptInterface<IOrderedListModel>>& ListModelList, struct UObject* Outer); // Function ShooterGame.ConcatenatedListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3814fa0
};

// Class ShooterGame.ConditionalInputActionManager
// Size: 0x30 (Inherited: 0x30)
struct UConditionalInputActionManager : UInterface {

	void UpdateConditionalInputActionName(struct FAresConditionalInputAction Action, struct FText& Name); // Function ShooterGame.ConditionalInputActionManager.UpdateConditionalInputActionName // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x381f5b0
	void UpdateConditionalInputActionCallback(struct FAresConditionalInputAction Action, struct FDelegate& Callback); // Function ShooterGame.ConditionalInputActionManager.UpdateConditionalInputActionCallback // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x381f480
	void UpdateConditionalInputActionActive(struct FAresConditionalInputAction Action, bool bActive); // Function ShooterGame.ConditionalInputActionManager.UpdateConditionalInputActionActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x381f370
	void RegisterActivationPreferenceProvider(struct TScriptInterface<IConditionalInputActivationProvider>& Provider); // Function ShooterGame.ConditionalInputActionManager.RegisterActivationPreferenceProvider // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x381ecc0
	void RefreshActionPreferencesForProvider(struct TScriptInterface<IConditionalInputActivationProvider>& Provider); // Function ShooterGame.ConditionalInputActionManager.RefreshActionPreferencesForProvider // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x381ec20
	struct FText GetConditionalInputActionName(struct FAresConditionalInputAction Action); // Function ShooterGame.ConditionalInputActionManager.GetConditionalInputActionName // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x381df60
};

// Class ShooterGame.ConditionalLoopAnimationConductorNode
// Size: 0xd0 (Inherited: 0xa8)
struct UConditionalLoopAnimationConductorNode : UAnimationConductorNodeBase {
	struct TScriptInterface<IAnimationConductorNode> ChildNode; // 0xa8(0x10)
	char pad_B8[0x18]; // 0xb8(0x18)

	void SetExitConditionCallback(struct FDelegate& Delegate); // Function ShooterGame.ConditionalLoopAnimationConductorNode.SetExitConditionCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x381f070
	void SetChildNode(struct TScriptInterface<IAnimationConductorNode> InChildNode); // Function ShooterGame.ConditionalLoopAnimationConductorNode.SetChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x381ed60
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.ConditionalLoopAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x381e910
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.ConditionalLoopAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x381e830
	bool ExitConditionCallbackDynamicDelegate__DelegateSignature(); // DelegateFunction ShooterGame.ConditionalLoopAnimationConductorNode.ExitConditionCallbackDynamicDelegate__DelegateSignature // (Public|Delegate) // @ game+0x40572e0
	struct UConditionalLoopAnimationConductorNode* Create(struct TScriptInterface<IAnimationConductorNode> ChildNode, struct FDelegate ExitConditionDelegate, struct UObject* Outer); // Function ShooterGame.ConditionalLoopAnimationConductorNode.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x381dc80
};

// Class ShooterGame.ConeActorTargetingStateComponent
// Size: 0x4a0 (Inherited: 0x478)
struct UConeActorTargetingStateComponent : UBaseActorTargetingStateComponent {
	bool bPawnsOnly; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	float Radius; // 0x47c(0x04)
	float ConfirmationGraceAmount; // 0x480(0x04)
	enum class ECollisionChannel SearchCollision; // 0x484(0x01)
	char pad_485[0x3]; // 0x485(0x03)
	float ConeAngle; // 0x488(0x04)
	float ConeYawAngle; // 0x48c(0x04)
	float ConePitchAngle; // 0x490(0x04)
	float ConePullBack; // 0x494(0x04)
	bool bTwoDimensionalCone; // 0x498(0x01)
	char pad_499[0x7]; // 0x499(0x07)
};

// Class ShooterGame.ConfigManager
// Size: 0x200 (Inherited: 0x80)
struct UConfigManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnAnyConfigUpdated; // 0x98(0x10)
	char pad_A8[0x8]; // 0xa8(0x08)
	struct FString ConfigEnvironment; // 0xb0(0x10)
	struct FString ServiceEndpoint; // 0xc0(0x10)
	struct TMap<struct FName, struct FString> Configuration; // 0xd0(0x50)
	struct TMap<struct FName, struct FString> CheatConfiguration; // 0x120(0x50)
	char pad_170[0x50]; // 0x170(0x50)
	struct FDateTime LastAttempt; // 0x1c0(0x08)
	struct UConfigService* ConfigService; // 0x1c8(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x1d0(0x08)
	struct URSOManager* RSOManager; // 0x1d8(0x08)
	struct UPlatformEnvironmentManager* PlatformEnvironmentManager; // 0x1e0(0x08)
	char pad_1E8[0x18]; // 0x1e8(0x18)

	struct TArray<struct FString> GetConfigurationStringArray(struct FName Name, struct TArray<struct FString> Default); // Function ShooterGame.ConfigManager.GetConfigurationStringArray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381e5e0
	struct FString GetConfigurationString(struct FName Name, struct FString Default); // Function ShooterGame.ConfigManager.GetConfigurationString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381e480
	int32_t GetConfigurationInt(struct FName Name, int32_t DefaultValue); // Function ShooterGame.ConfigManager.GetConfigurationInt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381e390
	float GetConfigurationFloat(struct FName Name, float DefaultValue); // Function ShooterGame.ConfigManager.GetConfigurationFloat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381e290
	bool GetConfigurationBool(struct FName Name, bool DefaultValue); // Function ShooterGame.ConfigManager.GetConfigurationBool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381e190
	struct FString GetConfiguration(struct FName Name); // Function ShooterGame.ConfigManager.GetConfiguration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381e0a0
	void CheatAddConfiguration(struct FName Name, struct FString Value); // Function ShooterGame.ConfigManager.CheatAddConfiguration // (Final|Native|Public|BlueprintCallable) // @ game+0x381db60
};

// Class ShooterGame.ConfigService
// Size: 0x58 (Inherited: 0x30)
struct UConfigService : UObject {
	struct FString ConfigEndpoint; // 0x30(0x10)
	struct FString PlatformEnvironment; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class ShooterGame.ConfigurationComponent
// Size: 0x108 (Inherited: 0xe8)
struct UConfigurationComponent : UActorComponent {
	struct TArray<struct FSkinParam> Params; // 0xe8(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> AttachmentsToAdd; // 0xf8(0x10)

	void OnRep_Params(); // Function ShooterGame.ConfigurationComponent.OnRep_Params // (Final|Native|Private) // @ game+0x381ec00
};

// Class ShooterGame.ModalInfoBase
// Size: 0x60 (Inherited: 0x30)
struct UModalInfoBase : UObject {
	char pad_30[0x30]; // 0x30(0x30)
};

// Class ShooterGame.ConfirmModalInfoBase
// Size: 0xc8 (Inherited: 0x60)
struct UConfirmModalInfoBase : UModalInfoBase {
	struct UConfirmationModalViewModelBase* VMClass; // 0x60(0x08)
	char pad_68[0x60]; // 0x68(0x60)
};

// Class ShooterGame.StaticGenericConfirmModalInfo
// Size: 0x130 (Inherited: 0xc8)
struct UStaticGenericConfirmModalInfo : UConfirmModalInfoBase {
	char pad_C8[0x60]; // 0xc8(0x60)
	struct UTexture2D* Image; // 0x128(0x08)
};

// Class ShooterGame.ConfirmationModalViewModelBase
// Size: 0x70 (Inherited: 0x48)
struct UConfirmationModalViewModelBase : UAresViewModelBase {
	struct FMulticastInlineDelegate OnTypeChanged; // 0x48(0x10)
	enum class EUIConfirmationModalType Type; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UConfirmModalInfoBase* ConfirmModalInfo; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	bool ShouldAutoCloseOnActions(); // Function ShooterGame.ConfirmationModalViewModelBase.ShouldAutoCloseOnActions // (Native|Public|BlueprintCallable) // @ game+0x381f240
	bool ShouldAllowActionsWhileLoading(); // Function ShooterGame.ConfirmationModalViewModelBase.ShouldAllowActionsWhileLoading // (Native|Event|Public|BlueprintEvent) // @ game+0x2865b20
	void SetType(enum class EUIConfirmationModalType NewType); // Function ShooterGame.ConfirmationModalViewModelBase.SetType // (Final|Native|Public|BlueprintCallable) // @ game+0x381f1c0
	void Refresh(); // Function ShooterGame.ConfirmationModalViewModelBase.Refresh // (Native|Public|BlueprintCallable) // @ game+0x36b81f0
	void OnCustom2Action(); // Function ShooterGame.ConfirmationModalViewModelBase.OnCustom2Action // (Native|Event|Protected|BlueprintEvent) // @ game+0x381eb80
	void OnCustom2(); // Function ShooterGame.ConfirmationModalViewModelBase.OnCustom2 // (Final|Native|Public|BlueprintCallable) // @ game+0x381ebe0
	void OnCustom1Action(); // Function ShooterGame.ConfirmationModalViewModelBase.OnCustom1Action // (Native|Event|Protected|BlueprintEvent) // @ game+0x381eb80
	void OnCustom1(); // Function ShooterGame.ConfirmationModalViewModelBase.OnCustom1 // (Final|Native|Public|BlueprintCallable) // @ game+0x381ebc0
	void OnConfirmAction(); // Function ShooterGame.ConfirmationModalViewModelBase.OnConfirmAction // (Native|Event|Protected|BlueprintEvent) // @ game+0x381eb80
	void OnConfirm(); // Function ShooterGame.ConfirmationModalViewModelBase.OnConfirm // (Final|Native|Public|BlueprintCallable) // @ game+0x381eba0
	void OnCancelAction(); // Function ShooterGame.ConfirmationModalViewModelBase.OnCancelAction // (Native|Event|Protected|BlueprintEvent) // @ game+0x381eb80
	void OnCancel(); // Function ShooterGame.ConfirmationModalViewModelBase.OnCancel // (Final|Native|Public|BlueprintCallable) // @ game+0x381eb60
	void InitFromInfo(struct UConfirmModalInfoBase* ModalInfo); // Function ShooterGame.ConfirmationModalViewModelBase.InitFromInfo // (Native|Public|BlueprintCallable) // @ game+0x381e9a0
	enum class EUIConfirmationModalType GetType(); // Function ShooterGame.ConfirmationModalViewModelBase.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37933b0
	void CloseModal(); // Function ShooterGame.ConfirmationModalViewModelBase.CloseModal // (Final|Native|Public|BlueprintCallable) // @ game+0x381dc60
};

// Class ShooterGame.ConnectionFogOfWarDebugComponent
// Size: 0x158 (Inherited: 0xe8)
struct UConnectionFogOfWarDebugComponent : UActorComponent {
	struct TArray<struct FFoWDatabaseEntry> Database; // 0xe8(0x10)
	char pad_F8[0x60]; // 0xf8(0x60)

	void OnRep_DatabaseUpdate(); // Function ShooterGame.ConnectionFogOfWarDebugComponent.OnRep_DatabaseUpdate // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.ConsoleBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UConsoleBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	void ShowWebURL_PatchNotes(struct FString PatchNotesUrl); // Function ShooterGame.ConsoleBlueprintFunctionLibrary.ShowWebURL_PatchNotes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x381f280
	void SetCommonUIInputRoutingBlockExceptionKeys(struct UObject* WorldContextObject, struct TArray<struct FKey> Keys); // Function ShooterGame.ConsoleBlueprintFunctionLibrary.SetCommonUIInputRoutingBlockExceptionKeys // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x381eec0
	void SetCommonUIInputRoutingBlockEnabled(struct UObject* WorldContextObject, bool bShouldEnable); // Function ShooterGame.ConsoleBlueprintFunctionLibrary.SetCommonUIInputRoutingBlockEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x381ee00
	void SetAresCursorOverride(struct UWidget* ContextWidget, bool bShouldEnable); // Function ShooterGame.ConsoleBlueprintFunctionLibrary.SetAresCursorOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x381ddf0
	bool IsConsolePlatform(bool bAllowEmulationOnPC); // Function ShooterGame.ConsoleBlueprintFunctionLibrary.IsConsolePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x381ead0
	void EnableVirtualCursorMode(struct UWidget* ContextWidget, bool bShouldEnable); // Function ShooterGame.ConsoleBlueprintFunctionLibrary.EnableVirtualCursorMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x381ddf0
};

// Class ShooterGame.ConsoleCheats_Widget
// Size: 0x378 (Inherited: 0x2c8)
struct UConsoleCheats_Widget : UUserWidget {
	struct TArray<struct FCheatEntry> CheatsList; // 0x2c8(0x10)
	struct TMap<enum class ECheatSubCategory, enum class ECheatCategory> CheatSubCategoryToCategoryMap; // 0x2d8(0x50)
	struct TMap<struct FString, enum class ECheatSubCategory> CheatToSubCategoryMap; // 0x328(0x50)

	void ToggleVisibility(); // Function ShooterGame.ConsoleCheats_Widget.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void SimulateLMBUp(); // Function ShooterGame.ConsoleCheats_Widget.SimulateLMBUp // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void SimulateLMBDown(); // Function ShooterGame.ConsoleCheats_Widget.SimulateLMBDown // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void PopulateCheatsList(); // Function ShooterGame.ConsoleCheats_Widget.PopulateCheatsList // (Final|Native|Private|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.ConsumeResourcesStateComponent
// Size: 0x308 (Inherited: 0x2e8)
struct UConsumeResourcesStateComponent : UResourceInteractionStateComponent {
	struct UStateComponent* FailState; // 0x2e8(0x08)
	bool bShouldReportAbilityCast; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct FMulticastInlineDelegate OnAbilityUsed; // 0x2f8(0x10)

	void SetFailState(struct UStateComponent* State); // Function ShooterGame.ConsumeResourcesStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x381f130
};

// Class ShooterGame.ContentAccessBehaviorManager
// Size: 0x90 (Inherited: 0x80)
struct UContentAccessBehaviorManager : UInitSystem {
	char pad_80[0x10]; // 0x80(0x10)
};

// Class ShooterGame.ContentFilter
// Size: 0x88 (Inherited: 0x30)
struct UContentFilter : UObject {
	bool bIsMultiValued; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FText Name; // 0x38(0x18)
	struct UTexture* Icon; // 0x50(0x08)
	struct FName ConfigFlagKey; // 0x58(0x0c)
	bool ConfigFlagDefaultValue; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	struct FString TelemetryName; // 0x68(0x10)
	struct TArray<struct UBaseContentFilterCriterion*> Criteria; // 0x78(0x10)

	bool IsTransient(); // Function ShooterGame.ContentFilter.IsTransient // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x288ac10
	bool IsSelected(); // Function ShooterGame.ContentFilter.IsSelected // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2a7fb10
	bool IsEnabled(); // Function ShooterGame.ContentFilter.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x220e430
	bool IsConfigToggleOn(struct UConfigManager* ConfigManager); // Function ShooterGame.ContentFilter.IsConfigToggleOn // (Final|Native|Public|BlueprintCallable) // @ game+0x381ea30
	void GetAllCriteria(struct TArray<struct UBaseContentFilterCriterion*>& AllCriteria); // Function ShooterGame.ContentFilter.GetAllCriteria // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x381deb0
};

// Class ShooterGame.BaseContentFilterCriterion
// Size: 0x78 (Inherited: 0x30)
struct UBaseContentFilterCriterion : UObject {
	struct FText Name; // 0x30(0x18)
	struct UTexture* Icon; // 0x48(0x08)
	struct FMulticastInlineDelegate OnCriterionEnabled; // 0x50(0x10)
	struct FMulticastInlineDelegate OnCriterionChanged; // 0x60(0x10)
	bool bEnabled; // 0x70(0x01)
	bool bEnabledTransient; // 0x71(0x01)
	bool bHasTransientState; // 0x72(0x01)
	char pad_73[0x5]; // 0x73(0x05)

	void Rollback(); // Function ShooterGame.BaseContentFilterCriterion.Rollback // (Native|Public|BlueprintCallable) // @ game+0x37ba530
	bool Matches(struct UBaseHandle* Handle); // Function ShooterGame.BaseContentFilterCriterion.Matches // (Native|Public|BlueprintCallable) // @ game+0x382d970
	bool IsEnabledTransient(); // Function ShooterGame.BaseContentFilterCriterion.IsEnabledTransient // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a0730
	bool IsEnabled(); // Function ShooterGame.BaseContentFilterCriterion.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x382d4e0
	bool HasTransientState(); // Function ShooterGame.BaseContentFilterCriterion.HasTransientState // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x382d4a0
	struct FString GetTelemetryName(); // Function ShooterGame.BaseContentFilterCriterion.GetTelemetryName // (Native|Public) // @ game+0x382d410
	void Enable(bool bIsEnabled); // Function ShooterGame.BaseContentFilterCriterion.Enable // (Native|Public|BlueprintCallable) // @ game+0x382ce80
	void Commit(); // Function ShooterGame.BaseContentFilterCriterion.Commit // (Native|Public|BlueprintCallable) // @ game+0x37bb440
};

// Class ShooterGame.ContentFilterFavoriteCriterion
// Size: 0x78 (Inherited: 0x78)
struct UContentFilterFavoriteCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.ContentFilterNonFavoriteCriterion
// Size: 0x78 (Inherited: 0x78)
struct UContentFilterNonFavoriteCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.SelectTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct USelectTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.DeluxeTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UDeluxeTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.PremiumTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UPremiumTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.UltraTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UUltraTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.ExclusiveTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UExclusiveTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.OwnedCriterion
// Size: 0x78 (Inherited: 0x78)
struct UOwnedCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.NotOwnedCriterion
// Size: 0x78 (Inherited: 0x78)
struct UNotOwnedCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.ContentFilterDialog
// Size: 0x2c8 (Inherited: 0x2c8)
struct UContentFilterDialog : UUserWidget {
};

// Class ShooterGame.ContentFilterUITelemetryManager
// Size: 0x60 (Inherited: 0x30)
struct UContentFilterUITelemetryManager : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct URSOManager* RSOManager; // 0x40(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x48(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x50(0x08)
	struct UConfigManager* ConfigManager; // 0x58(0x08)

	void SendFiltersActionEvent(struct UContentFilterViewModel* FiltersViewModel, enum class EActionType ActionType); // Function ShooterGame.ContentFilterUITelemetryManager.SendFiltersActionEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x382dab0
	struct TArray<struct FCriterion> MapFiltersViewModelToActiveCriteria(struct UContentFilterViewModel* FiltersViewModel); // Function ShooterGame.ContentFilterUITelemetryManager.MapFiltersViewModelToActiveCriteria // (Final|Native|Private) // @ game+0x382d830
	struct UContentFilterUITelemetryManager* Make(struct URSOManager* RSOManager, struct UPlatformSessionManager* SessionManager, struct UTelemetryManager* TelemetryManager, struct UConfigManager* ConfigManager); // Function ShooterGame.ContentFilterUITelemetryManager.Make // (Final|Native|Static|Public) // @ game+0x382d550
	struct FPlatformInfo GetPlatformInfo(); // Function ShooterGame.ContentFilterUITelemetryManager.GetPlatformInfo // (Final|Native|Private) // @ game+0x382d340
	struct FString GetNameForActionType(enum class EActionType ActionType); // Function ShooterGame.ContentFilterUITelemetryManager.GetNameForActionType // (Final|Native|Static|Private) // @ game+0x382d270
};

// Class ShooterGame.ContentFilterViewController
// Size: 0x88 (Inherited: 0x30)
struct UContentFilterViewController : UObject {
	struct TMap<struct FString, struct UContentFilterViewModel*> ModelsById; // 0x30(0x50)
	struct UConfigManager* ConfigManager; // 0x80(0x08)

	struct UContentFilterViewModel* SetContentFilterViewModel(struct FString ModelId, struct TArray<struct UContentFilter*> Filters); // Function ShooterGame.ContentFilterViewController.SetContentFilterViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x382db80
	struct UContentFilterViewModel* GetContentFilterViewModel(struct FString ModelId); // Function ShooterGame.ContentFilterViewController.GetContentFilterViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x382d0f0
};

// Class ShooterGame.ContentFilterViewModel
// Size: 0x58 (Inherited: 0x30)
struct UContentFilterViewModel : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UContentFilter*> Filters; // 0x40(0x10)
	bool bIsNew; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	void RemoveConfigDisabledFilters(struct UConfigManager* ConfigManager); // Function ShooterGame.ContentFilterViewModel.RemoveConfigDisabledFilters // (Final|Native|Public) // @ game+0x382da20
	struct UContentFilterViewModel* Make(struct FString ModelId, struct TArray<struct UContentFilter*> Filters); // Function ShooterGame.ContentFilterViewModel.Make // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x382d6a0
	bool IsNew(); // Function ShooterGame.ContentFilterViewModel.IsNew // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x382d520
	int32_t GetNumFilters(); // Function ShooterGame.ContentFilterViewModel.GetNumFilters // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x382d310
	struct FString GetModelId(); // Function ShooterGame.ContentFilterViewModel.GetModelId // (Final|Native|Public) // @ game+0x382d1f0
	void GetAllFilters(struct TArray<struct UContentFilter*>& AllFilters); // Function ShooterGame.ContentFilterViewModel.GetAllFilters // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x382d040
	void FilterContent(struct TArray<struct UBaseHandle*>& UnfilteredContent, struct TArray<struct UBaseHandle*>& FilteredContent); // Function ShooterGame.ContentFilterViewModel.FilterContent // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x382cf20
	void DeleteAllFilters(); // Function ShooterGame.ContentFilterViewModel.DeleteAllFilters // (Final|Native|Public|BlueprintCallable) // @ game+0x382ce60
};

// Class ShooterGame.ContentFilterWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UContentFilterWidget : UUserWidget {
};

// Class ShooterGame.BaseHandle
// Size: 0x48 (Inherited: 0x30)
struct UBaseHandle : UObject {
	struct UAresBasePrimaryDataAsset* BaseDataAsset; // 0x30(0x08)
	struct UBaseContentUIData* BaseUIData; // 0x38(0x08)
	struct UBaseInventoryModel* BaseInventoryModel; // 0x40(0x08)
};

// Class ShooterGame.EquippableSkinChromaHandle
// Size: 0x70 (Inherited: 0x48)
struct UEquippableSkinChromaHandle : UBaseHandle {
	struct UEquippableSkinChromaDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableSkinChromaUIData* UIData; // 0x50(0x08)
	struct UEquippableSkinChromaInventoryModel* InventoryModel; // 0x58(0x08)
	struct USidegradeModel* SidegradeModel; // 0x60(0x08)
	struct UStreamedVideoDataAsset* StreamedVideo; // 0x68(0x08)
};

// Class ShooterGame.EquippableSkinLevelHandle
// Size: 0x68 (Inherited: 0x48)
struct UEquippableSkinLevelHandle : UBaseHandle {
	struct UEquippableSkinLevelDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableSkinLevelUIData* UIData; // 0x50(0x08)
	struct UEquippableSkinLevelInventoryModel* InventoryModel; // 0x58(0x08)
	struct UStreamedVideoDataAsset* StreamedVideo; // 0x60(0x08)
};

// Class ShooterGame.EquippableSkinHandle
// Size: 0x128 (Inherited: 0x48)
struct UEquippableSkinHandle : UBaseHandle {
	struct UEquippableSkinDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableSkinUIData* UIData; // 0x50(0x08)
	struct UEquippableSkinInventoryModel* InventoryModel; // 0x58(0x08)
	struct UEquippableSkinChromaHandle* EquippedChroma; // 0x60(0x08)
	struct UEquippableSkinChromaHandle* DefaultChroma; // 0x68(0x08)
	struct TMap<struct UEquippableSkinChromaDataAsset*, struct UEquippableSkinChromaHandle*> Chromas; // 0x70(0x50)
	struct TMap<struct UEquippableSkinLevelDataAsset*, struct UEquippableSkinLevelHandle*> Levels; // 0xc0(0x50)
	struct UThemeHandle* Theme; // 0x110(0x08)
	struct UContentTierHandle* ContentTier; // 0x118(0x08)
	struct UTexture2D* Wallpaper; // 0x120(0x08)
};

// Class ShooterGame.ThemeHandle
// Size: 0xa8 (Inherited: 0x48)
struct UThemeHandle : UBaseHandle {
	struct UThemeDataAsset* DataAsset; // 0x48(0x08)
	struct UThemeUIData* UIData; // 0x50(0x08)
	struct TMap<struct UEquippableSkinDataAsset*, struct UEquippableSkinHandle*> Skins; // 0x58(0x50)
};

// Class ShooterGame.EquippableAttachmentHandle
// Size: 0x58 (Inherited: 0x48)
struct UEquippableAttachmentHandle : UBaseHandle {
	struct UEquippableAttachmentUIData* UIData; // 0x48(0x08)
	struct UEquippableAttachmentInventoryModel* InventoryModel; // 0x50(0x08)
};

// Class ShooterGame.EquippableHandle
// Size: 0x110 (Inherited: 0x48)
struct UEquippableHandle : UBaseHandle {
	struct UEquippableDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableUIData* UIData; // 0x50(0x08)
	struct UEquippableInventoryModel* InventoryModel; // 0x58(0x08)
	struct TMap<struct UEquippableAttachmentDataAsset*, struct UEquippableAttachmentHandle*> Attachments; // 0x60(0x50)
	struct TMap<struct UEquippableSkinDataAsset*, struct UEquippableSkinHandle*> Skins; // 0xb0(0x50)
	struct UEquippableSkinHandle* EquippedSkin; // 0x100(0x08)
	struct UEquippableCharmInstanceHandle* EquippedCharmInstance; // 0x108(0x08)
};

// Class ShooterGame.SprayLevelHandle
// Size: 0x68 (Inherited: 0x48)
struct USprayLevelHandle : UBaseHandle {
	struct USprayLevelDataAsset* DataAsset; // 0x48(0x08)
	struct USprayLevelUIData* UIData; // 0x50(0x08)
	struct USprayLevelInventoryModel* InventoryModel; // 0x58(0x08)
	struct AAresSpray* SprayActor; // 0x60(0x08)
};

// Class ShooterGame.ExpressionHandle
// Size: 0x48 (Inherited: 0x48)
struct UExpressionHandle : UBaseHandle {
};

// Class ShooterGame.SprayHandle
// Size: 0xb0 (Inherited: 0x48)
struct USprayHandle : UExpressionHandle {
	struct USprayDataAsset* DataAsset; // 0x48(0x08)
	struct USprayUIData* UIData; // 0x50(0x08)
	struct USprayInventoryModel* InventoryModel; // 0x58(0x08)
	struct TMap<struct USprayLevelDataAsset*, struct USprayLevelHandle*> Levels; // 0x60(0x50)
};

// Class ShooterGame.SprayEquipSlotHandle
// Size: 0x68 (Inherited: 0x48)
struct USprayEquipSlotHandle : UBaseHandle {
	struct USprayEquipSlotDataAsset* DataAsset; // 0x48(0x08)
	struct USprayEquipSlotUIData* UIData; // 0x50(0x08)
	struct USprayEquipSlotInventoryModel* InventoryModel; // 0x58(0x08)
	struct USprayHandle* EquippedSpray; // 0x60(0x08)
};

// Class ShooterGame.TotemHandle
// Size: 0x60 (Inherited: 0x48)
struct UTotemHandle : UExpressionHandle {
	struct UTotemDataAsset* DataAsset; // 0x48(0x08)
	struct UTotemUIData* UIData; // 0x50(0x08)
	struct UTotemInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.ExpressionEquipSlotHandle
// Size: 0x60 (Inherited: 0x48)
struct UExpressionEquipSlotHandle : UBaseHandle {
	struct UExpressionEquipSlotDataAsset* DataAsset; // 0x48(0x08)
	struct UExpressionHandle* EquippedExpressionItem; // 0x50(0x08)
	struct UExpressionEquipSlotInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.CharacterRoleHandle
// Size: 0x50 (Inherited: 0x48)
struct UCharacterRoleHandle : UBaseHandle {
	struct UCharacterRoleUIData* UIData; // 0x48(0x08)
};

// Class ShooterGame.CharacterHandle
// Size: 0x80 (Inherited: 0x48)
struct UCharacterHandle : UBaseHandle {
	struct UCharacterDataAsset* DataAsset; // 0x48(0x08)
	struct UCharacterUIData* UIData; // 0x50(0x08)
	struct UCharacterRoleHandle* Role; // 0x58(0x08)
	struct UContractV2Handle* Contract; // 0x60(0x08)
	struct UTexture2D* FullPortrait; // 0x68(0x08)
	struct UTexture2D* CharacterBackground; // 0x70(0x08)
	struct UCharacterInventoryModel* InventoryModel; // 0x78(0x08)
};

// Class ShooterGame.CurrencyHandle
// Size: 0x60 (Inherited: 0x48)
struct UCurrencyHandle : UBaseHandle {
	struct UCurrencyDataAsset* DataAsset; // 0x48(0x08)
	struct UCurrencyUIData* UIData; // 0x50(0x08)
	struct UCurrencyInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.JuiceBoxHandle
// Size: 0x60 (Inherited: 0x48)
struct UJuiceBoxHandle : UBaseHandle {
	struct UJuiceBoxDataAsset* DataAsset; // 0x48(0x08)
	struct UJuiceBoxUIData* UIData; // 0x50(0x08)
	struct UJuiceBoxInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.MapHandle
// Size: 0x58 (Inherited: 0x48)
struct UMapHandle : UBaseHandle {
	struct UMapDataAsset* DataAsset; // 0x48(0x08)
	struct UMapUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.GameModeHandle
// Size: 0x58 (Inherited: 0x48)
struct UGameModeHandle : UBaseHandle {
	struct UGameModeDataAsset* DataAsset; // 0x48(0x08)
	struct UGameModeUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.MatchmakingQueueHandle
// Size: 0x58 (Inherited: 0x48)
struct UMatchmakingQueueHandle : UBaseHandle {
	struct UMatchmakingQueueDataAsset* DataAsset; // 0x48(0x08)
	struct UMatchmakingQueueUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.EquippableCharmHandle
// Size: 0xb0 (Inherited: 0x48)
struct UEquippableCharmHandle : UBaseHandle {
	struct UEquippableCharmDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableCharmUIData* UIData; // 0x50(0x08)
	struct UEquippableCharmInventoryModel* InventoryModel; // 0x58(0x08)
	struct TMap<struct UEquippableCharmLevelDataAsset*, struct UEquippableCharmLevelHandle*> Levels; // 0x60(0x50)
};

// Class ShooterGame.EquippableCharmLevelHandle
// Size: 0x60 (Inherited: 0x48)
struct UEquippableCharmLevelHandle : UBaseHandle {
	struct UEquippableCharmLevelDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableCharmLevelUIData* UIData; // 0x50(0x08)
	struct UEquippableCharmLevelInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.EquippableCharmInstanceHandle
// Size: 0x70 (Inherited: 0x48)
struct UEquippableCharmInstanceHandle : UBaseHandle {
	struct FGuid InstanceId; // 0x48(0x10)
	struct UEquippableCharmInstanceInventoryModel* InventoryModel; // 0x58(0x08)
	struct UEquippableCharmHandle* CharmHandle; // 0x60(0x08)
	struct UEquippableCharmLevelHandle* CurrentLevelHandle; // 0x68(0x08)
};

// Class ShooterGame.PlayerCardHandle
// Size: 0x90 (Inherited: 0x48)
struct UPlayerCardHandle : UBaseHandle {
	struct UPlayerCardDataAsset* DataAsset; // 0x48(0x08)
	struct UPlayerCardUIData* UIData; // 0x50(0x08)
	struct UPlayerCardInventoryModel* InventoryModel; // 0x58(0x08)
	struct UTexture2D* LargeArt; // 0x60(0x08)
	struct UTexture2D* WideArt; // 0x68(0x08)
	struct UTexture2D* SmallArt; // 0x70(0x08)
	struct UMaterialInterface* LargeMaterialInterface; // 0x78(0x08)
	struct UMaterialInterface* WideMaterialInterface; // 0x80(0x08)
	struct UMaterialInterface* SmallMaterialInterface; // 0x88(0x08)
};

// Class ShooterGame.StorefrontItemHandle
// Size: 0x58 (Inherited: 0x48)
struct UStorefrontItemHandle : UBaseHandle {
	struct UStorefrontItemDataAsset* DataAsset; // 0x48(0x08)
	struct UStorefrontItemUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ObjectiveHandle
// Size: 0x58 (Inherited: 0x48)
struct UObjectiveHandle : UBaseHandle {
	struct UObjectiveDataAsset* DataAsset; // 0x48(0x08)
	struct UObjectiveUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.MissionHandle
// Size: 0xa8 (Inherited: 0x48)
struct UMissionHandle : UBaseHandle {
	struct UMissionDataAsset* DataAsset; // 0x48(0x08)
	struct UMissionUIData* UIData; // 0x50(0x08)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveHandle*> Objectives; // 0x58(0x50)
};

// Class ShooterGame.ArmorHandle
// Size: 0x58 (Inherited: 0x48)
struct UArmorHandle : UBaseHandle {
	struct UArmorDataAsset* DataAsset; // 0x48(0x08)
	struct UArmorUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.PlayerTitleHandle
// Size: 0x60 (Inherited: 0x48)
struct UPlayerTitleHandle : UBaseHandle {
	struct UPlayerTitleDataAsset* DataAsset; // 0x48(0x08)
	struct UPlayerTitleUIData* UIData; // 0x50(0x08)
	struct UPlayerTitleInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.ContractV2Handle
// Size: 0x58 (Inherited: 0x48)
struct UContractV2Handle : UBaseHandle {
	struct UContractDataAssetV2* DataAsset; // 0x48(0x08)
	struct UContractUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ContentTierHandle
// Size: 0x58 (Inherited: 0x48)
struct UContentTierHandle : UBaseHandle {
	struct UContentTierDataAsset* DataAsset; // 0x48(0x08)
	struct UContentTierUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ActRankBorderHandle
// Size: 0x58 (Inherited: 0x48)
struct UActRankBorderHandle : UBaseHandle {
	struct UActRankBorderDataAsset* DataAsset; // 0x48(0x08)
	struct UActRankBorderUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.SubscriptionHandle
// Size: 0x58 (Inherited: 0x48)
struct USubscriptionHandle : UBaseHandle {
	struct USubscriptionDataAsset* DataAsset; // 0x48(0x08)
	struct USubscriptionUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.SeasonHandle
// Size: 0x60 (Inherited: 0x48)
struct USeasonHandle : UBaseHandle {
	struct USeasonDataAsset* DataAsset; // 0x48(0x08)
	struct USeasonHandle* ParentSeasonHandle; // 0x50(0x08)
	struct USeasonUIData* UIData; // 0x58(0x08)
};

// Class ShooterGame.CompetitiveSeasonHandle
// Size: 0xb0 (Inherited: 0x48)
struct UCompetitiveSeasonHandle : UBaseHandle {
	struct UCompetitiveSeasonDataAsset* DataAsset; // 0x48(0x08)
	struct USeasonDataAsset* season; // 0x50(0x08)
	struct UCompetitiveSeasonUIData* UIData; // 0x58(0x08)
	struct TMap<struct UActRankBorderDataAsset*, struct UActRankBorderHandle*> Borders; // 0x60(0x50)
};

// Class ShooterGame.PremierSeasonHandle
// Size: 0x68 (Inherited: 0x48)
struct UPremierSeasonHandle : UBaseHandle {
	struct UPremierSeasonDataAsset* DataAsset; // 0x48(0x08)
	struct UCompetitiveSeasonDataAsset* CompetitiveSeason; // 0x50(0x08)
	struct USeasonDataAsset* season; // 0x58(0x08)
	struct UPremierSeasonUIData* UIData; // 0x60(0x08)
};

// Class ShooterGame.PremierConferenceHandle
// Size: 0x58 (Inherited: 0x48)
struct UPremierConferenceHandle : UBaseHandle {
	struct UPremierConferenceDataAsset* DataAsset; // 0x48(0x08)
	struct UPremierConferenceUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.LevelBorderHandle
// Size: 0x60 (Inherited: 0x48)
struct ULevelBorderHandle : UBaseHandle {
	struct ULevelBorderDataAsset* DataAsset; // 0x48(0x08)
	struct ULevelBorderUIData* UIData; // 0x50(0x08)
	struct ULevelBorderInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.EventHandle
// Size: 0x60 (Inherited: 0x48)
struct UEventHandle : UBaseHandle {
	struct UEventDataAsset* DataAsset; // 0x48(0x08)
	struct UEventUIData* UIData; // 0x50(0x08)
	struct UEventModel* EventModel; // 0x58(0x08)
};

// Class ShooterGame.TournamentsTeamIconHandle
// Size: 0x58 (Inherited: 0x48)
struct UTournamentsTeamIconHandle : UBaseHandle {
	struct UTournamentsTeamIconDataAsset* DataAsset; // 0x48(0x08)
	struct UTournamentsTeamIconUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.BTEHandle
// Size: 0x58 (Inherited: 0x48)
struct UBTEHandle : UBaseHandle {
	struct UBTEDataAsset* DataAsset; // 0x48(0x08)
	struct UBTEUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.MassRewardsCeremonyHandle
// Size: 0x58 (Inherited: 0x48)
struct UMassRewardsCeremonyHandle : UBaseHandle {
	struct UMassRewardsCeremonyDataAsset* DataAsset; // 0x48(0x08)
	struct UMassRewardsCeremonyUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ContentIndex
// Size: 0x10f8 (Inherited: 0xe8)
struct UContentIndex : UActorComponent {
	bool bContentInitialized; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TMap<struct FGuid, struct FEquippableData> Equippables; // 0xf0(0x50)
	struct TMap<struct FGuid, struct FEquippableSkinData> ServiceIdToEquippableSkin; // 0x140(0x50)
	struct TMap<struct FGuid, struct FEquippableSkinLevelData> ServiceIdToEquippableSkinLevel; // 0x190(0x50)
	struct TMap<struct FGuid, struct FEquippableAttachmentData> ServiceIdToEquippableAttachment; // 0x1e0(0x50)
	struct TMap<struct FGuid, struct FEquippableSkinChromaData> ServiceIdToEquippableSkinChroma; // 0x230(0x50)
	struct TMap<struct FGuid, struct FThemeData> ServiceIdToTheme; // 0x280(0x50)
	struct TMap<struct FGuid, struct FSocketData> ServiceIdToSocket; // 0x2d0(0x50)
	struct TMap<struct FGuid, struct FCharacterData> ServiceIdToCharacter; // 0x320(0x50)
	struct TMap<struct FGuid, struct FCharacterRoleData> ServiceIdToCharacterRole; // 0x370(0x50)
	struct TMap<struct FGuid, struct FSprayData> ServiceIdToSpray; // 0x3c0(0x50)
	struct TMap<struct FGuid, struct FSprayLevelData> ServiceIdToSprayLevel; // 0x410(0x50)
	struct TMap<struct FGuid, struct FSprayEquipSlotData> ServiceIdToSprayEquipSlot; // 0x460(0x50)
	struct TMap<struct FGuid, struct FExpressionEquipSlotData> ServiceIdToExpressionEquipSlot; // 0x4b0(0x50)
	struct TMap<struct FGuid, struct FMapData> ServiceIdToMap; // 0x500(0x50)
	struct TMap<struct FGuid, struct FGameModeData> ServiceIdToGameMode; // 0x550(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FGameModeData> ShooterGameModeToGameModeData; // 0x5a0(0x50)
	struct TMap<struct FGuid, struct FEquippableCharmData> ServiceIdToEquippableCharm; // 0x5f0(0x50)
	struct TMap<struct FGuid, struct FEquippableCharmLevelData> ServiceIdToEquippableCharmLevel; // 0x640(0x50)
	struct TMap<struct FName, struct FGuid> CharacterDeveloperNameToServiceId; // 0x690(0x50)
	struct TMap<struct FName, struct FGuid> CharacterShippingNameToServiceId; // 0x6e0(0x50)
	struct TMap<struct FGuid, struct FCurrencyData> ServiceIdToCurrency; // 0x730(0x50)
	struct TMap<struct FGuid, struct FJuiceBoxData> ServiceIdToJuiceBox; // 0x780(0x50)
	struct TMap<struct FGuid, struct FPlayerCardData> ServiceIdToPlayerCard; // 0x7d0(0x50)
	struct TMap<struct FGuid, struct FMissionData> ServiceIdToMission; // 0x820(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FMissionData> MissionActorToMission; // 0x870(0x50)
	struct TMap<struct FGuid, struct FObjectiveData> ServiceIdToObjective; // 0x8c0(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FObjectiveData> ObjectiveComponentToObjective; // 0x910(0x50)
	struct TMap<struct FGuid, struct FStorefrontItemData> ServiceIdToStorefrontItem; // 0x960(0x50)
	struct TMap<struct FGuid, struct FArmorData> ServiceIdToArmor; // 0x9b0(0x50)
	struct TMap<struct FGuid, struct FPlayerTitleData> ServiceIdToPlayerTitle; // 0xa00(0x50)
	struct TMap<struct FGuid, struct FContractV2Data> ServiceIdToContractV2; // 0xa50(0x50)
	struct TMap<struct FGuid, struct FContentTierData> ServiceIdToContentTier; // 0xaa0(0x50)
	struct TMap<struct FGuid, struct FSeasonData> ServiceIdToSeason; // 0xaf0(0x50)
	struct TMap<struct FGuid, struct FCompetitiveSeasonData> ServiceIdToCompetitiveSeason; // 0xb40(0x50)
	struct TMap<struct FGuid, struct FPremierSeasonData> ServiceIdToPremierSeason; // 0xb90(0x50)
	struct TMap<struct FGuid, struct FPremierConferenceData> ServiceIdToPremierConference; // 0xbe0(0x50)
	struct TMap<struct FGuid, struct FActRankBorderData> ServiceIdToActRankBorder; // 0xc30(0x50)
	struct TArray<struct ULevelBorderDataAsset*> LevelToBorder; // 0xc80(0x10)
	struct TMap<struct FGuid, struct FStreamedVideoData> ServiceIdToStreamedVideo; // 0xc90(0x50)
	struct TMap<struct FGuid, struct FMatchmakingQueueData> ServiceIdToMatchmakingQueue; // 0xce0(0x50)
	struct TMap<struct FString, struct FMatchmakingQueueData> QueueIdToMatchmakingQueue; // 0xd30(0x50)
	struct TMap<struct FGuid, struct FLevelBorderData> ServiceIdToLevelBorder; // 0xd80(0x50)
	struct TMap<struct FGuid, struct FAresEventData> ServiceIdToEvent; // 0xdd0(0x50)
	struct TMap<struct FGuid, struct FTournamentsTeamIconData> ServiceIdToTournamentsTeamIcon; // 0xe20(0x50)
	struct TMap<struct FGuid, struct FMassRewardsCeremonyData> ServiceIdToMassRewardsCeremony; // 0xe70(0x50)
	struct TMap<struct FGuid, struct FSubscriptionData> ServiceIdToSubscription; // 0xec0(0x50)
	struct TMap<struct FGuid, struct FArchiveData> ServiceIdToArchive; // 0xf10(0x50)
	struct TMap<struct FGuid, struct USubscriptionDataAsset*> EntitlementTypeIDToSubscription; // 0xf60(0x50)
	struct TMap<struct FGuid, struct FAccoladeData> ServiceIdToAccolade; // 0xfb0(0x50)
	struct TMap<struct FGuid, struct FTotemData> ServiceIdToTotem; // 0x1000(0x50)
	struct TMap<struct FGuid, struct FTipData> ServiceIdToTip; // 0x1050(0x50)
	struct TMap<struct FGuid, struct FAchievementData> PowderedToastData; // 0x10a0(0x50)
	struct FBTEData BTEData; // 0x10f0(0x08)

	struct TArray<struct USeasonDataAsset*> GetSeasons(struct UObject* WorldContextObject, enum class EAresSeasonType Type); // Function ShooterGame.ContentIndex.GetSeasons // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3834cb0
	struct UPremierSeasonDataAsset* GetPremierSeasonBySeasonId(struct UObject* WorldContextObject, struct FGuid& SeasonID); // Function ShooterGame.ContentIndex.GetPremierSeasonBySeasonId // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3834bc0
	struct UPlayerTitleDataAsset* GetPlayerTitleById(struct UObject* WorldContextObject, struct FGuid& ServiceId); // Function ShooterGame.ContentIndex.GetPlayerTitleById // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3834ad0
	struct UPlayerCardDataAsset* GetPlayerCardById(struct UObject* WorldContextObject, struct FGuid& ServiceId); // Function ShooterGame.ContentIndex.GetPlayerCardById // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38349e0
	struct UGameModeDataAsset* GetModeByName(struct UObject* WorldContextObject, struct FName& ModeName); // Function ShooterGame.ContentIndex.GetModeByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3834900
	struct UGameModeDataAsset* GetModeByClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> GameModeClass); // Function ShooterGame.ContentIndex.GetModeByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38347a0
	struct UMatchmakingQueueDataAsset* GetMatchmakingQueueById(struct UObject* WorldContextObject, struct FString QueueID); // Function ShooterGame.ContentIndex.GetMatchmakingQueueById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38346b0
	struct UMapDataAsset* GetMapByName(struct UObject* WorldContextObject, struct FName& MapName); // Function ShooterGame.ContentIndex.GetMapByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38345d0
	struct UCompetitiveSeasonDataAsset* GetCompetitiveSeasonBySeasonId(struct UObject* WorldContextObject, struct FGuid& SeasonID); // Function ShooterGame.ContentIndex.GetCompetitiveSeasonBySeasonId // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38344e0
	struct ULevelBorderDataAsset* GetBorderForLevel(struct UObject* WorldContextObject, int32_t& Level); // Function ShooterGame.ContentIndex.GetBorderForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3834400
	struct TArray<struct UCharacterDataAsset*> GetAllCharacters(struct UObject* WorldContextObject); // Function ShooterGame.ContentIndex.GetAllCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3834330
	struct UContentIndex* GET(struct UWorld* FromWorld); // Function ShooterGame.ContentIndex.GET // (Final|Native|Static|Public) // @ game+0x38342a0
};

// Class ShooterGame.ContentIndexManager
// Size: 0x88 (Inherited: 0x80)
struct UContentIndexManager : UInitSystem {
	struct UContentIndex* ContentIndex; // 0x80(0x08)

	struct UContentIndexManager* GetContentIndexManager(struct UObject* WorldContextObject); // Function ShooterGame.ContentIndexManager.GetContentIndexManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3840bf0
	struct UContentIndexManager* GET(struct UWorld* FromWorld); // Function ShooterGame.ContentIndexManager.GET // (Final|Native|Static|Public) // @ game+0x383d830
};

// Class ShooterGame.ContentItemListViewmodel
// Size: 0xb0 (Inherited: 0xa8)
struct UContentItemListViewmodel : UAresListViewModel {
	bool bUseDefaultSort; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)

	struct TArray<struct UBaseHandle*> FilterHandles(struct TArray<struct UBaseHandle*> InHandles); // Function ShooterGame.ContentItemListViewmodel.FilterHandles // (Final|Native|Public|BlueprintCallable) // @ game+0x383d6f0
	bool DefaultContentSort(struct FWildcard ObjectA, struct FWildcard ObjectB); // Function ShooterGame.ContentItemListViewmodel.DefaultContentSort // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x383d550
	bool AreHandlesEqual(struct UObject* ValueA, struct UObject* ValueB); // Function ShooterGame.ContentItemListViewmodel.AreHandlesEqual // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x383d400
	void AddHandles(struct TArray<struct UBaseHandle*> InHandles); // Function ShooterGame.ContentItemListViewmodel.AddHandles // (Final|Native|Public|BlueprintCallable) // @ game+0x383cfd0
	void AddHandle(struct UBaseHandle* InHandle); // Function ShooterGame.ContentItemListViewmodel.AddHandle // (Final|Native|Public|BlueprintCallable) // @ game+0x383cf40
};

// Class ShooterGame.ContentItemsView
// Size: 0x2e0 (Inherited: 0x2c8)
struct UContentItemsView : UDesignableUserWidget {
	struct UUserWidget* EntryWidgetClass; // 0x2c8(0x08)
	struct UMutableEntryTileView* MutableEntryTileView; // 0x2d0(0x08)
	struct UOverlay* ItemsViewOverlay; // 0x2d8(0x08)

	void ScrollToTop(); // Function ShooterGame.ContentItemsView.ScrollToTop // (Final|Native|Public|BlueprintCallable) // @ game+0x3846440
	void ScrollToBottom(); // Function ShooterGame.ContentItemsView.ScrollToBottom // (Final|Native|Public|BlueprintCallable) // @ game+0x3846420
	void ScrollItemIntoView(struct UObject* Item); // Function ShooterGame.ContentItemsView.ScrollItemIntoView // (Final|Native|Public|BlueprintCallable) // @ game+0x3846390
	void ScrollIndexIntoView(int32_t Index); // Function ShooterGame.ContentItemsView.ScrollIndexIntoView // (Final|Native|Public|BlueprintCallable) // @ game+0x3846300
	int32_t GetNumPlaceholders(int32_t NumCurrentVisibleItems); // Function ShooterGame.ContentItemsView.GetNumPlaceholders // (Final|Native|Protected|BlueprintCallable) // @ game+0x3843de0
};

// Class ShooterGame.ContentLibrary
// Size: 0x30 (Inherited: 0x30)
struct UContentLibrary : UBlueprintFunctionLibrary {

	bool IsSprayLevelDisabled(struct UObject* WorldContextObject, struct USprayLevelDataAsset* SprayLevelAsset); // Function ShooterGame.ContentLibrary.IsSprayLevelDisabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3846230
	bool IsRandomSelectionAsset(struct UAresBasePrimaryDataAsset* BaseDataAsset); // Function ShooterGame.ContentLibrary.IsRandomSelectionAsset // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x38461a0
	struct FSlateBrush IconBrushFromTexture(struct UObject* WorldContextObject, struct UTexture* Texture); // Function ShooterGame.ContentLibrary.IconBrushFromTexture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3846020
	struct FSlateBrush IconBrushFromEquippable(struct UObject* WorldContextObject, struct AAresEquippable* Equippable); // Function ShooterGame.ContentLibrary.IconBrushFromEquippable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3845ea0
	void GetTournamentsTeamIconByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FTournamentsTeamIconHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTournamentsTeamIconByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3845d20
	void GetTournamentsTeamIcon(struct UObject* WorldContextObject, struct UTournamentsTeamIconDataAsset* DataAsset, struct FTournamentsTeamIconHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTournamentsTeamIcon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3845ba0
	void GetTotems(struct UObject* WorldContextObject, struct TArray<struct UTotemDataAsset*>& DataAssets, struct FTotemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTotems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3845a10
	void GetTotem(struct UObject* WorldContextObject, struct UTotemDataAsset* DataAsset, struct FTotemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTotem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3845890
	void GetTheme(struct UObject* WorldContextObject, struct UThemeDataAsset* DataAsset, struct FThemeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTheme // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38456f0
	void GetStorefrontItemByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FStorefrontItemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetStorefrontItemByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3845570
	void GetStorefrontItem(struct UObject* WorldContextObject, struct UStorefrontItemDataAsset* DataAsset, struct FStorefrontItemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetStorefrontItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38453f0
	void GetSprays(struct UObject* WorldContextObject, struct TArray<struct USprayDataAsset*>& DataAssets, struct FSprayHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprays // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3845260
	void GetSprayLevelsForSpray(struct UObject* WorldContextObject, struct USprayDataAsset* DataAsset, struct FSprayLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprayLevelsForSpray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38450e0
	void GetSprayLevel(struct UObject* WorldContextObject, struct USprayLevelDataAsset* DataAsset, struct FSprayLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprayLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844f60
	void GetSprayEquipSlot(struct UObject* WorldContextObject, struct USprayEquipSlotDataAsset* DataAsset, struct FSprayEquipSlotHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprayEquipSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844de0
	void GetSpray(struct UObject* WorldContextObject, struct USprayDataAsset* DataAsset, struct FSprayHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSpray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844c70
	void GetSkinsForEquippable(struct UObject* WorldContextObject, struct UEquippableDataAsset* EquippableDataAsset, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSkinsForEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844ae0
	void GetSeasons(struct UObject* WorldContextObject, struct TArray<struct USeasonDataAsset*>& DataAssets, struct FSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844950
	void GetSeason(struct UObject* WorldContextObject, struct USeasonDataAsset* DataAsset, struct FSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38447d0
	struct UPremierSeasonHandle* GetPremierSeasonForSeason(struct UObject* WorldContextObject, struct USeasonDataAsset* SeasonDataAsset, struct FPremierSeasonHandles& PremierSeasonHandles); // Function ShooterGame.ContentLibrary.GetPremierSeasonForSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844610
	void GetPremierSeason(struct UObject* WorldContextObject, struct UPremierSeasonDataAsset* DataAsset, struct FPremierSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPremierSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844490
	void GetPremierConference(struct UObject* WorldContextObject, struct UPremierConferenceDataAsset* DataAsset, struct FPremierConferenceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPremierConference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844310
	void GetPlayerTitle(struct UObject* WorldContextObject, struct UPlayerTitleDataAsset* DataAsset, struct FPlayerTitleHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPlayerTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844190
	void GetPlayerCard(struct UObject* WorldContextObject, struct UPlayerCardDataAsset* DataAsset, struct FPlayerCardHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPlayerCard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3844000
	void GetObjective(struct UObject* WorldContextObject, struct UObjectiveDataAsset* DataAsset, struct FObjectiveHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetObjective // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3843e80
	void GetMission(struct UObject* WorldContextObject, struct UMissionDataAsset* DataAsset, struct FMissionHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMission // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3843c60
	void GetMatchmakingQueue(struct UObject* WorldContextObject, struct UMatchmakingQueueDataAsset* DataAsset, struct FMatchmakingQueueHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMatchmakingQueue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3843ae0
	void GetMassRewardsCeremonyByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FMassRewardsCeremonyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMassRewardsCeremonyByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3843960
	void GetMassRewardsCeremony(struct UObject* WorldContextObject, struct UMassRewardsCeremonyDataAsset* DataAsset, struct FMassRewardsCeremonyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMassRewardsCeremony // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38437e0
	void GetMap(struct UObject* WorldContextObject, struct UMapDataAsset* DataAsset, struct FMapHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3843660
	void GetLevelsForEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* EquippableSkinDataAsset, struct FEquippableSkinLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetLevelsForEquippableSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38434e0
	void GetLevelBorder(struct UObject* WorldContextObject, struct ULevelBorderDataAsset* DataAsset, struct FLevelBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetLevelBorder // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3843360
	void GetJuiceBoxByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FJuiceBoxHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetJuiceBoxByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38431e0
	void GetJuiceBox(struct UObject* WorldContextObject, struct UJuiceBoxDataAsset* DataAsset, struct FJuiceBoxHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetJuiceBox // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3843060
	int32_t GetHighestUnlockedLevelForEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* EquippableSkinDataAsset); // Function ShooterGame.ContentLibrary.GetHighestUnlockedLevelForEquippableSkin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3842f90
	void GetGameMode(struct UObject* WorldContextObject, struct UGameModeDataAsset* DataAsset, struct FGameModeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetGameMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842e10
	void GetExpressionEquipSlot(struct UObject* WorldContextObject, struct UExpressionEquipSlotDataAsset* DataAsset, struct FExpressionEquipSlotHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetExpressionEquipSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842c80
	void GetEvent(struct UObject* WorldContextObject, struct UEventDataAsset* DataAsset, struct FAresEventHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842b00
	void GetEquippableSkinsForTheme(struct UObject* WorldContextObject, struct UThemeDataAsset* ThemeDataAsset, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkinsForTheme // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842790
	void GetEquippableSkins(struct UObject* WorldContextObject, struct TArray<struct UEquippableSkinDataAsset*>& DataAssets, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkins // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38425c0
	struct UEquippableSkinDataAsset* GetEquippableSkinLevelParentSkin(struct UObject* WorldContextObject, struct UEquippableSkinLevelDataAsset* DataAsset); // Function ShooterGame.ContentLibrary.GetEquippableSkinLevelParentSkin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x38424f0
	void GetEquippableSkinLevel(struct UObject* WorldContextObject, struct UEquippableSkinLevelDataAsset* DataAsset, struct FEquippableSkinLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkinLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842370
	void GetEquippableSkinChroma(struct UObject* WorldContextObject, struct UEquippableSkinChromaDataAsset* DataAsset, struct FEquippableSkinChromaHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkinChroma // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38421f0
	void GetEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* DataAsset, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842060
	void GetEquippables(struct UObject* WorldContextObject, struct TArray<struct UEquippableDataAsset*>& DataAssets, struct FEquippableHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippables // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3842920
	void GetEquippableCharmLevelsForCharm(struct UObject* WorldContextObject, struct UEquippableCharmDataAsset* DataAsset, struct FEquippableCharmLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmLevelsForCharm // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841ee0
	void GetEquippableCharmLevel(struct UObject* WorldContextObject, struct UEquippableCharmLevelDataAsset* DataAsset, struct FEquippableCharmLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841d60
	void GetEquippableCharmInstancesForCharm(struct UObject* WorldContextObject, struct UEquippableCharmDataAsset* DataAsset, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmInstancesForCharm // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841be0
	void GetEquippableCharmInstances(struct UObject* WorldContextObject, struct TArray<struct UEquippableCharmInstanceInventoryModel*>& InventoryModels, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmInstances // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841a40
	void GetEquippableCharmInstance(struct UObject* WorldContextObject, struct UEquippableCharmInstanceInventoryModel* InventoryModel, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmInstance // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38418c0
	void GetEquippableCharm(struct UObject* WorldContextObject, struct UEquippableCharmDataAsset* DataAsset, struct FEquippableCharmHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharm // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841740
	void GetEquippableAttachments(struct UObject* WorldContextObject, struct TArray<struct UEquippableAttachmentDataAsset*>& DataAssets, struct FEquippableAttachmentHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableAttachments // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38415b0
	void GetEquippableAttachment(struct UObject* WorldContextObject, struct UEquippableAttachmentDataAsset* DataAsset, struct FEquippableAttachmentHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableAttachment // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841430
	void GetEquippable(struct UObject* WorldContextObject, struct UEquippableDataAsset* DataAsset, struct FEquippableHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3841280
	void GetCurrencyByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FCurrencyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCurrencyByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3841100
	void GetCurrency(struct UObject* WorldContextObject, struct UCurrencyDataAsset* DataAsset, struct FCurrencyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCurrency // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840f80
	void GetContractV2(struct UObject* WorldContextObject, struct UContractDataAssetV2* DataAsset, struct FContractV2HandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetContractV2 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840e00
	void GetContentTier(struct UObject* WorldContextObject, struct UContentTierDataAsset* DataAsset, struct FContentTierHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetContentTier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840c80
	struct UCompetitiveSeasonHandle* GetCompetitiveSeasonForSeason(struct UObject* WorldContextObject, struct USeasonDataAsset* SeasonDataAsset, struct FCompetitiveSeasonHandles& CompetitiveSeasonHandles); // Function ShooterGame.ContentLibrary.GetCompetitiveSeasonForSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840a30
	void GetCompetitiveSeason(struct UObject* WorldContextObject, struct UCompetitiveSeasonDataAsset* DataAsset, struct FCompetitiveSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCompetitiveSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38408b0
	void GetChromasForEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* EquippableSkinDataAsset, struct FEquippableSkinChromaHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetChromasForEquippableSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840730
	void GetCharacters(struct UObject* WorldContextObject, struct TArray<struct UCharacterDataAsset*>& DataAssets, struct FCharacterHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCharacters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840580
	void GetCharacter(struct UObject* WorldContextObject, struct UCharacterDataAsset* DataAsset, struct FCharacterHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38403f0
	void GetBTE(struct UObject* WorldContextObject, struct FBTEHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetBTE // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383ffb0
	void GetBaseHandles(struct UObject* WorldContextObject, struct TArray<struct UAresBasePrimaryDataAsset*>& DataAssets, struct FBaseHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetBaseHandles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3840260
	void GetBaseHandle(struct UObject* WorldContextObject, struct UAresBasePrimaryDataAsset* DataAsset, struct FBaseHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetBaseHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38400e0
	void GetAttachmentsForEquippable(struct UObject* WorldContextObject, struct UEquippableDataAsset* EquippableDataAsset, struct FEquippableAttachmentHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAttachmentsForEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383fe30
	void GetArmor(struct UObject* WorldContextObject, struct UArmorDataAsset* DataAsset, struct FArmorHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetArmor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383fcb0
	void GetAllTournamentsTeamIcons(struct UObject* WorldContextObject, struct FTournamentsTeamIconHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllTournamentsTeamIcons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383fb80
	void GetAllTotems(struct UObject* WorldContextObject, struct FTotemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllTotems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383fa50
	void GetAllThemes(struct UObject* WorldContextObject, struct FThemeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllThemes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f8f0
	void GetAllSubscriptions(struct UObject* WorldContextObject, struct FSubscriptionHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSubscriptions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f7c0
	void GetAllStorefrontItems(struct UObject* WorldContextObject, struct FStorefrontItemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllStorefrontItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f690
	void GetAllSprays(struct UObject* WorldContextObject, struct FSprayHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSprays // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f560
	void GetAllSprayEquipSlots(struct UObject* WorldContextObject, struct FSprayEquipSlotHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSprayEquipSlots // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f410
	void GetAllSeasons(struct UObject* WorldContextObject, struct FSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f2e0
	void GetAllPremierSeasons(struct UObject* WorldContextObject, struct FPremierSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPremierSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f1b0
	void GetAllPremierConferences(struct UObject* WorldContextObject, struct FPremierConferenceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPremierConferences // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383f080
	void GetAllPlayerTitles(struct UObject* WorldContextObject, struct FPlayerTitleHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPlayerTitles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383ef50
	void GetAllPlayerCards(struct UObject* WorldContextObject, struct FPlayerCardHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPlayerCards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383ee00
	void GetAllMatchmakingQueues(struct UObject* WorldContextObject, struct FMatchmakingQueueHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllMatchmakingQueues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383ecd0
	void GetAllMaps(struct UObject* WorldContextObject, struct FMapHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllMaps // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383eba0
	void GetAllLevelBorders(struct UObject* WorldContextObject, struct FLevelBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllLevelBorders // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383ea70
	void GetAllJuiceBoxes(struct UObject* WorldContextObject, struct FJuiceBoxHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllJuiceBoxes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e940
	void GetAllGameModes(struct UObject* WorldContextObject, struct FGameModeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllGameModes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e810
	void GetAllExpressionEquipSlots(struct UObject* WorldContextObject, struct FExpressionEquipSlotHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllExpressionEquipSlots // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e6c0
	void GetAllEquippableSkins(struct UObject* WorldContextObject, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippableSkins // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e400
	void GetAllEquippables(struct UObject* WorldContextObject, struct FEquippableHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippables // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e550
	void GetAllEquippableCharms(struct UObject* WorldContextObject, struct FEquippableCharmHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippableCharms // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e2c0
	void GetAllEquippableCharmInstances(struct UObject* WorldContextObject, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippableCharmInstances // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e180
	void GetAllCurrencies(struct UObject* WorldContextObject, struct FCurrencyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllCurrencies // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383e050
	void GetAllContentTiers(struct UObject* WorldContextObject, struct FContentTierHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllContentTiers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383df20
	void GetAllCompetitiveSeasons(struct UObject* WorldContextObject, struct FCompetitiveSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllCompetitiveSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383ddf0
	void GetAllCharacters(struct UObject* WorldContextObject, struct FCharacterHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllCharacters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383dca0
	void GetAllArmors(struct UObject* WorldContextObject, struct FArmorHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllArmors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383db70
	void GetAllActRankBorders(struct UObject* WorldContextObject, struct FActRankBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllActRankBorders // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383da40
	void GetActRankBorder(struct UObject* WorldContextObject, struct UActRankBorderDataAsset* DataAsset, struct FActRankBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetActRankBorder // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x383d8c0
	void ClearWeaponComponents(struct AActor* Parent); // Function ShooterGame.ContentLibrary.ClearWeaponComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x383d4d0
	void ApplySkin(struct AActor* Parent, struct UEquippableSkinDataAsset* EquippableSkinAsset, struct UEquippableSkinChromaDataAsset* EquippableChromaAsset, int32_t SkinLevel, struct UEquippableCharmDataAsset* EquippableCharmAsset, int32_t CharmLevel); // Function ShooterGame.ContentLibrary.ApplySkin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x383d230
	void AddWeaponAttachment(struct AActor* Parent, struct TSoftClassPtr<UObject> WeaponAttachment); // Function ShooterGame.ContentLibrary.AddWeaponAttachment // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x383d0d0
};

// Class ShooterGame.ContentManager
// Size: 0x2e8 (Inherited: 0x80)
struct UContentManager : UInitSystem {
	struct FMulticastInlineDelegate ContentUpdatedCallback; // 0x80(0x10)
	char pad_90[0x38]; // 0x90(0x38)
	struct URSOManager* RSOManager; // 0xc8(0x08)
	struct UContentService* ContentService; // 0xd0(0x08)
	struct UConfigManager* ConfigManager; // 0xd8(0x08)
	struct UContentIndex* ContentIndex; // 0xe0(0x08)
	struct UPlatformSessionManager* PlatformSessionManager; // 0xe8(0x08)
	char pad_F0[0x90]; // 0xf0(0x90)
	struct TMap<enum class EAresSeasonType, struct USeasonDataAsset*> ActiveSeasons; // 0x180(0x50)
	struct TMap<struct USeasonDataAsset*, struct FDateTime> SeasonEndTimes; // 0x1d0(0x50)
	struct TMap<struct UEventDataAsset*, struct FDateTime> EventEndTimes; // 0x220(0x50)
	struct TSet<struct UEventDataAsset*> ActiveEvents; // 0x270(0x50)
	char pad_2C0[0x28]; // 0x2c0(0x28)

	bool IsSeasonEnabled(struct FGuid& Guid); // Function ShooterGame.ContentManager.IsSeasonEnabled // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x384e9b0
	bool IsEquipEnabledFromCDO(struct AAresEquippable* EquippableCDO); // Function ShooterGame.ContentManager.IsEquipEnabledFromCDO // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384e910
	bool HasDisabledSkinLevels(struct UEquippableSkinDataAsset* EquippableSkinData); // Function ShooterGame.ContentManager.HasDisabledSkinLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384e750
	bool GetSeasonEndTime(struct USeasonDataAsset* season, struct FDateTime& OutEndTime); // Function ShooterGame.ContentManager.GetSeasonEndTime // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x384e5d0
	struct UGameModeUIData* GetModeUIData(struct UGameModeDataAsset* ModeDataAsset); // Function ShooterGame.ContentManager.GetModeUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x384e530
	struct UMapUIData* GetMapUIData(struct UMapDataAsset* MapDataAsset); // Function ShooterGame.ContentManager.GetMapUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x384e490
	struct UMapDataAsset* GetMapDataAsset(struct FName& MapURL); // Function ShooterGame.ContentManager.GetMapDataAsset // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x384e3e0
	int32_t GetHighestEnabledSkinLevelIndex(struct UEquippableSkinDataAsset* DataAsset); // Function ShooterGame.ContentManager.GetHighestEnabledSkinLevelIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384e320
	struct UGameModeDataAsset* GetGameModeDataAsset(struct FName& MapURL); // Function ShooterGame.ContentManager.GetGameModeDataAsset // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x384e270
	bool GetEventEndTime(struct UEventDataAsset* Event, struct FDateTime& OutEndTime); // Function ShooterGame.ContentManager.GetEventEndTime // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x384e1a0
	struct UContentManager* GetContentManager(struct UObject* WorldContextObject); // Function ShooterGame.ContentManager.GetContentManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x384df30
	bool GetCompetitiveSeasonServiceTimes(struct UCompetitiveSeasonDataAsset* CompetitiveSeason, struct FSeasonServiceTimes& OutServiceTimes); // Function ShooterGame.ContentManager.GetCompetitiveSeasonServiceTimes // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x384de50
	struct USeasonDataAsset* GetActiveSeasonByType(enum class EAresSeasonType Type); // Function ShooterGame.ContentManager.GetActiveSeasonByType // (Final|Native|Public|BlueprintCallable) // @ game+0x384ddc0
	struct USeasonDataAsset* GetActiveSeason(); // Function ShooterGame.ContentManager.GetActiveSeason // (Final|Native|Public|BlueprintCallable) // @ game+0x384dd90
	struct TSet<struct UEventDataAsset*> GetActiveEvents(); // Function ShooterGame.ContentManager.GetActiveEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x384dcc0
	struct UCompetitiveSeasonDataAsset* GetActiveCompetitiveSeason(); // Function ShooterGame.ContentManager.GetActiveCompetitiveSeason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x384dc90
};

// Class ShooterGame.ContentService
// Size: 0x38 (Inherited: 0x30)
struct UContentService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ContentTierUIData
// Size: 0xd0 (Inherited: 0x90)
struct UContentTierUIData : UBaseContentUIData {
	struct FSlateColor HighlightColor; // 0x90(0x28)
	struct FText DisplayNameAbbreviatedAllCaps; // 0xb8(0x18)
};

// Class ShooterGame.ContentTierDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UContentTierDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	int32_t TierRank; // 0x80(0x04)
	int32_t JuiceValue; // 0x84(0x04)
	int32_t JuiceCost; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class ShooterGame.ContentTierViewModel
// Size: 0xa8 (Inherited: 0x48)
struct UContentTierViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnContentTierIconChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnContentTierColorChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnIsExclusiveTierChanged; // 0x68(0x10)
	struct UTexture* ContentTierIcon; // 0x78(0x08)
	struct FLinearColor ContentTierColor; // 0x80(0x10)
	bool bIsExclusiveTier; // 0x90(0x01)
	char pad_91[0x17]; // 0x91(0x17)

	void UpdateDataReady(); // Function ShooterGame.ContentTierViewModel.UpdateDataReady // (Final|Native|Protected|BlueprintCallable) // @ game+0x384ee00
	void SetIsExclusiveTier(bool NewIsExclusiveTier); // Function ShooterGame.ContentTierViewModel.SetIsExclusiveTier // (Final|Native|Protected|BlueprintCallable) // @ game+0x384ed70
	void SetContentTierIcon(struct UTexture* NewContentTierIcon); // Function ShooterGame.ContentTierViewModel.SetContentTierIcon // (Final|Native|Protected|BlueprintCallable) // @ game+0x384eb10
	void SetContentTierColor(struct FLinearColor NewContentTierColor); // Function ShooterGame.ContentTierViewModel.SetContentTierColor // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x384ea80
	void Refresh(); // Function ShooterGame.ContentTierViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x384ea60
	void InitFromSkinHandle(struct UEquippableSkinHandle* NewSkinHandle); // Function ShooterGame.ContentTierViewModel.InitFromSkinHandle // (Final|Native|Public|BlueprintCallable) // @ game+0x384e880
	void InitFromContentTierHandle(struct UContentTierHandle* NewContentTierHandle); // Function ShooterGame.ContentTierViewModel.InitFromContentTierHandle // (Final|Native|Public|BlueprintCallable) // @ game+0x384e7f0
	bool GetIsExclusiveTier(); // Function ShooterGame.ContentTierViewModel.GetIsExclusiveTier // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x384e3c0
	struct UTexture* GetContentTierIcon(); // Function ShooterGame.ContentTierViewModel.GetContentTierIcon // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x384dff0
	struct FLinearColor GetContentTierColor(); // Function ShooterGame.ContentTierViewModel.GetContentTierColor // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x384dfc0
};

// Class ShooterGame.ContextAwareModuleDebugComponent
// Size: 0x118 (Inherited: 0xe8)
struct UContextAwareModuleDebugComponent : UActorComponent {
	struct UContextAwareModuleManagerComponent* ContextAwareModuleManagerComponent; // 0xe8(0x08)
	char pad_F0[0x28]; // 0xf0(0x28)
};

// Class ShooterGame.ContextAwareModuleManagerComponent
// Size: 0x1c0 (Inherited: 0xe8)
struct UContextAwareModuleManagerComponent : UActorComponent {
	struct FSoftObjectPath TipsDatabasePath; // 0xe8(0x20)
	char pad_108[0xb8]; // 0x108(0xb8)

	void ReceiveOnContextAwareModuleToggled(bool bEnabled); // Function ShooterGame.ContextAwareModuleManagerComponent.ReceiveOnContextAwareModuleToggled // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnTipsLoaded(); // Function ShooterGame.ContextAwareModuleManagerComponent.OnTipsLoaded // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void LoadContextDetectionActor(); // Function ShooterGame.ContextAwareModuleManagerComponent.LoadContextDetectionActor // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void GetSpawnedTips(struct TArray<struct ATip*>& SpawnedTipsArray); // Function ShooterGame.ContextAwareModuleManagerComponent.GetSpawnedTips // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x384e6a0
};

// Class ShooterGame.ContextInterfaceComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UContextInterfaceComponent : UActorComponent {

	struct UActorComponent* GetContextDetectionComponent(struct UActorComponent* ActorComponentClass); // Function ShooterGame.ContextInterfaceComponent.GetContextDetectionComponent // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ContractUIData
// Size: 0x90 (Inherited: 0x90)
struct UContractUIData : UBaseContentUIData {
};

// Class ShooterGame.ContractDataAssetV2Content
// Size: 0x30 (Inherited: 0x30)
struct UContractDataAssetV2Content : UObject {
};

// Class ShooterGame.ContractDataAssetV2ContentNPE
// Size: 0x40 (Inherited: 0x30)
struct UContractDataAssetV2ContentNPE : UContractDataAssetV2Content {
	struct TArray<struct FContractDataAssetV2SpecialChapter> Chapters; // 0x30(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentCharacter
// Size: 0x70 (Inherited: 0x30)
struct UContractDataAssetV2ContentCharacter : UContractDataAssetV2Content {
	struct TSoftClassPtr<UObject> RelatedCharacter; // 0x30(0x30)
	struct TArray<struct FContractDataAssetV2SpecialChapter> Chapters; // 0x60(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentBattlepass
// Size: 0x88 (Inherited: 0x30)
struct UContractDataAssetV2ContentBattlepass : UContractDataAssetV2Content {
	struct TSoftClassPtr<UObject> season; // 0x30(0x30)
	struct FGuid PremiumRewardScheduleID; // 0x60(0x10)
	uint64_t PremiumVPCost; // 0x70(0x08)
	struct TArray<struct FContractDataAssetV2StoryChapter> Chapters; // 0x78(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentEventPass
// Size: 0x70 (Inherited: 0x30)
struct UContractDataAssetV2ContentEventPass : UContractDataAssetV2Content {
	struct TSoftClassPtr<UObject> Event; // 0x30(0x30)
	struct TArray<struct FContractDataAssetV2EventChapter> Chapters; // 0x60(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentAccord
// Size: 0x40 (Inherited: 0x30)
struct UContractDataAssetV2ContentAccord : UContractDataAssetV2Content {
	struct TArray<uint32_t> MedalThresholds; // 0x30(0x10)
};

// Class ShooterGame.ContractDataAssetV2
// Size: 0xd8 (Inherited: 0x50)
struct UContractDataAssetV2 : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	bool bShipIt; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FGuid FreeRewardScheduleID; // 0x84(0x10)
	char pad_94[0x4]; // 0x94(0x04)
	struct UContractDataAssetV2Content* Content; // 0x98(0x08)
	struct TSoftClassPtr<UObject> EOGWidget; // 0xa0(0x30)
	bool UseLevelVPCostOverride; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	uint32_t LevelVPCostOverride; // 0xd4(0x04)

	uint32_t GetLevelVPCost(struct FContractDataAssetV2Level& Level); // Function ShooterGame.ContractDataAssetV2.GetLevelVPCost // (Final|Native|Public|HasOutParms|Const) // @ game+0x3856c20
	enum class EContractType GetContractType(); // Function ShooterGame.ContractDataAssetV2.GetContractType // (Final|Native|Public|Const) // @ game+0x3856850
};

// Class ShooterGame.ContractDefinitionsManager
// Size: 0xd8 (Inherited: 0x80)
struct UContractDefinitionsManager : UInitSystem {
	bool bInitialized; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x90(0x08)
	struct UContractDefinitionsService* ContractDefinitionsService; // 0x98(0x08)
	struct UContentIndex* ContentIndex; // 0xa0(0x08)
	struct UContractDefinitionsModel* ContractDefinitionsModel; // 0xa8(0x08)
	struct UAresClientEvents* AresClientEvents; // 0xb0(0x08)
	struct UConfigManager* ConfigManager; // 0xb8(0x08)
	char pad_C0[0x18]; // 0xc0(0x18)

	struct USidegradeModel* GetSidegradeModelForSkinUpgradeItem(struct FGuid ParentSkinId, struct FGuid ItemId); // Function ShooterGame.ContractDefinitionsManager.GetSidegradeModelForSkinUpgradeItem // (Final|Native|Public|HasDefaults) // @ game+0x3857410
	struct TArray<struct UItemProgressionDefinitionLevelModel*> GetProgressionLevelsForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsManager.GetProgressionLevelsForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3857200
	struct UItemProgressionDefinitionModel* GetProgressionDefinitionForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsManager.GetProgressionDefinitionForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3857010
	struct UContractDefinitionsModel* GetModel(); // Function ShooterGame.ContractDefinitionsManager.GetModel // (Final|Native|Public) // @ game+0x380c2b0
	int32_t GetMaxLevelForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsManager.GetMaxLevelForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3856ea0
};

// Class ShooterGame.ItemProgressionDefinitionLevelModel
// Size: 0x50 (Inherited: 0x30)
struct UItemProgressionDefinitionLevelModel : UObject {
	int32_t LevelNumber; // 0x30(0x04)
	struct FGuid UpgradeCurrencyID; // 0x34(0x10)
	int32_t Cost; // 0x44(0x04)
	struct URewardGrantModel* Reward; // 0x48(0x08)

	struct FGuid GetUpgradeCurrencyID(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetUpgradeCurrencyID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x38575f0
	struct URewardGrantModel* GetReward(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38573f0
	int32_t GetLevelNumber(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetLevelNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856c00
	int32_t GetCost(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856910
};

// Class ShooterGame.SidegradeModel
// Size: 0x80 (Inherited: 0x30)
struct USidegradeModel : UObject {
	struct FGuid OptionID; // 0x30(0x10)
	struct FGuid SidegradeID; // 0x40(0x10)
	struct TArray<struct FEntitlementIdentifier> RequiredEntitlements; // 0x50(0x10)
	struct FCost Costs; // 0x60(0x10)
	struct UCurrencyDataAsset* PurchaseCurrency; // 0x70(0x08)
	struct URewardGrantModel* Reward; // 0x78(0x08)

	struct URewardGrantModel* GetReward(); // Function ShooterGame.SidegradeModel.GetReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384dff0
	struct TArray<struct FEntitlementIdentifier> GetRequirements(); // Function ShooterGame.SidegradeModel.GetRequirements // (Final|Native|Public|Const) // @ game+0x3857330
	struct FGuid GetOptionID(); // Function ShooterGame.SidegradeModel.GetOptionID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856ad0
	struct FGuid GetID(); // Function ShooterGame.SidegradeModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856af0
	struct FGuid GetCurrencyID(); // Function ShooterGame.SidegradeModel.GetCurrencyID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856a30
	int32_t GetCostValue(); // Function ShooterGame.SidegradeModel.GetCostValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856930
	struct FCost GetCosts(); // Function ShooterGame.SidegradeModel.GetCosts // (Final|Native|Public|Const) // @ game+0x3856960
	void AddRequirement(struct FEntitlementIdentifier Requirement); // Function ShooterGame.SidegradeModel.AddRequirement // (Final|Native|Public) // @ game+0x38566d0
};

// Class ShooterGame.ItemProgressionDefinitionModel
// Size: 0xa0 (Inherited: 0x30)
struct UItemProgressionDefinitionModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct FEntitlementIdentifier Item; // 0x40(0x20)
	struct FEntitlementIdentifier RequiredEntitlement; // 0x60(0x20)
	struct TArray<struct UItemProgressionDefinitionLevelModel*> Levels; // 0x80(0x10)
	struct TArray<struct USidegradeModel*> Sidegrades; // 0x90(0x10)

	struct TArray<struct USidegradeModel*> GetSidegrades(); // Function ShooterGame.ItemProgressionDefinitionModel.GetSidegrades // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3857510
	struct FEntitlementIdentifier GetRequiredEntitlement(); // Function ShooterGame.ItemProgressionDefinitionModel.GetRequiredEntitlement // (Final|Native|Public|Const) // @ game+0x3857300
	struct TArray<struct UItemProgressionDefinitionLevelModel*> GetLevels(); // Function ShooterGame.ItemProgressionDefinitionModel.GetLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3856cd0
	struct FEntitlementIdentifier GetItem(); // Function ShooterGame.ItemProgressionDefinitionModel.GetItem // (Final|Native|Public|Const) // @ game+0x3856b10
	struct FGuid GetID(); // Function ShooterGame.ItemProgressionDefinitionModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856ad0
	void AddSidegrade(struct USidegradeModel* Sidegrade); // Function ShooterGame.ItemProgressionDefinitionModel.AddSidegrade // (Final|Native|Public) // @ game+0x3856770
	void AddLevel(struct UItemProgressionDefinitionLevelModel* Level); // Function ShooterGame.ItemProgressionDefinitionModel.AddLevel // (Final|Native|Public) // @ game+0x3856640
};

// Class ShooterGame.ContractDefinitionsModel
// Size: 0x40 (Inherited: 0x30)
struct UContractDefinitionsModel : UObject {
	struct TArray<struct UItemProgressionDefinitionModel*> ItemProgressionDefinitionsV2; // 0x30(0x10)

	void SetItemProgressionDefinitionsV2(struct TArray<struct UItemProgressionDefinitionModel*> Definitions); // Function ShooterGame.ContractDefinitionsModel.SetItemProgressionDefinitionsV2 // (Final|Native|Public) // @ game+0x3857d20
	struct UItemProgressionDefinitionModel* GetProgressionDefinitionForItem(struct FGuid ItemId); // Function ShooterGame.ContractDefinitionsModel.GetProgressionDefinitionForItem // (Final|Native|Public|HasDefaults) // @ game+0x3857150
	struct UItemProgressionDefinitionModel* GetProgressionDefinitionForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsModel.GetProgressionDefinitionForDataAsset // (Final|Native|Public) // @ game+0x38570b0
	struct TArray<struct UItemProgressionDefinitionModel*> GetItemProgressionDefinitionsV2(); // Function ShooterGame.ContractDefinitionsModel.GetItemProgressionDefinitionsV2 // (Final|Native|Public|Const) // @ game+0x3856b40
};

// Class ShooterGame.ContractDefinitionsService
// Size: 0x38 (Inherited: 0x30)
struct UContractDefinitionsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ContractsManager
// Size: 0x218 (Inherited: 0x80)
struct UContractsManager : UInitSystem {
	struct FMulticastInlineDelegate OnRecruitmentEventUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnContractsFetchSuccess; // 0x90(0x10)
	char pad_A0[0x48]; // 0xa0(0x48)
	bool bInitialized; // 0xe8(0x01)
	bool bInitCalled; // 0xe9(0x01)
	bool bInitFinalized; // 0xea(0x01)
	bool bContractsPopulated; // 0xeb(0x01)
	bool bIsSubscribedToCAPProgression; // 0xec(0x01)
	bool bIsRecruitmentEventFetchComplete; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	struct TMap<struct FGuid, struct URecruitmentData*> AgentIdToRecruitmentData; // 0xf0(0x50)
	struct URSOManager* RSOManager; // 0x140(0x08)
	struct URMSManager* RMSManager; // 0x148(0x08)
	struct UContentIndex* ContentIndex; // 0x150(0x08)
	struct UContractsService* ContractsService; // 0x158(0x08)
	struct UContractsModel* ContractsModel; // 0x160(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x168(0x08)
	struct UConfigManager* ConfigManager; // 0x170(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x178(0x08)
	struct UStoreManager* StoreManager; // 0x180(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x188(0x08)
	struct URecruitmentEventModel* RecruitmentEventModel; // 0x190(0x08)
	struct URecruitmentEventData* RecruitmentEventData; // 0x198(0x08)
	char pad_1A0[0x78]; // 0x1a0(0x78)

	void UpgradeContract(struct FGuid& XID, struct FGuid& ContractDefinitionID, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UpgradeContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3858e90
	void UpdateRecruitmentEventModel(struct FRecruitmentProgress& UpdatedRecruitmentProgress); // Function ShooterGame.ContractsManager.UpdateRecruitmentEventModel // (Final|Native|Private|HasOutParms) // @ game+0x3858dd0
	void UnlockItemSidegrade(struct FGuid& XID, struct FGuid& ItemProgressionDefinitionID, struct FGuid& SidegradeID, struct FGuid& OptionID, struct TArray<struct FEntitlementReward> ExpectedRewards, struct TArray<struct FWalletCost> ExpectedCosts, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockItemSidegrade // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x38589c0
	void UnlockItemProgressV2(struct FGuid& XID, struct FGuid& ItemProgressionDefinitionID, int32_t CurrentItemTier, int32_t ResultItemTier, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockItemProgressV2 // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3858690
	void UnlockItemProgressInternal(struct FGuid& XID, struct FGuid& ItemProgressionDefinitionID, int32_t CurrentItemTier, int32_t ResultItemTier, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockItemProgressInternal // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x3858360
	void UnlockContractProgress(struct FGuid& XID, struct FGuid& ContractDefinitionID, int32_t TargetLevel, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockContractProgress // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3858080
	void TriggerFetchContracts(); // Function ShooterGame.ContractsManager.TriggerFetchContracts // (Final|Native|Public|BlueprintCallable) // @ game+0x3858060
	bool ShouldAgentContractsShowDough(); // Function ShooterGame.ContractsManager.ShouldAgentContractsShowDough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3858030
	void SetRecruitmentEventModel(struct URecruitmentEventModel* Model); // Function ShooterGame.ContractsManager.SetRecruitmentEventModel // (Final|Native|Private) // @ game+0x3857fa0
	void SetRecruitmentEventData(struct FRecruitmentEvent& Data); // Function ShooterGame.ContractsManager.SetRecruitmentEventData // (Final|Native|Private|HasOutParms) // @ game+0x3857e70
	void OnRecruitmentEventEnabledChange(); // Function ShooterGame.ContractsManager.OnRecruitmentEventEnabledChange // (Final|Native|Private) // @ game+0x3857d00
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.ContractsManager.OnBugCommand // (Final|Native|Private) // @ game+0x3857bb0
	bool IsPremiumXPMultiplierEnabled(); // Function ShooterGame.ContractsManager.IsPremiumXPMultiplierEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3857b80
	bool IsMainMenuConnectionTestingEnabled(); // Function ShooterGame.ContractsManager.IsMainMenuConnectionTestingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3857b50
	bool IsMainMenuBatteryTestingEnabled(); // Function ShooterGame.ContractsManager.IsMainMenuBatteryTestingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3857b20
	void HandleUpdatedContracts(struct FContracts& Contracts); // Function ShooterGame.ContractsManager.HandleUpdatedContracts // (Final|Native|Private|HasOutParms) // @ game+0x3857850
	void HandleRecruitmentEventDataFetchSuccess(struct FRecruitmentEvent& Data); // Function ShooterGame.ContractsManager.HandleRecruitmentEventDataFetchSuccess // (Final|Native|Private|HasOutParms) // @ game+0x3857720
	void HandleContractsNotifications(struct FRMSNotification& Notification); // Function ShooterGame.ContractsManager.HandleContractsNotifications // (Final|Native|Private|HasOutParms) // @ game+0x3857610
	struct URecruitmentEventModel* GetRecruitmentEventModel(); // Function ShooterGame.ContractsManager.GetRecruitmentEventModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38572e0
	struct UContractsModel* GetModel(); // Function ShooterGame.ContractsManager.GetModel // (Final|Native|Public) // @ game+0x3856ff0
	struct UMissionDataAsset* GetMissionDataAssetByID(struct FGuid& MissionID); // Function ShooterGame.ContractsManager.GetMissionDataAssetByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856f40
	int32_t GetMainMenuConnectionTestPing(); // Function ShooterGame.ContractsManager.GetMainMenuConnectionTestPing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856e70
	int32_t GetMainMenuConnectionTestGamepodIndex(); // Function ShooterGame.ContractsManager.GetMainMenuConnectionTestGamepodIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856e40
	enum class EAresNetworkConnectionType GetMainMenuConnectionTestConnectionType(); // Function ShooterGame.ContractsManager.GetMainMenuConnectionTestConnectionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856e10
	int32_t GetMainMenuBatteryTestLevel(); // Function ShooterGame.ContractsManager.GetMainMenuBatteryTestLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856de0
	bool GetMainMenuBatteryTestIsCharging(); // Function ShooterGame.ContractsManager.GetMainMenuBatteryTestIsCharging // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856db0
	int32_t GetEndOfGamePassiveMatchUpdateDelay(); // Function ShooterGame.ContractsManager.GetEndOfGamePassiveMatchUpdateDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856aa0
	int32_t GetEndOfGameActiveMatchUpdateDelay(); // Function ShooterGame.ContractsManager.GetEndOfGameActiveMatchUpdateDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856a70
	struct UContractsManager* GetContractsManager(struct UObject* WorldContextObject); // Function ShooterGame.ContractsManager.GetContractsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3856880
	struct URecruitmentEventData* GetActiveRecruitmentEventData(); // Function ShooterGame.ContractsManager.GetActiveRecruitmentEventData // (Final|Native|Private) // @ game+0x3856820
	void FinalizeInitSuccess(); // Function ShooterGame.ContractsManager.FinalizeInitSuccess // (Final|Native|Public) // @ game+0x3856800
	void ActivateSpecialContract(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsManager.ActivateSpecialContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x38565a0
};

// Class ShooterGame.ContractModel
// Size: 0x98 (Inherited: 0x30)
struct UContractModel : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct FGuid ContractDefinitionID; // 0x78(0x10)
	int32_t CurrentLevel; // 0x88(0x04)
	int32_t CurrentXPTowardsNextLevel; // 0x8c(0x04)
	int32_t TotalXP; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	void SetTotalXP(int32_t XP); // Function ShooterGame.ContractModel.SetTotalXP // (Final|Native|Public) // @ game+0x3861860
	void SetCurrentXP(int32_t XP); // Function ShooterGame.ContractModel.SetCurrentXP // (Final|Native|Public) // @ game+0x3861680
	void SetCurrentLevel(int32_t NewLevel); // Function ShooterGame.ContractModel.SetCurrentLevel // (Final|Native|Public) // @ game+0x38615f0
	int32_t GetTotalXP(); // Function ShooterGame.ContractModel.GetTotalXP // (Final|Native|Public) // @ game+0x3861280
	int32_t GetCurrentXP(); // Function ShooterGame.ContractModel.GetCurrentXP // (Final|Native|Public) // @ game+0x3860e60
	int32_t GetCurrentLevel(); // Function ShooterGame.ContractModel.GetCurrentLevel // (Final|Native|Public) // @ game+0x3860e20
	struct FGuid GetContractDefinitionID(); // Function ShooterGame.ContractModel.GetContractDefinitionID // (Final|Native|Public|HasDefaults|Const) // @ game+0x3860d30
};

// Class ShooterGame.EventModel
// Size: 0x48 (Inherited: 0x30)
struct UEventModel : UObject {
	struct UEventDataAsset* DataAsset; // 0x30(0x08)
	struct FDateTime StartTime; // 0x38(0x08)
	struct FDateTime EndTime; // 0x40(0x08)

	struct FDateTime GetStartTime(); // Function ShooterGame.EventModel.GetStartTime // (Final|Native|Public|HasDefaults) // @ game+0x3861260
	struct FDateTime GetEndTime(); // Function ShooterGame.EventModel.GetEndTime // (Final|Native|Public|HasDefaults) // @ game+0x3860e80
};

// Class ShooterGame.MissionModel
// Size: 0xe0 (Inherited: 0x30)
struct UMissionModel : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct UMissionDataAsset* DataAsset; // 0x78(0x08)
	struct TMap<struct UObjectiveDataAsset*, int32_t> Objectives; // 0x80(0x50)
	struct FDateTime ExpirationTime; // 0xd0(0x08)
	bool bIsComplete; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)

	void SetObjectiveProgress(struct UObjectiveDataAsset* Objective, int32_t Progress); // Function ShooterGame.MissionModel.SetObjectiveProgress // (Final|Native|Public) // @ game+0x3861790
	void SetExpirationTime(struct FDateTime NewExpirationTime); // Function ShooterGame.MissionModel.SetExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3861710
	int32_t GetObjectiveProgress(struct UObjectiveDataAsset* Objective); // Function ShooterGame.MissionModel.GetObjectiveProgress // (Final|Native|Public) // @ game+0x3861190
};

// Class ShooterGame.ObjectiveDeltaModel
// Size: 0x40 (Inherited: 0x30)
struct UObjectiveDeltaModel : UObject {
	struct UObjectiveDataAsset* Objective; // 0x30(0x08)
	int32_t ProgressBefore; // 0x38(0x04)
	int32_t ProgressAfter; // 0x3c(0x04)
};

// Class ShooterGame.MissionDeltaModel
// Size: 0x90 (Inherited: 0x30)
struct UMissionDeltaModel : UObject {
	struct FGuid MissionID; // 0x30(0x10)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveDeltaModel*> Objectives; // 0x40(0x50)
};

// Class ShooterGame.ContractDeltaModel
// Size: 0x38 (Inherited: 0x30)
struct UContractDeltaModel : UObject {
	int32_t TotalXPBefore; // 0x30(0x04)
	int32_t TotalXPAfter; // 0x34(0x04)
};

// Class ShooterGame.ContractMatchResultsModel
// Size: 0x208 (Inherited: 0x30)
struct UContractMatchResultsModel : UObject {
	struct FGuid MatchID; // 0x30(0x10)
	struct TMap<struct UMissionDataAsset*, struct UMissionDeltaModel*> MissionDeltas; // 0x40(0x50)
	struct TMap<struct UContractDataAssetV2*, struct UContractDeltaModel*> ContractDeltas; // 0x90(0x50)
	bool CouldProgressMissions; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t GamePlayedXP; // 0xe4(0x04)
	int32_t GameWonXP; // 0xe8(0x04)
	int32_t RoundPlayedXP; // 0xec(0x04)
	int32_t RoundWonXP; // 0xf0(0x04)
	int32_t RoundWonDough; // 0xf4(0x04)
	int32_t RoundPlayedDough; // 0xf8(0x04)
	int32_t GamePlayedDough; // 0xfc(0x04)
	int32_t RoundsTotal; // 0x100(0x04)
	int32_t RoundsWon; // 0x104(0x04)
	struct FRecruitmentProgressUpdate RecruitmentProgressUpdate; // 0x108(0x48)
	struct TArray<struct FContractsXpModifier> Modifiers; // 0x150(0x10)
	struct TMap<struct FGuid, struct URewardGrantModel*> RewardGrants; // 0x160(0x50)
	struct TMap<struct UMissionDataAsset*, int32_t> MissionsXP; // 0x1b0(0x50)
	struct URewardGrantModel* RecruitmentRewardGrant; // 0x200(0x08)
};

// Class ShooterGame.ContractsModel
// Size: 0x130 (Inherited: 0x30)
struct UContractsModel : UObject {
	char pad_30[0xc0]; // 0x30(0xc0)
	struct TArray<struct UContractModel*> Contracts; // 0xf0(0x10)
	struct TArray<struct UMissionModel*> Missions; // 0x100(0x10)
	struct TArray<struct UContractMatchResultsModel*> MatchResults; // 0x110(0x10)
	struct UContractModel* ActiveSpecialContract; // 0x120(0x08)
	struct FDateTime WeeklyRefillTime; // 0x128(0x08)

	void SetActiveSpecialContract(struct UContractModel* Contract); // Function ShooterGame.ContractsModel.SetActiveSpecialContract // (Final|Native|Public) // @ game+0x3861560
	void RemoveMission(struct UMissionDataAsset* DataAsset); // Function ShooterGame.ContractsModel.RemoveMission // (Final|Native|Public) // @ game+0x38614d0
	void RemoveMatch(struct FGuid MatchID); // Function ShooterGame.ContractsModel.RemoveMatch // (Final|Native|Public|HasDefaults) // @ game+0x3861430
	void RemoveContract(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsModel.RemoveContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3861390
	struct TArray<struct UMissionModel*> GetMissions(); // Function ShooterGame.ContractsModel.GetMissions // (Final|Native|Public|Const) // @ game+0x38610c0
	struct UMissionModel* GetMission(struct UMissionDataAsset* DataAsset); // Function ShooterGame.ContractsModel.GetMission // (Final|Native|Public|Const) // @ game+0x3861020
	struct TArray<struct UContractMatchResultsModel*> GetMatchResults(); // Function ShooterGame.ContractsModel.GetMatchResults // (Final|Native|Public|Const) // @ game+0x3860f50
	struct UContractMatchResultsModel* GetMatch(struct FGuid MatchID); // Function ShooterGame.ContractsModel.GetMatch // (Final|Native|Public|HasDefaults|Const) // @ game+0x3860ea0
	struct TArray<struct UContractModel*> GetContracts(); // Function ShooterGame.ContractsModel.GetContracts // (Final|Native|Public|Const) // @ game+0x3860d50
	struct UContractModel* GetContractByDefinitionID(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsModel.GetContractByDefinitionID // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x3860c80
	struct UContractModel* GetActiveSpecialContract(); // Function ShooterGame.ContractsModel.GetActiveSpecialContract // (Final|Native|Public|Const) // @ game+0x3860c40
	void AddMission(struct UMissionModel* Mission); // Function ShooterGame.ContractsModel.AddMission // (Final|Native|Public) // @ game+0x3860bb0
	void AddMatch(struct UContractMatchResultsModel* Match); // Function ShooterGame.ContractsModel.AddMatch // (Final|Native|Public) // @ game+0x3860b20
	void AddContract(struct UContractModel* Contract); // Function ShooterGame.ContractsModel.AddContract // (Final|Native|Public) // @ game+0x3860a90
};

// Class ShooterGame.RecruitmentEventModel
// Size: 0x50 (Inherited: 0x30)
struct URecruitmentEventModel : UObject {
	struct UCharacterDataAsset* Character; // 0x30(0x08)
	struct FDateTime StartDate; // 0x38(0x08)
	struct FDateTime EndDate; // 0x40(0x08)
	int32_t Threshold; // 0x48(0x04)
	int32_t CurrentProgress; // 0x4c(0x04)

	bool IsComplete(); // Function ShooterGame.RecruitmentEventModel.IsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3861360
	bool IsActive(); // Function ShooterGame.RecruitmentEventModel.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612e0
	int32_t GetThreshold(); // Function ShooterGame.RecruitmentEventModel.GetThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556800
	struct FDateTime GetStartDate(); // Function ShooterGame.RecruitmentEventModel.GetStartDate // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3861260
	float GetPercentProgress(); // Function ShooterGame.RecruitmentEventModel.GetPercentProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3861230
	struct FDateTime GetEndDate(); // Function ShooterGame.RecruitmentEventModel.GetEndDate // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e80
	int32_t GetCurrentProgress(); // Function ShooterGame.RecruitmentEventModel.GetCurrentProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e40
	struct UCharacterDataAsset* GetCharacter(); // Function ShooterGame.RecruitmentEventModel.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c60
};

// Class ShooterGame.RecruitmentEventData
// Size: 0x70 (Inherited: 0x30)
struct URecruitmentEventData : UObject {
	struct FGuid AgentID; // 0x30(0x10)
	struct FGuid CounterID; // 0x40(0x10)
	int32_t MilestoneThreshold; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FDateTime StartDate; // 0x58(0x08)
	struct FDateTime EndDate; // 0x60(0x08)
	bool IsActive; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class ShooterGame.ContractsScreen
// Size: 0x2d8 (Inherited: 0x2c8)
struct UContractsScreen : UDesignableUserWidget {
	struct UContractsViewModel* ViewModel; // 0x2c8(0x08)
	struct UContractsViewController* ViewController; // 0x2d0(0x08)

	struct UContractsViewModel* GetViewModel(); // Function ShooterGame.ContractsScreen.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612c0
	struct UContractsViewController* GetViewController(); // Function ShooterGame.ContractsScreen.GetViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612a0
};

// Class ShooterGame.ContractsService
// Size: 0x38 (Inherited: 0x30)
struct UContractsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ContractsViewController
// Size: 0xc8 (Inherited: 0x80)
struct UContractsViewController : UInitSystem {
	struct UContentIndex* ContentIndex; // 0x80(0x08)
	struct UContentManager* ContentManager; // 0x88(0x08)
	struct UContractsManager* ContractsManager; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct UMapLoadModel* MapLoadModel; // 0xa0(0x08)
	struct UContractsViewModel* ViewModel; // 0xa8(0x08)
	struct UContractsModel* ContractsModel; // 0xb0(0x08)
	struct UInventoryManager* InventoryManager; // 0xb8(0x08)
	bool bInitializedViewModel; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)

	void UpdateObjectiveProgress(struct UMissionDataAsset* MissionDataAsset, struct UObjectiveDataAsset* ObjectiveDataAsset); // Function ShooterGame.ContractsViewController.UpdateObjectiveProgress // (Final|Native|Protected) // @ game+0x386d390
	void UpdateIsMissionComplete(struct UMissionDataAsset* MissionDataAsset); // Function ShooterGame.ContractsViewController.UpdateIsMissionComplete // (Final|Native|Protected) // @ game+0x386d300
	void UpdateActiveStoryContract(); // Function ShooterGame.ContractsViewController.UpdateActiveStoryContract // (Final|Native|Protected) // @ game+0x386d2e0
	void UpdateActiveEventContracts(); // Function ShooterGame.ContractsViewController.UpdateActiveEventContracts // (Final|Native|Protected) // @ game+0x386d2c0
	bool IsActiveSpecialContractNPE(); // Function ShooterGame.ContractsViewController.IsActiveSpecialContractNPE // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bcd0
	void HandleObjectiveUpdate(struct AMission* Mission, struct UObjectiveComponent* Objective); // Function ShooterGame.ContractsViewController.HandleObjectiveUpdate // (Final|Native|Protected) // @ game+0x386ba20
	void HandleMissionStatusUpdate(struct AMission* Mission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.ContractsViewController.HandleMissionStatusUpdate // (Final|Native|Protected) // @ game+0x386b910
	void HandleMissionAdded(struct AMission* Mission); // Function ShooterGame.ContractsViewController.HandleMissionAdded // (Final|Native|Protected) // @ game+0x3634e00
	void HandleMapLoad(); // Function ShooterGame.ContractsViewController.HandleMapLoad // (Final|Native|Protected) // @ game+0x386b8f0
	void HandleActiveSeasonChanged(struct USeasonDataAsset* SeasonDataAsset); // Function ShooterGame.ContractsViewController.HandleActiveSeasonChanged // (Final|Native|Protected) // @ game+0x386b860
	struct UContractsViewModel* GetViewModel(); // Function ShooterGame.ContractsViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386b660
	struct FGuid GetNPEContractID(); // Function ShooterGame.ContractsViewController.GetNPEContractID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x386a9c0
	void FetchContracts(); // Function ShooterGame.ContractsViewController.FetchContracts // (Final|Native|Public|BlueprintCallable) // @ game+0x3869940
	void ActivateSpecialContract(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsViewController.ActivateSpecialContract // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3869570
};

// Class ShooterGame.XpModifierViewModel
// Size: 0x40 (Inherited: 0x30)
struct UXpModifierViewModel : UObject {
	enum class EXPModifier Name; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float Value; // 0x34(0x04)
	bool BaseOnly; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class ShooterGame.PremiumContractDetailsViewModel
// Size: 0x68 (Inherited: 0x30)
struct UPremiumContractDetailsViewModel : UObject {
	struct FGuid EntitlementTypeID; // 0x30(0x10)
	struct FGuid EntitlementItemID; // 0x40(0x10)
	struct FGuid CurrencyID; // 0x50(0x10)
	int32_t ExpectedCost; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class ShooterGame.ContractLevelViewModel
// Size: 0x78 (Inherited: 0x30)
struct UContractLevelViewModel : UObject {
	struct FMulticastInlineDelegate OnIsCurrentLevelChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLevelCompletedChanged; // 0x40(0x10)
	int32_t LevelNumber; // 0x50(0x04)
	int32_t XPToComplete; // 0x54(0x04)
	struct URewardModel* Reward; // 0x58(0x08)
	bool bIsCurrentLevel; // 0x60(0x01)
	bool bIsLevelCompleted; // 0x61(0x01)
	bool IsPurchasable; // 0x62(0x01)
	bool IsVPPurchasable; // 0x63(0x01)
	bool IsDoughPurchasable; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	int32_t PurchaseCost; // 0x68(0x04)
	int32_t VPPurchaseCost; // 0x6c(0x04)
	int32_t DoughPurchaseCost; // 0x70(0x04)
	bool bIsRewardPremium; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)

	void SetIsLevelCompleted(bool NewIsLevelCompleted); // Function ShooterGame.ContractLevelViewModel.SetIsLevelCompleted // (Final|Native|Public) // @ game+0x386cf70
	void SetIsCurrentLevel(bool NewIsCurrentLevel); // Function ShooterGame.ContractLevelViewModel.SetIsCurrentLevel // (Final|Native|Public) // @ game+0x386ce50
	bool GrantsCharacter(); // Function ShooterGame.ContractLevelViewModel.GrantsCharacter // (Final|Native|Public|Const) // @ game+0x386b830
	int32_t GetXPToComplete(); // Function ShooterGame.ContractLevelViewModel.GetXPToComplete // (Final|Native|Public|Const) // @ game+0x386a0c0
	int32_t GetVPPurchaseCost(); // Function ShooterGame.ContractLevelViewModel.GetVPPurchaseCost // (Final|Native|Public|Const) // @ game+0x386b640
	struct URewardModel* GetReward(); // Function ShooterGame.ContractLevelViewModel.GetReward // (Final|Native|Public|Const) // @ game+0x386ac50
	int32_t GetPurchaseCost(); // Function ShooterGame.ContractLevelViewModel.GetPurchaseCost // (Final|Native|Public|Const) // @ game+0x386abd0
	int32_t GetLevelNumber(); // Function ShooterGame.ContractLevelViewModel.GetLevelNumber // (Final|Native|Public|Const) // @ game+0x3793390
	bool GetIsVPPurchasable(); // Function ShooterGame.ContractLevelViewModel.GetIsVPPurchasable // (Final|Native|Public|Const) // @ game+0x386a3f0
	bool GetIsRewardPremium(); // Function ShooterGame.ContractLevelViewModel.GetIsRewardPremium // (Final|Native|Public|Const) // @ game+0x386a3d0
	bool GetIsPurchasable(); // Function ShooterGame.ContractLevelViewModel.GetIsPurchasable // (Final|Native|Public|Const) // @ game+0x386a3b0
	bool GetIsDoughPurchasable(); // Function ShooterGame.ContractLevelViewModel.GetIsDoughPurchasable // (Final|Native|Public|Const) // @ game+0x386a390
	bool GetIsCurrentLevel(); // Function ShooterGame.ContractLevelViewModel.GetIsCurrentLevel // (Final|Native|Public|Const) // @ game+0x36e17a0
	bool GetIsCompleted(); // Function ShooterGame.ContractLevelViewModel.GetIsCompleted // (Final|Native|Public|Const) // @ game+0x386a350
	int32_t GetDoughPurchaseCost(); // Function ShooterGame.ContractLevelViewModel.GetDoughPurchaseCost // (Final|Native|Public|Const) // @ game+0x3869fd0
};

// Class ShooterGame.ContractChapterViewModel
// Size: 0x50 (Inherited: 0x30)
struct UContractChapterViewModel : UObject {
	struct URewardGrantModel* FreeChapterRewards; // 0x30(0x08)
	struct TArray<struct UContractLevelViewModel*> Levels; // 0x38(0x10)
	bool bIsEpilogue; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	void SetIsEpilogue(bool isEpilogue); // Function ShooterGame.ContractChapterViewModel.SetIsEpilogue // (Final|Native|Public) // @ game+0x386cee0
	void SetFreeChapterReward(struct URewardGrantModel* Rewards); // Function ShooterGame.ContractChapterViewModel.SetFreeChapterReward // (Final|Native|Public) // @ game+0x386cac0
	struct UContractChapterViewModel* Make(); // Function ShooterGame.ContractChapterViewModel.Make // (Final|Native|Static|Public) // @ game+0x386bdb0
	struct TArray<struct UContractLevelViewModel*> GetLevels(); // Function ShooterGame.ContractChapterViewModel.GetLevels // (Final|Native|Public|Const) // @ game+0x386a5c0
	void GetLevelRange(int32_t& From, int32_t& To); // Function ShooterGame.ContractChapterViewModel.GetLevelRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a4e0
	struct UContractLevelViewModel* GetLastLevel(); // Function ShooterGame.ContractChapterViewModel.GetLastLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a410
	bool GetIsEpilogue(); // Function ShooterGame.ContractChapterViewModel.GetIsEpilogue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba590
	struct URewardGrantModel* GetFreeChapterRewards(); // Function ShooterGame.ContractChapterViewModel.GetFreeChapterRewards // (Final|Native|Public|Const) // @ game+0x3860c60
	struct UContractLevelViewModel* GetFirstLevel(); // Function ShooterGame.ContractChapterViewModel.GetFirstLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a090
	void AddLevel(struct UContractLevelViewModel* Level); // Function ShooterGame.ContractChapterViewModel.AddLevel // (Final|Native|Public) // @ game+0x3869730
};

// Class ShooterGame.ContractViewModel
// Size: 0x140 (Inherited: 0x30)
struct UContractViewModel : UObject {
	struct FMulticastInlineDelegate OnOverallProgressChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnCurrentLevelChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCurrentXPChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnXPRequiredForNextLevelChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsCompletedChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnIsActiveChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsPremiumOwnedChanged; // 0x90(0x10)
	struct TArray<struct URewardModel*> HighlightedRewards; // 0xa0(0x10)
	struct FGuid ContractDefinitionID; // 0xb0(0x10)
	struct UContractDataAssetV2* ContractDataAssetV2; // 0xc0(0x08)
	struct TArray<struct UContractChapterViewModel*> Chapters; // 0xc8(0x10)
	int32_t CurrentLevel; // 0xd8(0x04)
	int32_t CurrentXP; // 0xdc(0x04)
	enum class EContractType ContractType; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t XPRequiredForNextLevel; // 0xe4(0x04)
	float OverallProgress; // 0xe8(0x04)
	bool bIsCompleted; // 0xec(0x01)
	bool bIsActive; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	struct UCurrencyDataAsset* PurchaseCurrency; // 0xf0(0x08)
	struct UCurrencyDataAsset* PurchaseCurrencyVP; // 0xf8(0x08)
	struct UCurrencyDataAsset* PurchaseCurrencyDough; // 0x100(0x08)
	bool bHasLockedCharacter; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct UCharacterDataAsset* RelatedCharacter; // 0x110(0x08)
	bool bIsPremiumOwned; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct UPremiumContractDetailsViewModel* PremiumContractDetailsViewModel; // 0x120(0x08)
	struct UBaseInventoryModel* PremiumContractInventoryModel; // 0x128(0x08)
	char pad_130[0x10]; // 0x130(0x10)

	void SetXPRequiredForNextLevel(int32_t XP); // Function ShooterGame.ContractViewModel.SetXPRequiredForNextLevel // (Final|Native|Public) // @ game+0x386d230
	void SetRelatedCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.ContractViewModel.SetRelatedCharacter // (Final|Native|Public) // @ game+0x37c36f0
	void SetOverallProgress(float Progress); // Function ShooterGame.ContractViewModel.SetOverallProgress // (Final|Native|Public) // @ game+0x386d090
	void SetIsPremiumOwned(bool IsOwned); // Function ShooterGame.ContractViewModel.SetIsPremiumOwned // (Final|Native|Public) // @ game+0x386d000
	void SetIsCompleted(bool bNewIsCompleted); // Function ShooterGame.ContractViewModel.SetIsCompleted // (Final|Native|Public) // @ game+0x386cdc0
	void SetIsActive(bool bNewIsActive); // Function ShooterGame.ContractViewModel.SetIsActive // (Final|Native|Public) // @ game+0x386cca0
	void SetHighlightedRewards(struct TArray<struct URewardModel*> Rewards); // Function ShooterGame.ContractViewModel.SetHighlightedRewards // (Final|Native|Public) // @ game+0x386cb50
	void SetEndTime(struct FDateTime& EndTime); // Function ShooterGame.ContractViewModel.SetEndTime // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x386c8d0
	void SetCurrentXP(int32_t XP); // Function ShooterGame.ContractViewModel.SetCurrentXP // (Final|Native|Public) // @ game+0x386c840
	void SetCurrentLevel(int32_t NewLevel); // Function ShooterGame.ContractViewModel.SetCurrentLevel // (Final|Native|Public) // @ game+0x386c7b0
	void RefreshIsOwned(); // Function ShooterGame.ContractViewModel.RefreshIsOwned // (Final|Native|Public) // @ game+0x386c4a0
	struct UContractViewModel* Make(struct FGuid& ContractDefinitionID, struct UContractDataAssetV2* ContractDataAssetV2, enum class EContractType ContractType, struct UCurrencyDataAsset* PurchaseCurrencyVP, struct UCurrencyDataAsset* PurchaseCurrencyDough, struct UPremiumContractDetailsViewModel* PremiumContractDetailsViewModel, struct UBaseInventoryModel* PremiumContractInventoryModel); // Function ShooterGame.ContractViewModel.Make // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x386bf50
	bool HasPurchasableLevels(); // Function ShooterGame.ContractViewModel.HasPurchasableLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386bc70
	bool HasPremiumTrack(); // Function ShooterGame.ContractViewModel.HasPremiumTrack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386bc40
	bool HasLockedCharacter(); // Function ShooterGame.ContractViewModel.HasLockedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386bb20
	int32_t GetXPPurchaseCostVP(int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.ContractViewModel.GetXPPurchaseCostVP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b690
	int32_t GetXPPurchaseCostDough(int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.ContractViewModel.GetXPPurchaseCostDough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b760
	int32_t GetXPPurchaseCost(int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.ContractViewModel.GetXPPurchaseCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b690
	int32_t GetTotalXP(); // Function ShooterGame.ContractViewModel.GetTotalXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386b580
	int32_t GetTotalDoughRewards(int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.ContractViewModel.GetTotalDoughRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b250
	void GetStateForXPAmount(int32_t TotalXP, int32_t& Level, int32_t& XP, int32_t& XPToNextLevel, bool& IsComplete); // Function ShooterGame.ContractViewModel.GetStateForXPAmount // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x386b040
	struct TArray<struct URewardModel*> GetRewardsInRange(int32_t FromLevel, int32_t ToLevel, bool IncludeFree, bool IncludePremium); // Function ShooterGame.ContractViewModel.GetRewardsInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac90
	struct UCharacterDataAsset* GetRelatedCharacter(); // Function ShooterGame.ContractViewModel.GetRelatedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac70
	struct UCurrencyDataAsset* GetPurchaseCurrencyVP(); // Function ShooterGame.ContractViewModel.GetPurchaseCurrencyVP // (Final|Native|Public|Const) // @ game+0x386abf0
	struct UCurrencyDataAsset* GetPurchaseCurrencyDough(); // Function ShooterGame.ContractViewModel.GetPurchaseCurrencyDough // (Final|Native|Public|Const) // @ game+0x386ac10
	struct UCurrencyDataAsset* GetPurchaseCurrency(); // Function ShooterGame.ContractViewModel.GetPurchaseCurrency // (Final|Native|Public|Const) // @ game+0x386abf0
	struct UPremiumContractDetailsViewModel* GetPremiumContentDetailsViewModel(); // Function ShooterGame.ContractViewModel.GetPremiumContentDetailsViewModel // (Final|Native|Public|Const) // @ game+0x3860c40
	int32_t GetNumLevelsExcludingEpilogue(); // Function ShooterGame.ContractViewModel.GetNumLevelsExcludingEpilogue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386aad0
	int32_t GetNumLevels(); // Function ShooterGame.ContractViewModel.GetNumLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386aaa0
	float GetNormalizedCompletion(int32_t TotalXP); // Function ShooterGame.ContractViewModel.GetNormalizedCompletion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386aa00
	struct UContractLevelViewModel* GetLevel(int32_t LevelIndex); // Function ShooterGame.ContractViewModel.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a440
	bool GetIsCompleted(); // Function ShooterGame.ContractViewModel.GetIsCompleted // (Final|Native|Public|Const) // @ game+0x386a370
	struct TArray<struct URewardModel*> GetHighlightedRewards(); // Function ShooterGame.ContractViewModel.GetHighlightedRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x386a280
	bool GetEndTime(struct FDateTime& OutEndTime); // Function ShooterGame.ContractViewModel.GetEndTime // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3869ff0
	float GetCurrentChapterCompletion(); // Function ShooterGame.ContractViewModel.GetCurrentChapterCompletion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3869fa0
	enum class EContractType GetContractType(); // Function ShooterGame.ContractViewModel.GetContractType // (Final|Native|Public|Const) // @ game+0x3869eb0
	struct FGuid GetContractDefinitionID(); // Function ShooterGame.ContractViewModel.GetContractDefinitionID // (Final|Native|Public|HasDefaults|Const) // @ game+0x3869d30
	struct TArray<struct UContractChapterViewModel*> GetChapters(); // Function ShooterGame.ContractViewModel.GetChapters // (Final|Native|Public|Const) // @ game+0x3869b50
	int32_t GetChapterIndexForLevel(int32_t LevelIndex); // Function ShooterGame.ContractViewModel.GetChapterIndexForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3869ab0
	struct UContractChapterViewModel* GetChapter(int32_t ChapterIndex); // Function ShooterGame.ContractViewModel.GetChapter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3869a10
	void AddChapter(struct UContractChapterViewModel* Chapter); // Function ShooterGame.ContractViewModel.AddChapter // (Final|Native|Public) // @ game+0x3869610
};

// Class ShooterGame.ObjectiveViewModel
// Size: 0x50 (Inherited: 0x30)
struct UObjectiveViewModel : UObject {
	struct FMulticastInlineDelegate OnProgressChanged; // 0x30(0x10)
	struct UObjectiveDataAsset* DataAsset; // 0x40(0x08)
	int32_t Progress; // 0x48(0x04)
	int32_t ProgressToComplete; // 0x4c(0x04)

	void SetProgress(int32_t NewProgress); // Function ShooterGame.ObjectiveViewModel.SetProgress // (Final|Native|Public) // @ game+0x386d110
	struct UObjectiveViewModel* Make(struct UObjectiveDataAsset* DataAsset, int32_t ProgressToComplete); // Function ShooterGame.ObjectiveViewModel.Make // (Final|Native|Static|Public) // @ game+0x386c3d0
};

// Class ShooterGame.MissionViewModel
// Size: 0xb8 (Inherited: 0x30)
struct UMissionViewModel : UObject {
	struct FMulticastInlineDelegate OnIsCompleteChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnExpirationTimeChanged; // 0x40(0x10)
	struct UMissionDataAsset* DataAsset; // 0x50(0x08)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveViewModel*> Objectives; // 0x58(0x50)
	struct FDateTime ExpirationTime; // 0xa8(0x08)
	bool bIsComplete; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	void SetIsComplete(bool bNewIsComplete); // Function ShooterGame.MissionViewModel.SetIsComplete // (Final|Native|Public) // @ game+0x386cd30
	void SetExpirationTime(struct FDateTime& NewExpirationTime); // Function ShooterGame.MissionViewModel.SetExpirationTime // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x386ca30
	struct UMissionViewModel* Make(struct UMissionDataAsset* DataAsset, struct FDateTime ExpirationTime); // Function ShooterGame.MissionViewModel.Make // (Final|Native|Static|Public|HasDefaults) // @ game+0x386c200
	bool IsComplete(); // Function ShooterGame.MissionViewModel.IsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bd30
	bool IsActive(); // Function ShooterGame.MissionViewModel.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bca0
	struct UObjectiveViewModel* GetObjective(struct UObjectiveDataAsset* ObjectiveDataAsset); // Function ShooterGame.MissionViewModel.GetObjective // (Final|Native|Public|Const) // @ game+0x386ab00
};

// Class ShooterGame.ObjectiveDeltaViewModel
// Size: 0x40 (Inherited: 0x30)
struct UObjectiveDeltaViewModel : UObject {
	struct UObjectiveDataAsset* DataAsset; // 0x30(0x08)
	int32_t ProgressBefore; // 0x38(0x04)
	int32_t ProgressAfter; // 0x3c(0x04)

	struct UObjectiveDeltaViewModel* Make(struct UObjectiveDataAsset* DataAsset, int32_t ProgressBefore, int32_t ProgressAfter); // Function ShooterGame.ObjectiveDeltaViewModel.Make // (Final|Native|Static|Public) // @ game+0x386c2d0
};

// Class ShooterGame.MissionDeltaViewModel
// Size: 0x98 (Inherited: 0x30)
struct UMissionDeltaViewModel : UObject {
	struct FMulticastInlineDelegate OnIsCompleteChanged; // 0x30(0x10)
	struct UMissionDataAsset* DataAsset; // 0x40(0x08)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveDeltaViewModel*> Objectives; // 0x48(0x50)

	struct UMissionDeltaViewModel* Make(struct UMissionDataAsset* DataAsset); // Function ShooterGame.MissionDeltaViewModel.Make // (Final|Native|Static|Public) // @ game+0x386c170
	bool IsCompletedAndProgressWasMade(); // Function ShooterGame.MissionDeltaViewModel.IsCompletedAndProgressWasMade // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bd80
	bool IsCompleted(); // Function ShooterGame.MissionDeltaViewModel.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bd50
};

// Class ShooterGame.ContractDeltaViewModel
// Size: 0x38 (Inherited: 0x30)
struct UContractDeltaViewModel : UObject {
	int32_t TotalXPBefore; // 0x30(0x04)
	int32_t TotalXPAfter; // 0x34(0x04)

	struct UContractDeltaViewModel* Make(int32_t TotalXPBefore, int32_t TotalXPAfter); // Function ShooterGame.ContractDeltaViewModel.Make // (Final|Native|Static|Public) // @ game+0x386bde0
};

// Class ShooterGame.ContractMatchResultsViewModel
// Size: 0x1c0 (Inherited: 0x30)
struct UContractMatchResultsViewModel : UObject {
	struct FGuid MatchID; // 0x30(0x10)
	int32_t GamePlayedXP; // 0x40(0x04)
	int32_t GameWonXP; // 0x44(0x04)
	int32_t RoundPlayedXP; // 0x48(0x04)
	int32_t RoundPlayedDough; // 0x4c(0x04)
	int32_t RoundWonDough; // 0x50(0x04)
	int32_t GamePlayedDough; // 0x54(0x04)
	int32_t RoundWonXP; // 0x58(0x04)
	int32_t MissionsXP; // 0x5c(0x04)
	int32_t RoundsTotal; // 0x60(0x04)
	int32_t RoundsWon; // 0x64(0x04)
	struct URecruitmentEventEOGViewModel* RecruitmentEventEOGViewModel; // 0x68(0x08)
	float TotalModifierValue; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct TMap<enum class EXPModifier, struct UXpModifierViewModel*> Modifiers; // 0x78(0x50)
	struct TMap<struct FGuid, struct URewardGrantModel*> ContractRewardGrants; // 0xc8(0x50)
	struct TMap<struct UMissionDataAsset*, struct UMissionDeltaViewModel*> Missions; // 0x118(0x50)
	struct TMap<struct UContractDataAssetV2*, struct UContractDeltaViewModel*> ContractDeltas; // 0x168(0x50)
	bool CouldProgressMissions; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)

	struct UContractMatchResultsViewModel* Make(struct FGuid MatchID); // Function ShooterGame.ContractMatchResultsViewModel.Make // (Final|Native|Static|Public|HasDefaults) // @ game+0x386beb0
	bool HasModifier(enum class EXPModifier ModName); // Function ShooterGame.ContractMatchResultsViewModel.HasModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bb50
	int32_t GetTotalXPByModifier(enum class EXPModifier Modifier); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalXPByModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b5b0
	int32_t GetTotalXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b550
	int32_t GetTotalSocialXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalSocialXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b520
	int32_t GetTotalPremiumContractXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalPremiumContractXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b4f0
	int32_t GetTotalMissionXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalMissionXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386b450
	int32_t GetTotalMissionXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalMissionXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b420
	int32_t GetTotalLoyaltyXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalLoyaltyXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b3f0
	int32_t GetTotalGameXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalGameXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386b350
	int32_t GetTotalGameXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalGameXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b320
	int32_t GetTotalDough(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalDough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b220
	int32_t GetRoundWonXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundWonXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386af60
	int32_t GetRoundWonXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundWonXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386af30
	int32_t GetRoundWonDough(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundWonDough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793390
	int32_t GetRoundsWon(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundsWon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b020
	int32_t GetRoundsTotal(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundsTotal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b000
	int32_t GetRoundPlayedXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundPlayedXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386ae90
	int32_t GetRoundPlayedXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundPlayedXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ae60
	int32_t GetRoundPlayedDough(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundPlayedDough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e40
	struct URecruitmentEventEOGViewModel* GetRecruitmentEventEOGViewModel(); // Function ShooterGame.ContractMatchResultsViewModel.GetRecruitmentEventEOGViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac30
	float GetModifierValueWithoutLoyalty(); // Function ShooterGame.ContractMatchResultsViewModel.GetModifierValueWithoutLoyalty // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a990
	float GetModifierValueByName(enum class EXPModifier ModName); // Function ShooterGame.ContractMatchResultsViewModel.GetModifierValueByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a900
	int32_t GetModifierValueAsPercentage(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetModifierValueAsPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a870
	int32_t GetModifiedXPGainedWithoutMissions(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetModifiedXPGainedWithoutMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a7c0
	int32_t GetModifiedXPGained(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetModifiedXPGained // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a710
	int32_t GetGameWonXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetGameWonXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a1e0
	int32_t GetGameWonXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetGameWonXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a1b0
	int32_t GetGamePlayedXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetGamePlayedXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386a110
	int32_t GetGamePlayedXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetGamePlayedXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a0e0
	int32_t GetGamePlayedDough(); // Function ShooterGame.ContractMatchResultsViewModel.GetGamePlayedDough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a0c0
	struct URewardGrantModel* GetContractReward(struct FGuid ContractID); // Function ShooterGame.ContractMatchResultsViewModel.GetContractReward // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3869d60
};

// Class ShooterGame.ContractsViewModel
// Size: 0x1b8 (Inherited: 0x30)
struct UContractsViewModel : UObject {
	struct FMulticastInlineDelegate OnContractAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnContractRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMissionAdded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMissionRemoved; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMatchAdded; // 0x70(0x10)
	struct FMulticastInlineDelegate OnMatchRemoved; // 0x80(0x10)
	struct FMulticastInlineDelegate OnActiveSpecialContractChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnActiveStoryContractChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnEventContractActivated; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnEventContractDeactivated; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnWeeklyRefillTimeChanged; // 0xd0(0x10)
	struct TArray<struct UContractViewModel*> Contracts; // 0xe0(0x10)
	struct TArray<struct UMissionViewModel*> Missions; // 0xf0(0x10)
	struct FDateTime WeeklyRefillTime; // 0x100(0x08)
	struct TMap<struct FGuid, struct UContractMatchResultsViewModel*> MatchResults; // 0x108(0x50)
	struct UContractViewModel* ActiveSpecialContract; // 0x158(0x08)
	struct UContractViewModel* ActiveStoryContract; // 0x160(0x08)
	struct TSet<struct UContractViewModel*> ActiveEventContracts; // 0x168(0x50)

	void SetWeeklyRefillTime(struct FDateTime& NewRefillTime); // Function ShooterGame.ContractsViewModel.SetWeeklyRefillTime // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x386d1a0
	void SetEventContractActive(struct UContractViewModel* Contract, bool bActive); // Function ShooterGame.ContractsViewModel.SetEventContractActive // (Final|Native|Public) // @ game+0x386c960
	void SetActiveStoryContract(struct UContractViewModel* Contract); // Function ShooterGame.ContractsViewModel.SetActiveStoryContract // (Final|Native|Public) // @ game+0x386c720
	void SetActiveSpecialContract(struct UContractViewModel* Contract); // Function ShooterGame.ContractsViewModel.SetActiveSpecialContract // (Final|Native|Public) // @ game+0x386c690
	void RemoveMission(struct UMissionDataAsset* DataAsset); // Function ShooterGame.ContractsViewModel.RemoveMission // (Final|Native|Public) // @ game+0x386c600
	void RemoveMatchResults(struct FGuid MatchID); // Function ShooterGame.ContractsViewModel.RemoveMatchResults // (Final|Native|Public|HasDefaults) // @ game+0x386c560
	void RemoveContract(struct FGuid& ID); // Function ShooterGame.ContractsViewModel.RemoveContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x386c4c0
	bool IsAnyCharacterLocked(); // Function ShooterGame.ContractsViewModel.IsAnyCharacterLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386bd00
	bool HasActiveNPEMissions(); // Function ShooterGame.ContractsViewModel.HasActiveNPEMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386baf0
	struct TArray<struct UMissionViewModel*> GetMissions(); // Function ShooterGame.ContractsViewModel.GetMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860d50
	struct UContractMatchResultsViewModel* GetMatchResults(struct FString MatchID); // Function ShooterGame.ContractsViewModel.GetMatchResults // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a650
	struct TArray<struct UContractViewModel*> GetContracts(); // Function ShooterGame.ContractsViewModel.GetContracts // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3869ed0
	struct UContractViewModel* GetContract(struct FGuid& ID); // Function ShooterGame.ContractsViewModel.GetContract // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3869c80
	struct UContractViewModel* GetCharacterContract(struct UCharacterDataAsset* Character); // Function ShooterGame.ContractsViewModel.GetCharacterContract // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3869be0
	struct UContractViewModel* GetActiveSpecialContract(); // Function ShooterGame.ContractsViewModel.GetActiveSpecialContract // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38699f0
	struct TArray<struct UMissionViewModel*> GetActiveMissions(); // Function ShooterGame.ContractsViewModel.GetActiveMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3869960
	bool AreAllSpecialContractsComplete(); // Function ShooterGame.ContractsViewModel.AreAllSpecialContractsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3869910
	bool AreAllDailiesExpired(); // Function ShooterGame.ContractsViewModel.AreAllDailiesExpired // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38698e0
	void AddMission(struct UMissionViewModel* AddedMission); // Function ShooterGame.ContractsViewModel.AddMission // (Final|Native|Public) // @ game+0x3869850
	void AddMatchResults(struct UContractMatchResultsViewModel* AddedMatch); // Function ShooterGame.ContractsViewModel.AddMatchResults // (Final|Native|Public) // @ game+0x38697c0
	void AddContract(struct UContractViewModel* AddedContract); // Function ShooterGame.ContractsViewModel.AddContract // (Final|Native|Public) // @ game+0x38696a0
};

// Class ShooterGame.RecruitmentEventEOGViewModel
// Size: 0x60 (Inherited: 0x30)
struct URecruitmentEventEOGViewModel : UObject {
	struct FGuid EventAgentID; // 0x30(0x10)
	int64_t ProgressBefore; // 0x40(0x08)
	int64_t ProgressAfter; // 0x48(0x08)
	int64_t MilestoneThreshold; // 0x50(0x08)
	struct URewardGrantModel* RecruitmentRewardGrant; // 0x58(0x08)

	struct URewardGrantModel* GetRecruitmentRewardGrant(); // Function ShooterGame.RecruitmentEventEOGViewModel.GetRecruitmentRewardGrant // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac50
	int32_t GetRecruitmentEventProgressBefore(); // Function ShooterGame.RecruitmentEventEOGViewModel.GetRecruitmentEventProgressBefore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2a5c560
	int32_t GetRecruitmentEventProgressAfter(); // Function ShooterGame.RecruitmentEventEOGViewModel.GetRecruitmentEventProgressAfter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556800
	int32_t GetRecruitmentEventMilestoneThreshold(); // Function ShooterGame.RecruitmentEventEOGViewModel.GetRecruitmentEventMilestoneThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793390
	struct FGuid GetRecruitmentEventAgentID(); // Function ShooterGame.RecruitmentEventEOGViewModel.GetRecruitmentEventAgentID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856ad0
};

// Class ShooterGame.ContractUpgradeButton
// Size: 0x2f8 (Inherited: 0x2c8)
struct UContractUpgradeButton : UUserWidget {
	struct FMulticastInlineDelegate OnWalletChanged; // 0x2c8(0x10)
	struct FGuid ContractDefinitionID; // 0x2d8(0x10)
	enum class EContractUpgradeState UpgradeState; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	int32_t UpgradeCost; // 0x2ec(0x04)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x2f0(0x08)

	void OnWalletUpdated(); // Function ShooterGame.ContractUpgradeButton.OnWalletUpdated // (Final|Native|Protected) // @ game+0x3874be0
	void OnCurrencyBalanceUpdated(int32_t NewBalance); // Function ShooterGame.ContractUpgradeButton.OnCurrencyBalanceUpdated // (Final|Native|Protected) // @ game+0x3874890
	void Init(struct UContractViewModel* ContractDefinition); // Function ShooterGame.ContractUpgradeButton.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x3874630
};

// Class ShooterGame.CooldownComponent
// Size: 0x108 (Inherited: 0x108)
struct UCooldownComponent : UAutoCountdownTimerComponent {
};

// Class ShooterGame.CopyCrosshairCommandComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UCopyCrosshairCommandComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UNotificationManager* NotificationManager; // 0xf0(0x08)
};

// Class ShooterGame.CoreGameManager
// Size: 0x308 (Inherited: 0x80)
struct UCoreGameManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnCurrentMatchStateUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnCurrentMatchUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnCurrentMatchTerminatedNotification; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnInstallStatsUpdated; // 0xc8(0x10)
	char pad_D8[0x1a0]; // 0xd8(0x1a0)
	struct UConfigManager* ConfigManager; // 0x278(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x280(0x08)
	struct URMSManager* RMSManager; // 0x288(0x08)
	struct URSOManager* RSOManager; // 0x290(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x298(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x2a0(0x08)
	struct UCoreGameService* CoreGameService; // 0x2a8(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x2b0(0x08)
	struct FInstallStats InstallStats; // 0x2b8(0x20)
	char pad_2D8[0x20]; // 0x2d8(0x20)
	bool bWasSessionConsistent; // 0x2f8(0x01)
	char pad_2F9[0xf]; // 0x2f9(0x0f)

	bool UnhandledMatchTerminatedNotification(); // Function ShooterGame.CoreGameManager.UnhandledMatchTerminatedNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3874ed0
	void TestFireCurrentMatchTerminatedNotification(struct FString ReasonMessage); // Function ShooterGame.CoreGameManager.TestFireCurrentMatchTerminatedNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x36d6150
	bool RequestDisassociate(struct FDelegate OnCompleted); // Function ShooterGame.CoreGameManager.RequestDisassociate // (Final|Native|Public|BlueprintCallable) // @ game+0x3874cd0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.CoreGameManager.OnBugCommand // (Final|Native|Private) // @ game+0x3874720
	bool IsInstallPercentageEnabled(); // Function ShooterGame.CoreGameManager.IsInstallPercentageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38746f0
	bool IsCurrentPlayerCoachInCurrentMatch(); // Function ShooterGame.CoreGameManager.IsCurrentPlayerCoachInCurrentMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38746c0
	void HandleLoopStateChange(); // Function ShooterGame.CoreGameManager.HandleLoopStateChange // (Final|Native|Private) // @ game+0x3874610
	struct FString GetMatchTerminatedReason(); // Function ShooterGame.CoreGameManager.GetMatchTerminatedReason // (Final|Native|Public|BlueprintCallable) // @ game+0x3874480
	float GetInstallPercentage(); // Function ShooterGame.CoreGameManager.GetInstallPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3874410
	enum class ECoreGameMatchState GetCurrentMatchState(); // Function ShooterGame.CoreGameManager.GetCurrentMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3874380
	bool GetCurrentMatch(struct FCoreGameMatchDTO& Match); // Function ShooterGame.CoreGameManager.GetCurrentMatch // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38740a0
	struct UCoreGameManager* GetCoreGameManager(struct UObject* WorldContextObject); // Function ShooterGame.CoreGameManager.GetCoreGameManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3873f10
	void ClearUnhandledMatchTerminatedNotification(); // Function ShooterGame.CoreGameManager.ClearUnhandledMatchTerminatedNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x3873c60
};

// Class ShooterGame.CoreGameService
// Size: 0x38 (Inherited: 0x30)
struct UCoreGameService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.CorpseExploitationComponent
// Size: 0x120 (Inherited: 0xe8)
struct UCorpseExploitationComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnBecomeExploitable; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnExploited; // 0x100(0x10)
	float TimeOfDeath; // 0x110(0x04)
	bool bCanBeExploited; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	struct UAresGameplayBuff* ExploitedCorpseDebuff; // 0x118(0x08)

	void PawnOwnerDied(struct AShooterCharacter* Owner, struct UDamageResponse* Response); // Function ShooterGame.CorpseExploitationComponent.PawnOwnerDied // (Final|Native|Private) // @ game+0x3874c00
	void OnRep_CanBeExploited(); // Function ShooterGame.CorpseExploitationComponent.OnRep_CanBeExploited // (Final|Native|Private) // @ game+0x3874aa0
	float GetCorpseAge(); // Function ShooterGame.CorpseExploitationComponent.GetCorpseAge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3873fa0
	void EnableExploitation(); // Function ShooterGame.CorpseExploitationComponent.EnableExploitation // (Final|Native|Private|BlueprintCallable) // @ game+0x2024060
	bool CanExploit(); // Function ShooterGame.CorpseExploitationComponent.CanExploit // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655b50
	bool AuthExploit(); // Function ShooterGame.CorpseExploitationComponent.AuthExploit // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37dee50
};

// Class ShooterGame.CrosshairComponent
// Size: 0x110 (Inherited: 0xe8)
struct UCrosshairComponent : UActorComponent {
	struct UBaseCrosshairHudElement* Crosshair; // 0xe8(0x08)
	bool bCanOverrideCrosshairWithPrimaryCustomCrosshair; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct UBaseCrosshairHudElement* PrimaryCustomCrosshair; // 0xf8(0x08)
	bool bOverrideCrosshairIsValid; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct UBaseCrosshairHudElement* OverrideCrosshair; // 0x108(0x08)

	void SetCrosshair(struct UBaseCrosshairHudElement* NewCrosshair); // Function ShooterGame.CrosshairComponent.SetCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x3874db0
	void ResetToDefaultCrosshair(); // Function ShooterGame.CrosshairComponent.ResetToDefaultCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x3874d90
	struct UBaseCrosshairHudElement* GetCrosshair(); // Function ShooterGame.CrosshairComponent.GetCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x3873fd0
};

// Class ShooterGame.CrosshairManager
// Size: 0x2c0 (Inherited: 0x30)
struct UCrosshairManager : UObject {
	struct FMulticastInlineDelegate OnColorUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnSettingsReceived; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct FCrosshairSettings CrosshairSettings; // 0x58(0x130)
	struct FCrosshairSettings ColorAdjustedCrosshairSettings; // 0x188(0x130)
	bool bUseSpectatorCrosshair; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)

	void UpdateColorAdjustedCrosshairSettings(struct FCrosshairSettings& SourceSettings, struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.CrosshairManager.UpdateColorAdjustedCrosshairSettings // (Final|Native|Private|HasOutParms) // @ game+0x3874f00
	void SetSpectatorCrosshairEnabled(bool bEnabled); // Function ShooterGame.CrosshairManager.SetSpectatorCrosshairEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3874e40
	void RefreshCrosshairSettingsFromSettingsManager(); // Function ShooterGame.CrosshairManager.RefreshCrosshairSettingsFromSettingsManager // (Final|Native|Public|BlueprintCallable) // @ game+0x3874870
	void OnUseSpectatedCrosshairSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.CrosshairManager.OnUseSpectatedCrosshairSettingChanged // (Final|Native|Private) // @ game+0x3874ac0
	void OnCrosshairSettingsChanged(); // Function ShooterGame.CrosshairManager.OnCrosshairSettingsChanged // (Final|Native|Private) // @ game+0x3874870
	bool GetSpectatorCrosshairEnabled(); // Function ShooterGame.CrosshairManager.GetSpectatorCrosshairEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x38745e0
	struct FCrosshairSettings GetSettingsFromTruncatedShareableString(struct FString ShareableString); // Function ShooterGame.CrosshairManager.GetSettingsFromTruncatedShareableString // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3874500
	struct FCrosshairSettings GetLocalCrosshairSettings(); // Function ShooterGame.CrosshairManager.GetLocalCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3874440
	struct FCrosshairSettings GetDefaultCrosshairSettings(); // Function ShooterGame.CrosshairManager.GetDefaultCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38743b0
	struct UCrosshairManager* GetCrosshairManager(struct UObject* WorldContextObject); // Function ShooterGame.CrosshairManager.GetCrosshairManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3874010
	bool GetAreSettingsEqual(struct FCrosshairSettings& SettingsA, struct FCrosshairSettings& SettingsB); // Function ShooterGame.CrosshairManager.GetAreSettingsEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3873c80
};

// Class ShooterGame.CrosshairPreviewWidgetBase
// Size: 0x2e8 (Inherited: 0x2c8)
struct UCrosshairPreviewWidgetBase : UUserWidget {
	struct UBaseCrosshairHudElement* CrosshairHUDElementClass; // 0x2c8(0x08)
	uint32_t MinErrorOffset; // 0x2d0(0x04)
	uint32_t FiringErrorOffset; // 0x2d4(0x04)
	uint32_t MoveErrorOffset; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct UBaseCrosshairHudElement* CrosshairHUDElement; // 0x2e0(0x08)

	void UpdateRenderTarget(struct UCanvas* Canvas); // Function ShooterGame.CrosshairPreviewWidgetBase.UpdateRenderTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x3875120
	void UpdatePreviewIsZoomed(bool IsZoomed); // Function ShooterGame.CrosshairPreviewWidgetBase.UpdatePreviewIsZoomed // (Final|Native|Public|BlueprintCallable) // @ game+0x3875090
};

// Class ShooterGame.CrossWorldUserWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UCrossWorldUserWidget : UUserWidget {
};

// Class ShooterGame.CrouchAimLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAimLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchAimUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAimUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.CrouchAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.CrouchLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchFallUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchFallUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchIdleAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchIdleAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.CrouchIdleAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchIdleAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.CrouchJumpLandAddUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchJumpLandAddUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchTurnLeftLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchTurnLeftLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchTurnRightLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchTurnRightLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchWalkAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.CrouchWalkAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.CrouchWalkLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchWalkUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CueHandlerAnimationConductorNode
// Size: 0x120 (Inherited: 0xa8)
struct UCueHandlerAnimationConductorNode : UAnimationConductorNodeBase {
	struct TScriptInterface<IAnimationConductorNode> InitialNode; // 0xa8(0x10)
	struct TMap<struct FName, struct FCueHandlerAnimationConductorNode_Internal_CueData> CueMap; // 0xb8(0x50)
	struct TArray<struct FCueHandlerAnimationConductorNode_Internal_PendingNodeData> PendingNodes; // 0x108(0x10)
	char pad_118[0x8]; // 0x118(0x08)

	void SetMultipleCues(struct TMap<struct FName, struct FCueHandlerAnimationConductorNode_CueInfo>& InCueMap); // Function ShooterGame.CueHandlerAnimationConductorNode.SetMultipleCues // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x387c340
	void SetInitialNode(struct TScriptInterface<IAnimationConductorNode> NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetInitialNode // (Final|Native|Public|BlueprintCallable) // @ game+0x387c180
	void SetCueSettings(struct FName CueName, struct FCueHandlerAnimationConductorNode_CueSettings& NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetCueSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x387b900
	void SetCueNode(struct FName CueName, struct TScriptInterface<IAnimationConductorNode> NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetCueNode // (Final|Native|Public|BlueprintCallable) // @ game+0x387b800
	void SetCue(struct FName CueName, struct FCueHandlerAnimationConductorNode_CueInfo& NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetCue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x387b700
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.CueHandlerAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x387b610
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.CueHandlerAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x387b530
	struct UCueHandlerAnimationConductorNode* Create(struct TScriptInterface<IAnimationConductorNode> InitialNode, struct TMap<struct FName, struct FCueHandlerAnimationConductorNode_CueInfo>& CueMap, struct UObject* Outer); // Function ShooterGame.CueHandlerAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x387adf0
	void ClearCue(struct FName CueName); // Function ShooterGame.CueHandlerAnimationConductorNode.ClearCue // (Final|Native|Public|BlueprintCallable) // @ game+0x387ad50
	void ClearAllCues(); // Function ShooterGame.CueHandlerAnimationConductorNode.ClearAllCues // (Final|Native|Public|BlueprintCallable) // @ game+0x387ad30
};

// Class ShooterGame.CurrencyUIData
// Size: 0xc8 (Inherited: 0x90)
struct UCurrencyUIData : UBaseContentUIData {
	struct FText DisplayNameSingular; // 0x90(0x18)
	struct FText DisplayNameSingularAllCaps; // 0xa8(0x18)
	struct UTexture* LargeIcon; // 0xc0(0x08)

	struct FText GetDisplayNameForAmount(int32_t Amount); // Function ShooterGame.CurrencyUIData.GetDisplayNameForAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x387b200
	struct FText GetDisplayNameAllCapsForAmount(int32_t Amount); // Function ShooterGame.CurrencyUIData.GetDisplayNameAllCapsForAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x387b100
};

// Class ShooterGame.CurrencyDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UCurrencyDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.CustomGameManager
// Size: 0x60 (Inherited: 0x30)
struct UCustomGameManager : UObject {
	struct FMulticastInlineDelegate OnCustomGamesUpdated; // 0x30(0x10)
	struct UPartyService* PartyService; // 0x40(0x08)
	struct UPartyManager* PartyManager; // 0x48(0x08)
	struct UConfigManager* ConfigManager; // 0x50(0x08)
	struct URSOManager* RSOManager; // 0x58(0x08)

	bool SwitchTeam(struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SwitchTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x387ce20
	void StartSoloExperienceV2(enum class ESoloExperienceType SoloExperienceType, struct FString Module, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.StartSoloExperienceV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x387cc80
	void StartSoloExperience(enum class ESoloExperienceType SoloExperienceType, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.StartSoloExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x387cb90
	bool SetUseBots(bool UseBots, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetUseBots // (Final|Native|Public|BlueprintCallable) // @ game+0x387ca80
	bool SetTeamForMember(struct FString SubjectToMove, enum class ETeam Team, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetTeamForMember // (Final|Native|Public|BlueprintCallable) // @ game+0x387c8e0
	bool SetTeam(enum class ETeam Team, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x387c7e0
	bool SetPlayerModeratorStatus(struct FString Subject, bool ModeratorStatus, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetPlayerModeratorStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x387c630
	bool SetPlayerBroadcastHUDStatus(struct FString Subject, bool BroadcastHUDStatus, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetPlayerBroadcastHUDStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x387c480
	bool SetMap(struct FString Map, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x387c220
	bool SetGameRules(struct TMap<struct FString, struct FString>& GameRules, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetGameRules // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x387bff0
	bool SetGamePod(struct FString GamePod, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x387bed0
	bool SetGameMode(struct FString GameMode, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetGameMode // (Final|Native|Public|BlueprintCallable) // @ game+0x387bdb0
	bool SetCustomGameSettings(struct FCustomGameSettings CustomGameSettings, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetCustomGameSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x387b9f0
	bool IsInitialized(); // Function ShooterGame.CustomGameManager.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x387b6d0
	bool HasCurrentCustomGame(); // Function ShooterGame.CustomGameManager.HasCurrentCustomGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x387b6a0
	void GetTeamPartyMembers(struct FAresParty& AresParty, enum class ETeam Team, struct TArray<struct FAresPartyMember>& OutMembers); // Function ShooterGame.CustomGameManager.GetTeamPartyMembers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x387b300
	struct TArray<struct FName> GetDisabledMaps(); // Function ShooterGame.CustomGameManager.GetDisabledMaps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x387b080
	struct UCustomGameManager* GetCustomGameManager(struct UObject* WorldContextObject); // Function ShooterGame.CustomGameManager.GetCustomGameManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x387aff0
	void BalanceTeamsV2(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.CustomGameManager.BalanceTeamsV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x387ac10
};

// Class ShooterGame.CustomGameModel
// Size: 0x508 (Inherited: 0x30)
struct UCustomGameModel : UObject {
	struct FMulticastInlineDelegate OnMapOptionAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMapOptionRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMapChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnModeOptionAdded; // 0x60(0x10)
	struct FMulticastInlineDelegate OnModeOptionRemoved; // 0x70(0x10)
	struct FMulticastInlineDelegate OnModeChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGamePodChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamOne; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamOne; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamTwo; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamTwo; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamSpectate; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamSpectate; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamOneCoaches; // 0x100(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamOneCoaches; // 0x110(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamTwoCoaches; // 0x120(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamTwoCoaches; // 0x130(0x10)
	struct FMulticastInlineDelegate OnMyTeamChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnGamePodOverrideChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnUseBotsChanged; // 0x160(0x10)
	struct TMap<struct FString, struct UMapDataAsset*> MapOptions_Backing; // 0x170(0x50)
	char pad_1C0[0x28]; // 0x1c0(0x28)
	struct FString Map; // 0x1e8(0x10)
	struct TMap<struct FString, struct UGameModeDataAsset*> ModeOptions_Backing; // 0x1f8(0x50)
	char pad_248[0x28]; // 0x248(0x28)
	struct FString Mode; // 0x270(0x10)
	struct FString GamePod; // 0x280(0x10)
	bool UseBots; // 0x290(0x01)
	bool AutobalanceEnabled; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	int32_t AutobalanceMinPlayers; // 0x294(0x04)
	struct FString GamePodOverride; // 0x298(0x10)
	struct FCustomGameModel_TeamBacking Teams_Backing[0x5]; // 0x2a8(0x190)
	char pad_438[0xc8]; // 0x438(0xc8)
	enum class ECustomGameTeam MyTeam; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)

	void SetAutobalanceMinPlayers(int32_t NewValue); // Function ShooterGame.CustomGameModel.SetAutobalanceMinPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x3883a50
	void RemovePlayerFromTeam(struct FString Subject, enum class ECustomGameTeam Team); // Function ShooterGame.CustomGameModel.RemovePlayerFromTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38838c0
	bool GetUseBots(); // Function ShooterGame.CustomGameModel.GetUseBots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882fe0
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamTwoCoaches(); // Function ShooterGame.CustomGameModel.GetTeamTwoCoaches // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882ef0
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamTwo(); // Function ShooterGame.CustomGameModel.GetTeamTwo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882e00
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamSpectate(); // Function ShooterGame.CustomGameModel.GetTeamSpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882d10
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamOneCoaches(); // Function ShooterGame.CustomGameModel.GetTeamOneCoaches // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882c20
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamOne(); // Function ShooterGame.CustomGameModel.GetTeamOne // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882b30
	struct TScriptInterface<IUnorderedMapModel> GetTeamMembersModel(enum class ECustomGameTeam Team); // Function ShooterGame.CustomGameModel.GetTeamMembersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882a90
	enum class ECustomGameTeam GetMyTeam(); // Function ShooterGame.CustomGameModel.GetMyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882940
	struct TScriptInterface<IUnorderedMapModel> GetModeOptionsModel(); // Function ShooterGame.CustomGameModel.GetModeOptionsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38827e0
	struct TMap<struct FString, struct UGameModeDataAsset*> GetModeOptions(); // Function ShooterGame.CustomGameModel.GetModeOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882740
	struct FString GetMode(); // Function ShooterGame.CustomGameModel.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882690
	struct TScriptInterface<IUnorderedMapModel> GetMapOptionsModel(); // Function ShooterGame.CustomGameModel.GetMapOptionsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882650
	struct TMap<struct FString, struct UMapDataAsset*> GetMapOptions(); // Function ShooterGame.CustomGameModel.GetMapOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38825b0
	struct FString GetMap(); // Function ShooterGame.CustomGameModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882530
	struct FString GetGamePodOverride(); // Function ShooterGame.CustomGameModel.GetGamePodOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882290
	struct FString GetGamePod(); // Function ShooterGame.CustomGameModel.GetGamePod // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882210
	int32_t GetAutobalanceMinPlayers(); // Function ShooterGame.CustomGameModel.GetAutobalanceMinPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882180
	bool GetAutobalanceEnabled(); // Function ShooterGame.CustomGameModel.GetAutobalanceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882150
	void AddPlayerToTeam(struct UPartyPlayerModel* Player, enum class ECustomGameTeam Team); // Function ShooterGame.CustomGameModel.AddPlayerToTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x3881ba0
};

// Class ShooterGame.CustomKillBannerHud
// Size: 0x238 (Inherited: 0xe8)
struct UCustomKillBannerHud : UActorComponent {
	struct FAresKillBannerImage KillImages[0x7]; // 0xe8(0xa8)
	struct FAresKillBannerImage HeadshotKillImages[0x7]; // 0x190(0xa8)
};

// Class ShooterGame.CustomPath
// Size: 0x438 (Inherited: 0x3d8)
struct ACustomPath : AActor {
	struct FMulticastInlineDelegate OnPointAdded; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnInitialPointsAdded; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnPointMoved; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnPathUpdated; // 0x408(0x10)
	bool bIsServerBased; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct TArray<struct FVector> Points; // 0x420(0x10)
	struct AActor* AttachedEndPointActor; // 0x430(0x08)

	void OnRep_AttachedEndPointActor(); // Function ShooterGame.CustomPath.OnRep_AttachedEndPointActor // (Final|Native|Private) // @ game+0x38838a0
	void MulticastUpdatePoint(int32_t PointIndex, struct FVector NewLocation); // Function ShooterGame.CustomPath.MulticastUpdatePoint // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x38837d0
	void MulticastInitializeFromPoints(struct TArray<struct FVector> InitialPoints); // Function ShooterGame.CustomPath.MulticastInitializeFromPoints // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3883720
	void MulticastAddPoint(struct FVector NewPoint); // Function ShooterGame.CustomPath.MulticastAddPoint // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x3883690
	void InitializeFromPoints(struct TArray<struct FVector>& InitialPoints); // Function ShooterGame.CustomPath.InitializeFromPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3883010
	struct TArray<struct FVector> GetPoints(); // Function ShooterGame.CustomPath.GetPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3882a50
	struct FVector GetPoint(int32_t Index); // Function ShooterGame.CustomPath.GetPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x38829a0
	int32_t GetNumPoints(); // Function ShooterGame.CustomPath.GetNumPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3882970
	struct FVector GetLastPoint(); // Function ShooterGame.CustomPath.GetLastPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3882310
	bool FindClosestPointOnPathToPoint(struct FVector& TestPoint, struct FVector& OutClosestPointOnPath, int32_t& OutClosestSegmentStartIndex); // Function ShooterGame.CustomPath.FindClosestPointOnPathToPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3882010
	bool FindClosestIntersectionPointWithSegment2D(struct FVector& TestSegmentStart, struct FVector& TestSegmentEnd, struct FVector& OutClosestPointOnPath, int32_t& OutClosestSegmentStartIndex); // Function ShooterGame.CustomPath.FindClosestIntersectionPointWithSegment2D // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3881e70
	void AuthUpdatePoint(int32_t PointIndex, struct FVector& NewLocation); // Function ShooterGame.CustomPath.AuthUpdatePoint // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3881c70
	void AuthAttachEndPointToActor(struct AActor* TargetActor); // Function ShooterGame.CustomPath.AuthAttachEndPointToActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthAddPoint(struct FVector& NewPoint); // Function ShooterGame.CustomPath.AuthAddPoint // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3731520
};

// Class ShooterGame.IgnoreWallPenetrationComponent
// Size: 0x138 (Inherited: 0xe8)
struct UIgnoreWallPenetrationComponent : UActorComponent {
	struct FClassInclusionExclusionFilter ProjectileFilter; // 0xe8(0x50)
};

// Class ShooterGame.CustomWallPenetrationResponseComponent
// Size: 0x138 (Inherited: 0x138)
struct UCustomWallPenetrationResponseComponent : UIgnoreWallPenetrationComponent {

	bool ProjectileShouldIgnoreWallPenetration(struct AActor* Projectile, struct FHitResult& HitResult, bool bExit); // Function ShooterGame.CustomWallPenetrationResponseComponent.ProjectileShouldIgnoreWallPenetration // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.CustomWidgetLayoutData
// Size: 0xf0 (Inherited: 0x30)
struct UCustomWidgetLayoutData : UObject {
	char pad_30[0xc0]; // 0x30(0xc0)

	void SetRootPreset(enum class EWidgetLayoutPresetType InPreset); // Function ShooterGame.CustomWidgetLayoutData.SetRootPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x3883e50
	void SetModifiedLayoutData(struct FWidgetLayoutPreset& InModifiedLayouData); // Function ShooterGame.CustomWidgetLayoutData.SetModifiedLayoutData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3883b70
	void Save(); // Function ShooterGame.CustomWidgetLayoutData.Save // (Final|Native|Public|BlueprintCallable) // @ game+0x38839f0
	void RevertModifications(); // Function ShooterGame.CustomWidgetLayoutData.RevertModifications // (Final|Native|Public|BlueprintCallable) // @ game+0x38839d0
	void Reset(); // Function ShooterGame.CustomWidgetLayoutData.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x38839b0
	void ModifyLayoutForWidget(struct FString WidgetTag, struct FWidgetLayout& WidgetLayout); // Function ShooterGame.CustomWidgetLayoutData.ModifyLayoutForWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38834e0
	void LoadLayout(struct FString InLayoutName); // Function ShooterGame.CustomWidgetLayoutData.LoadLayout // (Final|Native|Public|BlueprintCallable) // @ game+0x3883430
	bool IsValid(); // Function ShooterGame.CustomWidgetLayoutData.IsValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3883400
	bool IsDirty(); // Function ShooterGame.CustomWidgetLayoutData.IsDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3883120
	enum class EWidgetLayoutPresetType GetRootPreset(); // Function ShooterGame.CustomWidgetLayoutData.GetRootPreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b7f40
	struct FWidgetLayoutPreset GetModifiedLayoutData(); // Function ShooterGame.CustomWidgetLayoutData.GetModifiedLayoutData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882820
	struct FString GetLayoutName(); // Function ShooterGame.CustomWidgetLayoutData.GetLayoutName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882500
	bool GetLayoutForWidget(struct FString WidgetTag, struct FWidgetLayout& WidgetLayout); // Function ShooterGame.CustomWidgetLayoutData.GetLayoutForWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3882350
	void ClearLayoutForWidget(struct FString WidgetTag); // Function ShooterGame.CustomWidgetLayoutData.ClearLayoutForWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3881dc0
	void Clear(); // Function ShooterGame.CustomWidgetLayoutData.Clear // (Final|Native|Public|BlueprintCallable) // @ game+0x3881da0
};

// Class ShooterGame.CycleModeRentryTransitionContext
// Size: 0x30 (Inherited: 0x30)
struct UCycleModeRentryTransitionContext : UStateTransitionContext {
};

// Class ShooterGame.CycleModeStateComponent
// Size: 0x308 (Inherited: 0x2e0)
struct UCycleModeStateComponent : UScriptStateComponent {
	struct TArray<struct FTriggerInput> CycleModeTriggerInputs; // 0x2e0(0x10)
	float QueueTime; // 0x2f0(0x04)
	float CycleCooldownTime; // 0x2f4(0x04)
	struct UModeComponent* RegisteredModeComponent; // 0x2f8(0x08)
	struct UStateComponent* ScriptReturnState; // 0x300(0x08)

	void SwitchModeAndRequestDeferredTick(); // Function ShooterGame.CycleModeStateComponent.SwitchModeAndRequestDeferredTick // (Final|Native|Private) // @ game+0x3883f60
	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.CycleModeStateComponent.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x3883d30
	void SetNextState(struct UStateComponent* State); // Function ShooterGame.CycleModeStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3883ca0
	void SetModeComponent(struct UModeComponent* ModeComponent); // Function ShooterGame.CycleModeStateComponent.SetModeComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3883ae0
	bool ScriptCanCycleMode(); // Function ShooterGame.CycleModeStateComponent.ScriptCanCycleMode // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3883a10
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.CycleModeStateComponent.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3883260
	bool IsOnCooldown(); // Function ShooterGame.CycleModeStateComponent.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3883160
	bool IsAnyTriggerHeld(); // Function ShooterGame.CycleModeStateComponent.IsAnyTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38830c0
	struct UModeComponent* GetModeComponent(); // Function ShooterGame.CycleModeStateComponent.GetModeComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882710
	float GetCooldownTimeRemaining(); // Function ShooterGame.CycleModeStateComponent.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38821b0
	bool CanCycleMode(); // Function ShooterGame.CycleModeStateComponent.CanCycleMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3881d40
};

// Class ShooterGame.InitialZoomLevelContext
// Size: 0x38 (Inherited: 0x30)
struct UInitialZoomLevelContext : UStateTransitionContext {
	int32_t ZoomLevel; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	void SetZoomLevel(int32_t InitialZoomLevel); // Function ShooterGame.InitialZoomLevelContext.SetZoomLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3883ed0
};

// Class ShooterGame.CycleZoomState
// Size: 0x300 (Inherited: 0x2e0)
struct UCycleZoomState : UScriptStateComponent {
	struct UZoomManagerComponent* ZoomManagerComponent; // 0x2e0(0x08)
	struct TArray<struct FTriggerInput> ZoomTriggerInputs; // 0x2e8(0x10)
	struct UInitialZoomLevelContext* ZoomLevelContext; // 0x2f8(0x08)

	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.CycleZoomState.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x3883dc0
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.CycleZoomState.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3883330
	bool IsReleaseInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.CycleZoomState.IsReleaseInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3883190
	bool IsOnCooldown(); // Function ShooterGame.CycleZoomState.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	bool IsAnyTriggerHeld(); // Function ShooterGame.CycleZoomState.IsAnyTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38830f0
	float GetCooldownTimeRemaining(); // Function ShooterGame.CycleZoomState.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38821e0
	bool CanZoom(); // Function ShooterGame.CycleZoomState.CanZoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3881d70
};

// Class ShooterGame.DailyRewardsManager
// Size: 0x128 (Inherited: 0x80)
struct UDailyRewardsManager : UInitSystem {
	struct FMulticastInlineDelegate OnDailyRewardsChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnDailyRewardsUpdateError; // 0x90(0x10)
	struct FMulticastInlineDelegate OnDailyRewardsEnabledChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnDailyRewardsXPPerMilestoneChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnDailyRewardsDoughPerMilestoneChanged; // 0xc0(0x10)
	struct URSOManager* RSOManager; // 0xd0(0x08)
	struct URMSManager* RMSManager; // 0xd8(0x08)
	struct UDailyRewardsService* DailyRewardsService; // 0xe0(0x08)
	struct UDailyRewardsModel* DailyRewardsModel; // 0xe8(0x08)
	struct UConfigManager* ConfigManager; // 0xf0(0x08)
	char pad_F8[0x30]; // 0xf8(0x30)

	void UpdateDailyRewards(); // Function ShooterGame.DailyRewardsManager.UpdateDailyRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x3889ee0
	void OnDailyRewardsXPPerMilestoneConfigChanged(); // Function ShooterGame.DailyRewardsManager.OnDailyRewardsXPPerMilestoneConfigChanged // (Final|Native|Private) // @ game+0x3889990
	void OnDailyRewardsTimerComplete(); // Function ShooterGame.DailyRewardsManager.OnDailyRewardsTimerComplete // (Final|Native|Private) // @ game+0x3889970
	void OnDailyRewardsRefreshConfigChanged(); // Function ShooterGame.DailyRewardsManager.OnDailyRewardsRefreshConfigChanged // (Final|Native|Private) // @ game+0x3889950
	void OnDailyRewardsEnabledConfigChanged(); // Function ShooterGame.DailyRewardsManager.OnDailyRewardsEnabledConfigChanged // (Final|Native|Private) // @ game+0x3889930
	void OnDailyRewardsDoughPerMilestoneConfigChanged(); // Function ShooterGame.DailyRewardsManager.OnDailyRewardsDoughPerMilestoneConfigChanged // (Final|Native|Private) // @ game+0x3889910
	bool IsDailyRewardsEnabled(); // Function ShooterGame.DailyRewardsManager.IsDailyRewardsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3889230
	void HandleDailyRewardsNotifications(struct FRMSNotification& Notification); // Function ShooterGame.DailyRewardsManager.HandleDailyRewardsNotifications // (Final|Native|Private|HasOutParms) // @ game+0x3888fd0
	int32_t GetXPPerMilestone(); // Function ShooterGame.DailyRewardsManager.GetXPPerMilestone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888fa0
	struct FDateTime GetScheduledRefreshTime(); // Function ShooterGame.DailyRewardsManager.GetScheduledRefreshTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888e90
	int32_t GetRequiredProgressForMilestone(); // Function ShooterGame.DailyRewardsManager.GetRequiredProgressForMilestone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888cf0
	struct UDailyRewardsModel* GetModel(); // Function ShooterGame.DailyRewardsManager.GetModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x374c010
	int32_t GetDoughPerMilestone(); // Function ShooterGame.DailyRewardsManager.GetDoughPerMilestone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888ae0
	struct UDailyRewardsManager* GetDailyRewardsManager(struct UObject* WorldContextObject); // Function ShooterGame.DailyRewardsManager.GetDailyRewardsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3888a50
};

// Class ShooterGame.DailyRewardsModel
// Size: 0x60 (Inherited: 0x30)
struct UDailyRewardsModel : UObject {
	int32_t Version; // 0x30(0x04)
	int32_t BonusMilestonesPending; // 0x34(0x04)
	struct FDateTime ResetTime; // 0x38(0x08)
	struct TArray<struct UDailyRewardsMilestoneModel*> Milestones; // 0x40(0x10)
	struct TArray<struct UDailyRewardsProcessedMatchModel*> ProcessedMatches; // 0x50(0x10)

	int32_t GetTotalProgress(); // Function ShooterGame.DailyRewardsModel.GetTotalProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888f70
	struct FDateTime GetResetTime(); // Function ShooterGame.DailyRewardsModel.GetResetTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888d10
	float GetRemainingSeconds(); // Function ShooterGame.DailyRewardsModel.GetRemainingSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888cc0
	struct TArray<struct UDailyRewardsProcessedMatchModel*> GetProcessedMatches(); // Function ShooterGame.DailyRewardsModel.GetProcessedMatches // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3888bd0
	struct TArray<struct UDailyRewardsMilestoneModel*> GetMilestones(); // Function ShooterGame.DailyRewardsModel.GetMilestones // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3888b10
	int32_t GetBonusMilestonesPending(); // Function ShooterGame.DailyRewardsModel.GetBonusMilestonesPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888960
	int32_t GetBonusMilestonesApplied(); // Function ShooterGame.DailyRewardsModel.GetBonusMilestonesApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888930
	void AddProcessedMatch(struct UDailyRewardsProcessedMatchModel* InMatch); // Function ShooterGame.DailyRewardsModel.AddProcessedMatch // (Final|Native|Public) // @ game+0x3888700
};

// Class ShooterGame.DailyRewardsProcessedMatchModel
// Size: 0xb0 (Inherited: 0x30)
struct UDailyRewardsProcessedMatchModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	int32_t ProgressBefore; // 0x40(0x04)
	int32_t ProgressAfter; // 0x44(0x04)
	int32_t XP; // 0x48(0x04)
	int32_t SoftCurrency; // 0x4c(0x04)
	struct TArray<bool> DailyBonusState; // 0x50(0x10)
	struct TMap<struct FGuid, struct URewardGrantModel*> RewardGrants; // 0x60(0x50)

	int32_t GetXP(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556800
	int32_t GetSoftCurrency(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetSoftCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e40
	struct TMap<struct FGuid, struct URewardGrantModel*> GetRewardGrants(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetRewardGrants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888d50
	int32_t GetProgressBefore(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetProgressBefore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2a5c560
	int32_t GetProgressAfter(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetProgressAfter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856910
	struct FGuid GetID(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856ad0
	struct TArray<bool> GetDailyBonusState(); // Function ShooterGame.DailyRewardsProcessedMatchModel.GetDailyBonusState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888990
};

// Class ShooterGame.DailyRewardsMilestoneModel
// Size: 0x38 (Inherited: 0x30)
struct UDailyRewardsMilestoneModel : UObject {
	int32_t Progress; // 0x30(0x04)
	bool BonusApplied; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)

	bool IsBonusApplied(); // Function ShooterGame.DailyRewardsMilestoneModel.IsBonusApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3889210
	int32_t GetProgress(); // Function ShooterGame.DailyRewardsMilestoneModel.GetProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856c00
};

// Class ShooterGame.DailyRewardsService
// Size: 0x38 (Inherited: 0x30)
struct UDailyRewardsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.DamageableComponent
// Size: 0x2a0 (Inherited: 0xe8)
struct UDamageableComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnDamaged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnHealed; // 0x108(0x10)
	struct FMulticastInlineDelegate OnDeath; // 0x118(0x10)
	struct FMulticastInlineDelegate OnPreDeath; // 0x128(0x10)
	struct FMulticastInlineDelegate OnRespawn; // 0x138(0x10)
	struct FMulticastInlineDelegate OnAliveStateChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnSectionDestroyed; // 0x158(0x10)
	struct FMulticastInlineDelegate OnSectionDirtied; // 0x168(0x10)
	char pad_178[0x20]; // 0x178(0x20)
	struct TArray<struct UDamageSectionComponent*> DamageSections; // 0x198(0x10)
	bool bCanDie; // 0x1a8(0x01)
	bool bAlive; // 0x1a9(0x01)
	char CachedLifeValid[0x3]; // 0x1aa(0x03)
	char pad_1AD[0x3]; // 0x1ad(0x03)
	struct FHealthValue CachedLife[0x3]; // 0x1b0(0x18)
	char pad_1C8[0x10]; // 0x1c8(0x10)
	struct TArray<struct UDamageSectionComponent*> InitialDamageSections; // 0x1d8(0x10)
	struct TArray<struct FPendingDamageEvent> PendingDamageEvents; // 0x1e8(0x10)
	char pad_1F8[0x8]; // 0x1f8(0x08)
	struct TSet<int32_t> DamageIDsToIgnore; // 0x200(0x50)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FIgnoreActorDamageEntry> ActorsToIgnore; // 0x250(0x50)

	void StopIgnoringDamageFromActor(struct AActor* IgnoredActor); // Function ShooterGame.DamageableComponent.StopIgnoringDamageFromActor // (Final|Native|Private|BlueprintCallable) // @ game+0x3889e50
	void ResetDamageIDsToIgnore(); // Function ShooterGame.DamageableComponent.ResetDamageIDsToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x3889da0
	void RemoveDamageIDToIgnore(int32_t DamageIDToIgnore); // Function ShooterGame.DamageableComponent.RemoveDamageIDToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x3889cf0
	void RebroadcastSectionDestroyed(struct UDamageSectionComponent* Component, struct UDamageType* DamageTypeClass, struct AController* Instigator, struct AActor* DamageCauser); // Function ShooterGame.DamageableComponent.RebroadcastSectionDestroyed // (Final|Native|Public) // @ game+0x3889b90
	void OnTemporaryDamageAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.DamageableComponent.OnTemporaryDamageAttributeChanged // (Final|Native|Protected|HasOutParms) // @ game+0x38899d0
	void OnRep_Alive(); // Function ShooterGame.DamageableComponent.OnRep_Alive // (Final|Native|Private) // @ game+0x38899b0
	void NotifySectionDirty(struct UDamageSectionComponent* Section); // Function ShooterGame.DamageableComponent.NotifySectionDirty // (Final|Native|Public|BlueprintCallable) // @ game+0x3889880
	void MulticastSectionLifeChange(struct TArray<struct FLifeChangeEvent> LifeChangeEvents, struct FLifeChangeTimestamp LifeChangeTimestamp); // Function ShooterGame.DamageableComponent.MulticastSectionLifeChange // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3889790
	void MulticastNotifyHeal(float HealTaken, struct TArray<struct FLifeChangeEvent> LifeChangeBySection, struct AController* EventInstigator, struct APawn* EventInstigatorPawn, struct AActor* HealCauser); // Function ShooterGame.DamageableComponent.MulticastNotifyHeal // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x38895b0
	void MulticastNotifyDamage_Radial(struct FNetworkedRadialDamageResponseData responseData, struct FDeathResponse DeathResponse); // Function ShooterGame.DamageableComponent.MulticastNotifyDamage_Radial // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3889480
	void MulticastNotifyDamage_Point(struct FNetworkedPointDamageResponseData responseData, struct FDeathResponse DeathResponse); // Function ShooterGame.DamageableComponent.MulticastNotifyDamage_Point // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3889370
	void MulticastNotifyDamage_Base(struct FNetworkedDamageResponseData responseData, struct FDeathResponse DeathResponse); // Function ShooterGame.DamageableComponent.MulticastNotifyDamage_Base // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3889260
	bool IsAlive(); // Function ShooterGame.DamageableComponent.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38891e0
	void IgnoreDamageFromActor(struct AActor* IgnoredActor, float IgnoreDuration); // Function ShooterGame.DamageableComponent.IgnoreDamageFromActor // (Final|Native|Private|BlueprintCallable) // @ game+0x3889110
	float GetSectionLife(struct UDamageSectionComponent* Component); // Function ShooterGame.DamageableComponent.GetSectionLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888ed0
	float GetRawShield(); // Function ShooterGame.DamageableComponent.GetRawShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888c90
	float GetRawHealth(); // Function ShooterGame.DamageableComponent.GetRawHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888c60
	void AuthRestore(struct AController* EventInstigator, struct AActor* HealCauser, struct UDamageType* DamageType); // Function ShooterGame.DamageableComponent.AuthRestore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634fc0
	void AuthOnOwnerEnterRelevancy(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.DamageableComponent.AuthOnOwnerEnterRelevancy // (Final|Native|Private) // @ game+0x38887d0
	void AddDamageIDToIgnore(int32_t DamageIDToIgnore); // Function ShooterGame.DamageableComponent.AddDamageIDToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x3888670
};

// Class ShooterGame.DamageForwardingActor
// Size: 0x3d8 (Inherited: 0x3d8)
struct ADamageForwardingActor : AActor {
};

// Class ShooterGame.DamageIDComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UDamageIDComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t DamageID; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)

	void SetDamageID(int32_t NewID); // Function ShooterGame.DamageIDComponent.SetDamageID // (Final|Native|Public|BlueprintCallable) // @ game+0x3889dc0
	void ResetDamageID(); // Function ShooterGame.DamageIDComponent.ResetDamageID // (Final|Native|Public|BlueprintCallable) // @ game+0x3889d80
	bool HasValidDamageID(); // Function ShooterGame.DamageIDComponent.HasValidDamageID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38890e0
	int32_t GetNextDamageID(); // Function ShooterGame.DamageIDComponent.GetNextDamageID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3888ba0
	int32_t GetDamageID(); // Function ShooterGame.DamageIDComponent.GetDamageID // (Final|Native|Public|BlueprintCallable) // @ game+0x3635f90
};

// Class ShooterGame.DamageProjectileEffectComponent
// Size: 0x390 (Inherited: 0xf8)
struct UDamageProjectileEffectComponent : UBaseProjectileEffectComponent {
	char pad_F8[0x8]; // 0xf8(0x08)
	struct FDamageTuning DamageTuning; // 0x100(0x228)
	enum class ECauserType DamageCauser; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct TSet<struct AActor*> DamagedTargets; // 0x330(0x50)
	struct TArray<struct FAresPointDamageEvent> AppliedDamageEvents; // 0x380(0x10)
};

// Class ShooterGame.DamageSource
// Size: 0x3d8 (Inherited: 0x3d8)
struct ADamageSource : AActor {

	float GetBonusDamage(struct AShooterCharacter* InstigatorCharacter); // Function ShooterGame.DamageSource.GetBonusDamage // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3890940
};

// Class ShooterGame.DangerZonesManager
// Size: 0xe8 (Inherited: 0xe8)
struct UDangerZonesManager : UActorComponent {
};

// Class ShooterGame.GridAnchorDataProvider
// Size: 0x30 (Inherited: 0x30)
struct UGridAnchorDataProvider : UInterface {

	void SetAnchorData(struct UObject* InAnchorData); // Function ShooterGame.GridAnchorDataProvider.SetAnchorData // (Native|Event|Public|BlueprintEvent) // @ game+0x36a7e30
	struct UObject* GetAnchorData(); // Function ShooterGame.GridAnchorDataProvider.GetAnchorData // (Native|Event|Public|BlueprintEvent) // @ game+0x3890900
};

// Class ShooterGame.GridAnchorContainer
// Size: 0x3a8 (Inherited: 0x388)
struct UGridAnchorContainer : UCommonActivatableWidget {
	struct UCommonButtonGroupBase* ButtonGroup; // 0x388(0x08)
	struct UListView* AssociatedListView; // 0x390(0x08)
	struct TArray<struct UCommonButtonBase*> AnchorButtons; // 0x398(0x10)

	void SetAssociatedListView(struct UListView* InListView); // Function ShooterGame.GridAnchorContainer.SetAssociatedListView // (Final|Native|Public|BlueprintCallable) // @ game+0x39514e0
	void ScrollToTop(); // Function ShooterGame.GridAnchorContainer.ScrollToTop // (Final|Native|Public|BlueprintCallable) // @ game+0x39514c0
	void ScrollToIndex(int32_t Index); // Function ShooterGame.GridAnchorContainer.ScrollToIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3951430
	void ScrollToData(struct UObject* Data); // Function ShooterGame.GridAnchorContainer.ScrollToData // (Final|Native|Public|BlueprintCallable) // @ game+0x39513a0
	void ScrollToBottom(); // Function ShooterGame.GridAnchorContainer.ScrollToBottom // (Final|Native|Public|BlueprintCallable) // @ game+0x3951380
	void RemoveAnchorButton(struct UCommonButtonBase* InAnchorButton); // Function ShooterGame.GridAnchorContainer.RemoveAnchorButton // (Final|Native|Protected|BlueprintCallable) // @ game+0x39512f0
	void OnAnchorButtonClicked(struct UCommonButtonBase* Button); // Function ShooterGame.GridAnchorContainer.OnAnchorButtonClicked // (Native|Event|Protected|BlueprintEvent) // @ game+0x39511d0
	void Internal_OnAnchorButtonClicked(struct UCommonButtonBase* Button, int32_t Index); // Function ShooterGame.GridAnchorContainer.Internal_OnAnchorButtonClicked // (Final|Native|Private) // @ game+0x3950e90
	struct UListView* GetAssociatedListView(); // Function ShooterGame.GridAnchorContainer.GetAssociatedListView // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950cc0
	struct TArray<struct UCommonButtonBase*> GetAnchorButtons(); // Function ShooterGame.GridAnchorContainer.GetAnchorButtons // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950c40
	void ClearAnchorButtons(); // Function ShooterGame.GridAnchorContainer.ClearAnchorButtons // (Final|Native|Protected|BlueprintCallable) // @ game+0x3950bd0
	void BindEvents(bool bBind); // Function ShooterGame.GridAnchorContainer.BindEvents // (Final|Native|Private) // @ game+0x3950b40
	void AddAnchorButton(struct UCommonButtonBase* InAnchorButton); // Function ShooterGame.GridAnchorContainer.AddAnchorButton // (Final|Native|Protected|BlueprintCallable) // @ game+0x3950a90
};

// Class ShooterGame.DataGridAnchorContainer
// Size: 0x438 (Inherited: 0x3a8)
struct UDataGridAnchorContainer : UGridAnchorContainer {
	struct UOverlay* OverlayMain; // 0x3a8(0x08)
	enum class EOrientation Orientation; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)
	struct UCommonButtonBase* AnchorButtonClass; // 0x3b8(0x08)
	struct FMargin EntryPadding; // 0x3c0(0x10)
	struct TArray<struct UObject*> DataAnchors; // 0x3d0(0x10)
	struct UPanelWidget* PanelWidget; // 0x3e0(0x08)
	struct TMap<struct UCommonButtonBase*, int32_t> CachedIndexMap; // 0x3e8(0x50)

	void SetDataAnchors(struct TArray<struct UObject*>& InAnchorData); // Function ShooterGame.DataGridAnchorContainer.SetDataAnchors // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3890f40
};

// Class ShooterGame.DealDamageToTargetsStateComponent
// Size: 0x2f0 (Inherited: 0x2e0)
struct UDealDamageToTargetsStateComponent : UScriptStateComponent {
	float PlayerDamage; // 0x2e0(0x04)
	float NonPlayerDamage; // 0x2e4(0x04)
	struct UDamageType* DamageType; // 0x2e8(0x08)
};

// Class ShooterGame.DebugGraphHudElement
// Size: 0x58 (Inherited: 0x58)
struct UDebugGraphHudElement : UAresHudElement {
};

// Class ShooterGame.DebugCharacterMovementHudElement
// Size: 0x2b0 (Inherited: 0x58)
struct UDebugCharacterMovementHudElement : UDebugGraphHudElement {
	char pad_58[0x10]; // 0x58(0x10)
	struct FGraphStyleParams GraphStyleParams; // 0x68(0x1a0)
	struct FText GraphTitles[0x5]; // 0x208(0x78)
	struct FVector2D SingleGraphDrawOffset; // 0x280(0x08)
	struct FVector2D AxialGraphDrawOffset; // 0x288(0x08)
	float AxialGraphScale; // 0x290(0x04)
	float VelocityDisplayAboveMaxRunSpeedPercent; // 0x294(0x04)
	float VerticalSpaceBetweenAxialGraphs; // 0x298(0x04)
	float JumpCurveMaxHeight; // 0x29c(0x04)
	struct FLinearColor ServerCorrectionCurveColor; // 0x2a0(0x10)
};

// Class ShooterGame.DebugDeathReactionActor
// Size: 0x460 (Inherited: 0x3d8)
struct ADebugDeathReactionActor : AActor {
	char pad_3D8[0x88]; // 0x3d8(0x88)
};

// Class ShooterGame.DebugInputHudElement
// Size: 0x388 (Inherited: 0x58)
struct UDebugInputHudElement : UDebugGraphHudElement {
	struct FGraphStyleParams GraphStyleParams; // 0x58(0x1a0)
	struct FVector2D GraphDrawOffset; // 0x1f8(0x08)
	float CurveTimeLength; // 0x200(0x04)
	float GraphScale; // 0x204(0x04)
	float GraphYMax; // 0x208(0x04)
	struct FFiringTimeDebugTuning FiringTimeDebugTuning; // 0x20c(0x58)
	char pad_264[0x4]; // 0x264(0x04)
	struct AShooterCharacter* PreviousCharacterToDebug; // 0x268(0x08)
	struct AAresEquippable* PreviousEquippableToDebug; // 0x270(0x08)
	char pad_278[0x110]; // 0x278(0x110)

	void OnInputStreamReceived(struct FAresInputStream& InputStream); // Function ShooterGame.DebugInputHudElement.OnInputStreamReceived // (Final|Native|Protected|HasOutParms) // @ game+0x3898d40
	void OnFiringStateShot(struct UFiringStateComponent* FiringState, float SubframeTimeOffset); // Function ShooterGame.DebugInputHudElement.OnFiringStateShot // (Final|Native|Protected) // @ game+0x3898c70
};

// Class ShooterGame.DebugLogListModelWatcher
// Size: 0x48 (Inherited: 0x48)
struct UDebugLogListModelWatcher : UDebugListModelWatcherBase {

	struct UDebugLogListModelWatcher* Create(struct TScriptInterface<IOrderedListModel> InListModel, struct UObject* Outer); // Function ShooterGame.DebugLogListModelWatcher.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3897ee0
};

// Class ShooterGame.DebugNotificationEmitter
// Size: 0x40 (Inherited: 0x30)
struct UDebugNotificationEmitter : UObject {
	char pad_30[0x10]; // 0x30(0x10)

	void HandleActionB(struct UGenericNotification* Notification); // Function ShooterGame.DebugNotificationEmitter.HandleActionB // (Final|Native|Private) // @ game+0x3898a80
	void HandleActionA(struct UGenericNotification* Notification); // Function ShooterGame.DebugNotificationEmitter.HandleActionA // (Final|Native|Private) // @ game+0x38989f0
};

// Class ShooterGame.DebugShooterCharacterAnimInstanceHudElement
// Size: 0x1d0 (Inherited: 0x58)
struct UDebugShooterCharacterAnimInstanceHudElement : UDebugGraphHudElement {
	struct UShooterCharacterAnimInstance* AnimInstance; // 0x58(0x08)
	struct TArray<struct FDebugShooterCharacterAnimInstanceGraph> Graphs; // 0x60(0x10)
	struct TArray<struct FDebugShooterCharacterAnimInstanceGraphPage> GraphPages; // 0x70(0x10)
	struct FVector2D AccelerationDrawOffset; // 0x80(0x08)
	float AccelerationRadius; // 0x88(0x04)
	struct FLinearColor AccelerationCircleColor; // 0x8c(0x10)
	float AccelerationCircleLineThickness; // 0x9c(0x04)
	struct FLinearColor AccelerationLineColor; // 0xa0(0x10)
	float AccelerationLineThickness; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FAresHudFontParams AccelerationLabelFontParams; // 0xb8(0x70)
	struct FVector2D VelocityDrawOffset; // 0x128(0x08)
	float VelocityRadius; // 0x130(0x04)
	struct FLinearColor VelocityCircleColor; // 0x134(0x10)
	float VelocityCircleLineThickness; // 0x144(0x04)
	struct FLinearColor VelocityLineColor; // 0x148(0x10)
	float VelocityLineThickness; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct FAresHudFontParams VelocityLabelFontParams; // 0x160(0x70)
};

// Class ShooterGame.DebugSubscriptionComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UDebugSubscriptionComponent : UActorComponent {
};

// Class ShooterGame.DebugTouchInputHudElement
// Size: 0x3b8 (Inherited: 0x58)
struct UDebugTouchInputHudElement : UDebugGraphHudElement {
	struct FGraphStyleParams InputGraphStyleParams; // 0x58(0x1a0)
	struct FGraphStyleParams CameraGraphStyleParams; // 0x1f8(0x1a0)
	struct FVector2D GraphDrawOffset; // 0x398(0x08)
	float InputGraphScale; // 0x3a0(0x04)
	float CameraGraphScale; // 0x3a4(0x04)
	float InputGraphYMax; // 0x3a8(0x04)
	float CameraGraphYMax; // 0x3ac(0x04)
	float DistanceBetweenGraphs; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
};

// Class ShooterGame.DebugWeaponHudElement
// Size: 0x230 (Inherited: 0x58)
struct UDebugWeaponHudElement : UDebugGraphHudElement {
	struct FGraphStyleParams GraphStyleParams; // 0x58(0x1a0)
	struct FVector2D GraphDrawOffset; // 0x1f8(0x08)
	float CurveTimeLength; // 0x200(0x04)
	float GraphScales[0x3]; // 0x204(0x0c)
	float GraphYMaxes[0x3]; // 0x210(0x0c)
	float SpaceBetweenGraphs; // 0x21c(0x04)
	char pad_220[0x10]; // 0x220(0x10)
};

// Class ShooterGame.DecalManager
// Size: 0xa0 (Inherited: 0x30)
struct UDecalManager : UObject {
	struct TArray<struct FDecalEntry> DecalEntryArray; // 0x30(0x10)
	struct TArray<struct FDecalProxyEntry> ProxyEntryArray; // 0x40(0x10)
	struct TMap<struct UMaterialInterface*, struct FDecalList> PooledDecals; // 0x50(0x50)
};

// Class ShooterGame.DeferredOperation
// Size: 0x50 (Inherited: 0x30)
struct UDeferredOperation : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FTimerHandle OperationDeferralTimerHandle; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)

	bool TrySchedule(float MillisecondsToDefer); // Function ShooterGame.DeferredOperation.TrySchedule // (Final|Native|Public) // @ game+0x3899230
	bool IsScheduled(); // Function ShooterGame.DeferredOperation.IsScheduled // (Final|Native|Public) // @ game+0x3898c40
	void Cancel(); // Function ShooterGame.DeferredOperation.Cancel // (Final|Native|Public) // @ game+0x3897e30
};

// Class ShooterGame.DelayAnimationConductorNode
// Size: 0xb8 (Inherited: 0xa8)
struct UDelayAnimationConductorNode : UAnimationConductorNodeBase {
	char pad_A8[0x10]; // 0xa8(0x10)

	struct UDelayAnimationConductorNode* Create(float Delay, struct UObject* Outer); // Function ShooterGame.DelayAnimationConductorNode.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3897fd0
};

// Class ShooterGame.DelegateAnimationConductorNode
// Size: 0xe0 (Inherited: 0xa8)
struct UDelegateAnimationConductorNode : UAnimationConductorNodeBase {
	char pad_A8[0x38]; // 0xa8(0x38)

	void SetHandleStartAnimationCallback(struct FDelegate& Delegate); // Function ShooterGame.DelegateAnimationConductorNode.SetHandleStartAnimationCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3899050
	void SetHandleSkipAnimationCallback(struct FDelegate& Delegate); // Function ShooterGame.DelegateAnimationConductorNode.SetHandleSkipAnimationCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3898f90
	void SetHandleResetAnimationCallback(struct FDelegate& Delegate); // Function ShooterGame.DelegateAnimationConductorNode.SetHandleResetAnimationCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3898ed0
	void SetAsynchronous(bool bNewValue); // Function ShooterGame.DelegateAnimationConductorNode.SetAsynchronous // (Final|Native|Public|BlueprintCallable) // @ game+0x3898e40
	void HandleResetDynamicDelegate__DelegateSignature(struct UDelegateAnimationConductorNode* Node, enum class EAnimationConductorNodeResetType ResetType); // DelegateFunction ShooterGame.DelegateAnimationConductorNode.HandleResetDynamicDelegate__DelegateSignature // (Public|Delegate) // @ game+0x40572e0
	void FinishNode(); // Function ShooterGame.DelegateAnimationConductorNode.FinishNode // (Final|Native|Public|BlueprintCallable) // @ game+0x3898490
	struct UDelegateAnimationConductorNode* Create(struct FDelegate& HandleStartAnimationCallback, bool bAsynchronous, struct FDelegate& HandleSkipAnimationCallback, struct FDelegate& HandleResetAnimationCallback, struct UObject* Outer); // Function ShooterGame.DelegateAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38980a0
	void BroadcastNewCueEvent(struct FName CueName); // Function ShooterGame.DelegateAnimationConductorNode.BroadcastNewCueEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x365d9f0
	void BroadcastCueEvent(struct FAnimationCueSource_CueEventData& EventData); // Function ShooterGame.DelegateAnimationConductorNode.BroadcastCueEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x365d850
	void BasicCallbackDynamicDelegate__DelegateSignature(struct UDelegateAnimationConductorNode* Node); // DelegateFunction ShooterGame.DelegateAnimationConductorNode.BasicCallbackDynamicDelegate__DelegateSignature // (Public|Delegate) // @ game+0x40572e0
};

// Class ShooterGame.DirectionalDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UDirectionalDamageQuery : UInterface {

	struct FVector GetDamageImpactNormal(); // Function ShooterGame.DirectionalDamageQuery.GetDamageImpactNormal // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3898550
	struct FVector GetDamageImpactLocation(); // Function ShooterGame.DirectionalDamageQuery.GetDamageImpactLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3898500
	struct FVector GetDamageDirection(); // Function ShooterGame.DirectionalDamageQuery.GetDamageDirection // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x38984b0
	struct UPrimitiveComponent* GetDamagedComponent(); // Function ShooterGame.DirectionalDamageQuery.GetDamagedComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38985f0
	struct FName GetDamagedBone(); // Function ShooterGame.DirectionalDamageQuery.GetDamagedBone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38985a0
};

// Class ShooterGame.DisabledAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UDisabledAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.DisarmedComponent
// Size: 0x110 (Inherited: 0xe8)
struct UDisarmedComponent : UActorComponent {
	enum class EEquipSpeed DisarmedUnequipSpeed; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct AShooterCharacter* CharacterOwner; // 0xf0(0x08)
	struct UAresGameplayBuff* PreventSwitchingBuff; // 0xf8(0x08)
	char pad_100[0x10]; // 0x100(0x10)

	void RemoveDisarmed(); // Function ShooterGame.DisarmedComponent.RemoveDisarmed // (Final|Native|Private) // @ game+0x3898e20
	void DisarmChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.DisarmedComponent.DisarmChanged // (Final|Native|Private|HasOutParms) // @ game+0x38982d0
	void ControllerChanged(struct AController* OldController); // Function ShooterGame.DisarmedComponent.ControllerChanged // (Final|Native|Private) // @ game+0x3897e50
	void AddDisarmed(); // Function ShooterGame.DisarmedComponent.AddDisarmed // (Final|Native|Private) // @ game+0x3897e10
};

// Class ShooterGame.DisplayNameManager
// Size: 0x140 (Inherited: 0x80)
struct UDisplayNameManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UDisplayNameService* DisplayNameService; // 0x90(0x08)
	struct UFriendsModel* FriendsModel; // 0x98(0x08)
	struct UPlayerAliasManager* PlayerAliasManager; // 0xa0(0x08)
	struct TMap<struct FString, struct FDisplayName> CachedDisplayNames; // 0xa8(0x50)
	struct UGameInstance* GameInstance; // 0xf8(0x08)
	struct URGIFriendsSubsystem* RGIFriendsSubsystem; // 0x100(0x08)
	char pad_108[0x38]; // 0x108(0x38)

	void GetDisplayNameWithServiceFallback(struct FString Subject, struct FDelegate& OnSuccess); // Function ShooterGame.DisplayNameManager.GetDisplayNameWithServiceFallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38988a0
	struct UDisplayNameManager* GetDisplayNameManager(struct UObject* WorldContextObject); // Function ShooterGame.DisplayNameManager.GetDisplayNameManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3898810
	struct FDisplayName GetDisplayName(struct FString Subject); // Function ShooterGame.DisplayNameManager.GetDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x3898630
};

// Class ShooterGame.DisplayNameService
// Size: 0x38 (Inherited: 0x30)
struct UDisplayNameService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.DPIScaleOverrider
// Size: 0x178 (Inherited: 0x160)
struct UDPIScaleOverrider : UPanelWidget {
	float MaxDPIScaleForPhysicalScreenSize; // 0x160(0x04)
	char pad_164[0x14]; // 0x164(0x14)

	float GetScaleDownFactor(); // Function ShooterGame.DPIScaleOverrider.GetScaleDownFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38a0c80
};

// Class ShooterGame.DPIScaleOverriderSlot
// Size: 0x50 (Inherited: 0x40)
struct UDPIScaleOverriderSlot : UPanelSlot {
	char pad_40[0x10]; // 0x40(0x10)
};

// Class ShooterGame.DropInLoadingManager
// Size: 0x88 (Inherited: 0x80)
struct UDropInLoadingManager : UInitSystem {
	struct UPreloadManager* PreloadManager; // 0x80(0x08)
};

// Class ShooterGame.DropInManagerComponent
// Size: 0x120 (Inherited: 0xe8)
struct UDropInManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnVacanciesOpenedForTeam; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnCloseAllVacancies; // 0xf8(0x10)
	struct UDropInRequestListener* DropInRequestListener; // 0x108(0x08)
	struct TArray<struct FDropInPlayerLoadingState> DropInPlayerLoadingStates; // 0x110(0x10)

	void OnJoinPlayersRequestReceived(struct FMegapacketPlayer& MegapacketPlayer); // Function ShooterGame.DropInManagerComponent.OnJoinPlayersRequestReceived // (Final|Native|Private|HasOutParms) // @ game+0x38a0e00
	void OnGameModePostLoginEvent(struct AGameModeBase* GameMode, struct APlayerController* PlayerController); // Function ShooterGame.DropInManagerComponent.OnGameModePostLoginEvent // (Final|Native|Private) // @ game+0x3669300
	void OnClientConnectionStatusChanged(struct AAresPlayerStateBase* PlayerState, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.DropInManagerComponent.OnClientConnectionStatusChanged // (Final|Native|Private) // @ game+0x363f1c0
	void AuthSetDropInEnabled(bool bEnabled); // Function ShooterGame.DropInManagerComponent.AuthSetDropInEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
};

// Class ShooterGame.DropInRequestListener
// Size: 0x90 (Inherited: 0x30)
struct UDropInRequestListener : UObject {
	char pad_30[0x60]; // 0x30(0x60)
};

// Class ShooterGame.PlayerSpawner
// Size: 0x30 (Inherited: 0x30)
struct UPlayerSpawner : UObject {
};

// Class ShooterGame.DynamicLocationPlayerSpawner
// Size: 0x48 (Inherited: 0x30)
struct UDynamicLocationPlayerSpawner : UPlayerSpawner {
	struct FVector Location; // 0x30(0x0c)
	struct FRotator Rotation; // 0x3c(0x0c)

	bool SetDesiredLocationAndRotation(struct FVector DesiredLocation, struct FRotator DesiredRotation); // Function ShooterGame.DynamicLocationPlayerSpawner.SetDesiredLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x38a1180
	struct UDynamicLocationPlayerSpawner* CreateDynamicLocationSpawner(); // Function ShooterGame.DynamicLocationPlayerSpawner.CreateDynamicLocationSpawner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38a0aa0
};

// Class ShooterGame.ShooterTeamStart
// Size: 0x448 (Inherited: 0x410)
struct AShooterTeamStart : APlayerStart {
	struct UBombTeamComponent* TeamComponent; // 0x410(0x08)
	struct UTeamRoleComponent* RoleComponent; // 0x418(0x08)
	int32_t SpawnSet; // 0x420(0x04)
	char bDisabledSpawn : 1; // 0x424(0x01)
	char pad_424_1 : 7; // 0x424(0x01)
	char pad_425[0x3]; // 0x425(0x03)
	bool bUseForInitialSpawn; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct TArray<float> AdditionalSpawnRotations; // 0x430(0x10)
	enum class ESpawnRestriction SpawnRestriction; // 0x440(0x01)
	char pad_441[0x7]; // 0x441(0x07)
};

// Class ShooterGame.DynamicRespawnPoint
// Size: 0x450 (Inherited: 0x448)
struct ADynamicRespawnPoint : AShooterTeamStart {
	struct AShooterPlayerState* PlayerState; // 0x448(0x08)

	void Tick(float DeltaSeconds); // Function ShooterGame.DynamicRespawnPoint.Tick // (Final|Native|Private) // @ game+0x3690ff0
	void AuthSetPlayerState(struct AShooterPlayerState* NewPlayerState); // Function ShooterGame.DynamicRespawnPoint.AuthSetPlayerState // (Final|Native|Public) // @ game+0x3634e00
};

// Class ShooterGame.EditableReward
// Size: 0x38 (Inherited: 0x30)
struct UEditableReward : UObject {
	bool bHighlighted; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	struct URewardModel* AsRewardModel(); // Function ShooterGame.EditableReward.AsRewardModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38a0a60
};

// Class ShooterGame.EditableRewardCharacter
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardCharacter : UEditableReward {
	struct TSoftClassPtr<UObject> Character; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardCurrency
// Size: 0x70 (Inherited: 0x38)
struct UEditableRewardCurrency : UEditableReward {
	struct TSoftClassPtr<UObject> Currency; // 0x38(0x30)
	uint64_t Amount; // 0x68(0x08)
};

// Class ShooterGame.EditableRewardEquippableCharmLevel
// Size: 0x70 (Inherited: 0x38)
struct UEditableRewardEquippableCharmLevel : UEditableReward {
	struct TSoftClassPtr<UObject> EquippableCharmLevel; // 0x38(0x30)
	uint64_t Amount; // 0x68(0x08)
};

// Class ShooterGame.EditableRewardEquippableSkinLevel
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardEquippableSkinLevel : UEditableReward {
	struct TSoftClassPtr<UObject> EquippableSkinLevel; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardPlayerCard
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardPlayerCard : UEditableReward {
	struct TSoftClassPtr<UObject> PlayerCard; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardPlayerTitle
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardPlayerTitle : UEditableReward {
	struct TSoftClassPtr<UObject> Title; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardSpray
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardSpray : UEditableReward {
	struct TSoftClassPtr<UObject> Spray; // 0x38(0x30)
};

// Class ShooterGame.UserActionBase
// Size: 0x58 (Inherited: 0x30)
struct UUserActionBase : UObject {
	char pad_30[0x28]; // 0x30(0x28)

	void BroadcastOnActionStateChanged(); // Function ShooterGame.UserActionBase.BroadcastOnActionStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9e000
	void BroadcastOnActionDisplayInfoChanged(); // Function ShooterGame.UserActionBase.BroadcastOnActionDisplayInfoChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9e020
};

// Class ShooterGame.EditableUserActionBase
// Size: 0xa8 (Inherited: 0x58)
struct UEditableUserActionBase : UUserActionBase {
	struct FUserActionDisplayInfo ActionDisplayInfo; // 0x58(0x48)
	enum class EUserActionState ActionState; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class ShooterGame.EditorOnlyComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UEditorOnlyComponent : UActorComponent {
};

// Class ShooterGame.FXCTypePool
// Size: 0x58 (Inherited: 0x30)
struct UFXCTypePool : UObject {
	struct UObject* EffectClass; // 0x30(0x08)
	struct TArray<struct FFreePooledEffect> Effects; // 0x38(0x10)
	int32_t StartNum; // 0x48(0x04)
	int32_t MaxConcurrentEffects; // 0x4c(0x04)
	int32_t ConcurrentEffects; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class ShooterGame.EffectComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UEffectComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bCosmeticEffect; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)

	void UpdateEffectPerspective(float CurrentTime, bool FirstPerson); // Function ShooterGame.EffectComponent.UpdateEffectPerspective // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void StopEffect(enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectComponent.StopEffect // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void StartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.EffectComponent.StartEffect // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ResetEffect(); // Function ShooterGame.EffectComponent.ResetEffect // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void K2_OnAssetsLoaded(int32_t AssetTypes); // Function ShooterGame.EffectComponent.K2_OnAssetsLoaded // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void K2_GetPreloadAssetPaths(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.EffectComponent.K2_GetPreloadAssetPaths // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	struct FEffectData GetEffectData(); // Function ShooterGame.EffectComponent.GetEffectData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38a0c10
	void EffectDataUpdated(); // Function ShooterGame.EffectComponent.EffectDataUpdated // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool CurrentPerspectiveIsFirstPerson(); // Function ShooterGame.EffectComponent.CurrentPerspectiveIsFirstPerson // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3655b50
	void AddTailTime(float TailTime); // Function ShooterGame.EffectComponent.AddTailTime // (Final|Native|Public|BlueprintCallable) // @ game+0x38a09e0
};

// Class ShooterGame.EffectManagerComponent
// Size: 0x178 (Inherited: 0xe8)
struct UEffectManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bDeferActiveEffects; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TArray<struct FActiveEffectInfo> PendingEffects; // 0xf8(0x10)
	struct TArray<struct FPendingStartEffect> PendingStartEffects; // 0x108(0x10)
	struct TArray<struct FPendingStopEffect> PendingStopEffects; // 0x118(0x10)
	struct TArray<struct FActiveEffectInfo> ServerActiveEffects; // 0x128(0x10)
	struct TArray<struct FActiveEffectInfo> ClientActiveEffects; // 0x138(0x10)
	char pad_148[0x18]; // 0x148(0x18)
	struct TArray<struct FPendingReplicationEffect> EffectsPendingReplication; // 0x160(0x10)
	char pad_170[0x8]; // 0x170(0x08)

	void StopContinuousEffectsOfType(struct AEffectContainer* EffectContainer, enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectManagerComponent.StopContinuousEffectsOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x38aaf90
	void StopContinuousEffect(struct FEffectID EffectID, enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectManagerComponent.StopContinuousEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x38aad40
	void StartDeferredEffects(); // Function ShooterGame.EffectManagerComponent.StartDeferredEffects // (Native|Protected) // @ game+0x38aad10
	void ReplayRecordOneShotEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, float Timestamp, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.ReplayRecordOneShotEffect // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x38a98e0
	void ReplayRecordContinuousEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, bool bTransient, float Timestamp, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.ReplayRecordContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x38a94d0
	void PreMovementUpdate(float Timestamp); // Function ShooterGame.EffectManagerComponent.PreMovementUpdate // (Final|Native|Public) // @ game+0x38a9450
	void PostMovementUpdate(float Timestamp); // Function ShooterGame.EffectManagerComponent.PostMovementUpdate // (Final|Native|Public) // @ game+0x38a93d0
	void OnStopBeingRelevant(struct AActor* OwningActor); // Function ShooterGame.EffectManagerComponent.OnStopBeingRelevant // (Final|Native|Private) // @ game+0x38a7da0
	void OnServerLeaveFoW(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.EffectManagerComponent.OnServerLeaveFoW // (Final|Native|Private) // @ game+0x38a7c40
	void OnBecomeRelevant(struct AActor* OwningActor); // Function ShooterGame.EffectManagerComponent.OnBecomeRelevant // (Final|Native|Private) // @ game+0x38a7bb0
	void MulticastUpdateContinuousEffect(struct FEffectID EffectID, struct FEffectData EffectData, struct APlayerController* ClientControllerThatTriggered); // Function ShooterGame.EffectManagerComponent.MulticastUpdateContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x38a7780
	void MulticastStopContinuousEffect(struct FEffectID EffectID, struct APlayerController* ClientControllerThatTriggered, enum class EStopEffectType StopEffectType, float StopMovementTime); // Function ShooterGame.EffectManagerComponent.MulticastStopContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x38a7600
	void MulticastPlayOneShotEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FTransform Transform, struct FName AttachSocket, struct APlayerController* ClientControllerThatTriggered, float StartMovementTime, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.MulticastPlayOneShotEffect // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x38a7050
	void MulticastPlayContinuousEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FTransform Transform, struct FName AttachSocket, struct FEffectID EffectID, struct APlayerController* ClientControllerThatTriggered, float StartMovementTime, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.MulticastPlayContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x38a6a30
	bool HasActiveEffectOfType(struct AEffectContainer* EffectContainer); // Function ShooterGame.EffectManagerComponent.HasActiveEffectOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38a66b0
	void ClearExpiredTimer(struct FEffectID EffectID); // Function ShooterGame.EffectManagerComponent.ClearExpiredTimer // (Final|Native|Private) // @ game+0x38a5230
};

// Class ShooterGame.EffectPoolManagerComponent
// Size: 0x140 (Inherited: 0xe8)
struct UEffectPoolManagerComponent : UActorComponent {
	struct TMap<struct AEffectContainer*, struct UFXCTypePool*> FreePooledEffects; // 0xe8(0x50)
	char pad_138[0x8]; // 0x138(0x08)
};

// Class ShooterGame.EffectsBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UEffectsBlueprintLibrary : UBlueprintFunctionLibrary {

	void UpdateContinuousEffect(struct AActor* AttachToActor, struct UObject* WorldContextObject, struct FEffectID EffectID, struct FEffectData EffectData); // Function ShooterGame.EffectsBlueprintLibrary.UpdateContinuousEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38ab060
	void StopContinuousEffect(struct AActor* AttachToActor, struct UObject* WorldContextObject, struct FEffectID EffectID, enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectsBlueprintLibrary.StopContinuousEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38aae30
	void SetEffectToWaitOnReplication(struct FEffectData& EffectData, struct AActor* ActorToWaitOn); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectToWaitOnReplication // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38aab30
	void SetEffectData_Vector(struct FEffectData& EffectData, struct FGameplayTag Name, struct FVector Vector); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38aa8e0
	void SetEffectData_Text(struct FEffectData& EffectData, struct FGameplayTag Name, struct FText Text); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Text // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38aa630
	void SetEffectData_Object(struct FEffectData& EffectData, struct FGameplayTag Name, struct UObject* Object); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Object // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38aa3f0
	void SetEffectData_Int32(struct FEffectData& EffectData, struct FGameplayTag Name, int32_t Value); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Int32 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38aa1b0
	void SetEffectData_Float(struct FEffectData& EffectData, struct FGameplayTag Name, float Value); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Float // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38a9f70
	void SetEffectData_Class(struct FEffectData& EffectData, struct FGameplayTag Name, struct TSoftClassPtr<UObject> Class); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Class // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38a9ca0
	void PlayOneShotEffect_Blueprint(struct TArray<struct APlayerController*>& ExcludedControllers, struct AEffectContainer* EffectContainer, struct AActor* AttachToActor, struct UObject* EffectContext, struct FEffectData EffectData, struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, enum class EAresAlliance AllianceFilter, bool bIsCosmetic, bool bShouldRecordToReplay); // Function ShooterGame.EffectsBlueprintLibrary.PlayOneShotEffect_Blueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38a8ca0
	void PlayImpactEffect(struct UObject* WorldContextObject, struct AEffectContainer* ImpactEffect, struct FHitResult& Impact, struct AAresEquippable* AttackingWeapon); // Function ShooterGame.EffectsBlueprintLibrary.PlayImpactEffect // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38a8b20
	struct FEffectID PlayContinuousEffect(struct AEffectContainer* EffectContainer, struct AActor* AttachToActor, struct UObject* EffectContext, struct FEffectData EffectData, struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, enum class EAresAlliance AllianceFilter, bool bIsCosmetic, bool bShouldRecordToReplay); // Function ShooterGame.EffectsBlueprintLibrary.PlayContinuousEffect // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x38a8430
	struct FEffectID PlayClientSimulatedEffect(struct AController* ClientController, struct AEffectContainer* EffectContainer, struct AActor* AttachToActor, struct UObject* EffectContext, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectsBlueprintLibrary.PlayClientSimulatedEffect // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x38a7e30
	struct FEffectData MakeEffectData(); // Function ShooterGame.EffectsBlueprintLibrary.MakeEffectData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38a6970
	bool ImpactEffectIsVisible(struct UObject* WorldContextObject, struct AActor* InstigatingActor, struct FVector& ImpactPoint); // Function ShooterGame.EffectsBlueprintLibrary.ImpactEffectIsVisible // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38a6850
	bool HasActiveEffectOfType(struct AActor* AttachToActor, struct UObject* WorldContextObject, struct AEffectContainer* EffectContainer); // Function ShooterGame.EffectsBlueprintLibrary.HasActiveEffectOfType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38a6750
	void GetSurfaceTypes(struct UPhysicalMaterial* Material, enum class EAresSurfaceType& ParticleSurface, enum class EAresSurfaceType& AudioSurface); // Function ShooterGame.EffectsBlueprintLibrary.GetSurfaceTypes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38a6590
	struct FHitResult GetHitResultFromEffectDataLocationNormal(struct FEffectData& EffectData, struct FVector& Location, struct FVector& Normal); // Function ShooterGame.EffectsBlueprintLibrary.GetHitResultFromEffectDataLocationNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38a62d0
	struct FHitResult GetHitResultFromEffectData(struct AEffectContainer* Effect); // Function ShooterGame.EffectsBlueprintLibrary.GetHitResultFromEffectData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38a61e0
	struct FVector GetEffectData_Vector(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x38a5fc0
	struct FText GetEffectData_Text(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Text // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x38a5d40
	struct UObject* GetEffectData_Object(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Object // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x38a5b30
	int32_t GetEffectData_Int32(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Int32 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x38a5920
	float GetEffectData_Float(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Float // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x38a5710
	struct TSoftClassPtr<UObject> GetEffectData_Class(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Class // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x38a54c0
	struct UDecalComponent* CreateDecalAtHit(struct UObject* WorldContextObject, struct FDecalData& DecalData, struct FHitResult& Hit, enum class ECreateDecalOptions OPTIONS); // Function ShooterGame.EffectsBlueprintLibrary.CreateDecalAtHit // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38a52e0
	void AddHitResultToEffectInfo(struct FEffectData& EffectData, struct FHitResult& Hit); // Function ShooterGame.EffectsBlueprintLibrary.AddHitResultToEffectInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38a4ff0
};

// Class ShooterGame.EjectablesComponent
// Size: 0x110 (Inherited: 0xe8)
struct UEjectablesComponent : UActorComponent {
	struct TArray<struct FName> QueuedEjectableNamesToCreate; // 0xe8(0x10)
	struct TArray<struct FWeaponEjectable> Ejectables; // 0xf8(0x10)
	bool bHasPendingPrespawns; // 0x108(0x01)
	bool bHasEjectablesUsing1PSocketVelocity; // 0x109(0x01)
	bool bIsViewTarget; // 0x10a(0x01)
	bool bIsEquipped; // 0x10b(0x01)
	char pad_10C[0x4]; // 0x10c(0x04)

	void OverrideEjectableMesh(struct FName EjectableName, struct UStaticMesh* OverrideMesh1P, struct UStaticMesh* OverrideMesh3P); // Function ShooterGame.EjectablesComponent.OverrideEjectableMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x38b4270
	void OverrideEjectableMaterial(struct FName EjectableName, struct UMaterialInterface* OverrideMaterial1P, struct UMaterialInterface* OverrideMaterial3P); // Function ShooterGame.EjectablesComponent.OverrideEjectableMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x38b4140
	void OverrideEjectable3pMesh(struct FName EjectableName, struct UStaticMesh* OverrideMesh); // Function ShooterGame.EjectablesComponent.OverrideEjectable3pMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x38b3f80
	void OverrideEjectable3pMaterial(struct FName EjectableName, struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.EjectablesComponent.OverrideEjectable3pMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x38b3e90
	void OverrideEjectable1pMesh(struct FName EjectableName, struct UStaticMesh* OverrideMesh); // Function ShooterGame.EjectablesComponent.OverrideEjectable1pMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x38b3da0
	void OverrideEjectable1pMaterial(struct FName EjectableName, struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.EjectablesComponent.OverrideEjectable1pMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x38b3cb0
	void OverrideEjectable(struct FWeaponEjectable& EjectableOverride); // Function ShooterGame.EjectablesComponent.OverrideEjectable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38b4070
	void OnUnequipped(); // Function ShooterGame.EjectablesComponent.OnUnequipped // (Final|Native|Protected) // @ game+0x38b3c90
	void OnEquipped(); // Function ShooterGame.EjectablesComponent.OnEquipped // (Final|Native|Protected) // @ game+0x38b3c70
	void OnEndViewTarget(struct APlayerController* PC); // Function ShooterGame.EjectablesComponent.OnEndViewTarget // (Final|Native|Protected) // @ game+0x38b3be0
	void OnBecomeViewTarget(struct APlayerController* PC); // Function ShooterGame.EjectablesComponent.OnBecomeViewTarget // (Final|Native|Protected) // @ game+0x38b3b50
	void EjectEjectable(struct FName EjectableName); // Function ShooterGame.EjectablesComponent.EjectEjectable // (Final|Native|Public|BlueprintCallable) // @ game+0x38b37e0
};

// Class ShooterGame.EmojiMapping
// Size: 0x80 (Inherited: 0x30)
struct UEmojiMapping : UObject {
	struct TMap<struct FName, struct FEmojiEntry> EmojiMap; // 0x30(0x50)
};

// Class ShooterGame.EmojiDecorator
// Size: 0x38 (Inherited: 0x38)
struct UEmojiDecorator : URichTextBlockImageDecorator {
};

// Class ShooterGame.EngagementScreen
// Size: 0x2e0 (Inherited: 0x2c8)
struct UEngagementScreen : UUserWidget {
	char pad_2C8[0x18]; // 0x2c8(0x18)

	void StopListeningForInputs(); // Function ShooterGame.EngagementScreen.StopListeningForInputs // (Final|Native|Public|BlueprintCallable) // @ game+0x38b4610
	void StartListeningForInputs(); // Function ShooterGame.EngagementScreen.StartListeningForInputs // (Final|Native|Public|BlueprintCallable) // @ game+0x38b45f0
	void ProgressEngagementScreenAsUser(int32_t UserIndex); // Function ShooterGame.EngagementScreen.ProgressEngagementScreenAsUser // (Final|Native|Public|BlueprintCallable) // @ game+0x38b43a0
	bool IsListeningForInputs(); // Function ShooterGame.EngagementScreen.IsListeningForInputs // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38b3b00
};

// Class ShooterGame.EnumerateJanusEventsCallbackProxy
// Size: 0x70 (Inherited: 0x38)
struct UEnumerateJanusEventsCallbackProxy : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate OnSuccess; // 0x38(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x48(0x10)
	struct UObject* WorldContextObject; // 0x58(0x08)
	struct FString Group; // 0x60(0x10)

	struct UEnumerateJanusEventsCallbackProxy* GetJanusEvents(struct UObject* WorldContextObject, struct FString Group); // Function ShooterGame.EnumerateJanusEventsCallbackProxy.GetJanusEvents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38b38f0
};

// Class ShooterGame.EnvQueryContext_GetActorsOfClassBase
// Size: 0x40 (Inherited: 0x30)
struct UEnvQueryContext_GetActorsOfClassBase : UEnvQueryContext {
	struct TArray<struct AActor*> ClassesToGet; // 0x30(0x10)
};

// Class ShooterGame.EnvQueryContext_QueryOwnerDirection
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_QueryOwnerDirection : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_QueryOwnerLocation
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_QueryOwnerLocation : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_StateContext_Direction
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_StateContext_Direction : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_StateContext_Location
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_StateContext_Location : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_StateOwner
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_StateOwner : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryGenerator_AroundOverlappingCharacter
// Size: 0x88 (Inherited: 0x58)
struct UEnvQueryGenerator_AroundOverlappingCharacter : UEnvQueryGenerator {
	struct UEnvQueryContext* TestLocation; // 0x58(0x08)
	struct UEnvQueryContext* OwnerContext; // 0x60(0x08)
	int32_t NumPoints; // 0x68(0x04)
	float ExtraOffset; // 0x6c(0x04)
	float ClearanceCapsuleRadius; // 0x70(0x04)
	float ClearanceCapsuleHalfHeight; // 0x74(0x04)
	float CapsuleSweepVerticalOffset; // 0x78(0x04)
	bool GenerateCascadingPoints; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	int32_t MaxCascadingCharacters; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class ShooterGame.EnvQueryTest_NearFloor
// Size: 0x248 (Inherited: 0x238)
struct UEnvQueryTest_NearFloor : UEnvQueryTest {
	struct UEnvQueryContext* OwnerContext; // 0x238(0x08)
	float MaxDistToFloor; // 0x240(0x04)
	float PreTraceZAdjust; // 0x244(0x04)
};

// Class ShooterGame.EnvQueryTest_OverlapsActors
// Size: 0x258 (Inherited: 0x238)
struct UEnvQueryTest_OverlapsActors : UEnvQueryTest {
	struct FVector QueryBoxExtent; // 0x238(0x0c)
	struct FVector QueryLocationOffset; // 0x244(0x0c)
	struct UEnvQueryContext* TestActorsContext; // 0x250(0x08)
};

// Class ShooterGame.EnvQueryTest_PawnProperties
// Size: 0x248 (Inherited: 0x238)
struct UEnvQueryTest_PawnProperties : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x238(0x08)
	bool bAlive; // 0x240(0x01)
	enum class EAresAlliance Alliance; // 0x241(0x01)
	char pad_242[0x6]; // 0x242(0x06)
};

// Class ShooterGame.EQSStateComponent
// Size: 0x468 (Inherited: 0x408)
struct UEQSStateComponent : UTimedStateComponent {
	struct FMulticastInlineDelegate OnPreEQSQuery; // 0x408(0x10)
	struct FRotator RotationOffset; // 0x418(0x0c)
	char pad_424[0x4]; // 0x424(0x04)
	struct UEnvQuery* QueryTemplate; // 0x428(0x08)
	struct TArray<struct FAIDynamicParam> QueryConfig; // 0x430(0x10)
	enum class EEnvQueryRunMode RunMode; // 0x440(0x01)
	char pad_441[0x7]; // 0x441(0x07)
	struct UScriptStateComponent* FailState; // 0x448(0x08)
	char pad_450[0x18]; // 0x450(0x18)

	void SetQueryTemplate(struct UEnvQuery* NewQueryTemplate); // Function ShooterGame.EQSStateComponent.SetQueryTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x38b4560
	void SetFailState(struct UScriptStateComponent* NewFailState); // Function ShooterGame.EQSStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x38b44d0
	void MulticastSucceedState(); // Function ShooterGame.EQSStateComponent.MulticastSucceedState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x366a740
	void MulticastFailState(); // Function ShooterGame.EQSStateComponent.MulticastFailState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x38b3b20
	struct UEnvQuery* GetQueryTemplate(); // Function ShooterGame.EQSStateComponent.GetQueryTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x369fd80
};

// Class ShooterGame.EQSWorldQueryComponent
// Size: 0x2d0 (Inherited: 0x290)
struct UEQSWorldQueryComponent : USceneComponent {
	struct FMulticastInlineDelegate OnEQSQueryComplete; // 0x288(0x10)
	struct UEnvQuery* QueryTemplate; // 0x298(0x08)
	struct TArray<struct FAIDynamicParam> QueryConfig; // 0x2a0(0x10)
	enum class EEnvQueryRunMode RunMode; // 0x2b0(0x01)
	char pad_2B9[0x17]; // 0x2b9(0x17)

	void ExecuteQuery(); // Function ShooterGame.EQSWorldQueryComponent.ExecuteQuery // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void CancelQuery(); // Function ShooterGame.EQSWorldQueryComponent.CancelQuery // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.EquipmentChargeComponent
// Size: 0x1a0 (Inherited: 0x158)
struct UEquipmentChargeComponent : UAbilityResourceComponent {
	int32_t Cost; // 0x158(0x04)
	int32_t DesignPlaytestCost; // 0x15c(0x04)
	enum class EAresCostType CostType; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FMulticastInlineDelegate OnPostChargeConsumed; // 0x168(0x10)
	bool bCanBuyCharges; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	int32_t MaxCharges; // 0x17c(0x04)
	int32_t ChargesGainedEachRefresh; // 0x180(0x04)
	int32_t MinGuaranteedCharges; // 0x184(0x04)
	bool bRateLimitInShop; // 0x188(0x01)
	char pad_189[0x3]; // 0x189(0x03)
	int32_t RoundsWaitedForCharges; // 0x18c(0x04)
	int32_t ChargesBoughtThisRound; // 0x190(0x04)
	int32_t CurrentTemporaryCharges; // 0x194(0x04)
	int32_t TotalChargesAllowedToPurchaseThisRound; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)

	void SetMaxCharges(int32_t NewMaxCharges); // Function ShooterGame.EquipmentChargeComponent.SetMaxCharges // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	int32_t RegainCharges(int32_t Units); // Function ShooterGame.EquipmentChargeComponent.RegainCharges // (Final|Native|Public|BlueprintCallable) // @ game+0x38b4430
	void OnRep_ChargeInfo(); // Function ShooterGame.EquipmentChargeComponent.OnRep_ChargeInfo // (Final|Native|Protected) // @ game+0x365e420
	int32_t GetTemporaryCharges(); // Function ShooterGame.EquipmentChargeComponent.GetTemporaryCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b3ad0
	int32_t GetRemainingChargesAllowedToPurchaseThisRound(); // Function ShooterGame.EquipmentChargeComponent.GetRemainingChargesAllowedToPurchaseThisRound // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b3a90
	int32_t GetPermanentCharges(); // Function ShooterGame.EquipmentChargeComponent.GetPermanentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b3a60
	int32_t GetMinGuaranteedCharges(); // Function ShooterGame.EquipmentChargeComponent.GetMinGuaranteedCharges // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b3a20
	int32_t GetMaxCharges(); // Function ShooterGame.EquipmentChargeComponent.GetMaxCharges // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b39e0
	int32_t GetCurrentCharges(); // Function ShooterGame.EquipmentChargeComponent.GetCurrentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b38c0
	int32_t GetChargesBoughtThisRound(); // Function ShooterGame.EquipmentChargeComponent.GetChargesBoughtThisRound // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38b3880
	void AuthSetChargesBoughtThisRound(int32_t NewChargesBoughtThisRound); // Function ShooterGame.EquipmentChargeComponent.AuthSetChargesBoughtThisRound // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthResetChargeInfo(); // Function ShooterGame.EquipmentChargeComponent.AuthResetChargeInfo // (Final|Native|Public) // @ game+0x2024060
	void AuthClearChargeBuildupForEquippable(); // Function ShooterGame.EquipmentChargeComponent.AuthClearChargeBuildupForEquippable // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37c24a0
	int32_t AddTemporaryCharges(int32_t Units); // Function ShooterGame.EquipmentChargeComponent.AddTemporaryCharges // (Final|Native|Public|BlueprintCallable) // @ game+0x38b3740
};

// Class ShooterGame.EquippableUIData
// Size: 0x140 (Inherited: 0x90)
struct UEquippableUIData : UBaseContentUIData {
	struct UTexture* KillStreamIcon; // 0x90(0x08)
	enum class EEquippableCategory Category; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FVector CameraPosition; // 0x9c(0x0c)
	float DefaultFOV; // 0xa8(0x04)
	float MaxFOV; // 0xac(0x04)
	float MinFOV; // 0xb0(0x04)
	struct FVector BuddyCameraPosition; // 0xb4(0x0c)
	float BuddyDefaultFOV; // 0xc0(0x04)
	float BuddyMaxFOV; // 0xc4(0x04)
	float BuddyMinFOV; // 0xc8(0x04)
	struct FVector PivotPoint; // 0xcc(0x0c)
	struct FWeaponStatUIData WeaponStats; // 0xd8(0x68)
};

// Class ShooterGame.EquippableDataAsset
// Size: 0x140 (Inherited: 0x50)
struct UEquippableDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Equippable; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
	int32_t MaxAttachmentCost; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TSet<struct TSoftClassPtr<UObject>> ForcedAttachments; // 0xb8(0x50)
	struct TSoftClassPtr<UObject> DefaultSkin; // 0x108(0x30)
	uint32_t PreloadOnAppStartupPlatforms; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
};

// Class ShooterGame.WeaponOverride
// Size: 0xe0 (Inherited: 0x50)
struct UWeaponOverride : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> EquippableDataAsset; // 0x50(0x30)
	struct TSoftClassPtr<UObject> EquippableOverride; // 0x80(0x30)
	struct TSoftClassPtr<UObject> UIDataOverride; // 0xb0(0x30)
};

// Class ShooterGame.EquippableAnimGraphComponent
// Size: 0x1c0 (Inherited: 0xe8)
struct UEquippableAnimGraphComponent : UActorComponent {
	float TimeLastFired; // 0xe8(0x04)
	float LastTimeBetweenShots; // 0xec(0x04)
	float LastShotRecoveryTime; // 0xf0(0x04)
	struct FRotator LastShotRotator; // 0xf4(0x0c)
	struct FAnimPunchTuning AnimPunchTuning; // 0x100(0x10)
	struct FAnimLeanTuning AnimLeanTuning; // 0x110(0x0c)
	struct FIdlePoseTuning IdlePoseTuning; // 0x11c(0x18)
	char pad_134[0x4]; // 0x134(0x04)
	struct FStabilityAnimTuning StabilityAnimTuning; // 0x138(0x88)

	float GetYawStrength(); // Function ShooterGame.EquippableAnimGraphComponent.GetYawStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36360d0
	float GetTranslationStrength(); // Function ShooterGame.EquippableAnimGraphComponent.GetTranslationStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bcc80
	float GetPitchAndRollStrength(); // Function ShooterGame.EquippableAnimGraphComponent.GetPitchAndRollStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635e20
	float GetKickBackBlendCurveValue(float Time); // Function ShooterGame.EquippableAnimGraphComponent.GetKickBackBlendCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bcbe0
	void GetKickBackBlendCurveRanges(float& TimeMin, float& TimeMax, float& ValueMin, float& ValueMax); // Function ShooterGame.EquippableAnimGraphComponent.GetKickBackBlendCurveRanges // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bca40
	struct FRotator GetFirstPersonMeshRotation(); // Function ShooterGame.EquippableAnimGraphComponent.GetFirstPersonMeshRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bca00
	struct FVector GetFirstPersonMeshOffset(); // Function ShooterGame.EquippableAnimGraphComponent.GetFirstPersonMeshOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bc9c0
	float GetAnimPunchInterpolant(float CurrentTimestamp); // Function ShooterGame.EquippableAnimGraphComponent.GetAnimPunchInterpolant // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bc850
};

// Class ShooterGame.EquippableAttachmentUIData
// Size: 0x90 (Inherited: 0x90)
struct UEquippableAttachmentUIData : UBaseContentUIData {
};

// Class ShooterGame.EquippableAttachmentDataAsset
// Size: 0x120 (Inherited: 0x50)
struct UEquippableAttachmentDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> Socket; // 0x58(0x30)
	struct TSoftClassPtr<UObject> Equippable; // 0x88(0x30)
	struct TSoftClassPtr<UObject> Attachment; // 0xb8(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0xe8(0x30)
	int32_t AttachmentCost; // 0x118(0x04)
	bool bIsUniversalAttachment; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
};

// Class ShooterGame.SocketDataAsset
// Size: 0x80 (Inherited: 0x50)
struct USocketDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Socket; // 0x50(0x30)
};

// Class ShooterGame.EquippableCharmDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UEquippableCharmDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Levels; // 0x80(0x10)
	struct TSoftClassPtr<UObject> Theme; // 0x90(0x30)

	void SetUIData(struct TSoftClassPtr<UObject> NewUIData); // Function ShooterGame.EquippableCharmDataAsset.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd790
	void SetLevels(struct TArray<struct TSoftClassPtr<UObject>> NewLevels); // Function ShooterGame.EquippableCharmDataAsset.SetLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd610
	struct UEquippableCharmLevelDataAsset* GetCharmLevel(int32_t LevelNumber); // Function ShooterGame.EquippableCharmDataAsset.GetCharmLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bc8f0
};

// Class ShooterGame.EquippableCharmUIData
// Size: 0x90 (Inherited: 0x90)
struct UEquippableCharmUIData : UBaseContentUIData {
};

// Class ShooterGame.EquippableCharmLevelDataAsset
// Size: 0xe8 (Inherited: 0x50)
struct UEquippableCharmLevelDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> EquippableCharm; // 0x80(0x30)
	struct TSoftClassPtr<UObject> CharmAttachment; // 0xb0(0x30)
	int32_t CharmLevel; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	void SetUIData(struct TSoftClassPtr<UObject> NewUIData); // Function ShooterGame.EquippableCharmLevelDataAsset.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd790
	void SetEquippableCharm(struct TSoftClassPtr<UObject> NewEquippableCharm); // Function ShooterGame.EquippableCharmLevelDataAsset.SetEquippableCharm // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd4a0
	void SetCharmLevel(int32_t NewCharmLevel); // Function ShooterGame.EquippableCharmLevelDataAsset.SetCharmLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd410
	void SetCharmAttachment(struct TSoftClassPtr<UObject> NewCharmAttachment); // Function ShooterGame.EquippableCharmLevelDataAsset.SetCharmAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd2a0
	struct UEquippableCharmDataAsset* GetEquippableCharm(); // Function ShooterGame.EquippableCharmLevelDataAsset.GetEquippableCharm // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38bc990
};

// Class ShooterGame.EquippableCharmLevelUIData
// Size: 0x90 (Inherited: 0x90)
struct UEquippableCharmLevelUIData : UBaseContentUIData {
};

// Class ShooterGame.EquippableEventBase
// Size: 0x40 (Inherited: 0x30)
struct UEquippableEventBase : UObject {
	struct AAresEquippable* Equippable; // 0x30(0x08)
	int32_t AuthCastID; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.EquippableEventBaseComponent
// Size: 0x148 (Inherited: 0xe8)
struct UEquippableEventBaseComponent : UActorComponent {
	struct TMap<struct UEquippableEventBase*, struct FMulticastInlineDelegate> EventListeners; // 0xe8(0x50)
	struct FMulticastInlineDelegate AllEventsDelegate; // 0x138(0x10)

	void RemoveEventListener(struct UEquippableEventBase* EventType, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventBaseComponent.RemoveEventListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38bcfa0
	void RemoveEventArrayListener(struct TArray<struct UEquippableEventBase*> EventTypes, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventBaseComponent.RemoveEventArrayListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38bce40
	void RemoveAllEventsListener(struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventBaseComponent.RemoveAllEventsListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38bcd80
	void AddEventListener(struct UEquippableEventBase* EventType, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventBaseComponent.AddEventListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38bc420
	void AddEventArrayListener(struct TArray<struct UEquippableEventBase*> EventTypes, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventBaseComponent.AddEventArrayListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38bc2c0
	void AddAllEventsListener(struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventBaseComponent.AddAllEventsListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38bc200
};

// Class ShooterGame.EquippableEventInventoryOwnerComponent
// Size: 0x1e8 (Inherited: 0x148)
struct UEquippableEventInventoryOwnerComponent : UEquippableEventBaseComponent {
	struct TMap<enum class EAresItemSlot, struct FEquippableEventItemSlotContainer> ItemSlotListeners; // 0x148(0x50)
	struct TMap<enum class EAresItemSlot, struct FMulticastInlineDelegate> AllEventsItemSlotDelegates; // 0x198(0x50)

	void RemoveItemSlotListener(enum class EAresItemSlot Slot, struct UEquippableEventBase* EventType, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventInventoryOwnerComponent.RemoveItemSlotListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38c8be0
	void RemoveItemSlotArrayListener(enum class EAresItemSlot Slot, struct TArray<struct UEquippableEventBase*> EventTypes, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventInventoryOwnerComponent.RemoveItemSlotArrayListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38c8a50
	void RemoveAllEventsItemSlotListener(enum class EAresItemSlot Slot, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventInventoryOwnerComponent.RemoveAllEventsItemSlotListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38c8950
	void AddItemSlotListener(enum class EAresItemSlot Slot, struct UEquippableEventBase* EventType, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventInventoryOwnerComponent.AddItemSlotListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38c7ee0
	void AddItemSlotArrayListener(enum class EAresItemSlot Slot, struct TArray<struct UEquippableEventBase*> EventTypes, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventInventoryOwnerComponent.AddItemSlotArrayListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38c7d50
	void AddAllEventsItemSlotListener(enum class EAresItemSlot Slot, struct FDelegate& ListenerEvent); // Function ShooterGame.EquippableEventInventoryOwnerComponent.AddAllEventsItemSlotListener // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38c7c50
};

// Class ShooterGame.EquippableEventCharacterComponent
// Size: 0x1e8 (Inherited: 0x1e8)
struct UEquippableEventCharacterComponent : UEquippableEventInventoryOwnerComponent {
};

// Class ShooterGame.EquippableEventDebugComponent
// Size: 0x140 (Inherited: 0xe8)
struct UEquippableEventDebugComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TArray<struct UEquippableEventBase*> ServerRegisteredEvents; // 0xf0(0x10)
	char pad_100[0x40]; // 0x100(0x40)

	void ServerShowSlotHistory(struct AShooterCharacter* Character, enum class EAresItemSlot Slot); // Function ShooterGame.EquippableEventDebugComponent.ServerShowSlotHistory // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x38bd1c0
	void ServerShowPlayerHistory(struct AShooterPlayerState* PlayerState); // Function ShooterGame.EquippableEventDebugComponent.ServerShowPlayerHistory // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x36f5610
	void ServerShowGameStateHistory(); // Function ShooterGame.EquippableEventDebugComponent.ServerShowGameStateHistory // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3654e70
	void ServerShowCharacterHistory(struct AShooterCharacter* Character); // Function ShooterGame.EquippableEventDebugComponent.ServerShowCharacterHistory // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x38bd130
	void ServerCaptureRegisteredItems(struct AAresEquippable* EquippableToMonitor); // Function ShooterGame.EquippableEventDebugComponent.ServerCaptureRegisteredItems // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x38bd0a0
	void HistoryEventListener(struct UEquippableEventBase* Event); // Function ShooterGame.EquippableEventDebugComponent.HistoryEventListener // (Final|Native|Protected) // @ game+0x3634e00
	void ClientAddServerEventToHistory(struct FEquippableEventDebugHistoryEntry NewEntry); // Function ShooterGame.EquippableEventDebugComponent.ClientAddServerEventToHistory // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x38bc520
};

// Class ShooterGame.EquippableEvent_EquippedEvent
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_EquippedEvent : UEquippableEventBase {
};

// Class ShooterGame.EquippableEvent_FailedToEquipEvent
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_FailedToEquipEvent : UEquippableEventBase {
};

// Class ShooterGame.EquippableEvent_ProjectileThrownEvent
// Size: 0x48 (Inherited: 0x40)
struct UEquippableEvent_ProjectileThrownEvent : UEquippableEventBase {
	char pad_40[0x8]; // 0x40(0x08)
};

// Class ShooterGame.EquippableEvent_AppliedBuffEvent
// Size: 0x50 (Inherited: 0x40)
struct UEquippableEvent_AppliedBuffEvent : UEquippableEventBase {
	struct UGameplayEffect* BuffClass; // 0x40(0x08)
	struct AShooterCharacter* AffectedCharacter; // 0x48(0x08)
};

// Class ShooterGame.EquippableEvent_RemovedBuffEvent
// Size: 0x58 (Inherited: 0x40)
struct UEquippableEvent_RemovedBuffEvent : UEquippableEventBase {
	struct UGameplayEffect* BuffClass; // 0x40(0x08)
	struct AShooterCharacter* AffectedCharacter; // 0x48(0x08)
	struct FActiveGameplayEffectHandle ActiveGameplayEffectHandle; // 0x50(0x08)
};

// Class ShooterGame.EquippableEvent_AbilitySubobjectSpawnedEvent
// Size: 0x48 (Inherited: 0x40)
struct UEquippableEvent_AbilitySubobjectSpawnedEvent : UEquippableEventBase {
	struct AActor* NewObject; // 0x40(0x08)
};

// Class ShooterGame.EquippableEvent_AbilitySubobjectDestroyedEvent
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_AbilitySubobjectDestroyedEvent : UEquippableEventBase {
};

// Class ShooterGame.EquippableEvent_AbilitySubobjectUsedEvent
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_AbilitySubobjectUsedEvent : UEquippableEventBase {
};

// Class ShooterGame.EquippableEvent_AbilitySubjectRemovedEvent
// Size: 0x48 (Inherited: 0x40)
struct UEquippableEvent_AbilitySubjectRemovedEvent : UEquippableEventBase {
	struct AActor* RemovedObject; // 0x40(0x08)
};

// Class ShooterGame.EquippableEvent_TemporaryChargesAddedEvent
// Size: 0x50 (Inherited: 0x40)
struct UEquippableEvent_TemporaryChargesAddedEvent : UEquippableEventBase {
	int32_t Charges; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UResourceComponent* ResourceComponent; // 0x48(0x08)
};

// Class ShooterGame.EquippableEvent_AbilityCooldownFinished
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_AbilityCooldownFinished : UEquippableEventBase {
};

// Class ShooterGame.EquippableEvent_ChargesResetEvent
// Size: 0x48 (Inherited: 0x40)
struct UEquippableEvent_ChargesResetEvent : UEquippableEventBase {
	struct UResourceComponent* ResourceComponent; // 0x40(0x08)
};

// Class ShooterGame.EquippableEvent_ChargesRegainedEvent
// Size: 0x50 (Inherited: 0x40)
struct UEquippableEvent_ChargesRegainedEvent : UEquippableEventBase {
	int32_t Charges; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UResourceComponent* ResourceComponent; // 0x48(0x08)
};

// Class ShooterGame.EquippableEvent_ResourcesConsumedEvent
// Size: 0x50 (Inherited: 0x40)
struct UEquippableEvent_ResourcesConsumedEvent : UEquippableEventBase {
	int32_t ChargesConsumed; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UResourceComponent* ResourceComponent; // 0x48(0x08)
};

// Class ShooterGame.EquippableEvent_ResourcesReplenishedEvent
// Size: 0x50 (Inherited: 0x40)
struct UEquippableEvent_ResourcesReplenishedEvent : UEquippableEventBase {
	int32_t ResourceChange; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UResourceComponent* ResourceComponent; // 0x48(0x08)
};

// Class ShooterGame.EquippableEvent_ResourcesChangedEvent
// Size: 0x48 (Inherited: 0x40)
struct UEquippableEvent_ResourcesChangedEvent : UEquippableEventBase {
	struct UResourceComponent* ResourceComponent; // 0x40(0x08)
};

// Class ShooterGame.EquippableEvent_UltPointsChangedEvent
// Size: 0x50 (Inherited: 0x40)
struct UEquippableEvent_UltPointsChangedEvent : UEquippableEventBase {
	int32_t Value; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UResourceComponent* ResourceComponent; // 0x48(0x08)
};

// Class ShooterGame.EquippableEvent_HealEvent
// Size: 0x58 (Inherited: 0x40)
struct UEquippableEvent_HealEvent : UEquippableEventBase {
	float HealAmount; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct AActor* HealCauser; // 0x48(0x08)
	struct AActor* HealTarget; // 0x50(0x08)
};

// Class ShooterGame.EquippableEvent_ForceModuleAppliedEvent
// Size: 0x48 (Inherited: 0x40)
struct UEquippableEvent_ForceModuleAppliedEvent : UEquippableEventBase {
	struct UForceModule* Module; // 0x40(0x08)
};

// Class ShooterGame.EquippableEvent_AbilityReclaimedEvent
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_AbilityReclaimedEvent : UEquippableEventBase {
};

// Class ShooterGame.EquippableEvent_CommittedAbilityUsed
// Size: 0x40 (Inherited: 0x40)
struct UEquippableEvent_CommittedAbilityUsed : UEquippableEventBase {
};

// Class ShooterGame.EquippableEventEquippableComponent
// Size: 0x1b0 (Inherited: 0x148)
struct UEquippableEventEquippableComponent : UEquippableEventBaseComponent {
	char pad_148[0x68]; // 0x148(0x68)

	void RegisterEvent(struct UEquippableEventBase* EventType, enum class EEquippableEventEmitMode EmitMode); // Function ShooterGame.EquippableEventEquippableComponent.RegisterEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x38bccb0
	struct UEquippableEventEquippableComponent* FindEquippableEventComponentForActor(struct AActor* EquippableOrSubobject); // Function ShooterGame.EquippableEventEquippableComponent.FindEquippableEventComponentForActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x38bc7c0
	void EnableEventForwarding(enum class EAresItemSlot SlotToFowardTo); // Function ShooterGame.EquippableEventEquippableComponent.EnableEventForwarding // (Final|Native|Public|BlueprintCallable) // @ game+0x38bc740
	void EmitEvent(struct UEquippableEventBase* Event); // Function ShooterGame.EquippableEventEquippableComponent.EmitEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x38bc6b0
};

// Class ShooterGame.EquippableEventGameStateComponent
// Size: 0x198 (Inherited: 0x148)
struct UEquippableEventGameStateComponent : UEquippableEventBaseComponent {
	struct TMap<struct UEquippableEventBase*, struct FEquippableEventPool> EventPools; // 0x148(0x50)

	struct UEquippableEventBase* MakeEquippableEvent(struct UEquippableEventBase* EventType, struct AActor* EmittingActor); // Function ShooterGame.EquippableEventGameStateComponent.MakeEquippableEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38c87a0
	struct UEquippableEventGameStateComponent* GetGameStateEventComponent(struct UObject* WorldContextObject); // Function ShooterGame.EquippableEventGameStateComponent.GetGameStateEventComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x38c81a0
};

// Class ShooterGame.EquippableEventPlayerStateComponent
// Size: 0x1f0 (Inherited: 0x1e8)
struct UEquippableEventPlayerStateComponent : UEquippableEventInventoryOwnerComponent {
	struct AShooterGameState* GameState; // 0x1e8(0x08)
};

// Class ShooterGame.FogOfWarComponent
// Size: 0x320 (Inherited: 0xe8)
struct UFogOfWarComponent : UActorComponent {
	char pad_E8[0x70]; // 0xe8(0x70)
	bool bCanMakeActorsVisionRelevant; // 0x158(0x01)
	bool bBoundsIncludesOnlyCollidingComponents; // 0x159(0x01)
	bool bUseCachedBounds; // 0x15a(0x01)
	char pad_15B[0x1]; // 0x15b(0x01)
	float LookAheadTime; // 0x15c(0x04)
	struct AEffectContainer* DebugWallhackEffectClass; // 0x160(0x08)
	char pad_168[0x50]; // 0x168(0x50)
	bool bOwnerIsRelevantToClient; // 0x1b8(0x01)
	bool bOwnerIsHiddenForClient; // 0x1b9(0x01)
	char pad_1BA[0x56]; // 0x1ba(0x56)
	bool bReceivedNetUpdate; // 0x210(0x01)
	char pad_211[0x7]; // 0x211(0x07)
	struct TArray<struct UFogOfWarBoundsComponent*> ExtraFogOfWarBounds; // 0x218(0x10)
	char pad_228[0xa0]; // 0x228(0xa0)
	struct FEffectID DebugWallhackEffect; // 0x2c8(0x20)
	struct TArray<struct AActor*> CachedAttachedActors; // 0x2e8(0x10)
	struct TArray<struct UFogOfWarComponent*> CachedAttachedFoWComponents; // 0x2f8(0x10)
	bool bCacheNeedsRebuilding; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct UFogOfWarDebugComponent* DebugComponent; // 0x310(0x08)
	struct UFogOfWarManagerComponent* ManagerComponent; // 0x318(0x08)

	bool RemoveRelevancyOverride(int32_t Handle); // Function ShooterGame.FogOfWarComponent.RemoveRelevancyOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3647c20
	void RemoveAudioEvent(int32_t Handle); // Function ShooterGame.FogOfWarComponent.RemoveAudioEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void OnViewerComponentDestroyed(struct UViewerFogOfWarComponent* DestroyedComponent); // Function ShooterGame.FogOfWarComponent.OnViewerComponentDestroyed // (Final|Native|Protected) // @ game+0x3634e00
	void OnTeamChanged(); // Function ShooterGame.FogOfWarComponent.OnTeamChanged // (Final|Native|Public) // @ game+0x2024060
	void OnOwnerAttachTreeChanged(struct USceneComponent* AttachedComponent, bool bAttached); // Function ShooterGame.FogOfWarComponent.OnOwnerAttachTreeChanged // (Final|Native|Private) // @ game+0x39058e0
	bool IsRelevantForLocalClient(); // Function ShooterGame.FogOfWarComponent.IsRelevantForLocalClient // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3905500
	bool IsHiddenForLocalClient(); // Function ShooterGame.FogOfWarComponent.IsHiddenForLocalClient // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39054a0
	void AuthSetCharacterNeverRelevant(bool bNewNeverRelevant); // Function ShooterGame.FogOfWarComponent.AuthSetCharacterNeverRelevant // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	int32_t AddRelevancyOverride(float Duration); // Function ShooterGame.FogOfWarComponent.AddRelevancyOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x39048a0
	int32_t AddAudioEvent(float AudibleDistance, float Duration); // Function ShooterGame.FogOfWarComponent.AddAudioEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x39045c0
};

// Class ShooterGame.EquippableFogOfWarComponent
// Size: 0x320 (Inherited: 0x320)
struct UEquippableFogOfWarComponent : UFogOfWarComponent {
};

// Class ShooterGame.EquippableInputActionComponent
// Size: 0x108 (Inherited: 0xe8)
struct UEquippableInputActionComponent : UActorComponent {
	struct FName InputAction; // 0xe8(0x0c)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct UInputComponent* InputComponent; // 0xf8(0x08)
	struct AShooterPlayerController* BoundController; // 0x100(0x08)

	void UnbindActions(); // Function ShooterGame.EquippableInputActionComponent.UnbindActions // (Final|Native|Private) // @ game+0x38c8ef0
	void InputReleased(); // Function ShooterGame.EquippableInputActionComponent.InputReleased // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void InputPressed(); // Function ShooterGame.EquippableInputActionComponent.InputPressed // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BindActions(); // Function ShooterGame.EquippableInputActionComponent.BindActions // (Final|Native|Private) // @ game+0x38c8020
};

// Class ShooterGame.EquippableMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UEquippableMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.EquippableModificationComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UEquippableModificationComponent : UActorComponent {

	bool ModifyItem(struct AAresEquippable* Equippable, enum class EModificationType ModificationType); // Function ShooterGame.EquippableModificationComponent.ModifyItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x38c8870
};

// Class ShooterGame.EquippableSkinUIData
// Size: 0xb8 (Inherited: 0x90)
struct UEquippableSkinUIData : UBaseContentUIData {
	bool UseModelViewerOverrides; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FVector CameraPosition; // 0x94(0x0c)
	float DefaultFOV; // 0xa0(0x04)
	float MaxFOV; // 0xa4(0x04)
	float MinFOV; // 0xa8(0x04)
	struct FVector PivotPoint; // 0xac(0x0c)
};

// Class ShooterGame.EquippableSkinFeaturesDataAsset
// Size: 0x88 (Inherited: 0x50)
struct UEquippableSkinFeaturesDataAsset : UAresBasePrimaryDataAsset {
	enum class EModelCategory ModelCategory; // 0x50(0x01)
	enum class EFXCategory VFXCategory; // 0x51(0x01)
	enum class EFXCategory SFXCategory; // 0x52(0x01)
	enum class EAnimationCategory AnimationCategory; // 0x53(0x01)
	enum class EShaderCategory ShaderCategory; // 0x54(0x01)
	bool Finisher; // 0x55(0x01)
	bool KillBanner; // 0x56(0x01)
	enum class EMeleeCategory MeleeCategory; // 0x57(0x01)
	struct TSoftClassPtr<UObject> Skin; // 0x58(0x30)

	struct FString GetVFXCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetVFXCategoryString // (Final|Native|Public) // @ game+0x38c8720
	struct FString GetShaderCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetShaderCategoryString // (Final|Native|Public) // @ game+0x38c8600
	struct FString GetSFXCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetSFXCategoryString // (Final|Native|Public) // @ game+0x38c8580
	struct FString GetModelCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetModelCategoryString // (Final|Native|Public) // @ game+0x38c8350
	struct FString GetMeleeCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetMeleeCategoryString // (Final|Native|Public) // @ game+0x38c82d0
	struct FString GetFXCategoryString(enum class EFXCategory FXCategory); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetFXCategoryString // (Final|Native|Private) // @ game+0x38c80c0
	struct FString GetAnimationCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetAnimationCategoryString // (Final|Native|Public) // @ game+0x38c8040
};

// Class ShooterGame.EquippableSkinDataAsset
// Size: 0x1f0 (Inherited: 0x50)
struct UEquippableSkinDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> Equippable; // 0x58(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Levels; // 0x88(0x10)
	struct TSoftClassPtr<UObject> DefaultChroma; // 0x98(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Chromas; // 0xc8(0x10)
	struct TSoftClassPtr<UObject> UIData; // 0xd8(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> AttachmentOverrides; // 0x108(0x50)
	struct TSoftClassPtr<UObject> Theme; // 0x158(0x30)
	struct TSoftClassPtr<UObject> ContentTier; // 0x188(0x30)
	struct TSoftObjectPtr<UTexture2D> Wallpaper; // 0x1b8(0x30)
	bool UseHighestOwnedLevelNameAsDisplayName; // 0x1e8(0x01)
	char pad_1E9[0x7]; // 0x1e9(0x07)

	struct UEquippableSkinLevelDataAsset* GetSkinLevel(int32_t LevelNumber); // Function ShooterGame.EquippableSkinDataAsset.GetSkinLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8680
};

// Class ShooterGame.EquippableSkinChromaUIData
// Size: 0xa8 (Inherited: 0x90)
struct UEquippableSkinChromaUIData : UBaseContentUIData {
	struct UTexture* FullRender; // 0x90(0x08)
	struct UTexture* FullRenderOverride; // 0x98(0x08)
	struct UTexture* Swatch; // 0xa0(0x08)
};

// Class ShooterGame.EquippableSkinChromaDataAsset
// Size: 0x170 (Inherited: 0x50)
struct UEquippableSkinChromaDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> EquippableSkinChroma; // 0x58(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x88(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> AttachmentOverrides; // 0xb8(0x50)
	struct TSoftClassPtr<UObject> ModelViewerFXC; // 0x108(0x30)
	struct TSoftClassPtr<UObject> StreamedVideo; // 0x138(0x30)
	bool bWhenFocusingBuddyDisableFXC; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
};

// Class ShooterGame.EquippableSkinLevelUIData
// Size: 0x98 (Inherited: 0x90)
struct UEquippableSkinLevelUIData : UBaseContentUIData {
	enum class EEquippableSkinLevelItem LevelItem; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class ShooterGame.EquippableSkinLevelDataAsset
// Size: 0x118 (Inherited: 0x50)
struct UEquippableSkinLevelDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> SkinAttachment; // 0x58(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x88(0x30)
	struct TSoftClassPtr<UObject> ModelViewerFXC; // 0xb8(0x30)
	struct TSoftClassPtr<UObject> StreamedVideo; // 0xe8(0x30)

	int32_t GetLevel(struct UObject* WorldContextObject); // Function ShooterGame.EquippableSkinLevelDataAsset.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8230
};

// Class ShooterGame.EquippableStateMachineComponent
// Size: 0x318 (Inherited: 0x1e0)
struct UEquippableStateMachineComponent : UStateMachineComponent {
	char pad_1E0[0xa8]; // 0x1e0(0xa8)
	bool bStateMachineEnabled; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct URespondToEventStateComponent* InactiveState; // 0x290(0x08)
	enum class EStateBehaviorOnDeath DeathBehavior; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct UStateComponent* DeathState; // 0x2a0(0x08)
	struct UStateComponent* CurrentStateForBuffs; // 0x2a8(0x08)
	struct TArray<struct FEquippableStateBuffInfo> ActiveStateBuffs; // 0x2b0(0x10)
	char pad_2C0[0x10]; // 0x2c0(0x10)
	float InputQueueTimeDurations[0x10]; // 0x2d0(0x40)
	bool bClientSimulationDesynced; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)

	void SetDeathState(struct UStateComponent* State); // Function ShooterGame.EquippableStateMachineComponent.SetDeathState // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0dd0
	void SetDeathBehavior(enum class EStateBehaviorOnDeath NewDeathBehavior); // Function ShooterGame.EquippableStateMachineComponent.SetDeathBehavior // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0d50
	void OnItemMovedToPersistentData(); // Function ShooterGame.EquippableStateMachineComponent.OnItemMovedToPersistentData // (Final|Native|Public) // @ game+0x38d0b70
	void HandleUnpossess(); // Function ShooterGame.EquippableStateMachineComponent.HandleUnpossess // (Final|Native|Public) // @ game+0x38d09b0
	void HandleStateChanged(struct UStateComponent* OldState, struct UStateComponent* NewState); // Function ShooterGame.EquippableStateMachineComponent.HandleStateChanged // (Final|Native|Protected) // @ game+0x38d0830
	struct AShooterPlayerController* GetOwningShooterPlayerController(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c84c0
	struct AShooterCharacter* GetOwningShooterCharacter(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8490
	struct AAresEquippable* GetOwningEquippable(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8430
	struct ACharacter* GetOwningCharacter(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38c8400
	struct URespondToEventStateComponent* GetInactiveState(); // Function ShooterGame.EquippableStateMachineComponent.GetInactiveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ec70
	void AuthSetClientSimulationDesync(); // Function ShooterGame.EquippableStateMachineComponent.AuthSetClientSimulationDesync // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.EquippableVisibilityComponent
// Size: 0x188 (Inherited: 0x188)
struct UEquippableVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.EquipStateComponent
// Size: 0x310 (Inherited: 0x2e0)
struct UEquipStateComponent : UScriptStateComponent {
	bool bShouldGhostEquip; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct FText EquippableName; // 0x2e8(0x18)
	bool bBlocking; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)
	struct UStateComponent* FailStateComponent; // 0x308(0x08)

	void SetEquipFailState(struct UStateComponent* FailState); // Function ShooterGame.EquipStateComponent.SetEquipFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0e60
};

// Class ShooterGame.EsportsBracketScreenViewModel
// Size: 0xd8 (Inherited: 0x48)
struct UEsportsBracketScreenViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnBracketsTournamentNameUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnBracketsStagesUpdated; // 0x58(0x10)
	struct FString Name; // 0x68(0x10)
	struct TMap<struct FString, struct UTournamentSectionModel*> TournamentSections; // 0x78(0x50)
	struct UTournamentStandingModel* TournamentStandingModel; // 0xc8(0x08)
	char pad_D0[0x8]; // 0xd0(0x08)

	void UnBindToModelEvents(); // Function ShooterGame.EsportsBracketScreenViewModel.UnBindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38d14a0
	void SetStages(struct TMap<struct FString, struct UTournamentSectionModel*>& TournamentSections); // Function ShooterGame.EsportsBracketScreenViewModel.SetStages // (Final|Native|Protected|HasOutParms) // @ game+0x38d1300
	void SetName(struct FString InName); // Function ShooterGame.EsportsBracketScreenViewModel.SetName // (Final|Native|Protected) // @ game+0x38d1130
	void Refresh(); // Function ShooterGame.EsportsBracketScreenViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0b90
	void InitFromTournamentStanding(struct UTournamentStandingModel* InTournamentStandingModel, enum class E2024VCTEvent InVCTEvent2024); // Function ShooterGame.EsportsBracketScreenViewModel.InitFromTournamentStanding // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0a10
	enum class E2024VCTEvent GetEvent(); // Function ShooterGame.EsportsBracketScreenViewModel.GetEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0610
	struct UAresViewModelBase* CreateSectionViewModel(struct FString SectionID); // Function ShooterGame.EsportsBracketScreenViewModel.CreateSectionViewModel // (Final|Native|Protected|BlueprintCallable) // @ game+0x38d0520
	struct UEsportsMatchupViewModel* CreateMatchupViewModel(struct FString MatchupID); // Function ShooterGame.EsportsBracketScreenViewModel.CreateMatchupViewModel // (Final|Native|Protected|BlueprintCallable) // @ game+0x38d0460
	void BindToModelEvents(); // Function ShooterGame.EsportsBracketScreenViewModel.BindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38d0390
};

// Class ShooterGame.EsportsBracketViewModel
// Size: 0x150 (Inherited: 0x48)
struct UEsportsBracketViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnAddWidgetToBracket; // 0x48(0x10)
	struct FMulticastInlineDelegate OnClearBracket; // 0x58(0x10)
	struct FMulticastInlineDelegate OnGenerateComplete; // 0x68(0x10)
	struct FMulticastInlineDelegate OnBracketLinesUpdated; // 0x78(0x10)
	struct FMulticastInlineDelegate OnAddBackgroundToSubBracket; // 0x88(0x10)
	struct FMulticastInlineDelegate OnAddSectionBackgroundForSwissBracket; // 0x98(0x10)
	struct TArray<struct UBracketColumnModel*> Columns; // 0xa8(0x10)
	struct FVector2D MatchupWidgetSize; // 0xb8(0x08)
	struct FVector2D MatchupSpacingSize; // 0xc0(0x08)
	struct FVector2D NextBracketOffset; // 0xc8(0x08)
	struct UTournamentSectionModel* TournamentSection; // 0xd0(0x08)
	char pad_D8[0x78]; // 0xd8(0x78)

	void UnBindToModelEvents(); // Function ShooterGame.EsportsBracketViewModel.UnBindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38d14c0
	void SetNumSwissColumns(int32_t InNumColumns); // Function ShooterGame.EsportsBracketViewModel.SetNumSwissColumns // (Final|Native|Public|BlueprintCallable) // @ game+0x38d1270
	void SetNumEliminationColumns(int32_t InNumColumns); // Function ShooterGame.EsportsBracketViewModel.SetNumEliminationColumns // (Final|Native|Public|BlueprintCallable) // @ game+0x38d11e0
	void SetMatchupWidgetSize(struct FVector2D& InMatchupWidgetSize); // Function ShooterGame.EsportsBracketViewModel.SetMatchupWidgetSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38d10a0
	void SetMatchupVerticalSpacing(int32_t InMatchupVerticalSpacing); // Function ShooterGame.EsportsBracketViewModel.SetMatchupVerticalSpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x38d1010
	void SetMatchupPairVerticalSpacing(int32_t InMatchupPairVerticalSpacing); // Function ShooterGame.EsportsBracketViewModel.SetMatchupPairVerticalSpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0f80
	void SetColumns(struct TArray<struct UBracketColumnModel*>& Columns); // Function ShooterGame.EsportsBracketViewModel.SetColumns // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x38d0ca0
	void SetCanvasSize(struct FVector2D& InCanvasSize); // Function ShooterGame.EsportsBracketViewModel.SetCanvasSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38d0c10
	void Refresh(); // Function ShooterGame.EsportsBracketViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0bb0
	void InitWtihTournamentSection(struct UTournamentSectionModel* TournamentSectionModel); // Function ShooterGame.EsportsBracketViewModel.InitWtihTournamentSection // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0ae0
	struct FString GetStageSlug(); // Function ShooterGame.EsportsBracketViewModel.GetStageSlug // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0690
	void BindToModelEvents(); // Function ShooterGame.EsportsBracketViewModel.BindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38d03b0
};

// Class ShooterGame.EsportsEventViewModel
// Size: 0x250 (Inherited: 0x48)
struct UEsportsEventViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnEventNameChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnEventDateChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLeagueNameChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnEventIDsChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnTeamAdded; // 0x88(0x10)
	struct FMulticastInlineDelegate OnTeamRemoved; // 0x98(0x10)
	struct FMulticastInlineDelegate OnTeamsUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnEventStatusChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnEventLocationChanged; // 0xc8(0x10)
	struct FText EventName; // 0xd8(0x18)
	struct FText EventDate; // 0xf0(0x18)
	struct FText LeagueName; // 0x108(0x18)
	struct FString LeagueID; // 0x120(0x10)
	struct FString TournamentID; // 0x130(0x10)
	struct TArray<struct UTeamModel*> Teams; // 0x140(0x10)
	struct TArray<struct UMatchModel*> Matches; // 0x150(0x10)
	enum class EEsportsMatchStatus EventStatus; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText EventLocation; // 0x168(0x18)
	char pad_180[0x18]; // 0x180(0x18)
	struct UEsportsEventsModel* EventsModel; // 0x198(0x08)
	struct UConfigManager* ConfigManager; // 0x1a0(0x08)
	char pad_1A8[0xa8]; // 0x1a8(0xa8)

	void SetViewData(enum class E2024VCTEvent InEvent); // Function ShooterGame.EsportsEventViewModel.SetViewData // (Final|Native|Public|BlueprintCallable) // @ game+0x38d1420
	void Refresh(); // Function ShooterGame.EsportsEventViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38d0bd0
	void Init(); // Function ShooterGame.EsportsEventViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x38d09d0
	void HandleTeamsUpdated(struct TArray<struct UTeamModel*>& UpdatedTeams); // Function ShooterGame.EsportsEventViewModel.HandleTeamsUpdated // (Final|Native|Protected|HasOutParms) // @ game+0x38d0900
	void HandleEventDataUpdated(struct UEsportsEventModel* UpdatedModel); // Function ShooterGame.EsportsEventViewModel.HandleEventDataUpdated // (Final|Native|Protected) // @ game+0x38d0710
	bool GetIsUsingAPIData(); // Function ShooterGame.EsportsEventViewModel.GetIsUsingAPIData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38d0670
	bool GetIsGlobalEvent(); // Function ShooterGame.EsportsEventViewModel.GetIsGlobalEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38d0650
	bool GetHasGroupStandings(); // Function ShooterGame.EsportsEventViewModel.GetHasGroupStandings // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36a05b0
	enum class E2024VCTEvent GetEvent(); // Function ShooterGame.EsportsEventViewModel.GetEvent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38d0630
	struct UEsportsBracketScreenViewModel* GetBracketScreenViewModel(); // Function ShooterGame.EsportsEventViewModel.GetBracketScreenViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x38d05e0
	void BindToOrUnbindFromModel(bool bShouldBind); // Function ShooterGame.EsportsEventViewModel.BindToOrUnbindFromModel // (Final|Native|Public|BlueprintCallable) // @ game+0x38d03d0
};

// Class ShooterGame.EsportsHelpers
// Size: 0x30 (Inherited: 0x30)
struct UEsportsHelpers : UObject {

	void ReleaseAllHeldImageData(); // Function ShooterGame.EsportsHelpers.ReleaseAllHeldImageData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x38d0bf0
};

// Class ShooterGame.EsportsHubScreenV1
// Size: 0x2c8 (Inherited: 0x2c8)
struct UEsportsHubScreenV1 : UUserWidget {
};

// Class ShooterGame.EsportsLiveEventViewModel
// Size: 0x78 (Inherited: 0x48)
struct UEsportsLiveEventViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnIsMatchLiveChanged; // 0x48(0x10)
	struct UEsportsEventsModel* EventsModel; // 0x58(0x08)
	char pad_60[0x18]; // 0x60(0x18)

	void SetIsMatchLive(bool NewIsMatchLive); // Function ShooterGame.EsportsLiveEventViewModel.SetIsMatchLive // (Final|Native|Protected) // @ game+0x38d0ef0
	void Refresh(); // Function ShooterGame.EsportsLiveEventViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x36e2690
	void Init(); // Function ShooterGame.EsportsLiveEventViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x38d09f0
	void HandleEventsUpdated(struct UEsportsEventsModel* UpdatedModel); // Function ShooterGame.EsportsLiveEventViewModel.HandleEventsUpdated // (Final|Native|Protected) // @ game+0x38d07a0
};

// Class ShooterGame.EsportsManager
// Size: 0xf8 (Inherited: 0x80)
struct UEsportsManager : UInitSystem {
	char pad_80[0x10]; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UContentManager* ContentManager; // 0xa0(0x08)
	struct UContentIndex* ContentIndex; // 0xa8(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xb0(0x08)
	struct UEsportsService* EsportsService; // 0xb8(0x08)
	struct UEsportsEventsModel* EventsModel; // 0xc0(0x08)
	struct UEsportsMainScheduleModel* ScheduleModel; // 0xc8(0x08)
	char pad_D0[0x28]; // 0xd0(0x28)

	void TryRefreshDataModels(); // Function ShooterGame.EsportsManager.TryRefreshDataModels // (Final|Native|Public|BlueprintCallable) // @ game+0x38de740
	bool IsEsportsHubEnabled(); // Function ShooterGame.EsportsManager.IsEsportsHubEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x38dd840
	bool IsEsportsDataLoaded(); // Function ShooterGame.EsportsManager.IsEsportsDataLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38dd800
	void GetTournamentStandings(struct FString TournamentID, bool bUseMockData, int32_t progressStandingsRound, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.EsportsManager.GetTournamentStandings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dd4c0
	void GetTournamentSchedule(struct FString LeagueID, struct FString TournamentID, bool bUseMockData, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.EsportsManager.GetTournamentSchedule // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dd280
	void GetTournamentLiveSchedule(struct FString LeagueID, struct FString TournamentID, bool bUseMockData, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.EsportsManager.GetTournamentLiveSchedule // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dd040
	void GetSingleTournamentTeam(struct FString LeagueID, struct FString TournamentID, struct FString TeamID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.EsportsManager.GetSingleTournamentTeam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dcbf0
	struct UEsportsMainScheduleModel* GetScheduleModel(); // Function ShooterGame.EsportsManager.GetScheduleModel // (Final|Native|Public|BlueprintCallable) // @ game+0x38dcbc0
	struct UEsportsEventsModel* GetEventsModel(); // Function ShooterGame.EsportsManager.GetEventsModel // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc9d0
	struct UEsportsManager* GetEsportsManager(struct UObject* WorldContextObject); // Function ShooterGame.EsportsManager.GetEsportsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x38dc450
	void GetAllTournamentTeams(struct FString LeagueID, struct FString TournamentID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.EsportsManager.GetAllTournamentTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dc260
	void GetActiveTournamentSchedules(struct TArray<struct FString> LeagueIDs, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.EsportsManager.GetActiveTournamentSchedules // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dbea0
	void FetchEsportsSchedule(); // Function ShooterGame.EsportsManager.FetchEsportsSchedule // (Final|Native|Public|BlueprintCallable) // @ game+0x38dbe80
	void FetchEsportsEvents(); // Function ShooterGame.EsportsManager.FetchEsportsEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x38dbe60
};

// Class ShooterGame.EsportsMatchupTeamViewModel
// Size: 0x110 (Inherited: 0x48)
struct UEsportsMatchupTeamViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnMatchupTeamGameWinsUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamMatchWinsUpdated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamMatchLossesUpdated; // 0x68(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamNameUpdated; // 0x78(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamCodeUpdated; // 0x88(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamLogoUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamStateUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnMatchupTeamGameOutcomeUpdated; // 0xb8(0x10)
	int32_t GameWins; // 0xc8(0x04)
	int32_t MatchWins; // 0xcc(0x04)
	int32_t MatchLosses; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct FString Name; // 0xd8(0x10)
	struct FString Code; // 0xe8(0x10)
	struct UEsportsWebImageLoader* Logo; // 0xf8(0x08)
	enum class EMatchupTeamState State; // 0x100(0x01)
	enum class EEsportsGameOutcome Outcome; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)
	struct UTeamModel* Team; // 0x108(0x08)

	void UnBindToModelEvents(); // Function ShooterGame.EsportsMatchupTeamViewModel.UnBindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de760
	void SetTeamState(enum class EMatchupTeamState InState); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamState // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de6c0
	void SetTeamName(struct FString InTeamName); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamName // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de610
	void SetTeamMatchWins(int32_t InMatchWins); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamMatchWins // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de580
	void SetTeamMatchLosses(int32_t InMatchLosses); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamMatchLosses // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de4f0
	void SetTeamLogo(struct UEsportsWebImageLoader* InTeamLogo); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamLogo // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de460
	void SetTeamGameWins(int32_t InGameWins); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamGameWins // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de3d0
	void SetTeamGameOutcome(enum class EEsportsGameOutcome InOutcome); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamGameOutcome // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de350
	void SetTeamCode(struct FString InTeamCode); // Function ShooterGame.EsportsMatchupTeamViewModel.SetTeamCode // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de2a0
	void Refresh(); // Function ShooterGame.EsportsMatchupTeamViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38dd870
	void InitFromMatchupTeam(struct UTeamModel* TeamModel); // Function ShooterGame.EsportsMatchupTeamViewModel.InitFromMatchupTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38dd770
	enum class EMatchupTeamState GetState(); // Function ShooterGame.EsportsMatchupTeamViewModel.GetState // (Final|Native|Public|BlueprintCallable) // @ game+0x37ba700
	void BindToModelEvents(); // Function ShooterGame.EsportsMatchupTeamViewModel.BindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38dbde0
};

// Class ShooterGame.EsportsMatchupViewModel
// Size: 0x98 (Inherited: 0x48)
struct UEsportsMatchupViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnStatusUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSubBracketTypeUpdated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnStartTimeUpdated; // 0x68(0x10)
	enum class EEsportsMatchStatus Status; // 0x78(0x01)
	enum class EEsportsSubBracketType SubBracketType; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
	struct FDateTime StartTime; // 0x80(0x08)
	struct UMatchModel* Match; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	void UnBindToModelEvents(); // Function ShooterGame.EsportsMatchupViewModel.UnBindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38de780
	void SetSubBracketType(enum class EEsportsSubBracketType InSubBracketType); // Function ShooterGame.EsportsMatchupViewModel.SetSubBracketType // (Final|Native|Protected) // @ game+0x38de220
	void SetStatus(enum class EEsportsMatchStatus InStatus); // Function ShooterGame.EsportsMatchupViewModel.SetStatus // (Final|Native|Protected) // @ game+0x38de1a0
	void SetStartTime(struct FDateTime& InStartTime); // Function ShooterGame.EsportsMatchupViewModel.SetStartTime // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x38de110
	void SetIsGrandFinal(bool bInGrandFinal); // Function ShooterGame.EsportsMatchupViewModel.SetIsGrandFinal // (Final|Native|Public) // @ game+0x38de080
	void Refresh(); // Function ShooterGame.EsportsMatchupViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38dd890
	void InitFromMatchup(struct UMatchModel* MatchModel); // Function ShooterGame.EsportsMatchupViewModel.InitFromMatchup // (Final|Native|Public|BlueprintCallable) // @ game+0x38dd6e0
	struct FMatchupTeamViewModelPair CreateMatchupTeamViewModels(); // Function ShooterGame.EsportsMatchupViewModel.CreateMatchupTeamViewModels // (Final|Native|Protected|BlueprintCallable) // @ game+0x38dbe20
	void BindToModelEvents(); // Function ShooterGame.EsportsMatchupViewModel.BindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38dbe00
};

// Class ShooterGame.TeamMemberModel
// Size: 0xb0 (Inherited: 0x30)
struct UTeamMemberModel : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct FString ID; // 0x40(0x10)
	struct FString InGameName; // 0x50(0x10)
	struct FString FirstName; // 0x60(0x10)
	struct FString LastName; // 0x70(0x10)
	struct FString Image; // 0x80(0x10)
	struct UEsportsWebImageLoader* Portrait; // 0x90(0x08)
	struct FString Status; // 0x98(0x10)
	enum class EEsportsTeamMemberRole Role; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class ShooterGame.MatchOutcomeModel
// Size: 0x78 (Inherited: 0x30)
struct UMatchOutcomeModel : UObject {
	struct FString MatchID; // 0x30(0x10)
	struct FString TeamID; // 0x40(0x10)
	enum class EEsportsGameOutcome Outcome; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	int32_t GameWins; // 0x54(0x04)
	char pad_58[0x20]; // 0x58(0x20)
};

// Class ShooterGame.TeamModel
// Size: 0x190 (Inherited: 0x30)
struct UTeamModel : UObject {
	char pad_30[0x40]; // 0x30(0x40)
	struct FString ID; // 0x70(0x10)
	struct FString Name; // 0x80(0x10)
	struct FString Code; // 0x90(0x10)
	struct FString ImageURL; // 0xa0(0x10)
	struct FString AlternativeImageURL; // 0xb0(0x10)
	struct FString BackgroundImageURL; // 0xc0(0x10)
	struct UEsportsWebImageLoader* TeamLogo; // 0xd0(0x08)
	struct UEsportsWebImageLoader* TeamHighResLogo; // 0xd8(0x08)
	struct FString PrimaryColor; // 0xe0(0x10)
	struct FString SecondaryColor; // 0xf0(0x10)
	struct UMatchOutcomeModel* MatchOutcome; // 0x100(0x08)
	struct TArray<struct UTeamMemberModel*> TeamMembers; // 0x108(0x10)
	int32_t NumWins; // 0x118(0x04)
	int32_t NumLosses; // 0x11c(0x04)
	int32_t NumTies; // 0x120(0x04)
	int32_t MatchWins; // 0x124(0x04)
	int32_t MatchLosses; // 0x128(0x04)
	int32_t StandingsPosition; // 0x12c(0x04)
	enum class EEsportsMatchOriginType OriginType; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	int32_t OriginSlot; // 0x134(0x04)
	struct FString OriginStructuralID; // 0x138(0x10)
	struct FString HomeLeagueID; // 0x148(0x10)
	struct FString HomeLeagueName; // 0x158(0x10)
	struct FString HomeLeagueImageURL; // 0x168(0x10)
	struct FString HomeLeagueRegion; // 0x178(0x10)
	enum class EVCTRegion VCTRegion; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
};

// Class ShooterGame.EsportsVideoModel
// Size: 0x90 (Inherited: 0x30)
struct UEsportsVideoModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Locale; // 0x40(0x10)
	struct FString ProviderURL; // 0x50(0x10)
	struct FString MediaLocale; // 0x60(0x10)
	struct FString MediaLocaleEnglishName; // 0x70(0x10)
	struct FString MediaLocaleTranslatedName; // 0x80(0x10)
};

// Class ShooterGame.GameModel
// Size: 0x70 (Inherited: 0x30)
struct UGameModel : UObject {
	struct FString ID; // 0x30(0x10)
	int32_t Number; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct UEsportsVideoModel*> VODs; // 0x48(0x10)
	struct TArray<struct UTeamModel*> Teams; // 0x58(0x10)
	enum class EEsportsMatchStatus Status; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class ShooterGame.MatchStreamModel
// Size: 0x60 (Inherited: 0x30)
struct UMatchStreamModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Locale; // 0x40(0x10)
	struct FString ProviderURL; // 0x50(0x10)
};

// Class ShooterGame.MatchModel
// Size: 0x118 (Inherited: 0x30)
struct UMatchModel : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct FString ID; // 0x60(0x10)
	struct FDateTime StartTime; // 0x70(0x08)
	struct FString StageName; // 0x78(0x10)
	struct FString StageSlug; // 0x88(0x10)
	struct FString Stage; // 0x98(0x10)
	enum class EEsportsMatchStatus Status; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
	struct FString StructuralID; // 0xb0(0x10)
	struct TArray<struct UTeamModel*> Teams; // 0xc0(0x10)
	struct TArray<struct UGameModel*> Games; // 0xd0(0x10)
	struct TArray<struct UEsportsVideoModel*> Streams; // 0xe0(0x10)
	struct FString LeagueName; // 0xf0(0x10)
	struct FString TournamentName; // 0x100(0x10)
	enum class EEsportsSubBracketType SubBracketType; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
};

// Class ShooterGame.TeamRankingModel
// Size: 0x48 (Inherited: 0x30)
struct UTeamRankingModel : UObject {
	int32_t Rank; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct UTeamModel*> Teams; // 0x38(0x10)
};

// Class ShooterGame.GroupStandingModel
// Size: 0x70 (Inherited: 0x30)
struct UGroupStandingModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Name; // 0x40(0x10)
	struct TArray<struct UTeamRankingModel*> Rankings; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)
};

// Class ShooterGame.BracketCellModel
// Size: 0x58 (Inherited: 0x30)
struct UBracketCellModel : UObject {
	struct FString Stage; // 0x30(0x10)
	enum class EEsportsSubBracketType Type; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t RoundNumber; // 0x44(0x04)
	struct TArray<struct FString> MatchIDs; // 0x48(0x10)
};

// Class ShooterGame.BracketColumnModel
// Size: 0x40 (Inherited: 0x30)
struct UBracketColumnModel : UObject {
	struct TArray<struct UBracketCellModel*> Cells; // 0x30(0x10)
};

// Class ShooterGame.BracketStandingModel
// Size: 0x50 (Inherited: 0x30)
struct UBracketStandingModel : UObject {
	struct TArray<struct UBracketColumnModel*> Columns; // 0x30(0x10)
	char pad_40[0x10]; // 0x40(0x10)
};

// Class ShooterGame.TournamentSectionModel
// Size: 0xf8 (Inherited: 0x30)
struct UTournamentSectionModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Name; // 0x40(0x10)
	int32_t SectionIndex; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FString StageName; // 0x58(0x10)
	struct FString StageSlug; // 0x68(0x10)
	int32_t StageIndex; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct UMatchModel*> Matches; // 0x80(0x10)
	struct TMap<struct FString, struct UMatchModel*> MatchupMap; // 0x90(0x50)
	enum class EEsportsSectionType Type; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
	struct UGroupStandingModel* GroupStanding; // 0xe8(0x08)
	struct UBracketStandingModel* BracketStanding; // 0xf0(0x08)
};

// Class ShooterGame.TournamentStandingModel
// Size: 0xd8 (Inherited: 0x30)
struct UTournamentStandingModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Name; // 0x40(0x10)
	struct FDateTime StartTime; // 0x50(0x08)
	struct FDateTime EndTime; // 0x58(0x08)
	struct TMap<struct FString, struct UTournamentSectionModel*> TournamentSections; // 0x60(0x50)
	char pad_B0[0x28]; // 0xb0(0x28)
};

// Class ShooterGame.EventDataModel
// Size: 0xc8 (Inherited: 0x30)
struct UEventDataModel : UObject {
	struct FString LeagueID; // 0x30(0x10)
	struct FString LeagueName; // 0x40(0x10)
	struct FString LeagueSlug; // 0x50(0x10)
	struct FString TournamentID; // 0x60(0x10)
	struct FString TournamentName; // 0x70(0x10)
	struct FString TournamentSlug; // 0x80(0x10)
	struct FString TournamentState; // 0x90(0x10)
	struct FDateTime StartTime; // 0xa0(0x08)
	struct FDateTime EndTime; // 0xa8(0x08)
	struct TArray<struct UMatchModel*> Matches; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)

	struct UMatchModel* GetMatchById(struct FString& MatchID); // Function ShooterGame.EventDataModel.GetMatchById // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38dcb00
};

// Class ShooterGame.EsportsEventsModel
// Size: 0x70 (Inherited: 0x30)
struct UEsportsEventsModel : UObject {
	struct FMulticastInlineDelegate OnEventAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnEventRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEventsUpdated; // 0x50(0x10)
	struct TArray<struct UEsportsEventModel*> Events; // 0x60(0x10)

	void RemoveEvent(struct FString LeagueID, struct FString TournamentID); // Function ShooterGame.EsportsEventsModel.RemoveEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x38dd8b0
	struct TArray<struct UEsportsEventModel*> GetEvents(); // Function ShooterGame.EsportsEventsModel.GetEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc950
	struct UEsportsEventModel* GetEventBySlug(struct FString InTournamentSlug); // Function ShooterGame.EsportsEventsModel.GetEventBySlug // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc680
	struct UEsportsEventModel* GetEventByIDs(struct FString LeagueID, struct FString TournamentID); // Function ShooterGame.EsportsEventsModel.GetEventByIDs // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc4e0
	void AddEvent(struct UEsportsEventModel* EventModel); // Function ShooterGame.EsportsEventsModel.AddEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x38db0f0
};

// Class ShooterGame.EsportsEventModel
// Size: 0x118 (Inherited: 0x30)
struct UEsportsEventModel : UObject {
	struct FMulticastInlineDelegate OnEventDataUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMatchAdded; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMatchRemoved; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMatchesUpdated; // 0x60(0x10)
	struct FMulticastInlineDelegate OnStandingsAdded; // 0x70(0x10)
	struct FMulticastInlineDelegate OnStandingsRemoved; // 0x80(0x10)
	struct FMulticastInlineDelegate OnStandingsUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnTeamAdded; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTeamRemoved; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTeamsUpdated; // 0xc0(0x10)
	struct UEventDataModel* EventData; // 0xd0(0x08)
	struct TArray<struct UMatchModel*> Matches; // 0xd8(0x10)
	struct TArray<struct UTournamentStandingModel*> Standings; // 0xe8(0x10)
	struct TArray<struct UTeamModel*> Teams; // 0xf8(0x10)
	char pad_108[0x10]; // 0x108(0x10)

	void SetEventData(struct UEventDataModel* InEventData); // Function ShooterGame.EsportsEventModel.SetEventData // (Final|Native|Public|BlueprintCallable) // @ game+0x38ddff0
	void RemoveTeam(struct FString TeamID); // Function ShooterGame.EsportsEventModel.RemoveTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38dddf0
	void RemoveStandings(struct FString StandingsID); // Function ShooterGame.EsportsEventModel.RemoveStandings // (Final|Native|Public|BlueprintCallable) // @ game+0x38ddcf0
	void RemoveMatch(struct FString MatchID); // Function ShooterGame.EsportsEventModel.RemoveMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x38ddbf0
	struct UTeamModel* GetTeam(struct FString TeamID); // Function ShooterGame.EsportsEventModel.GetTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38dcf40
	struct UTournamentStandingModel* GetStandings(struct FString StandingsID); // Function ShooterGame.EsportsEventModel.GetStandings // (Final|Native|Public|BlueprintCallable) // @ game+0x38dce40
	struct UMatchModel* GetMatch(struct FString MatchID); // Function ShooterGame.EsportsEventModel.GetMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x38dca00
	struct UEventDataModel* GetEventData(); // Function ShooterGame.EsportsEventModel.GetEventData // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc780
	struct TArray<struct UTeamModel*> GetAllTeams(); // Function ShooterGame.EsportsEventModel.GetAllTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc1e0
	struct TArray<struct UTournamentStandingModel*> GetAllStandings(); // Function ShooterGame.EsportsEventModel.GetAllStandings // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc160
	struct TArray<struct UMatchModel*> GetAllMatches(); // Function ShooterGame.EsportsEventModel.GetAllMatches // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc0e0
	void AddTeam(struct FTeamDTO InTeam); // Function ShooterGame.EsportsEventModel.AddTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38dba60
	void AddStandings(struct FTournamentStandingDTO InStandings); // Function ShooterGame.EsportsEventModel.AddStandings // (Final|Native|Public|BlueprintCallable) // @ game+0x38db750
	void AddMatch(struct FMatchDTO InMatch); // Function ShooterGame.EsportsEventModel.AddMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x38db180
};

// Class ShooterGame.EsportsMainScheduleModel
// Size: 0x70 (Inherited: 0x30)
struct UEsportsMainScheduleModel : UObject {
	struct FMulticastInlineDelegate OnScheduleAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnScheduleRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnScheduleUpdated; // 0x50(0x10)
	struct TArray<struct UEventDataModel*> EventScheduleList; // 0x60(0x10)

	void SetEsportsScheduleEntries(struct TArray<struct UEventDataModel*> ScheduleEntries); // Function ShooterGame.EsportsMainScheduleModel.SetEsportsScheduleEntries // (Final|Native|Public|BlueprintCallable) // @ game+0x38ddef0
	void RemoveEventSchedule(struct FString LeagueID, struct FString TournamentID); // Function ShooterGame.EsportsMainScheduleModel.RemoveEventSchedule // (Final|Native|Public|BlueprintCallable) // @ game+0x38dda50
	struct TArray<struct UEventDataModel*> GetEventScheduleList(); // Function ShooterGame.EsportsMainScheduleModel.GetEventScheduleList // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc950
	struct UEventDataModel* GetEventScheduleByIDs(struct FString LeagueID, struct FString TournamentID); // Function ShooterGame.EsportsMainScheduleModel.GetEventScheduleByIDs // (Final|Native|Public|BlueprintCallable) // @ game+0x38dc7b0
	void AddEventSchedule(struct UEventDataModel* EventDataModel); // Function ShooterGame.EsportsMainScheduleModel.AddEventSchedule // (Final|Native|Public|BlueprintCallable) // @ game+0x38db0f0
};

// Class ShooterGame.EsportsRoundRobinViewModel
// Size: 0xb8 (Inherited: 0x48)
struct UEsportsRoundRobinViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnViewRefreshed; // 0x48(0x10)
	struct FMulticastInlineDelegate OnRoundRobinRankingsUpdated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnRoundRobinTeamAdvanced; // 0x68(0x10)
	struct TArray<struct UMatchModel*> RoundRobinMatches; // 0x78(0x10)
	struct TArray<struct UTeamModel*> RoundRobinTeams; // 0x88(0x10)
	struct TArray<struct UTeamRankingModel*> Rankings; // 0x98(0x10)
	struct UTournamentSectionModel* TournamentSection; // 0xa8(0x08)
	char pad_B0[0x8]; // 0xb0(0x08)

	void UnBindToModelEvents(); // Function ShooterGame.EsportsRoundRobinViewModel.UnBindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e8680
	void SetRankings(struct TArray<struct UTeamRankingModel*>& InRankings); // Function ShooterGame.EsportsRoundRobinViewModel.SetRankings // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x38e7d00
	void Refresh(); // Function ShooterGame.EsportsRoundRobinViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38e7220
	void InitWtihTournamentSection(struct UTournamentSectionModel* TournamentSectionModel); // Function ShooterGame.EsportsRoundRobinViewModel.InitWtihTournamentSection // (Final|Native|Public|BlueprintCallable) // @ game+0x38e7190
	struct FRoundRobinMatchupViewModels CreateMatchupViewModels(); // Function ShooterGame.EsportsRoundRobinViewModel.CreateMatchupViewModels // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e6d30
	struct FRoundRobinMatchupTeamViewModels CreateMatchupTeamViewModels(); // Function ShooterGame.EsportsRoundRobinViewModel.CreateMatchupTeamViewModels // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e6cf0
	void CheckAdvancement(); // Function ShooterGame.EsportsRoundRobinViewModel.CheckAdvancement // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e6cd0
	void BindToModelEvents(); // Function ShooterGame.EsportsRoundRobinViewModel.BindToModelEvents // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e6cb0
};

// Class ShooterGame.EsportsScheduleEntryListViewModel
// Size: 0x2b8 (Inherited: 0x48)
struct UEsportsScheduleEntryListViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnScheduleUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnTeamFilterApplied; // 0x58(0x10)
	struct FMulticastInlineDelegate OnNoMoreItemsToLoad; // 0x68(0x10)
	struct FMulticastInlineDelegate OnNoMoreNextItemsToLoad; // 0x78(0x10)
	struct FMulticastInlineDelegate OnNoMorePrevItemsToLoad; // 0x88(0x10)
	struct FMulticastInlineDelegate OnWidgetToScrollTo; // 0x98(0x10)
	struct FMulticastInlineDelegate OnFilterApplied; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnEventsPageFilterApplied; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnClientScheduleSizeUpdated; // 0xc8(0x10)
	struct UEsportsMainScheduleModel* ScheduleModel; // 0xd8(0x08)
	char pad_E0[0x1d8]; // 0xe0(0x1d8)

	void UpdateSchedule(struct TArray<struct FString> LeagueIDs, struct TArray<struct FString> TournamentIDs); // Function ShooterGame.EsportsScheduleEntryListViewModel.UpdateSchedule // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e86a0
	void SetFilterActive(bool bIsFilterActive); // Function ShooterGame.EsportsScheduleEntryListViewModel.SetFilterActive // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e79f0
	void RequestScrollToWidget(); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestScrollToWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e78d0
	void RequestPreviousItems(); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestPreviousItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e78b0
	void RequestNextItems(); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestNextItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e7890
	void RequestNewFilter(struct TSet<enum class EVCTTournament> TournamentIDs, struct TSet<enum class EVCTLeague> LeagueIDs, struct TSet<enum class EEsportsMatchStatus> TournamentStatuses); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestNewFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x38e7460
	void RequestIsClientScheduleSizeGreaterThanMaxScheduleSize(); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestIsClientScheduleSizeGreaterThanMaxScheduleSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e7440
	void RequestFilterLeagueID(struct FString LeagueID, bool bShouldShow); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestFilterLeagueID // (Final|Native|Public|BlueprintCallable) // @ game+0x38e72f0
	void RequestDesiredScheduleSize(int32_t InDesiredScheduleSize); // Function ShooterGame.EsportsScheduleEntryListViewModel.RequestDesiredScheduleSize // (Final|Native|Public|BlueprintCallable) // @ game+0x38e7260
	void Refresh(); // Function ShooterGame.EsportsScheduleEntryListViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38e7240
	void Init(); // Function ShooterGame.EsportsScheduleEntryListViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x38e70e0
	void HandleScheduleChanged(struct TArray<struct UEventDataModel*> ScheduleEntries); // Function ShooterGame.EsportsScheduleEntryListViewModel.HandleScheduleChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x38e6fe0
	void GetUpcomingMatchesForTeam(struct UTeamModel* TeamToInclude); // Function ShooterGame.EsportsScheduleEntryListViewModel.GetUpcomingMatchesForTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38e6f50
	void GetScheduleForLeagueEventsPage(struct FString LeagueID, struct FString TournamentID, int32_t NumEventsToShow); // Function ShooterGame.EsportsScheduleEntryListViewModel.GetScheduleForLeagueEventsPage // (Final|Native|Public|BlueprintCallable) // @ game+0x38e6d70
};

// Class ShooterGame.EsportsScheduleEntryViewModel
// Size: 0x1c8 (Inherited: 0x48)
struct UEsportsScheduleEntryViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnGameWinsUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnTeamNameUpdated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnTeamCodeUpdated; // 0x68(0x10)
	struct FMulticastInlineDelegate OnMatchStartTimeUpdated; // 0x78(0x10)
	struct FMulticastInlineDelegate OnTournamentNameUpdated; // 0x88(0x10)
	struct FMulticastInlineDelegate OnStageNameUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnMatchStatusUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnTeamLogoUpdated; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnWinningTeamUpdated; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnVctLeagueUpdated; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnProviderURLUpdated; // 0xe8(0x10)
	enum class EEsportsMatchStatus MatchStatus; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct FString LeftTeamID; // 0x100(0x10)
	struct FString RightTeamID; // 0x110(0x10)
	int32_t LeftTeamGameScore; // 0x120(0x04)
	int32_t RightTeamGameScore; // 0x124(0x04)
	struct FString LeftTeamName; // 0x128(0x10)
	struct FString RightTeamName; // 0x138(0x10)
	struct FString LeftTeamCode; // 0x148(0x10)
	struct FString RightTeamCode; // 0x158(0x10)
	struct FString TournamentName; // 0x168(0x10)
	struct FString TournamentStageName; // 0x178(0x10)
	struct FDateTime MatchStartTime; // 0x188(0x08)
	struct UEsportsWebImageLoader* LeftTeamLogo; // 0x190(0x08)
	struct UEsportsWebImageLoader* RightTeamLogo; // 0x198(0x08)
	struct FString LeagueSlug; // 0x1a0(0x10)
	char pad_1B0[0x18]; // 0x1b0(0x18)

	void SetWinningTeam(int32_t TeamOneScore, int32_t TeamTwoScore); // Function ShooterGame.EsportsScheduleEntryViewModel.SetWinningTeam // (Final|Native|Private) // @ game+0x38e85b0
	void SetVCTLeague(struct FString NewLeagueSlug); // Function ShooterGame.EsportsScheduleEntryViewModel.SetVCTLeague // (Final|Native|Private) // @ game+0x38e84b0
	void SetTournamentName(struct FString TournamentID, struct FString NewTournamentName); // Function ShooterGame.EsportsScheduleEntryViewModel.SetTournamentName // (Final|Native|Private) // @ game+0x38e8310
	void SetTeamName(struct FString TeamName, int32_t Index); // Function ShooterGame.EsportsScheduleEntryViewModel.SetTeamName // (Final|Native|Private) // @ game+0x38e81e0
	void SetTeamLogo(struct UEsportsWebImageLoader* NewTeamLogo, int32_t Index); // Function ShooterGame.EsportsScheduleEntryViewModel.SetTeamLogo // (Final|Native|Private) // @ game+0x38e8110
	void SetTeamCode(struct FString TeamCode, int32_t Index); // Function ShooterGame.EsportsScheduleEntryViewModel.SetTeamCode // (Final|Native|Private) // @ game+0x38e7fe0
	void SetStageName(struct FString MatchID, struct FString NewTournamentStageName); // Function ShooterGame.EsportsScheduleEntryViewModel.SetStageName // (Final|Native|Private) // @ game+0x38e7e40
	void SetScheduleEntry(struct UEventDataModel* NewScheduleEntry); // Function ShooterGame.EsportsScheduleEntryViewModel.SetScheduleEntry // (Final|Native|Private) // @ game+0x38e7db0
	void SetMatchStatus(enum class EEsportsMatchStatus NewMatchStatus); // Function ShooterGame.EsportsScheduleEntryViewModel.SetMatchStatus // (Final|Native|Private) // @ game+0x38e7c80
	void SetMatchStartTime(struct FString MatchID, struct FDateTime StartTime); // Function ShooterGame.EsportsScheduleEntryViewModel.SetMatchStartTime // (Final|Native|Private|HasDefaults) // @ game+0x38e7b50
	void SetGameWinsForTeam(int32_t GameWins, int32_t Index); // Function ShooterGame.EsportsScheduleEntryViewModel.SetGameWinsForTeam // (Final|Native|Private) // @ game+0x38e7a80
	void RequestStreamUrl(struct FString Locale); // Function ShooterGame.EsportsScheduleEntryViewModel.RequestStreamUrl // (Final|Native|Public|BlueprintCallable) // @ game+0x38e78f0
	void InitFromScheduleEntry(struct UEventDataModel* NewScheduleEntry); // Function ShooterGame.EsportsScheduleEntryViewModel.InitFromScheduleEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x38e7100
};

// Class ShooterGame.EsportsService
// Size: 0x48 (Inherited: 0x30)
struct UEsportsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class ShooterGame.EsportsTeamMemberViewModel
// Size: 0xd0 (Inherited: 0x48)
struct UEsportsTeamMemberViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnInGameNameUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnFullNameUpdated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnRoleUpdated; // 0x68(0x10)
	struct FMulticastInlineDelegate OnPortraitUpdated; // 0x78(0x10)
	struct UTeamMemberModel* TeamMember; // 0x88(0x08)
	struct FString InGameName; // 0x90(0x10)
	struct FString FirstName; // 0xa0(0x10)
	struct FString LastName; // 0xb0(0x10)
	struct UEsportsWebImageLoader* Portrait; // 0xc0(0x08)
	enum class EEsportsTeamMemberRole Role; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)

	void SetRole(enum class EEsportsTeamMemberRole InTeamMemberRole); // Function ShooterGame.EsportsTeamMemberViewModel.SetRole // (Final|Native|Private) // @ game+0x38f0670
	void SetPortrait(struct UEsportsWebImageLoader* InPortrait); // Function ShooterGame.EsportsTeamMemberViewModel.SetPortrait // (Final|Native|Private) // @ game+0x38f03e0
	void SetInGameName(struct FString InIGN); // Function ShooterGame.EsportsTeamMemberViewModel.SetInGameName // (Final|Native|Private) // @ game+0x38f0080
	void SetFirstAndLastName(struct FString InFirstName, struct FString InLastName); // Function ShooterGame.EsportsTeamMemberViewModel.SetFirstAndLastName // (Final|Native|Private) // @ game+0x38efe50
	void InitFromModel(struct UTeamMemberModel* TeamMemberModel); // Function ShooterGame.EsportsTeamMemberViewModel.InitFromModel // (Final|Native|Public|BlueprintCallable) // @ game+0x38ef350
};

// Class ShooterGame.EsportsTeamsRegionDropdownListViewModel
// Size: 0x170 (Inherited: 0x48)
struct UEsportsTeamsRegionDropdownListViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnTeamsListUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnTeamSelected; // 0x58(0x10)
	struct UEsportsEventsModel* EventsModel; // 0x68(0x08)
	struct TArray<struct UEsportsEventModel*> Events; // 0x70(0x10)
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct UTeamModel* CurrentSelectedTeam; // 0x88(0x08)
	char pad_90[0xe0]; // 0x90(0xe0)

	void SortTeamListAlphabetically(struct TArray<struct UTeamModel*>& TeamArrayToSort); // Function ShooterGame.EsportsTeamsRegionDropdownListViewModel.SortTeamListAlphabetically // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38f0d00
	void SetSelectedTeamFromName(struct FString SelectedTeamName); // Function ShooterGame.EsportsTeamsRegionDropdownListViewModel.SetSelectedTeamFromName // (Final|Native|Public|BlueprintCallable) // @ game+0x38f0980
	void SetSelectedTeam(struct UTeamModel* SelectedTeam); // Function ShooterGame.EsportsTeamsRegionDropdownListViewModel.SetSelectedTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x38f08f0
	void Refresh(); // Function ShooterGame.EsportsTeamsRegionDropdownListViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38ef780
	void Init(); // Function ShooterGame.EsportsTeamsRegionDropdownListViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x38ef330
	void HandleTeamsUpdated(struct TArray<struct UTeamModel*>& Teams); // Function ShooterGame.EsportsTeamsRegionDropdownListViewModel.HandleTeamsUpdated // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x38ef1f0
};

// Class ShooterGame.EsportsTeamViewModel
// Size: 0x168 (Inherited: 0x48)
struct UEsportsTeamViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnTeamNameUpdated; // 0x48(0x10)
	struct FMulticastInlineDelegate OnTeamCodeUpdated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLogoUpdated; // 0x68(0x10)
	struct FMulticastInlineDelegate OnPrimaryColorUpdated; // 0x78(0x10)
	struct FMulticastInlineDelegate OnSecondaryColorUpdated; // 0x88(0x10)
	struct FMulticastInlineDelegate OnTeamRosterUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnRegionNameUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnMatchRecordUpdated; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnStandingsPositionUpdated; // 0xc8(0x10)
	struct UTeamModel* TeamModel; // 0xd8(0x08)
	struct FText Name; // 0xe0(0x18)
	struct FText Code; // 0xf8(0x18)
	struct UEsportsWebImageLoader* Logo; // 0x110(0x08)
	struct FString PrimaryColor; // 0x118(0x10)
	struct FString SecondaryColor; // 0x128(0x10)
	struct FString RegionName; // 0x138(0x10)
	struct TArray<struct UTeamMemberModel*> Roster; // 0x148(0x10)
	int32_t MatchWins; // 0x158(0x04)
	int32_t MatchLosses; // 0x15c(0x04)
	int32_t StandingsPosition; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)

	void SetStandingsPosition(int32_t NewPosition); // Function ShooterGame.EsportsTeamViewModel.SetStandingsPosition // (Final|Native|Protected) // @ game+0x38f0a80
	void SetSecondaryColor(struct FString NewColor); // Function ShooterGame.EsportsTeamViewModel.SetSecondaryColor // (Final|Native|Protected) // @ game+0x38f07f0
	void SetRoster(struct TArray<struct UTeamMemberModel*> NewRoster); // Function ShooterGame.EsportsTeamViewModel.SetRoster // (Final|Native|Protected) // @ game+0x38f06f0
	void SetRegionName(struct FString NewRegionName); // Function ShooterGame.EsportsTeamViewModel.SetRegionName // (Final|Native|Protected) // @ game+0x38f0570
	void SetPrimaryColor(struct FString NewColor); // Function ShooterGame.EsportsTeamViewModel.SetPrimaryColor // (Final|Native|Protected) // @ game+0x38f0470
	void SetName(struct FString NewName); // Function ShooterGame.EsportsTeamViewModel.SetName // (Final|Native|Protected) // @ game+0x38f02e0
	void SetMatchRecord(int32_t NewMatchWins, int32_t NewMatchLosses); // Function ShooterGame.EsportsTeamViewModel.SetMatchRecord // (Final|Native|Protected) // @ game+0x38f0210
	void SetLogo(struct UEsportsWebImageLoader* NewLogo); // Function ShooterGame.EsportsTeamViewModel.SetLogo // (Final|Native|Protected) // @ game+0x38f0180
	void SetCode(struct FString NewCode); // Function ShooterGame.EsportsTeamViewModel.SetCode // (Final|Native|Protected) // @ game+0x38efc60
	void Refresh(); // Function ShooterGame.EsportsTeamViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x38ef760
	void Init(struct UTeamModel* Model); // Function ShooterGame.EsportsTeamViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x38ef2a0
};

// Class ShooterGame.EsportsTelemetryManager
// Size: 0x68 (Inherited: 0x30)
struct UEsportsTelemetryManager : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct URSOManager* RSOManager; // 0x40(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x48(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x50(0x08)
	struct UConfigManager* ConfigManager; // 0x58(0x08)
	struct UEsportsManager* EsportsManager; // 0x60(0x08)

	void SendUrlClickEvent(struct FString URL, struct FString TeamOneName, struct FString TeamTwoName, struct FString TournamentStage); // Function ShooterGame.EsportsTelemetryManager.SendUrlClickEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x38ef7a0
	struct UEsportsTelemetryManager* Make(struct URSOManager* RSOManager, struct UPlatformSessionManager* SessionManager, struct UTelemetryManager* TelemetryManager, struct UConfigManager* ConfigManager, struct UEsportsManager* EsportsManager); // Function ShooterGame.EsportsTelemetryManager.Make // (Final|Native|Static|Public) // @ game+0x38ef3e0
	struct UEsportsTelemetryManager* GetEsportsTelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.EsportsTelemetryManager.GetEsportsTelemetryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x38ef130
	struct UEsportsTelemetryManager* GET(struct UWorld* FromWorld); // Function ShooterGame.EsportsTelemetryManager.GET // (Final|Native|Static|Public) // @ game+0x38ef0a0
};

// Class ShooterGame.EsportsWebImageLoader
// Size: 0xb0 (Inherited: 0x30)
struct UEsportsWebImageLoader : UObject {
	char pad_30[0x80]; // 0x30(0x80)
};

// Class ShooterGame.EULAManager
// Size: 0xe8 (Inherited: 0x80)
struct UEULAManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UEULAService* EULAService; // 0x90(0x08)
	char pad_98[0x50]; // 0x98(0x50)

	void TryInitUserEULAFlow(); // Function ShooterGame.EULAManager.TryInitUserEULAFlow // (Final|Native|Public|BlueprintCallable) // @ game+0x38f0db0
};

// Class ShooterGame.EULAService
// Size: 0x38 (Inherited: 0x30)
struct UEULAService : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.EventUIData
// Size: 0xa8 (Inherited: 0x90)
struct UEventUIData : UBaseContentUIData {
	struct FText ShortDisplayName; // 0x90(0x18)
};

// Class ShooterGame.EventDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UEventDataAsset : UAresBasePrimaryDataAsset {
	struct FDateTime StartTime; // 0x50(0x08)
	struct FDateTime EndTime; // 0x58(0x08)
	struct TSoftClassPtr<UObject> UIData; // 0x60(0x30)
	struct TSoftClassPtr<UObject> BannerWidget; // 0x90(0x30)
};

// Class ShooterGame.ExitGameScreen
// Size: 0x2e0 (Inherited: 0x2e0)
struct UExitGameScreen : UAresContextMenuBaseWidget {

	void OnMenuStackEntryCreated(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.ExitGameScreen.OnMenuStackEntryCreated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ExploitCorpseStateComponent
// Size: 0x2e0 (Inherited: 0x2e0)
struct UExploitCorpseStateComponent : UScriptStateComponent {
};

// Class ShooterGame.ExpressionEquipSlotDataAsset
// Size: 0x58 (Inherited: 0x50)
struct UExpressionEquipSlotDataAsset : UAresBasePrimaryDataAsset {
	int32_t SlotOrder; // 0x50(0x04)
	int32_t ExpressionCategoriesAllowed; // 0x54(0x04)
};

// Class ShooterGame.ExternalResourceComponent
// Size: 0x168 (Inherited: 0x158)
struct UExternalResourceComponent : UAbilityResourceComponent {
	enum class EAresItemSlot ExternalSlot; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct UResourceComponent* CachedExternalResource; // 0x160(0x08)

	struct UResourceComponent* GetExternalResource(); // Function ShooterGame.ExternalResourceComponent.GetExternalResource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38ef1c0
	void ExternalResourceChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.ExternalResourceComponent.ExternalResourceChanged // (Final|Native|Private) // @ game+0x3636550
};

// Class ShooterGame.ExternalUserAction
// Size: 0xb8 (Inherited: 0xa8)
struct UExternalUserAction : UEditableUserActionBase {
	struct FMulticastInlineDelegate OnTriggered; // 0xa8(0x10)

	void UnbindOnTriggered(struct FDelegate& Delegate); // Function ShooterGame.ExternalUserAction.UnbindOnTriggered // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x38f0dd0
	void SetText(struct FText NewValue); // Function ShooterGame.ExternalUserAction.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0x38f0c10
	void SetStyles(struct TArray<struct FName> NewValue); // Function ShooterGame.ExternalUserAction.SetStyles // (Final|Native|Public|BlueprintCallable) // @ game+0x38f0b10
	void SetIconTexture(struct UTexture2D* NewValue); // Function ShooterGame.ExternalUserAction.SetIconTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x38efff0
	void SetDescription(struct FText NewValue); // Function ShooterGame.ExternalUserAction.SetDescription // (Final|Native|Public|BlueprintCallable) // @ game+0x38efd60
	void SetActionState(enum class EUserActionState NewValue); // Function ShooterGame.ExternalUserAction.SetActionState // (Final|Native|Public|BlueprintCallable) // @ game+0x38efbe0
	void SetActionDisplayInfo(struct FUserActionDisplayInfo& NewValue); // Function ShooterGame.ExternalUserAction.SetActionDisplayInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38efa90
	void OnTriggeredMulticastDelegate__DelegateSignature(struct UExternalUserAction* Source, struct FWildcard& Data, enum class EUserActionTriggerResponse& Response); // DelegateFunction ShooterGame.ExternalUserAction.OnTriggeredMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x40572e0
	void OnTriggeredDelegate__DelegateSignature(struct UExternalUserAction* Source, struct FWildcard& Data, enum class EUserActionTriggerResponse& Response); // DelegateFunction ShooterGame.ExternalUserAction.OnTriggeredDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x40572e0
	struct UExternalUserAction* Make(struct UObject* Outer, struct FUserActionDisplayInfo& InActionDisplayInfo, enum class EUserActionState InActionState); // Function ShooterGame.ExternalUserAction.Make // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38ef570
	void BindOnTriggered(struct FDelegate& Delegate); // Function ShooterGame.ExternalUserAction.BindOnTriggered // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x38eefe0
};

// Class ShooterGame.FaceAimFiringAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceAimFiringAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceAimingAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceAimingAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceDeadAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceDeadAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceFiringAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceFiringAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceHitAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceHitAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceIdleAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceIdleAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceMeleeAttackingAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceMeleeAttackingAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FallLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UFallLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.FallUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UFallUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.FalloffMultiplierDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UFalloffMultiplierDamageQuery : UInterface {

	float GetFalloffMultiplier(); // Function ShooterGame.FalloffMultiplierDamageQuery.GetFalloffMultiplier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f90d0
};

// Class ShooterGame.FavoritesManager
// Size: 0x1b0 (Inherited: 0x80)
struct UFavoritesManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	bool bIsInitComplete; // 0x98(0x01)
	bool bIsSkinConversionInProgress; // 0x99(0x01)
	bool bIsSkinConversionComplete; // 0x9a(0x01)
	char pad_9B[0x35]; // 0x9b(0x35)
	struct FPlayerFavorites PersistedFavorites; // 0xd0(0x60)
	struct TMap<struct FGuid, enum class EFavoritesActionType> PendingFavoritesChanges; // 0x130(0x50)
	struct UFavoritesService* FavoritesService; // 0x180(0x08)
	struct UContentIndex* ContentIndex; // 0x188(0x08)
	struct UConfigManager* ConfigManager; // 0x190(0x08)
	char pad_198[0x8]; // 0x198(0x08)
	struct URSOManager* RSOManager; // 0x1a0(0x08)
	struct UDeferredOperation* SubmitFavoritesOperation; // 0x1a8(0x08)

	void SubmitPendingFavorites(); // Function ShooterGame.FavoritesManager.SubmitPendingFavorites // (Final|Native|Private) // @ game+0x38f9a40
	void SetAsFavorite(struct UAresBasePrimaryDataAsset* Asset); // Function ShooterGame.FavoritesManager.SetAsFavorite // (Final|Native|Public|BlueprintCallable) // @ game+0x38f98f0
	void ScheduleSubmitFavoritesTimer(); // Function ShooterGame.FavoritesManager.ScheduleSubmitFavoritesTimer // (Final|Native|Private) // @ game+0x38f98d0
	void RemoveAsFavorite(struct UAresBasePrimaryDataAsset* Asset); // Function ShooterGame.FavoritesManager.RemoveAsFavorite // (Final|Native|Public|BlueprintCallable) // @ game+0x38f9840
	void RefreshCurrentFavorites(); // Function ShooterGame.FavoritesManager.RefreshCurrentFavorites // (Final|Native|Public|BlueprintCallable) // @ game+0x38f9820
	void ModifyFavorites(struct TArray<struct FGuid> FavoritesToAdd, struct TArray<struct FGuid> FavoritesToRemove); // Function ShooterGame.FavoritesManager.ModifyFavorites // (Final|Native|Private) // @ game+0x38f96a0
	void FinalizeSkinConversionSuccess(); // Function ShooterGame.FavoritesManager.FinalizeSkinConversionSuccess // (Final|Native|Private) // @ game+0x38f8f30
	void FinalizeSkinConversionFailure(); // Function ShooterGame.FavoritesManager.FinalizeSkinConversionFailure // (Final|Native|Private) // @ game+0x38f8f10
	void FinalizeSkinConversion(bool bErrorOccurred); // Function ShooterGame.FavoritesManager.FinalizeSkinConversion // (Final|Native|Private) // @ game+0x38f8e80
	void FinalizeInit(enum class EPlatformInitErrorReason ErrorReason); // Function ShooterGame.FavoritesManager.FinalizeInit // (Final|Native|Private) // @ game+0x38f8e00
	void DeleteFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.DeleteFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x38f8d60
	void CreateFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.CreateFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x38f8cc0
	void ConvertSkinFavoritesToChromas(struct UInventoryManager* InventoryManager); // Function ShooterGame.FavoritesManager.ConvertSkinFavoritesToChromas // (Final|Native|Public|BlueprintCallable) // @ game+0x38f8ab0
	void BroadcastRemoveFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.BroadcastRemoveFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x38f88f0
	void BroadcastRefreshedFavorites(struct FPlayerFavorites& UpdatedFavorites, struct FPlayerFavorites& OldFavorites); // Function ShooterGame.FavoritesManager.BroadcastRefreshedFavorites // (Final|Native|Private|HasOutParms) // @ game+0x38f86a0
	void BroadcastAddFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.BroadcastAddFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x38f8600
	bool AreFavoritesEnabled(); // Function ShooterGame.FavoritesManager.AreFavoritesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f8510
	bool AreChromaFavoritesEnabled(); // Function ShooterGame.FavoritesManager.AreChromaFavoritesEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x38f84e0
};

// Class ShooterGame.FavoritesService
// Size: 0x38 (Inherited: 0x30)
struct UFavoritesService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.FeedingDetectionComponent
// Size: 0x120 (Inherited: 0xe8)
struct UFeedingDetectionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnFeedingStatusChanged; // 0xe8(0x10)
	bool bIsFeeding; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct AShooterPlayerState* OwningShooterPlayer; // 0x100(0x08)
	struct AShooterGameState* GameState; // 0x108(0x08)
	struct FShooterGameTimeMarker MostRecentFeedStartTime; // 0x110(0x0c)
	bool IsInFeedPeriod; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)

	bool GetIsFeeding(); // Function ShooterGame.FeedingDetectionComponent.GetIsFeeding // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f91e0
	float GetCurrentFeedingPeriodInSeconds(); // Function ShooterGame.FeedingDetectionComponent.GetCurrentFeedingPeriodInSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x38821e0
	void FeedingPeriodStart(); // Function ShooterGame.FeedingDetectionComponent.FeedingPeriodStart // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void FeedingPeriodReset(); // Function ShooterGame.FeedingDetectionComponent.FeedingPeriodReset // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.IntentionalFeedingDetectionComponent
// Size: 0x128 (Inherited: 0x120)
struct UIntentionalFeedingDetectionComponent : UFeedingDetectionComponent {
	float PlayerFeedingThreshold; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)

	float GetPlayerFeedingThreshold(); // Function ShooterGame.IntentionalFeedingDetectionComponent.GetPlayerFeedingThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888cf0
};

// Class ShooterGame.BaseCombatReportComponent
// Size: 0x118 (Inherited: 0xe8)
struct UBaseCombatReportComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnCharacterCombatReportDirtied; // 0xf0(0x10)
	struct UExtendedCharacterCombatReport* AuthCurrentReport; // 0x100(0x08)
	struct TArray<struct FRoundReports> Rounds; // 0x108(0x10)

	void ResetCharacterRoundReports(int32_t RoundNum); // Function ShooterGame.BaseCombatReportComponent.ResetCharacterRoundReports // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void OnRep_Rounds(); // Function ShooterGame.BaseCombatReportComponent.OnRep_Rounds // (Native|Protected) // @ game+0x3654e70
	struct FRoundReports GetOrCreateReportForRound(int32_t RoundNum); // Function ShooterGame.BaseCombatReportComponent.GetOrCreateReportForRound // (Final|Native|Public|BlueprintCallable) // @ game+0x38f9230
	struct UExtendedCharacterCombatReport* GetCurrentCombatReport(); // Function ShooterGame.BaseCombatReportComponent.GetCurrentCombatReport // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f8f50
};

// Class ShooterGame.ReplicatedObject
// Size: 0x30 (Inherited: 0x30)
struct UReplicatedObject : UObject {

	struct AActor* GetOwningActor(); // Function ShooterGame.ReplicatedObject.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c589d0
	void Destroy(); // Function ShooterGame.ReplicatedObject.Destroy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3c58450
};

// Class ShooterGame.ExtendedCharacterCombatReport
// Size: 0x100 (Inherited: 0x30)
struct UExtendedCharacterCombatReport : UReplicatedObject {
	int32_t RoundNumber; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FRoundTimestamp LastInteractionTimestamp; // 0x38(0x18)
	struct FCharacterCombatReportAggregate AggregatedCombatDetails; // 0x50(0x18)
	struct TMap<struct AShooterPlayerState*, struct UPlayerEncounterSummary*> EncountersMap; // 0x68(0x50)
	struct FCombatReportDeathDetails DeathDetails; // 0xb8(0x28)
	struct FCombatReportRespawnInfo RespawnInfo; // 0xe0(0x20)

	struct UPlayerEncounterSummary* GetLastEncounter(); // Function ShooterGame.ExtendedCharacterCombatReport.GetLastEncounter // (Final|Native|Public|BlueprintCallable) // @ game+0x38f9200
	struct UPlayerEncounterSummary* GetEncounterWithPlayerSummary(struct AShooterPlayerState* OtherPlayer, struct FRoundTimestamp& Timestamp); // Function ShooterGame.ExtendedCharacterCombatReport.GetEncounterWithPlayerSummary // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38f8fe0
	void ClientRPCUpdateAggregatedReport(struct FCharacterCombatReportAggregate AggregatedReport); // Function ShooterGame.ExtendedCharacterCombatReport.ClientRPCUpdateAggregatedReport // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x38f8990
};

// Class ShooterGame.FFACharacterCombatReport
// Size: 0x100 (Inherited: 0x100)
struct UFFACharacterCombatReport : UExtendedCharacterCombatReport {
};

// Class ShooterGame.PlayerEncounterSummary
// Size: 0xe0 (Inherited: 0x30)
struct UPlayerEncounterSummary : UReplicatedObject {
	struct AShooterPlayerState* ParticipantInfo; // 0x30(0x08)
	int32_t CombatReportIndex; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRoundTimestamp LastInteractionTime; // 0x40(0x18)
	struct FRoundTimestamp FirstInteractionTime; // 0x58(0x18)
	struct TArray<struct UAssistInteraction*> AssistInteractions; // 0x70(0x10)
	struct TArray<struct UEncounterInteraction*> Interactions; // 0x80(0x10)
	struct TMap<struct AAresEquippable*, int32_t> ShotsByEquippable; // 0x90(0x50)

	int32_t GetHitsByEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.PlayerEncounterSummary.GetHitsByEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x38f9140
	int32_t GetHits(); // Function ShooterGame.PlayerEncounterSummary.GetHits // (Final|Native|Public|BlueprintCallable) // @ game+0x38f9110
	float GetEncounterDuration(); // Function ShooterGame.PlayerEncounterSummary.GetEncounterDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x38f8fb0
	float GetDamageDealt(); // Function ShooterGame.PlayerEncounterSummary.GetDamageDealt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f8f80
};

// Class ShooterGame.EncounterInteraction
// Size: 0x60 (Inherited: 0x30)
struct UEncounterInteraction : UObject {
	struct FRoundTimestamp StartTime; // 0x30(0x18)
	struct FRoundTimestamp EndTime; // 0x48(0x18)
};

// Class ShooterGame.AssistInteraction
// Size: 0x70 (Inherited: 0x60)
struct UAssistInteraction : UEncounterInteraction {
	enum class EAresAssistType AssistType; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct AShooterPlayerState* ParticipantKillerState; // 0x68(0x08)
};

// Class ShooterGame.DamageInteraction
// Size: 0x98 (Inherited: 0x60)
struct UDamageInteraction : UEncounterInteraction {
	struct UShooterDamageType* DamageType; // 0x60(0x08)
	struct TArray<struct FNonRegionalDamageInteraction> NonRegionalDamageInteractions; // 0x68(0x10)
	struct TArray<struct FNonRegionalDamageInteraction> BlockedDamageInteractions; // 0x78(0x10)
	struct TArray<struct FRegionalDamageInteraction> RegionalDamageInteractions; // 0x88(0x10)
};

// Class ShooterGame.DealtDamageInteraction
// Size: 0x98 (Inherited: 0x98)
struct UDealtDamageInteraction : UDamageInteraction {
};

// Class ShooterGame.ReceivedDamageInteraction
// Size: 0x98 (Inherited: 0x98)
struct UReceivedDamageInteraction : UDamageInteraction {
};

// Class ShooterGame.LineOfSightInteraction
// Size: 0x68 (Inherited: 0x60)
struct ULineOfSightInteraction : UEncounterInteraction {
	bool PlayerInsight; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class ShooterGame.FFACombatReportComponent
// Size: 0x120 (Inherited: 0x118)
struct UFFACombatReportComponent : UBaseCombatReportComponent {
	struct ULineOfSightTrackerComponent* LineOfSightTrackerComponent; // 0x118(0x08)
};

// Class ShooterGame.FFATeamComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UFFATeamComponent : UBaseTeamComponent {
};

// Class ShooterGame.FidgetAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UFidgetAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.WrapperListModel
// Size: 0x58 (Inherited: 0x48)
struct UWrapperListModel : UOrderedListModelBase {
	struct TScriptInterface<IOrderedListModel> WrappedListModel; // 0x48(0x10)

	void SetListModel(struct TScriptInterface<IOrderedListModel>& NewValue); // Function ShooterGame.WrapperListModel.SetListModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7e910
	void HandleWrappedListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.WrapperListModel.HandleWrappedListModelChange // (Native|Protected|HasOutParms) // @ game+0x3c7de80
	struct TScriptInterface<IOrderedListModel> GetListModel(); // Function ShooterGame.WrapperListModel.GetListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7dcd0
};

// Class ShooterGame.IndexedWrapperListModelBase
// Size: 0x68 (Inherited: 0x58)
struct UIndexedWrapperListModelBase : UWrapperListModel {
	char pad_58[0x10]; // 0x58(0x10)

	int32_t MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.IndexedWrapperListModelBase.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x395ff50
	int32_t MapIndexInnerToOuter(int32_t InnerIndex); // Function ShooterGame.IndexedWrapperListModelBase.MapIndexInnerToOuter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x395feb0
};

// Class ShooterGame.FilteredListModelBase
// Size: 0x68 (Inherited: 0x68)
struct UFilteredListModelBase : UIndexedWrapperListModelBase {

	bool MatchesFilter(struct FWildcard& Item); // Function ShooterGame.FilteredListModelBase.MatchesFilter // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x38f95b0
	struct FIndexRange MapIndexRangeOuterToInnerFiltered(struct FIndexRange& OuterRange); // Function ShooterGame.FilteredListModelBase.MapIndexRangeOuterToInnerFiltered // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f9510
	struct FIndexRange MapIndexRangeInnerToOuterFiltered(struct FIndexRange& InnerRange); // Function ShooterGame.FilteredListModelBase.MapIndexRangeInnerToOuterFiltered // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f9470
	int32_t MapIndexInnerToOuterFiltered(int32_t InnerIndex); // Function ShooterGame.FilteredListModelBase.MapIndexInnerToOuterFiltered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f93d0
	void BP_RefilterItemRange(struct FIndexRange& InnerRange); // Function ShooterGame.FilteredListModelBase.BP_RefilterItemRange // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x38f8560
	void BP_RefilterAllItems(); // Function ShooterGame.FilteredListModelBase.BP_RefilterAllItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x38f8540
};

// Class ShooterGame.FilteredListModel
// Size: 0x78 (Inherited: 0x68)
struct UFilteredListModel : UFilteredListModelBase {
	char pad_68[0x10]; // 0x68(0x10)

	void SetFilterDelegate(struct FDelegate& Delegate); // Function ShooterGame.FilteredListModel.SetFilterDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38f9980
	void RefilterItemRange(struct FIndexRange& InnerRange); // Function ShooterGame.FilteredListModel.RefilterItemRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x38f8560
	void RefilterAllItems(); // Function ShooterGame.FilteredListModel.RefilterAllItems // (Final|Native|Public|BlueprintCallable) // @ game+0x38f8540
	struct UFilteredListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& FilterDelegate, struct UObject* Outer); // Function ShooterGame.FilteredListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x38f8b40
};

// Class ShooterGame.FindSpawnSpotStateComponent
// Size: 0x340 (Inherited: 0x2e0)
struct UFindSpawnSpotStateComponent : UScriptStateComponent {
	struct FVector SourceOffset; // 0x2e0(0x0c)
	struct FVector TargetOffset; // 0x2ec(0x0c)
	struct TArray<struct FFindSpawnSpotTrace> Traces; // 0x2f8(0x10)
	float TestRadius; // 0x308(0x04)
	bool bUsePawnTransform; // 0x30c(0x01)
	bool bTestSpawnValid; // 0x30d(0x01)
	bool bSweepWithSpawnTestClassShape; // 0x30e(0x01)
	bool bFailIfSpawnSpotBlocked; // 0x30f(0x01)
	bool bUseFallbackSpawnTestClassShapeSweep; // 0x310(0x01)
	bool bAdjustFinalLocation; // 0x311(0x01)
	enum class ECollisionChannel LoSCheckChannel; // 0x312(0x01)
	char pad_313[0x5]; // 0x313(0x05)
	struct AActor* SpawnTestClass; // 0x318(0x08)
	struct FVector FallbackTargetOffset; // 0x320(0x0c)
	float SpawnedObjectRadius; // 0x32c(0x04)
	bool bDrawDebug; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct UStateComponent* FailStateComponent; // 0x338(0x08)

	void SetFailState(struct UStateComponent* FailState); // Function ShooterGame.FindSpawnSpotStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x38fef60
};

// Class ShooterGame.SimpleProjectileMovementComponent
// Size: 0x188 (Inherited: 0x128)
struct USimpleProjectileMovementComponent : UMovementComponent {
	char pad_128[0x38]; // 0x128(0x38)
	float MaximumRange; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	bool bMaximumRangeReachedEventTriggered; // 0x168(0x01)
	enum class ECollisionChannel TraceChannel; // 0x169(0x01)
	char pad_16A[0x6]; // 0x16a(0x06)
	struct TArray<struct AActor*> RequestedIgnoreActors; // 0x170(0x10)
	uint32_t NumCollisions; // 0x180(0x04)
	enum class EProjectileMoveState ProjectileMoveState; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)

	enum class EProjectileMoveState GetMoveState(); // Function ShooterGame.SimpleProjectileMovementComponent.GetMoveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be1a60
	void AuthSetMaximumRange(float NewRange); // Function ShooterGame.SimpleProjectileMovementComponent.AuthSetMaximumRange // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AddIgnoredActor(struct AActor* Actor); // Function ShooterGame.SimpleProjectileMovementComponent.AddIgnoredActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3be14e0
};

// Class ShooterGame.FiniteSpeedMovementComponent
// Size: 0x2d0 (Inherited: 0x188)
struct UFiniteSpeedMovementComponent : USimpleProjectileMovementComponent {
	float ProjectileSpeed; // 0x188(0x04)
	float ProjectileGravityScale; // 0x18c(0x04)
	struct FVector ImpartActorVelocityPercentVector; // 0x190(0x0c)
	float ImpartVelocityMatchingDirectionFraction; // 0x19c(0x04)
	float DownwardVelocityScale; // 0x1a0(0x04)
	bool bUseTrueVerticalVelocity; // 0x1a4(0x01)
	bool bEnableTargetUpdating; // 0x1a5(0x01)
	char pad_1A6[0x2]; // 0x1a6(0x02)
	float ServerMovementTime; // 0x1a8(0x04)
	char pad_1AC[0xb0]; // 0x1ac(0xb0)
	bool bTeleportedThisMove; // 0x25c(0x01)
	bool bNewServerMovementTime; // 0x25d(0x01)
	char pad_25E[0x2]; // 0x25e(0x02)
	float ServerTeleportTime; // 0x260(0x04)
	struct FVector LaunchVelocity; // 0x264(0x0c)
	float DefaultProjectileSpeed; // 0x270(0x04)
	float DefaultProjectileGravityScale; // 0x274(0x04)
	float InitializedForUseTimestamp; // 0x278(0x04)
	char pad_27C[0x54]; // 0x27c(0x54)

	void OnRep_ServerMovementTime(float& OldServerTime); // Function ShooterGame.FiniteSpeedMovementComponent.OnRep_ServerMovementTime // (Final|Native|Protected|HasOutParms) // @ game+0x38fedb0
	void OnProjectileStopLocation(struct FVector Location); // Function ShooterGame.FiniteSpeedMovementComponent.OnProjectileStopLocation // (Final|Native|Protected|HasDefaults) // @ game+0x372c930
	void MulticastOnMaximumRangeReached(); // Function ShooterGame.FiniteSpeedMovementComponent.MulticastOnMaximumRangeReached // (Net|NetReliableNative|Event|NetMulticast|Protected|NetClient) // @ game+0x38fec90
};

// Class ShooterGame.FiringEffectComponent
// Size: 0x190 (Inherited: 0xf8)
struct UFiringEffectComponent : UEffectComponent {
	struct FMulticastInlineDelegate FxcOnRegisterFiringState; // 0xf8(0x10)
	struct FMulticastInlineDelegate FxcOnStartedShooting; // 0x108(0x10)
	struct FMulticastInlineDelegate FxcOnShot; // 0x118(0x10)
	struct FMulticastInlineDelegate FxcOnStoppedShooting; // 0x128(0x10)
	float BurstFireTailTimeMillseconds; // 0x138(0x04)
	bool bRemoteSimulated; // 0x13c(0x01)
	char pad_13D[0x3]; // 0x13d(0x03)
	int32_t RemoteSimulatedShotIndex; // 0x140(0x04)
	int32_t RemoteSimulatedMagazineAmmoCount; // 0x144(0x04)
	float NextShotTimeRemaining; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct AShooterCharacter* FiringCharacter; // 0x150(0x08)
	struct FProjectileFireData FireData; // 0x158(0x38)

	void HandleStartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.FiringEffectComponent.HandleStartEffect // (Final|Native|Protected) // @ game+0x38fe8d0
	void HandleResetEffect(); // Function ShooterGame.FiringEffectComponent.HandleResetEffect // (Final|Native|Protected) // @ game+0x38fe8b0
	struct TArray<struct UFiringEffectComponent*> GetOtherActiveFiringEffects(); // Function ShooterGame.FiringEffectComponent.GetOtherActiveFiringEffects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe7d0
	struct AShooterCharacter* GetFiringCharacter(); // Function ShooterGame.FiringEffectComponent.GetFiringCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe770
	int32_t GetAmmoRemainingInMagazine(); // Function ShooterGame.FiringEffectComponent.GetAmmoRemainingInMagazine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe710
	void FiringStateOnStoppedShooting(struct UFiringStateComponent* FiringState); // Function ShooterGame.FiringEffectComponent.FiringStateOnStoppedShooting // (Final|Native|Protected) // @ game+0x38fe5f0
	void FiringStateOnStartedShooting(struct UFiringStateComponent* FiringState); // Function ShooterGame.FiringEffectComponent.FiringStateOnStartedShooting // (Final|Native|Protected) // @ game+0x38fe560
	void FiringStateOnShot(struct UFiringStateComponent* FiringState, int32_t ShotIndex, bool bTracerEnabled, bool bWasLastShot, struct TArray<struct FFiringResults>& FiringResults); // Function ShooterGame.FiringEffectComponent.FiringStateOnShot // (Final|Native|Protected|HasOutParms) // @ game+0x38fe380
	void FireRemoteSimulatedShot(); // Function ShooterGame.FiringEffectComponent.FireRemoteSimulatedShot // (Final|Native|Protected) // @ game+0x38fe360
};

// Class ShooterGame.FiringStateTransitionContext
// Size: 0x38 (Inherited: 0x30)
struct UFiringStateTransitionContext : UStateTransitionContext {
	enum class EFiringStateTransitionContext Context; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class ShooterGame.FiringStateComponent
// Size: 0x568 (Inherited: 0x3d0)
struct UFiringStateComponent : URespondToEventStateComponent {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct FMulticastInlineDelegate OnShot; // 0x3d8(0x10)
	char pad_3E8[0x18]; // 0x3e8(0x18)
	struct FMulticastInlineDelegate OnStartedShooting; // 0x400(0x10)
	struct FMulticastInlineDelegate OnStoppedShooting; // 0x410(0x10)
	struct FMulticastInlineDelegate OnReadyToFireThisFrame; // 0x420(0x10)
	enum class EShellCasingEjectableBehavior ShellCasingEjectableBehavior; // 0x430(0x01)
	char pad_431[0x3]; // 0x431(0x03)
	int32_t ResourcesConsumedPerShot; // 0x434(0x04)
	float ShotAudibleRange; // 0x438(0x04)
	float FiringRate; // 0x43c(0x04)
	bool bCanFireWhileZooming; // 0x440(0x01)
	char pad_441[0x7]; // 0x441(0x07)
	struct TArray<struct FTriggerInput> FiringTriggerInputs; // 0x448(0x10)
	struct AEffectContainer* FiringEffectType; // 0x458(0x08)
	float ErrorPower; // 0x460(0x04)
	int32_t ErrorRetries; // 0x464(0x04)
	struct FAnimPunchTuning AnimPunchTuning; // 0x468(0x10)
	int32_t RoundsBetweenTracers; // 0x478(0x04)
	int32_t RoundsBetweenImpacts; // 0x47c(0x04)
	struct UStabilityComponent* RegisteredStabilityComponent; // 0x480(0x08)
	struct UResourceComponent* RegisteredResourceComponent; // 0x488(0x08)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x490(0x08)
	struct FFiringStateVariables FiringStateVariables; // 0x498(0x10)
	int32_t RoundsUntilNextImpact; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct UStateComponent* ReturnState; // 0x4b0(0x08)
	struct AShooterCharacter* OwningCharacter; // 0x4b8(0x08)
	struct FNetworkedMovementTimestamp LastShotSubframeTimeStamp; // 0x4c0(0x10)
	struct FNetworkedMovementTimestamp NextShotSubframeTimeStamp; // 0x4d0(0x10)
	struct AProjectile* ReusableHitScanProjectile; // 0x4e0(0x08)
	struct TArray<struct UFiringEffectComponent*> ActiveFiringEffects; // 0x4e8(0x10)
	struct FNoiseEventData NoiseEventData; // 0x4f8(0x38)
	struct FProjectileTuning ProjectileTuning; // 0x530(0x28)
	bool bBurstFire; // 0x558(0x01)
	char pad_559[0x3]; // 0x559(0x03)
	struct FBurstTuning BurstTuning; // 0x55c(0x08)
	char pad_564[0x4]; // 0x564(0x04)

	void UpdateProjectile(struct AProjectile* ProjectileFired); // Function ShooterGame.FiringStateComponent.UpdateProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x38ff340
	void UpdateFiringRate(float NewFiringRate); // Function ShooterGame.FiringStateComponent.UpdateFiringRate // (Final|Native|Public|BlueprintCallable) // @ game+0x38ff2c0
	void UnregisterFiringEffect(struct UFiringEffectComponent* FiringEffectComponent); // Function ShooterGame.FiringStateComponent.UnregisterFiringEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x38ff230
	void SetStabilityComponent(struct UStabilityComponent* StabilityComponent); // Function ShooterGame.FiringStateComponent.SetStabilityComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x38ff1a0
	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.FiringStateComponent.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x38ff110
	void SetResourceComponent(struct UResourceComponent* ResourceComponent); // Function ShooterGame.FiringStateComponent.SetResourceComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x38ff080
	void SetNextState(struct UStateComponent* State); // Function ShooterGame.FiringStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x38feff0
	void RequestTickDeferment(float TimeUntilNextShot); // Function ShooterGame.FiringStateComponent.RequestTickDeferment // (Final|Native|Private) // @ game+0x38feee0
	void RegisterFiringEffect(struct UFiringEffectComponent* FiringEffectComponent); // Function ShooterGame.FiringStateComponent.RegisterFiringEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x38fee50
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.FiringStateComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x38fece0
	void OnEquippableDisabled(); // Function ShooterGame.FiringStateComponent.OnEquippableDisabled // (Final|Native|Private) // @ game+0x38fecc0
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.FiringStateComponent.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38febc0
	bool IsReleaseInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.FiringStateComponent.IsReleaseInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38feaf0
	bool IsOnCooldown(); // Function ShooterGame.FiringStateComponent.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38feac0
	bool IsBurstFire(); // Function ShooterGame.FiringStateComponent.IsBurstFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fea90
	bool IsAutomatic(); // Function ShooterGame.FiringStateComponent.IsAutomatic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fea60
	bool IsAnyTriggerHeld(); // Function ShooterGame.FiringStateComponent.IsAnyTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fea30
	struct UStabilityComponent* GetStabilityComponent(); // Function ShooterGame.FiringStateComponent.GetStabilityComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe880
	struct UResourceComponent* GetResourceComponent(); // Function ShooterGame.FiringStateComponent.GetResourceComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe850
	struct AEffectContainer* GetFiringEffectTypeOverride(); // Function ShooterGame.FiringStateComponent.GetFiringEffectTypeOverride // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x38fe790
	float GetCooldownTimeRemaining(); // Function ShooterGame.FiringStateComponent.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe740
	void GetAppliedDamageEventsFromReusableHitScanProjectile(); // Function ShooterGame.FiringStateComponent.GetAppliedDamageEventsFromReusableHitScanProjectile // (Final|Native|Private) // @ game+0x2024060
	struct TArray<struct UFiringEffectComponent*> GetActiveFiringEffects(); // Function ShooterGame.FiringStateComponent.GetActiveFiringEffects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe680
	bool CanFire(enum class ECanFireCooldownCheckOption CooldownCheckOption); // Function ShooterGame.FiringStateComponent.CanFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe2d0
};

// Class ShooterGame.FixedDurationUnequipStateComponent
// Size: 0x410 (Inherited: 0x408)
struct UFixedDurationUnequipStateComponent : UTimedStateComponent {
	enum class EEquipSpeed EquipSpeed; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
};

// Class ShooterGame.FixedMoveTimeStepManagerComponent
// Size: 0x100 (Inherited: 0xe8)
struct UFixedMoveTimeStepManagerComponent : UActorComponent {
	char FixedMoveTimeStepsPerSecond; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TArray<struct FScheduledTimeStepChange> ScheduledTimeStepChanges; // 0xf0(0x10)

	void OnRep_FixedMoveTimeStepsPerSecond(); // Function ShooterGame.FixedMoveTimeStepManagerComponent.OnRep_FixedMoveTimeStepsPerSecond // (Final|Native|Private) // @ game+0x2024060
	void AuthOnFixedMoveTimeStepChange(char MoveStepsPerSecond); // Function ShooterGame.FixedMoveTimeStepManagerComponent.AuthOnFixedMoveTimeStepChange // (Final|Native|Private) // @ game+0x38fe250
	void AuthDeclareFixedMoveTimeStepChange(float TargetTimeStampInSeconds, char MoveStepsPerSecond); // Function ShooterGame.FixedMoveTimeStepManagerComponent.AuthDeclareFixedMoveTimeStepChange // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x38fe180
	void AuthDeclareDefaultFixedMoveTimeStepChange(float TargetTimeStampInSeconds); // Function ShooterGame.FixedMoveTimeStepManagerComponent.AuthDeclareDefaultFixedMoveTimeStepChange // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
};

// Class ShooterGame.SubRangeListModelBase
// Size: 0x68 (Inherited: 0x58)
struct USubRangeListModelBase : UWrapperListModel {
	char pad_58[0x10]; // 0x58(0x10)

	int32_t MapIndexOuterToInnerUnbounded(int32_t OuterIndex); // Function ShooterGame.SubRangeListModelBase.MapIndexOuterToInnerUnbounded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c276f0
	int32_t MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.SubRangeListModelBase.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c27650
	int32_t MapIndexInnerToOuterUnbounded(int32_t InnerIndex, bool& bMapped); // Function ShooterGame.SubRangeListModelBase.MapIndexInnerToOuterUnbounded // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c27580
	int32_t MapIndexInnerToOuter(int32_t InnerIndex); // Function ShooterGame.SubRangeListModelBase.MapIndexInnerToOuter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c274e0
	struct FIndexRange GetSubRange(); // Function ShooterGame.SubRangeListModelBase.GetSubRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac50
};

// Class ShooterGame.PagedListModelBase
// Size: 0x90 (Inherited: 0x68)
struct UPagedListModelBase : USubRangeListModelBase {
	struct FMulticastInlineDelegate OnCurrentPageNumberChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnNumPagesChanged; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)

	void SetCurrentPageNumber(int32_t NewValue); // Function ShooterGame.PagedListModelBase.SetCurrentPageNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06b20
	int32_t MapIndexOuterToInnerPaged(struct FPagedListLocation OuterLocation); // Function ShooterGame.PagedListModelBase.MapIndexOuterToInnerPaged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a05ce0
	struct FPagedListLocation MapIndexInnerToOuterPaged(int32_t InnerIndex); // Function ShooterGame.PagedListModelBase.MapIndexInnerToOuterPaged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a05c50
	int32_t GetPageStartIndex(int32_t PageNumber); // Function ShooterGame.PagedListModelBase.GetPageStartIndex // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3a039a0
	int32_t GetPageNumberForInnerIndex(int32_t InnerIndex); // Function ShooterGame.PagedListModelBase.GetPageNumberForInnerIndex // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3a03900
	int32_t GetNumPages(); // Function ShooterGame.PagedListModelBase.GetNumPages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e60
	int32_t GetCurrentPageNumber(); // Function ShooterGame.PagedListModelBase.GetCurrentPageNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e20
	void BP_NotifyPageRangesChanged(); // Function ShooterGame.PagedListModelBase.BP_NotifyPageRangesChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a01df0
};

// Class ShooterGame.FixedSizePagedListModel
// Size: 0x98 (Inherited: 0x90)
struct UFixedSizePagedListModel : UPagedListModelBase {
	char pad_90[0x8]; // 0x90(0x08)

	void SetMaxItemsPerPage(int32_t NewValue); // Function ShooterGame.FixedSizePagedListModel.SetMaxItemsPerPage // (Final|Native|Public|BlueprintCallable) // @ game+0x3905e30
	int32_t GetMaxItemsPerPage(); // Function ShooterGame.FixedSizePagedListModel.GetMaxItemsPerPage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3861280
	struct UFixedSizePagedListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, int32_t MaxItemsPerPage, int32_t PageNumber, struct UObject* Outer); // Function ShooterGame.FixedSizePagedListModel.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3904b10
};

// Class ShooterGame.FixedSlotMapToListModelBase
// Size: 0xb8 (Inherited: 0x48)
struct UFixedSlotMapToListModelBase : UOrderedListModelBase {
	struct TArray<struct FWildcard> Items; // 0x48(0x10)
	struct TMap<struct FWildcard, int32_t> KeyToIndexMap; // 0x58(0x50)
	struct TScriptInterface<IUnorderedMapModel> WrappedMapModel; // 0xa8(0x10)

	void SetSlotCount(int32_t NewValue); // Function ShooterGame.FixedSlotMapToListModelBase.SetSlotCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3905f40
	void SetMapModel(struct TScriptInterface<IUnorderedMapModel> NewValue); // Function ShooterGame.FixedSlotMapToListModelBase.SetMapModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3905d90
	void HandleMapChanged(struct UObject* Source, struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.FixedSlotMapToListModelBase.HandleMapChanged // (Final|Native|Private|HasOutParms) // @ game+0x3905370
	int32_t GetSlotCount(); // Function ShooterGame.FixedSlotMapToListModelBase.GetSlotCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3793390
	struct FIndexRange GetEligibleIndexRange(struct FWildcard& Item); // Function ShooterGame.FixedSlotMapToListModelBase.GetEligibleIndexRange // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3904fb0
	void BP_FixUpSlots(); // Function ShooterGame.FixedSlotMapToListModelBase.BP_FixUpSlots // (Final|Native|Protected|BlueprintCallable) // @ game+0x3904930
};

// Class ShooterGame.FixedSlotMapToListModel
// Size: 0xc8 (Inherited: 0xb8)
struct UFixedSlotMapToListModel : UFixedSlotMapToListModelBase {
	char pad_B8[0x10]; // 0xb8(0x10)

	void SetIndexRangeDelegate(struct FDelegate& Delegate); // Function ShooterGame.FixedSlotMapToListModel.SetIndexRangeDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3905cd0
	struct FIndexRange GetEligibleIndexRangeDynamicDelegate__DelegateSignature(struct FWildcard& Item); // DelegateFunction ShooterGame.FixedSlotMapToListModel.GetEligibleIndexRangeDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x40572e0
	void FixUpSlots(); // Function ShooterGame.FixedSlotMapToListModel.FixUpSlots // (Final|Native|Public|BlueprintCallable) // @ game+0x3904930
	struct UFixedSlotMapToListModel* Create(struct TScriptInterface<IUnorderedMapModel> MapModel, int32_t SlotCount, struct FDelegate& IndexRangeDelegate, struct UObject* Outer); // Function ShooterGame.FixedSlotMapToListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3904c70
};

// Class ShooterGame.FlyoutAnchor
// Size: 0x1d0 (Inherited: 0x160)
struct UFlyoutAnchor : UContentWidget {
	struct FMulticastInlineDelegate OnFlyoutCreated; // 0x160(0x10)
	struct FMulticastInlineDelegate OnFlyoutDisposed; // 0x170(0x10)
	struct FMulticastInlineDelegate OnFlyoutOpenStateChanged; // 0x180(0x10)
	enum class EAresFlyoutCategory FlyoutCategory; // 0x190(0x01)
	char pad_191[0x7]; // 0x191(0x07)
	struct UFlyoutWidget* FlyoutClass; // 0x198(0x08)
	struct FVector2D FlyoutPivot; // 0x1a0(0x08)
	struct UFlyoutWidget* FlyoutInstance; // 0x1a8(0x08)
	char pad_1B0[0x20]; // 0x1b0(0x20)

	bool OpenFlyout(bool bIsInstant); // Function ShooterGame.FlyoutAnchor.OpenFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x39059b0
	void HandleFlyoutPreparedForDisposal(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutAnchor.HandleFlyoutPreparedForDisposal // (Final|Native|Private) // @ game+0x39052e0
	void HandleFlyoutOpenStateChanged(struct UFlyoutWidget* Flyout, enum class EAresFlyoutOpenState PreviousOpenState, enum class EAresFlyoutOpenState CurrentOpenState); // Function ShooterGame.FlyoutAnchor.HandleFlyoutOpenStateChanged // (Final|Native|Private|Const) // @ game+0x39051d0
	struct FVector2D GetFlyoutPivot(); // Function ShooterGame.FlyoutAnchor.GetFlyoutPivot // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3905160
	struct UFlyoutWidget* GetFlyoutInstance(); // Function ShooterGame.FlyoutAnchor.GetFlyoutInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3905130
	enum class EAresFlyoutCategory GetFlyoutCategory(); // Function ShooterGame.FlyoutAnchor.GetFlyoutCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39050d0
	bool FlyoutIsTransitioning(); // Function ShooterGame.FlyoutAnchor.FlyoutIsTransitioning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3904f80
	bool FlyoutIsOpen(); // Function ShooterGame.FlyoutAnchor.FlyoutIsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3904f50
	bool FlyoutIsClosed(); // Function ShooterGame.FlyoutAnchor.FlyoutIsClosed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3904f20
	bool CloseFlyout(bool bIsInstant); // Function ShooterGame.FlyoutAnchor.CloseFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x39049e0
};

// Class ShooterGame.FlyoutContainer
// Size: 0x330 (Inherited: 0x2c8)
struct UFlyoutContainer : UUserWidget {
	enum class EAresFlyoutCategory FlyoutCategory; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct TArray<struct UFlyoutWidget*> Flyouts; // 0x2d0(0x10)
	char pad_2E0[0x50]; // 0x2e0(0x50)

	void RemoveFlyoutAsChild(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutContainer.RemoveFlyoutAsChild // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	bool RemoveFlyout(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutContainer.RemoveFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x3905ba0
	void OnFlyoutPreparedForDisposal(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutContainer.OnFlyoutPreparedForDisposal // (Final|Native|Private) // @ game+0x39057c0
	enum class EAresFlyoutCategory GetFlyoutCategory(); // Function ShooterGame.FlyoutContainer.GetFlyoutCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3905100
	void CloseAllFlyouts(bool bIsInstant); // Function ShooterGame.FlyoutContainer.CloseAllFlyouts // (Final|Native|Public|BlueprintCallable) // @ game+0x3904950
	void AddFlyoutAsChild(struct UFlyoutWidget* Flyout, struct UFlyoutAnchor* Anchor); // Function ShooterGame.FlyoutContainer.AddFlyoutAsChild // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	bool AddFlyout(struct UFlyoutWidget* Flyout, struct UFlyoutAnchor* Anchor); // Function ShooterGame.FlyoutContainer.AddFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x3904740
};

// Class ShooterGame.FlyoutManager
// Size: 0xe0 (Inherited: 0x30)
struct UFlyoutManager : UObject {
	struct TArray<struct UFlyoutWidget*> Flyouts; // 0x30(0x10)
	char pad_40[0x50]; // 0x40(0x50)
	struct TMap<struct UFlyoutWidget*, struct FFlyoutDelegateHandles> DelegateHandles; // 0x90(0x50)

	void RemoveFlyout(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutManager.RemoveFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x3905c40
	bool RemoveContainer(struct UFlyoutContainer* Container); // Function ShooterGame.FlyoutManager.RemoveContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x3905b00
	void OnFlyoutPreparedForDisposal(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutManager.OnFlyoutPreparedForDisposal // (Final|Native|Private) // @ game+0x3905850
	void OnFlyoutOpenStateChanged(struct UFlyoutWidget* Flyout, enum class EAresFlyoutOpenState PreviousOpenState, enum class EAresFlyoutOpenState CurrentOpenState); // Function ShooterGame.FlyoutManager.OnFlyoutOpenStateChanged // (Final|Native|Private) // @ game+0x39056b0
	struct UFlyoutWidget* CreateFlyout(struct UFlyoutWidget* FlyoutClass, struct UFlyoutAnchor* Anchor, bool& bWasCreated); // Function ShooterGame.FlyoutManager.CreateFlyout // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3904e00
	void AddFlyout(struct UFlyoutWidget* Flyout); // Function ShooterGame.FlyoutManager.AddFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x3904810
	bool AddContainer(struct UFlyoutContainer* Container); // Function ShooterGame.FlyoutManager.AddContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x39046a0
};

// Class ShooterGame.FlyoutWidget
// Size: 0x360 (Inherited: 0x300)
struct UFlyoutWidget : UAresCommonUserWidget {
	struct FMulticastInlineDelegate OnOpenStateChanged; // 0x300(0x10)
	struct FMulticastInlineDelegate OnPreparedForDisposal; // 0x310(0x10)
	enum class EAresFlyoutOpenState OpenState; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct UFlyoutAnchor* Anchor; // 0x328(0x08)
	char pad_330[0x30]; // 0x330(0x30)

	void SetOpenState(enum class EAresFlyoutOpenState NewOpenState); // Function ShooterGame.FlyoutWidget.SetOpenState // (Final|Native|Protected|BlueprintCallable) // @ game+0x3905ec0
	void PrepareForDisposal(); // Function ShooterGame.FlyoutWidget.PrepareForDisposal // (Final|Native|Public|BlueprintCallable) // @ game+0x3905ae0
	void PlayOpenAnimation(bool bIsInstant); // Function ShooterGame.FlyoutWidget.PlayOpenAnimation // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void PlayCloseAnimation(bool bIsInstant); // Function ShooterGame.FlyoutWidget.PlayCloseAnimation // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OpenStateChanged(enum class EAresFlyoutOpenState PreviousOpenState, enum class EAresFlyoutOpenState CurrentOpenState); // Function ShooterGame.FlyoutWidget.OpenStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OpenFlyout(bool bIsInstant); // Function ShooterGame.FlyoutWidget.OpenFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x3905a50
	bool IsTransitioning(); // Function ShooterGame.FlyoutWidget.IsTransitioning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3905530
	bool IsOpen(); // Function ShooterGame.FlyoutWidget.IsOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39054d0
	bool IsClosed(); // Function ShooterGame.FlyoutWidget.IsClosed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3905470
	enum class EAresFlyoutOpenState GetOpenState(); // Function ShooterGame.FlyoutWidget.GetOpenState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39051a0
	struct UFlyoutAnchor* GetFlyoutAnchor(); // Function ShooterGame.FlyoutWidget.GetFlyoutAnchor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39050a0
	void CloseFlyout(bool bIsInstant); // Function ShooterGame.FlyoutWidget.CloseFlyout // (Final|Native|Public|BlueprintCallable) // @ game+0x3904a80
};

// Class ShooterGame.FogOfWarBoundsComponent
// Size: 0x580 (Inherited: 0x580)
struct UFogOfWarBoundsComponent : UBoxComponent {
	bool bCountsForFogOfWarBounds; // 0x578(0x01)
};

// Class ShooterGame.FogOfWarDebugComponent
// Size: 0x100 (Inherited: 0xe8)
struct UFogOfWarDebugComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	bool bWasGameplayActive; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OwnerHiddenChanged(struct AActor* Actor); // Function ShooterGame.FogOfWarDebugComponent.OwnerHiddenChanged // (Final|Native|Public) // @ game+0x3634e00
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.FogOfWarDebugComponent.OnBugCommand // (Final|Native|Public) // @ game+0x3905560
};

// Class ShooterGame.FogOfWarManagerComponent
// Size: 0x2d0 (Inherited: 0xe8)
struct UFogOfWarManagerComponent : UActorComponent {
	float AdditionalLookAheadTime; // 0xe8(0x04)
	bool bTeamIsAlwaysRelevant; // 0xec(0x01)
	bool bUseSharedTeamRelevancy; // 0xed(0x01)
	bool bUseUmbraIfAvailable; // 0xee(0x01)
	char pad_EF[0x1]; // 0xef(0x01)
	float AlwaysRelevantDistanceSquared; // 0xf0(0x04)
	float NotRelevantCacheLifetimeInSeconds; // 0xf4(0x04)
	float PreRoundNotRelevantCacheLifetimeInSeconds; // 0xf8(0x04)
	float NoComponentCacheLifetimeInSeconds; // 0xfc(0x04)
	float TeamCacheLifetimeInSeconds; // 0x100(0x04)
	float RelevantCacheLifetimeInSeconds; // 0x104(0x04)
	int32_t CachePreallocationElements; // 0x108(0x04)
	char pad_10C[0x5c]; // 0x10c(0x5c)
	struct UUmbraPrecomputedData* UmbraData; // 0x168(0x08)
	char pad_170[0x150]; // 0x170(0x150)
	struct AShooterGameMode* OwnerGameMode; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void OnRoundEnd(int32_t RoundNumber); // Function ShooterGame.FogOfWarManagerComponent.OnRoundEnd // (Final|Native|Protected) // @ game+0x390c060
	void OnRoundBegin(int32_t RoundNumber); // Function ShooterGame.FogOfWarManagerComponent.OnRoundBegin // (Final|Native|Protected) // @ game+0x390bfd0
	void OnGameplayActiveChange(bool bNewIsGameplayActive); // Function ShooterGame.FogOfWarManagerComponent.OnGameplayActiveChange // (Final|Native|Protected) // @ game+0x390bca0
};

// Class ShooterGame.FontStyleDataAsset
// Size: 0xb0 (Inherited: 0x38)
struct UFontStyleDataAsset : UPrimaryDataAsset {
	struct FAresFontStyle AresFontStyle; // 0x38(0x68)
	struct TArray<struct UFontStyleDataAsset*> ParentFontStyles; // 0xa0(0x10)
};

// Class ShooterGame.FootstepABTestComponentBase
// Size: 0xf8 (Inherited: 0xe8)
struct UFootstepABTestComponentBase : UActorComponent {
	struct FName TestName; // 0xe8(0x0c)
	char pad_F4[0x4]; // 0xf4(0x04)

	void AuthSendTelemetryEvent(struct FName GroupName); // Function ShooterGame.FootstepABTestComponentBase.AuthSendTelemetryEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3739bd0
};

// Class ShooterGame.FootstepsComponent
// Size: 0x2b0 (Inherited: 0xe8)
struct UFootstepsComponent : UActorComponent {
	float FootstepPlayTimeBank; // 0xe8(0x04)
	float LastFootstepPlayedTime; // 0xec(0x04)
	float FootstepPlayTimeSeconds; // 0xf0(0x04)
	float FootstepBankAccumulationStartPercent; // 0xf4(0x04)
	float PercentOfRunWalkTransitionToGenerateFootstepSound; // 0xf8(0x04)
	float FootstepSpeedPercentOfWalkingToDecayTimeBank; // 0xfc(0x04)
	float FootstepTimeBankDecayRate; // 0x100(0x04)
	float MinWalkDecaySpeed; // 0x104(0x04)
	float MaxWalkDecaySpeed; // 0x108(0x04)
	float FootstepTimeBankDecayRateWalking; // 0x10c(0x04)
	float GamepadFootstepPlayTimeSeconds; // 0x110(0x04)
	float GamepadFootstepBankAccumulationStartPercent; // 0x114(0x04)
	float GamepadPercentOfRunWalkTransitionToGenerateFootstepSound; // 0x118(0x04)
	float GamepadFootstepSpeedPercentOfWalkingToDecayTimeBank; // 0x11c(0x04)
	float GamepadFootstepTimeBankDecayRate; // 0x120(0x04)
	float GamepadMinWalkDecaySpeed; // 0x124(0x04)
	float GamepadMaxWalkDecaySpeed; // 0x128(0x04)
	float GamepadFootstepTimeBankDecayRateWalking; // 0x12c(0x04)
	struct FNoiseEventData NoiseEventData; // 0x130(0x38)
	struct TArray<struct UAkAudioEvent*> RunFootstepEvents; // 0x168(0x10)
	struct TArray<struct UAkAudioEvent*> AltRunFootstepEvents; // 0x178(0x10)
	struct AEffectContainer* RunFootstepFXC; // 0x188(0x08)
	struct UAkAudioEvent* RunFootstepEvent; // 0x190(0x08)
	struct TArray<struct UAkAudioEvent*> JumpTakeOffEvents; // 0x198(0x10)
	struct TArray<struct UAkAudioEvent*> AltJumpTakeOffEvents; // 0x1a8(0x10)
	struct AEffectContainer* JumpTakeOffFXC; // 0x1b8(0x08)
	struct UAkAudioEvent* JumpTakeOffEvent; // 0x1c0(0x08)
	struct TArray<struct UAkAudioEvent*> JumpLandingEvents; // 0x1c8(0x10)
	struct TArray<struct UAkAudioEvent*> AltJumpLandingEvents; // 0x1d8(0x10)
	struct AEffectContainer* JumpLandingFXC; // 0x1e8(0x08)
	struct UAkAudioEvent* JumpLandingEvent; // 0x1f0(0x08)
	bool bUsingAlternateEvents; // 0x1f8(0x01)
	char pad_1F9[0x3]; // 0x1f9(0x03)
	float JumpFallDistanceRequiredForLandingSound; // 0x1fc(0x04)
	struct FName FootstepSoundAttachPoint; // 0x200(0x0c)
	float FootstepAudibleDistance; // 0x20c(0x04)
	float AltFootstepAudibleDistance; // 0x210(0x04)
	float CalloutAudibleDistanceScalar; // 0x214(0x04)
	bool bCountSteps; // 0x218(0x01)
	char pad_219[0x3]; // 0x219(0x03)
	float FootstepMinTickTime; // 0x21c(0x04)
	struct FVector FloorMovementVelocity; // 0x220(0x0c)
	char pad_22C[0x14]; // 0x22c(0x14)
	struct TMap<struct FName, struct FFootstepOverrideType> FootstepOverrides; // 0x240(0x50)
	float NextFootstepTimeout; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct UPhysicalMaterial* FootstepSoundOverride; // 0x298(0x08)
	struct AShooterCharacter* CharacterOwner; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void ReplayRecordLand(); // Function ShooterGame.FootstepsComponent.ReplayRecordLand // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x36355e0
	void ReplayRecordJump(); // Function ShooterGame.FootstepsComponent.ReplayRecordJump // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3654e70
	void PlayJumpTakeoffSound(); // Function ShooterGame.FootstepsComponent.PlayJumpTakeoffSound // (Final|Native|Public|BlueprintCallable) // @ game+0x390c510
	void PlayJumpLandingSound(); // Function ShooterGame.FootstepsComponent.PlayJumpLandingSound // (Final|Native|Public|BlueprintCallable) // @ game+0x390c4f0
	void PlayFootstepSound(); // Function ShooterGame.FootstepsComponent.PlayFootstepSound // (Final|Native|Public|BlueprintCallable) // @ game+0x390c4d0
	void OverrideFootstepSound(struct UPhysicalMaterial* NewMaterial, struct FName Tag, float Duration); // Function ShooterGame.FootstepsComponent.OverrideFootstepSound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x390c3a0
	void OverrideAudioEvents(struct TArray<struct UAkAudioEvent*>& InRunFootstepEvents, struct TArray<struct UAkAudioEvent*>& InJumpTakeOffEvents, struct TArray<struct UAkAudioEvent*>& InJumpLandingEvents); // Function ShooterGame.FootstepsComponent.OverrideAudioEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x390c210
	void OnLanded(struct AShooterCharacter* Character, struct FHitResult Hit); // Function ShooterGame.FootstepsComponent.OnLanded // (Final|Native|Private) // @ game+0x390be70
	void OnJumped(enum class EAresMovementType ServerMovementType, enum class EAresMovementType ClientMovementType); // Function ShooterGame.FootstepsComponent.OnJumped // (Final|Native|Private) // @ game+0x390bdb0
	void OnJump(enum class EAresMovementType MovementType); // Function ShooterGame.FootstepsComponent.OnJump // (Final|Native|Private) // @ game+0x390bd30
	bool IsGroundedFootstepVolumeMuted(); // Function ShooterGame.FootstepsComponent.IsGroundedFootstepVolumeMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390bb60
	float GetSpeedForFootsteps(); // Function ShooterGame.FootstepsComponent.GetSpeedForFootsteps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390bb30
	struct TArray<struct UAkAudioEvent*> GetRunFootstepEvents(); // Function ShooterGame.FootstepsComponent.GetRunFootstepEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390bab0
	float GetMovementAudibleRadius(); // Function ShooterGame.FootstepsComponent.GetMovementAudibleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390ba50
	float GetMaxSpeedForFootsteps(); // Function ShooterGame.FootstepsComponent.GetMaxSpeedForFootsteps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b8a0
	float GetMaxSpeedForDecayingFootstepTimeBank(); // Function ShooterGame.FootstepsComponent.GetMaxSpeedForDecayingFootstepTimeBank // (Final|Native|Public|Const) // @ game+0x390b870
	struct TArray<struct UAkAudioEvent*> GetJumpTakeOffEvents(); // Function ShooterGame.FootstepsComponent.GetJumpTakeOffEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b780
	struct TArray<struct UAkAudioEvent*> GetJumpLandingEvents(); // Function ShooterGame.FootstepsComponent.GetJumpLandingEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b700
	float GetFootstepVolumeReduction(); // Function ShooterGame.FootstepsComponent.GetFootstepVolumeReduction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b6a0
	float GetFootstepBankRate(); // Function ShooterGame.FootstepsComponent.GetFootstepBankRate // (Final|Native|Public|Const) // @ game+0x390b670
	float GetFootstepAudibleDistance(); // Function ShooterGame.FootstepsComponent.GetFootstepAudibleDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b640
	void ClientControllerChanged(struct AController* OldController); // Function ShooterGame.FootstepsComponent.ClientControllerChanged // (Final|Native|Private) // @ game+0x390b4c0
	void AuthSetFloorMovementVelocity(struct FVector MovementSpeed); // Function ShooterGame.FootstepsComponent.AuthSetFloorMovementVelocity // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x390b430
};

// Class ShooterGame.ForceModule
// Size: 0x170 (Inherited: 0x30)
struct UForceModule : UObject {
	struct TArray<struct FGameplayTag> ModuleTags; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)
	struct TMap<enum class EForceModuleAttribute, struct FRuntimeFloatCurve> Modifiers; // 0x48(0x50)
	float Duration; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct AActor* ForceSource; // 0xa0(0x08)
	struct FVector ForceSourceLocation; // 0xa8(0x0c)
	bool bRewindForceSource; // 0xb4(0x01)
	bool bGroundingForce; // 0xb5(0x01)
	bool bDisableMovementModifiers; // 0xb6(0x01)
	char pad_B7[0x1]; // 0xb7(0x01)
	struct AActor* ContextActor; // 0xb8(0x08)
	char pad_C0[0x3c]; // 0xc0(0x3c)
	bool bUseIntegrator; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	int32_t MaxIterations; // 0x100(0x04)
	float MaxTimeStep; // 0x104(0x04)
	bool bForceStopsOnBlock; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct FClassInclusionExclusionFilter BlockingActorFilter; // 0x110(0x50)
	float MinAngleToStopForce; // 0x160(0x04)
	char pad_164[0x8]; // 0x164(0x08)
	float OffGroundTimeModifier; // 0x16c(0x04)

	bool TickForceModule(float DeltaTime); // Function ShooterGame.ForceModule.TickForceModule // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void Shutdown(); // Function ShooterGame.ForceModule.Shutdown // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void SetDuration(float NewDuration); // Function ShooterGame.ForceModule.SetDuration // (Final|Native|Protected|BlueprintCallable) // @ game+0x390c530
	void OnTargetMovementBlocked(struct FHitResult BlockingHit); // Function ShooterGame.ForceModule.OnTargetMovementBlocked // (Final|Native|Private) // @ game+0x390c0f0
	void OnMovementBlocked(struct FHitResult& BlockingHit); // Function ShooterGame.ForceModule.OnMovementBlocked // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	struct FVector ModifyAcceleration(struct FVector& Acceleration, float Time); // Function ShooterGame.ForceModule.ModifyAcceleration // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x390bb90
	void Initialize(); // Function ShooterGame.ForceModule.Initialize // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	float GetMovementTimestamp(); // Function ShooterGame.ForceModule.GetMovementTimestamp // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x390ba80
	float GetModuleTimestamp(); // Function ShooterGame.ForceModule.GetModuleTimestamp // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x390ba20
	float GetModuleTime(); // Function ShooterGame.ForceModule.GetModuleTime // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b9f0
	float GetModifierForAttribute(enum class EForceModuleAttribute Type); // Function ShooterGame.ForceModule.GetModifierForAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0x390b960
	float GetModifierDuration(enum class EForceModuleAttribute Attribute); // Function ShooterGame.ForceModule.GetModifierDuration // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b8d0
	struct FVector GetLastUpdateNormalizedForceDirection(); // Function ShooterGame.ForceModule.GetLastUpdateNormalizedForceDirection // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b830
	float GetLastUpdateForceMagnitudePerSecond(); // Function ShooterGame.ForceModule.GetLastUpdateForceMagnitudePerSecond // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b800
	struct FForceModuleHandle GetHandle(); // Function ShooterGame.ForceModule.GetHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x390b6d0
	struct AActor* GetForceTarget(); // Function ShooterGame.ForceModule.GetForceTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba720
	float GetAttributeModifier(enum class EForceModuleAttribute Type, float Time); // Function ShooterGame.ForceModule.GetAttributeModifier // (Native|Event|Protected|BlueprintEvent) // @ game+0x390b550
	struct FVector GetAppliedForce(struct FVector DestinationOffset, struct FVector Velocity, float TimeStep); // Function ShooterGame.ForceModule.GetAppliedForce // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ForceModuleManagerComponent
// Size: 0x1c8 (Inherited: 0xe8)
struct UForceModuleManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnForceModulePreAdd; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnForceModuleAdded; // 0x100(0x10)
	struct FMulticastInlineDelegate OnForceModuleRemoved; // 0x110(0x10)
	char pad_120[0x20]; // 0x120(0x20)
	struct TArray<struct UForceModule*> ForceModules; // 0x140(0x10)
	struct TArray<struct FForceModuleRecord> AuthActivePredictedForceModules; // 0x150(0x10)
	char pad_160[0x68]; // 0x160(0x68)

	void SetExclusiveForceModule(struct UForceModule* ModuleClass); // Function ShooterGame.ForceModuleManagerComponent.SetExclusiveForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x3913ec0
	void ServerRequestSyncActiveForceModules(struct AAresPlayerController* RequestingPlayer); // Function ShooterGame.ForceModuleManagerComponent.ServerRequestSyncActiveForceModules // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x36f7840
	void RemoveForceModuleBySource(struct AActor* Source, struct UForceModule* Module, bool bAbort); // Function ShooterGame.ForceModuleManagerComponent.RemoveForceModuleBySource // (Final|Native|Public|BlueprintCallable) // @ game+0x3913d90
	void RemoveForceModule(struct FForceModuleHandle Handle, bool bAbort); // Function ShooterGame.ForceModuleManagerComponent.RemoveForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x3913cb0
	void RemoveDeterministicForceModule(struct FForceModuleHandle Handle); // Function ShooterGame.ForceModuleManagerComponent.RemoveDeterministicForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x3913c30
	void RemoveAllForceModulesByType(struct UForceModule* Module, bool bAbort); // Function ShooterGame.ForceModuleManagerComponent.RemoveAllForceModulesByType // (Final|Native|Public|BlueprintCallable) // @ game+0x3913b60
	void OnStopBeingRelevant(struct AActor* OwningActor); // Function ShooterGame.ForceModuleManagerComponent.OnStopBeingRelevant // (Final|Native|Private) // @ game+0x3913a40
	void OnServerLeaveFoW(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.ForceModuleManagerComponent.OnServerLeaveFoW // (Final|Native|Private) // @ game+0x39138e0
	void OnRep_AuthActivePredictedForceModules(); // Function ShooterGame.ForceModuleManagerComponent.OnRep_AuthActivePredictedForceModules // (Final|Native|Public) // @ game+0x39138c0
	void NetMulticastRemoveForceModule(struct FForceModuleHandle Handle); // Function ShooterGame.ForceModuleManagerComponent.NetMulticastRemoveForceModule // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x39136f0
	void NetMulticastEnforceEndOfLifeCleanup(struct TArray<struct FForceModuleHandle> ModulesCleanedUpByServer); // Function ShooterGame.ForceModuleManagerComponent.NetMulticastEnforceEndOfLifeCleanup // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3913640
	void NetMulticastApplyForceModule(struct FForceModuleHandle Handle, struct AActor* Source, struct FVector SourceLocation, struct UForceModule* Module, float Duration, struct FNetworkedMovementTimestamp Timestamp, struct AActor* ContextActor); // Function ShooterGame.ForceModuleManagerComponent.NetMulticastApplyForceModule // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x39133f0
	bool HasActiveForceModuleWithTag(struct FGameplayTag& Tag); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModuleWithTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39132e0
	bool HasActiveForceModuleOfType(struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModuleOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3913240
	bool HasActiveForceModuleBySource(struct AActor* Source, struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModuleBySource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3913170
	bool HasActiveForceModule(struct FForceModuleHandle& Handle); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModule // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39130c0
	float GetForceModuleModifier(enum class EForceModuleAttribute Type); // Function ShooterGame.ForceModuleManagerComponent.GetForceModuleModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911d20
	int32_t GetActiveForceModuleCount(); // Function ShooterGame.ForceModuleManagerComponent.GetActiveForceModuleCount // (Final|Native|Public|Const) // @ game+0x3911b50
	struct TArray<struct UForceModule*> FindActiveForceModulesOfType(struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModulesOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911a70
	struct UForceModule* FindActiveForceModuleOfType(struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModuleOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39119d0
	struct UForceModule* FindActiveForceModuleBySource(struct AActor* Source, struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModuleBySource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911900
	struct UForceModule* FindActiveForceModule(struct FForceModuleHandle& Handle); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModule // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911850
	void ClientFinishForceModule(struct FForceModuleHandle Handle, struct FNetworkedMovementTimestamp TimeStampToEnd); // Function ShooterGame.ForceModuleManagerComponent.ClientFinishForceModule // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3911620
	void ClearExclusiveForceModule(struct UForceModule* ModuleClass); // Function ShooterGame.ForceModuleManagerComponent.ClearExclusiveForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x3911590
	struct FForceModuleHandle ApplyForceModule(struct AActor* Source, struct UForceModule* Module, float Duration, struct AActor* ContextActor); // Function ShooterGame.ForceModuleManagerComponent.ApplyForceModule // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3911420
	struct FForceModuleHandle ApplyDeterministicForceModule(struct AActor* Source, struct UForceModule* Module, float Duration, struct AActor* ContextActor); // Function ShooterGame.ForceModuleManagerComponent.ApplyDeterministicForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x39112b0
	struct FForceModuleHandle ApplyClientSyncedForceModule(struct AActor* Source, struct UForceModule* Module, float Duration, struct AActor* ContextActor); // Function ShooterGame.ForceModuleManagerComponent.ApplyClientSyncedForceModule // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3911140
	struct FForceModuleHandle ApplyClientPredictedForceModule(struct AActor* Source, struct UForceModule* Module, float Duration, struct AActor* ContextActor); // Function ShooterGame.ForceModuleManagerComponent.ApplyClientPredictedForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x3910fd0
};

// Class ShooterGame.FreeCamComponent
// Size: 0x150 (Inherited: 0x108)
struct UFreeCamComponent : USpectateActionComponent {
	char pad_108[0x30]; // 0x108(0x30)
	struct UGamepadInputComponent* CachedGamepadComponent; // 0x138(0x08)
	struct AObserverPawn* FreeCamPawn; // 0x140(0x08)
	bool bShouldSpectateFreeCam; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)

	void ServerToggleFreeCam(); // Function ShooterGame.FreeCamComponent.ServerToggleFreeCam // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3654e70
	void RequestToggleFreeCam(); // Function ShooterGame.FreeCamComponent.RequestToggleFreeCam // (Final|Native|Private) // @ game+0x3913ea0
	void OnViewTargetInfoReplicated(struct FViewTargetInfo& PreviousViewTargetInfo); // Function ShooterGame.FreeCamComponent.OnViewTargetInfoReplicated // (Final|Native|Private|HasOutParms) // @ game+0x3913ad0
	void OnOwnerSubobjectReplicated(struct UObject* Subobject); // Function ShooterGame.FreeCamComponent.OnOwnerSubobjectReplicated // (Final|Native|Private) // @ game+0x3913830
	void OnAuthBeforePendingViewTargetIsApplied(); // Function ShooterGame.FreeCamComponent.OnAuthBeforePendingViewTargetIsApplied // (Final|Native|Private) // @ game+0x3913780
	bool IsFreeCamEnabled(); // Function ShooterGame.FreeCamComponent.IsFreeCamEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39133c0
	void ClientUpdateFreeCamPosition(struct AActor* ViewTargetToMatch); // Function ShooterGame.FreeCamComponent.ClientUpdateFreeCamPosition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x36f5610
	void ClientTeleportFreeCamToPosition(struct FVector Position, struct FRotator Rotation, bool bCheckCollision); // Function ShooterGame.FreeCamComponent.ClientTeleportFreeCamToPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3911730
	void ClientFreeCamAtCurrentLocation(); // Function ShooterGame.FreeCamComponent.ClientFreeCamAtCurrentLocation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3911700
};

// Class ShooterGame.FRELoginManager
// Size: 0x1b0 (Inherited: 0x80)
struct UFRELoginManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct URiotProductManager* ProductManager; // 0x98(0x08)
	struct URiotGamesApiClient* RiotGamesApi; // 0xa0(0x08)
	struct FSoftClassPath EngagementScreenClass; // 0xa8(0x20)
	struct FSoftClassPath PlatformUIFREClass; // 0xc8(0x20)
	struct FSoftClassPath PostLoginMap; // 0xe8(0x20)
	struct UEngagementScreen* EngagementScreenWidget; // 0x108(0x08)
	struct UObject* FREAssets; // 0x110(0x08)
	struct UUserWidget* PlatformUIFREWidget; // 0x118(0x08)
	char pad_120[0x90]; // 0x120(0x90)

	void OnEngagementButtonPressed(int32_t UserIndex); // Function ShooterGame.FRELoginManager.OnEngagementButtonPressed // (Final|Native|Private) // @ game+0x39137a0
};

// Class ShooterGame.FresnelComponent
// Size: 0x1d8 (Inherited: 0xe8)
struct UFresnelComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bDirty; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TSet<struct UMaterialInstanceDynamic*> Materials1P; // 0xf8(0x50)
	struct TSet<struct UMaterialInstanceDynamic*> Materials3P; // 0x148(0x50)
	struct FDelegate OnIntSettingsChanged; // 0x198(0x14)
	struct FDelegate OnBoolSettingsChanged; // 0x1ac(0x14)
	bool UseColorBlindPreferences; // 0x1c0(0x01)
	char pad_1C1[0x3]; // 0x1c1(0x03)
	float FresnelIntensity; // 0x1c4(0x04)
	float FresnelOffset; // 0x1c8(0x04)
	float OriginalFresnelIntensity; // 0x1cc(0x04)
	float OriginalFresnelOffset; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)

	void SetOffset(float NewOffset); // Function ShooterGame.FresnelComponent.SetOffset // (Final|Native|Protected|BlueprintCallable) // @ game+0x3914250
	void SetMaterials3P(struct TSet<struct UMaterialInstanceDynamic*>& FresnelMaterials); // Function ShooterGame.FresnelComponent.SetMaterials3P // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3914110
	void SetMaterials1P(struct TSet<struct UMaterialInstanceDynamic*>& FresnelMaterials); // Function ShooterGame.FresnelComponent.SetMaterials1P // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3913fd0
	void SetIntensity(float NewIntensity); // Function ShooterGame.FresnelComponent.SetIntensity // (Final|Native|Protected|BlueprintCallable) // @ game+0x3913f50
	void HandleIntSettingsChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.FresnelComponent.HandleIntSettingsChanged // (Final|Native|Protected) // @ game+0x3912c00
	void HandleBoolSettingsChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.FresnelComponent.HandleBoolSettingsChanged // (Final|Native|Protected) // @ game+0x3912410
};

// Class ShooterGame.FriendModel
// Size: 0x168 (Inherited: 0x30)
struct UFriendModel : UObject {
	struct FMulticastInlineDelegate OnConversationIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDisplayGroupChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnGameNameChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTagLineChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnGroupChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnNoteChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnMessageChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnProductChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSummaryChanged; // 0xb0(0x10)
	struct FString Subject; // 0xc0(0x10)
	struct FString ConversationID; // 0xd0(0x10)
	struct FString DisplayGroup; // 0xe0(0x10)
	struct FString GameName; // 0xf0(0x10)
	struct FString TagLine; // 0x100(0x10)
	struct FString Group; // 0x110(0x10)
	struct FString Name; // 0x120(0x10)
	struct FString Note; // 0x130(0x10)
	struct FString Message; // 0x140(0x10)
	enum class EPresenceProduct Product; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct FString Summary; // 0x158(0x10)

	struct FString GetTagLine(); // Function ShooterGame.FriendModel.GetTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39122b0
	struct FString GetSummary(); // Function ShooterGame.FriendModel.GetSummary // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39121e0
	struct FString GetSubject(); // Function ShooterGame.FriendModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3912110
	enum class EPresenceProduct GetProduct(); // Function ShooterGame.FriendModel.GetProduct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39120f0
	struct FString GetNote(); // Function ShooterGame.FriendModel.GetNote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3912020
	struct FString GetMessage(); // Function ShooterGame.FriendModel.GetMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911f50
	struct FString GetGroup(); // Function ShooterGame.FriendModel.GetGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911e80
	struct FString GetGameName(); // Function ShooterGame.FriendModel.GetGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911db0
	struct FString GetDisplayGroup(); // Function ShooterGame.FriendModel.GetDisplayGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911c50
	struct FString GetConversationID(); // Function ShooterGame.FriendModel.GetConversationID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911b80
};

// Class ShooterGame.FriendNotificationManager
// Size: 0xa0 (Inherited: 0x80)
struct UFriendNotificationManager : UInitSystem {
	struct UFriendsManager* FriendsManager; // 0x80(0x08)
	struct UFriendsModel* FriendsModel; // 0x88(0x08)
	struct UNotificationManager* NotificationManager; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)

	bool IsDisabled(); // Function ShooterGame.FriendNotificationManager.IsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3913390
	void HandleYourFriendsListFull(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleYourFriendsListFull // (Final|Native|Private) // @ game+0x3913010
	void HandleRequestedPlayerNotFound(struct FString Name, struct FString TagLine); // Function ShooterGame.FriendNotificationManager.HandleRequestedPlayerNotFound // (Final|Native|Private) // @ game+0x3912f00
	void HandleRepeatOutboundRequest(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleRepeatOutboundRequest // (Final|Native|Private) // @ game+0x3912e70
	void HandleOutboundFriendRequestAdded(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleOutboundFriendRequestAdded // (Final|Native|Private) // @ game+0x3634e00
	void HandleMaximumOutgoingRequests(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleMaximumOutgoingRequests // (Final|Native|Private) // @ game+0x3912dc0
	void HandleMaximumIncomingRequests(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleMaximumIncomingRequests // (Final|Native|Private) // @ game+0x3912d10
	void HandleInboundFriendRequestRemoved(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleInboundFriendRequestRemoved // (Final|Native|Private) // @ game+0x3912b70
	void HandleInboundFriendRequestAdded(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleInboundFriendRequestAdded // (Final|Native|Private) // @ game+0x3912ae0
	void HandleGenericDismiss(struct UGenericNotification* Notification); // Function ShooterGame.FriendNotificationManager.HandleGenericDismiss // (Final|Native|Private) // @ game+0x3912a50
	void HandleFriendRequestSent(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestSent // (Final|Native|Private) // @ game+0x39129a0
	void HandleFriendRequestRejected(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestRejected // (Final|Native|Private) // @ game+0x39128f0
	void HandleFriendRequestNotSent(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestNotSent // (Final|Native|Private) // @ game+0x3912840
	void HandleFriendRequestDeclineAction(struct UGenericNotification* Notification); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestDeclineAction // (Final|Native|Private) // @ game+0x39127b0
	void HandleFriendRequestAcceptAction(struct UGenericNotification* Notification); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestAcceptAction // (Final|Native|Private) // @ game+0x3912720
	void HandleFriendRemoveFailed(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRemoveFailed // (Final|Native|Private) // @ game+0x39125c0
	void HandleFriendRemoved(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRemoved // (Final|Native|Private) // @ game+0x3912670
	void HandleFriendAdded(struct UFriendModel* FriendModel); // Function ShooterGame.FriendNotificationManager.HandleFriendAdded // (Final|Native|Private) // @ game+0x3912530
	void HandleAlreadyFriends(struct UFriendModel* FriendModel); // Function ShooterGame.FriendNotificationManager.HandleAlreadyFriends // (Final|Native|Private) // @ game+0x3912380
};

// Class ShooterGame.FriendRequestModel
// Size: 0x80 (Inherited: 0x30)
struct UFriendRequestModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Subject; // 0x40(0x10)
	struct FString GameName; // 0x50(0x10)
	struct FString TagLine; // 0x60(0x10)
	struct FString Note; // 0x70(0x10)

	struct FString GetTagLine(); // Function ShooterGame.FriendRequestModel.GetTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ce60
	struct FString GetSubject(); // Function ShooterGame.FriendRequestModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cd90
	struct FString GetNote(); // Function ShooterGame.FriendRequestModel.GetNote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c550
	struct FString GetID(); // Function ShooterGame.FriendRequestModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bd10
	struct FString GetGameName(); // Function ShooterGame.FriendRequestModel.GetGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bbb0
};

// Class ShooterGame.FriendsManager
// Size: 0x180 (Inherited: 0x80)
struct UFriendsManager : UInitSystem {
	char pad_80[0x50]; // 0x80(0x50)
	struct FMulticastInlineDelegate OnFriendsLoaded; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnRequestedPlayerNotFound; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMaximumIncomingRequests; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnMaximumOutgoingRequests; // 0x100(0x10)
	struct FMulticastInlineDelegate OnYourFriendsListFull; // 0x110(0x10)
	struct FMulticastInlineDelegate OnRepeatOutboundFriendRequest; // 0x120(0x10)
	struct FMulticastInlineDelegate OnAlreadyFriends; // 0x130(0x10)
	struct UConfigManager* ConfigManager; // 0x140(0x08)
	struct UFriendsService* FriendsService; // 0x148(0x08)
	struct UFriendsModel* FriendsModel; // 0x150(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x158(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x160(0x08)
	char pad_168[0x18]; // 0x168(0x18)

	void SendFriendRequest(struct FString Name, struct FString TagLine); // Function ShooterGame.FriendsManager.SendFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x391f5a0
	void RemoveFriend(struct FString Name, struct FString TagLine, struct FString Subject); // Function ShooterGame.FriendsManager.RemoveFriend // (Final|Native|Public|BlueprintCallable) // @ game+0x391f420
	void RejectFriendRequest(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.FriendsManager.RejectFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x391f2b0
	void OnChatDisconnected(); // Function ShooterGame.FriendsManager.OnChatDisconnected // (Final|Native|Public) // @ game+0x391ec40
	void OnChatConnected(); // Function ShooterGame.FriendsManager.OnChatConnected // (Final|Native|Public) // @ game+0x391ec20
	bool IsFriendsModelInitialPopulationComplete(); // Function ShooterGame.FriendsManager.IsFriendsModelInitialPopulationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ec00
	bool IsDisabled(); // Function ShooterGame.FriendsManager.IsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391eaf0
	struct UFriendsModel* GetFriendsModel(); // Function ShooterGame.FriendsManager.GetFriendsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe770
	struct UFriendsManager* GetFriendsManager(struct UObject* WorldContextObject); // Function ShooterGame.FriendsManager.GetFriendsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x391ba70
	void AcceptFriendRequest(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.FriendsManager.AcceptFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x391b4a0
};

// Class ShooterGame.FriendsModel
// Size: 0x1a8 (Inherited: 0x30)
struct UFriendsModel : UObject {
	struct FMulticastInlineDelegate OnFriendAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFriendRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOutboundFriendRequestAdded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOutboundFriendRequestRemoved; // 0x60(0x10)
	struct FMulticastInlineDelegate OnInboundFriendRequestAdded; // 0x70(0x10)
	struct FMulticastInlineDelegate OnInboundFriendRequestRemoved; // 0x80(0x10)
	struct TMap<struct FString, struct UFriendModel*> Friends; // 0x90(0x50)
	struct TMap<struct FString, struct UFriendRequestModel*> OutboundFriendRequests; // 0xe0(0x50)
	struct TMap<struct FString, struct UFriendRequestModel*> InboundFriendRequests_Backing; // 0x130(0x50)
	char pad_180[0x28]; // 0x180(0x28)

	bool IsFriend(struct FString Subject); // Function ShooterGame.FriendsModel.IsFriend // (Final|Native|Public|BlueprintCallable) // @ game+0x391eb40
	struct TMap<struct FString, struct UFriendRequestModel*> GetOutboundFriendRequests(); // Function ShooterGame.FriendsModel.GetOutboundFriendRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c840
	struct UFriendRequestModel* GetOutboundFriendRequestBySubject(struct FString Subject); // Function ShooterGame.FriendsModel.GetOutboundFriendRequestBySubject // (Final|Native|Public) // @ game+0x391c780
	struct TScriptInterface<IUnorderedMapModel> GetInboundFriendRequestsModel(); // Function ShooterGame.FriendsModel.GetInboundFriendRequestsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c0e0
	struct TMap<struct FString, struct UFriendRequestModel*> GetInboundFriendRequests(); // Function ShooterGame.FriendsModel.GetInboundFriendRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bfc0
	struct UFriendRequestModel* GetInboundFriendRequestBySubject(struct FString Subject); // Function ShooterGame.FriendsModel.GetInboundFriendRequestBySubject // (Final|Native|Public) // @ game+0x391bf00
	struct UFriendRequestModel* GetInboundFriendRequestByNameAndTag(struct FString Name, struct FString TagLine); // Function ShooterGame.FriendsModel.GetInboundFriendRequestByNameAndTag // (Final|Native|Public) // @ game+0x391bde0
	struct TMap<struct FString, struct UFriendModel*> GetFriends(); // Function ShooterGame.FriendsModel.GetFriends // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b950
};

// Class ShooterGame.FriendsService
// Size: 0x40 (Inherited: 0x30)
struct UFriendsService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
	struct UConfigManager* ConfigManager; // 0x38(0x08)
};

// Class ShooterGame.FXCPoolWarmingList
// Size: 0x40 (Inherited: 0x30)
struct UFXCPoolWarmingList : UObject {
	struct TArray<struct FFXCPoolWarmingListEntry> Entries; // 0x30(0x10)
};

// Class ShooterGame.GameDataEventForwarder
// Size: 0x40 (Inherited: 0x30)
struct UGameDataEventForwarder : UObject {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class ShooterGame.GameDataBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UGameDataBlueprintLibrary : UBlueprintFunctionLibrary {

	void RecordBombStateChangedEvent(struct UObject* WorldContextObject, enum class EAresBombStates NewState); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombStateChangedEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391f140
	void RecordBombPlantStopEvent(struct UObject* WorldContextObject); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombPlantStopEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391f0c0
	void RecordBombPlantStartEvent(struct UObject* WorldContextObject, struct AShooterPlayerState* PlanterPlayerState); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombPlantStartEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391f000
	void RecordBombPlantCompletedEvent(struct UObject* WorldContextObject, struct AShooterPlayerState* PlanterPlayerState, struct FVector PlantLocation); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombPlantCompletedEvent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x391eef0
	void RecordBombDefuseStopEvent(struct UObject* WorldContextObject); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombDefuseStopEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391ee70
	void RecordBombDefuseStartEvent(struct UObject* WorldContextObject, struct AShooterPlayerState* DefuserPlayerState); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombDefuseStartEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391edb0
	void RecordBombDefuseCheckpointReachedEvent(struct UObject* WorldContextObject, struct AShooterPlayerState* DefuserPlayerState, int32_t CheckpointNumber, float Progress); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombDefuseCheckpointReachedEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391ec60
};

// Class ShooterGame.GameDataExportComponent
// Size: 0x1a0 (Inherited: 0xe8)
struct UGameDataExportComponent : UActorComponent {
	struct UShooterGameStateDataModel* GameStateModel; // 0xe8(0x08)
	bool bCanExportGameData; // 0xf0(0x01)
	char pad_F1[0x27]; // 0xf1(0x27)
	struct UShooterGameStateDataModel* GameStateModelClass; // 0x118(0x08)
	char pad_120[0x30]; // 0x120(0x30)
	struct TArray<struct UBaseGameDataEventReceiver*> EventReceivers; // 0x150(0x10)
	char pad_160[0x10]; // 0x160(0x10)
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x170(0x08)
	struct UPlayerGameDataEventSubscriptions* PlayerGameDataEventSubscriptions; // 0x178(0x08)
	struct UObserverGameDataEventSubscriptions* ObserverGameDataEventSubscriptions; // 0x180(0x08)
	struct UModeGameDataEventSubscriptions* ModeGameDataEventSubscriptions; // 0x188(0x08)
	struct UMatchRecoveryGameDataEventSubscriptions* MatchRecoveryGameDataEventSubscriptions; // 0x190(0x08)
	struct UPremierGameDataEventSubscriptions* PremierGameDataEventSubscriptions; // 0x198(0x08)

	bool IsDataExportEnabled(); // Function ShooterGame.GameDataExportComponent.IsDataExportEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ead0
	void HandleGameDataExportFeatureToggled(enum class EGameFeatureToggleName Feature, bool bEnabled); // Function ShooterGame.GameDataExportComponent.HandleGameDataExportFeatureToggled // (Final|Native|Private) // @ game+0x3690810
	struct UGameDataExportComponent* GetGameDataExportComponent(struct UObject* WorldContextObject); // Function ShooterGame.GameDataExportComponent.GetGameDataExportComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391bb00
};

// Class ShooterGame.GameDataExporter
// Size: 0x190 (Inherited: 0x30)
struct UGameDataExporter : UObject {
	char pad_30[0x160]; // 0x30(0x160)
};

// Class ShooterGame.ShooterPlayerStateDataModel
// Size: 0x118 (Inherited: 0x30)
struct UShooterPlayerStateDataModel : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct UShooterTeamStateDataModel* TeamDataModel; // 0x78(0x08)
	struct AShooterPlayerState* PlayerState; // 0x80(0x08)
	struct UBaseTeamComponent* PlayerTeamComponent; // 0x88(0x08)
	struct AShooterCharacter* Character; // 0x90(0x08)
	struct UAresInventory* Inventory; // 0x98(0x08)
	struct TMap<enum class EAresItemSlot, struct AAresItem*> CachedLoadout; // 0xa0(0x50)
	int32_t ModelId; // 0xf0(0x04)
	int32_t RoundCombatScore; // 0xf4(0x04)
	int32_t MatchCombatScore; // 0xf8(0x04)
	bool bIsDowned; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float DownedTimestamp; // 0x100(0x04)
	float DownedUnpausedTimestamp; // 0x104(0x04)
	struct TArray<struct FTimeseriesData> TimeseriesData; // 0x108(0x10)

	void UnregisterTeamDataModelFromUpdates(struct UShooterTeamStateDataModel* TeamDataModel); // Function ShooterGame.ShooterPlayerStateDataModel.UnregisterTeamDataModelFromUpdates // (Final|Native|Public) // @ game+0x391f7d0
	void SetDownedState(bool bDownedState); // Function ShooterGame.ShooterPlayerStateDataModel.SetDownedState // (Final|Native|Public) // @ game+0x391f6b0
	void RoundStartedEvent(); // Function ShooterGame.ShooterPlayerStateDataModel.RoundStartedEvent // (Final|Native|Public) // @ game+0x391f580
	void RegisterTeamDataModelForUpdates(struct UShooterTeamStateDataModel* TeamDataModel); // Function ShooterGame.ShooterPlayerStateDataModel.RegisterTeamDataModelForUpdates // (Final|Native|Public) // @ game+0x391f220
	bool IsDowned(); // Function ShooterGame.ShooterPlayerStateDataModel.IsDowned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391eb20
	bool IsCoach(); // Function ShooterGame.ShooterPlayerStateDataModel.IsCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ea80
	bool IsBot(); // Function ShooterGame.ShooterPlayerStateDataModel.IsBot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391e930
	bool IsAlive(); // Function ShooterGame.ShooterPlayerStateDataModel.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391e8e0
	void InitializeModel(int32_t InModelId, struct AShooterPlayerState* InPlayerState); // Function ShooterGame.ShooterPlayerStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x391e800
	bool HasSpike(); // Function ShooterGame.ShooterPlayerStateDataModel.HasSpike // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391e7b0
	void HandleSpawnedCharacterChanged(struct AShooterCharacter* NewCharacter); // Function ShooterGame.ShooterPlayerStateDataModel.HandleSpawnedCharacterChanged // (Final|Native|Protected) // @ game+0x391e6a0
	void HandleOnResourceConsumed(struct UResourceComponent* ResourceComponent, int32_t UnitsConsumed); // Function ShooterGame.ShooterPlayerStateDataModel.HandleOnResourceConsumed // (Final|Native|Protected) // @ game+0x391daf0
	void HandleInventoryTransaction(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* Item); // Function ShooterGame.ShooterPlayerStateDataModel.HandleInventoryTransaction // (Final|Native|Protected) // @ game+0x391d6f0
	struct TArray<struct FTimeseriesData> GetTimeseriesData(); // Function ShooterGame.ShooterPlayerStateDataModel.GetTimeseriesData // (Final|Native|Public|Const) // @ game+0x391d010
	enum class EAresTeamRole GetTeamRole(); // Function ShooterGame.ShooterPlayerStateDataModel.GetTeamRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cfc0
	struct UShooterTeamStateDataModel* GetTeamDataModel(); // Function ShooterGame.ShooterPlayerStateDataModel.GetTeamDataModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384dff0
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.ShooterPlayerStateDataModel.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cd40
	int32_t GetRoundCombatScore(); // Function ShooterGame.ShooterPlayerStateDataModel.GetRoundCombatScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cc90
	struct FString GetPlayerSubject(); // Function ShooterGame.ShooterPlayerStateDataModel.GetPlayerSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cb60
	struct FString GetPlayerName(); // Function ShooterGame.ShooterPlayerStateDataModel.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ca30
	int32_t GetNumUltimatePoints(); // Function ShooterGame.ShooterPlayerStateDataModel.GetNumUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c6a0
	int32_t GetNumPointsNeededForUltimate(); // Function ShooterGame.ShooterPlayerStateDataModel.GetNumPointsNeededForUltimate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c620
	int32_t GetMoney(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c500
	int32_t GetModelId(); // Function ShooterGame.ShooterPlayerStateDataModel.GetModelId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c4c0
	struct FString GetMegapacketTagLine(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMegapacketTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c410
	struct FString GetMegapacketGameName(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMegapacketGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c310
	int32_t GetMatchCombatScore(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMatchCombatScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c180
	struct UAresInventory* GetInventory(); // Function ShooterGame.ShooterPlayerStateDataModel.GetInventory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c120
	float GetDownedUnpausedTimestamp(); // Function ShooterGame.ShooterPlayerStateDataModel.GetDownedUnpausedTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b930
	float GetDownedTimestamp(); // Function ShooterGame.ShooterPlayerStateDataModel.GetDownedTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b910
	struct FGuid GetDesiredClassUuid(); // Function ShooterGame.ShooterPlayerStateDataModel.GetDesiredClassUuid // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b8b0
	struct UBasicCombatStatsComponent* GetBasicCombatStatsComponent(); // Function ShooterGame.ShooterPlayerStateDataModel.GetBasicCombatStatsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b820
	void ClearTimeseriesData(); // Function ShooterGame.ShooterPlayerStateDataModel.ClearTimeseriesData // (Final|Native|Public) // @ game+0x391b7e0
	void AssociateTeamDataModel(struct UShooterTeamStateDataModel* NewTeamDataModel); // Function ShooterGame.ShooterPlayerStateDataModel.AssociateTeamDataModel // (Final|Native|Public) // @ game+0x391b750
	void AddTimeseriesData(struct FTimeseriesData Data); // Function ShooterGame.ShooterPlayerStateDataModel.AddTimeseriesData // (Final|Native|Public) // @ game+0x391b6a0
	void AddScoreDelta(int32_t Total); // Function ShooterGame.ShooterPlayerStateDataModel.AddScoreDelta // (Final|Native|Public) // @ game+0x391b610
};

// Class ShooterGame.ShooterObserverStateDataModel
// Size: 0x48 (Inherited: 0x30)
struct UShooterObserverStateDataModel : UObject {
	int32_t ModelId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct AObserverPlayerState* ObserverPlayerState; // 0x38(0x08)
	struct UShooterPlayerStateDataModel* PlayerTarget; // 0x40(0x08)

	void SetPlayerTarget(struct UShooterPlayerStateDataModel* NewPlayerTarget); // Function ShooterGame.ShooterObserverStateDataModel.SetPlayerTarget // (Final|Native|Public) // @ game+0x391f740
	void InitializeModel(int32_t InModelId, struct AObserverPlayerState* InObserverPlayerState); // Function ShooterGame.ShooterObserverStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x391e800
	int32_t GetModelId(); // Function ShooterGame.ShooterObserverStateDataModel.GetModelId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c490
	struct FString GetMegapacketTagLine(); // Function ShooterGame.ShooterObserverStateDataModel.GetMegapacketTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c390
	struct FString GetMegapacketGameName(); // Function ShooterGame.ShooterObserverStateDataModel.GetMegapacketGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c290
};

// Class ShooterGame.ShooterGameStateDataModel
// Size: 0x570 (Inherited: 0x30)
struct UShooterGameStateDataModel : UObject {
	char pad_30[0x360]; // 0x30(0x360)
	struct UShooterPlayerStateDataModel* PlayerModelClass; // 0x390(0x08)
	struct UShooterObserverStateDataModel* ObserverModelClass; // 0x398(0x08)
	struct UShooterTeamStateDataModel* TeamModelClass; // 0x3a0(0x08)
	struct AShooterGameState* GameState; // 0x3a8(0x08)
	struct FTimerHandle WorldSnapshottingTimer; // 0x3b0(0x08)
	struct FTimerHandle WorldConfigurationTimer; // 0x3b8(0x08)
	struct FTimerHandle WorldTimeseriesTimer; // 0x3c0(0x08)
	int32_t LastIssuedID; // 0x3c8(0x04)
	enum class EShooterGameMode GameMode; // 0x3cc(0x01)
	char pad_3CD[0x3]; // 0x3cd(0x03)
	struct TArray<struct FRoundDataModel> CompletedRounds; // 0x3d0(0x10)
	struct TMap<struct AShooterPlayerState*, struct UShooterPlayerStateDataModel*> PlayersLookup; // 0x3e0(0x50)
	struct TArray<struct UShooterPlayerStateDataModel*> PlayerDataModels; // 0x430(0x10)
	struct TMap<struct AObserverPlayerState*, struct UShooterObserverStateDataModel*> ObserversLookup; // 0x440(0x50)
	struct TArray<struct UShooterObserverStateDataModel*> ObserverDataModels; // 0x490(0x10)
	struct TMap<struct UBaseTeamComponent*, struct UShooterTeamStateDataModel*> TeamsLookup; // 0x4a0(0x50)
	struct TArray<struct UShooterTeamStateDataModel*> TeamDataModels; // 0x4f0(0x10)
	char pad_500[0x58]; // 0x500(0x58)
	struct TArray<struct UObject*> EventReceivers; // 0x558(0x10)
	struct UShooterPlayerStateDataModel* CachedBombInstigator; // 0x568(0x08)

	void InitializeModel(struct AShooterGameState* InGameState); // Function ShooterGame.ShooterGameStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x379b9a0
	void HandleWorldSnapshot(); // Function ShooterGame.ShooterGameStateDataModel.HandleWorldSnapshot // (Final|Native|Protected) // @ game+0x391e790
	void HandleWorldConfiguration(); // Function ShooterGame.ShooterGameStateDataModel.HandleWorldConfiguration // (Final|Native|Protected) // @ game+0x391e770
	void HandleTimeseriesSnapshot(); // Function ShooterGame.ShooterGameStateDataModel.HandleTimeseriesSnapshot // (Final|Native|Protected) // @ game+0x391e750
	void HandleTeamListUpdated(); // Function ShooterGame.ShooterGameStateDataModel.HandleTeamListUpdated // (Final|Native|Protected) // @ game+0x391e730
	void HandleScoreChanged(); // Function ShooterGame.ShooterGameStateDataModel.HandleScoreChanged // (Final|Native|Protected) // @ game+0x391e680
	void HandleRoundStart(int32_t RoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundStart // (Final|Native|Protected) // @ game+0x391e5f0
	void HandleRoundResultsChanged(); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundResultsChanged // (Final|Native|Protected) // @ game+0x391e5d0
	void HandleRoundEnd(int32_t RoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundEnd // (Final|Native|Protected) // @ game+0x391e540
	void HandleRoundCeremonyUpdated(struct AAresCeremony* Ceremony); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundCeremonyUpdated // (Final|Native|Protected) // @ game+0x391e4b0
	void HandlePlayerSpawned(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerSpawned // (Final|Native|Protected) // @ game+0x391e3e0
	void HandlePlayerResurrected(struct AShooterPlayerState* ResurrectorPlayerState, struct AShooterPlayerState* ResurrectedPlayerState, int32_t KillNumberForLifeForResurrector, int32_t KillNumberForLifeForResurrected); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerResurrected // (Final|Native|Protected) // @ game+0x391e280
	void HandlePlayerRecovered(struct AShooterPlayerState* RecoveredByPlayerState, struct AShooterPlayerState* RecoveredPlayerState); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerRecovered // (Final|Native|Protected) // @ game+0x391e1b0
	void HandlePlayerPreDisassociated(struct AShooterPlayerState* DisconnectedPlayerState); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerPreDisassociated // (Final|Native|Protected) // @ game+0x391e120
	void HandlePlayerListUpdated(); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerListUpdated // (Final|Native|Protected) // @ game+0x391e100
	void HandlePlayerKilled(struct AShooterPlayerState* KillerPlayerState, struct AShooterPlayerState* KilledPlayerState, int32_t KillNumberInRoundForKiller, int32_t KillNumberInRoundForKilled, struct UDamageResponse* Response, struct AAresEquippable* EquippableUsed, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerKilled // (Final|Native|Protected|HasOutParms) // @ game+0x391ded0
	void HandlePlayerJoinComplete(struct TArray<struct FString>& JoinedPlayers, struct TArray<struct FString>& RejectedPlayers); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerJoinComplete // (Final|Native|Protected|HasOutParms) // @ game+0x391dd60
	void HandlePlayerDowned(struct AShooterPlayerState* DamagerPlayer, struct AShooterPlayerState* DownedPlayer, struct UDamageResponse* DamageResponse, struct AAresEquippable* EquippableUsed, bool bRecoversInstantly); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerDowned // (Final|Native|Protected) // @ game+0x391dbc0
	void HandleObserverTargetSet(struct AObserverPlayerState* ObserverPlayerState, struct AShooterPlayerState* ObserverTarget); // Function ShooterGame.ShooterGameStateDataModel.HandleObserverTargetSet // (Final|Native|Protected) // @ game+0x391da20
	void HandleMatchTimeoutStateChanged(enum class EAresMatchTimeoutState TimeoutState, float Duration); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchTimeoutStateChanged // (Final|Native|Protected) // @ game+0x391d950
	void HandleMatchPaused(bool IsPaused); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchPaused // (Final|Native|Protected) // @ game+0x391d8c0
	void HandleMatchEnded(struct FAresMatchResult& MatchResult); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchEnded // (Final|Native|Protected|HasOutParms) // @ game+0x391d820
	void HandleMatchBegin(); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchBegin // (Final|Native|Protected) // @ game+0x391d800
	void HandleGameRestarted(int32_t RollbackRoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleGameRestarted // (Final|Native|Protected) // @ game+0x391d660
	void HandleGamePhaseChanged(enum class EAresGamePhase NewPhase, int32_t RoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleGamePhaseChanged // (Final|Native|Protected) // @ game+0x391d590
	void HandleDropInEnabledChanged(bool bIsDropInEnabled); // Function ShooterGame.ShooterGameStateDataModel.HandleDropInEnabledChanged // (Final|Native|Protected) // @ game+0x391d500
	void HandleDamageEvent(struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterGameStateDataModel.HandleDamageEvent // (Final|Native|Protected) // @ game+0x391d470
	void HandleBombStateChanged(enum class EAresBombStates NewState); // Function ShooterGame.ShooterGameStateDataModel.HandleBombStateChanged // (Final|Native|Public) // @ game+0x391d3f0
	void HandleBombPlantStopped(); // Function ShooterGame.ShooterGameStateDataModel.HandleBombPlantStopped // (Final|Native|Public) // @ game+0x391d3d0
	void HandleBombPlantStarted(struct AShooterPlayerState* PlanterPlayerState); // Function ShooterGame.ShooterGameStateDataModel.HandleBombPlantStarted // (Final|Native|Public) // @ game+0x391d340
	void HandleBombPlantCompleted(struct AShooterPlayerState* PlanterPlayerState, struct FVector& BombPlantLocation); // Function ShooterGame.ShooterGameStateDataModel.HandleBombPlantCompleted // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x391d270
	void HandleBombDefuseStopped(); // Function ShooterGame.ShooterGameStateDataModel.HandleBombDefuseStopped // (Final|Native|Public) // @ game+0x391d250
	void HandleBombDefuseStarted(struct AShooterPlayerState* DefuserPlayerState); // Function ShooterGame.ShooterGameStateDataModel.HandleBombDefuseStarted // (Final|Native|Public) // @ game+0x391d1c0
	void HandleBombDefuseCheckpointReached(struct AShooterPlayerState* DefuserPlayerState, int32_t CheckpointNumber, float DefuseProgress); // Function ShooterGame.ShooterGameStateDataModel.HandleBombDefuseCheckpointReached // (Final|Native|Public) // @ game+0x391d0a0
	struct TArray<struct UShooterTeamStateDataModel*> GetTeamDataModels(); // Function ShooterGame.ShooterGameStateDataModel.GetTeamDataModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cf30
	struct UShooterGameStateDataModel* GetShooterGameStateDataModel(struct UObject* WorldContextObject); // Function ShooterGame.ShooterGameStateDataModel.GetShooterGameStateDataModel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x391ccb0
	struct TArray<struct UShooterPlayerStateDataModel*> GetPlayerDataModels(); // Function ShooterGame.ShooterGameStateDataModel.GetPlayerDataModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c960
	struct TArray<struct UShooterObserverStateDataModel*> GetObserverDataModels(); // Function ShooterGame.ShooterGameStateDataModel.GetObserverDataModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c6f0
	int32_t GetNumPointsToWinGame(); // Function ShooterGame.ShooterGameStateDataModel.GetNumPointsToWinGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c670
	float GetMatchTimeoutTimeRemaining(); // Function ShooterGame.ShooterGameStateDataModel.GetMatchTimeoutTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c250
	struct UShooterTeamStateDataModel* GetMatchTimeoutCallingTeamDataModel(); // Function ShooterGame.ShooterGameStateDataModel.GetMatchTimeoutCallingTeamDataModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c1a0
	bool GetIsMatchTimeoutActive(); // Function ShooterGame.ShooterGameStateDataModel.GetIsMatchTimeoutActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c140
	struct TArray<struct FRoundDataModel> GetGameRounds(); // Function ShooterGame.ShooterGameStateDataModel.GetGameRounds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bc80
	enum class EShooterGameMode GetGameMode(); // Function ShooterGame.ShooterGameStateDataModel.GetGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bb90
	int32_t GetCurrentRoundNumber(); // Function ShooterGame.ShooterGameStateDataModel.GetCurrentRoundNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b870
};

// Class ShooterGame.ShooterTeamStateDataModel
// Size: 0x58 (Inherited: 0x30)
struct UShooterTeamStateDataModel : UObject {
	int32_t Points; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct UShooterPlayerStateDataModel*> PlayersOnTeam; // 0x38(0x10)
	struct UBaseTeamComponent* TeamComponent; // 0x48(0x08)
	int32_t ModelId; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)

	void RefreshPlayerModelsOnTeam(); // Function ShooterGame.ShooterTeamStateDataModel.RefreshPlayerModelsOnTeam // (Final|Native|Public) // @ game+0x391f200
	void InitializeModel(int32_t InModelId, struct UBaseTeamComponent* InTeamComponent); // Function ShooterGame.ShooterTeamStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x391e800
	struct TArray<struct UShooterPlayerStateDataModel*> GetPlayerModelsOnTeam(); // Function ShooterGame.ShooterTeamStateDataModel.GetPlayerModelsOnTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c990
};

// Class ShooterGame.GameFeatureTogglesComponent
// Size: 0x1ff8 (Inherited: 0xe8)
struct UGameFeatureTogglesComponent : UActorComponent {
	struct FMulticastInlineDelegate OnGameFeatureToggleChanged_NotifyBlueprint; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnGameRuleBoolChanged_NotifyBlueprint; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnGameFeatureFloatConfigChanged_NotifyBlueprint; // 0x108(0x10)
	struct FMulticastInlineDelegate OnMegapacketAppliedReplicated; // 0x118(0x10)
	struct TArray<char> GameFeatureToggleValues; // 0x128(0x10)
	struct TArray<char> GameRuleBoolValues; // 0x138(0x10)
	float GameFeatureFloatConfigValues[0x2b]; // 0x148(0xac)
	bool bMegapacketApplied; // 0x1f4(0x01)
	char pad_1F5[0x1e03]; // 0x1f5(0x1e03)

	void SetGameRuleBoolValue(enum class EGameRuleBoolName RuleName, bool bEnabled); // Function ShooterGame.GameFeatureTogglesComponent.SetGameRuleBoolValue // (Final|Native|Public|BlueprintCallable) // @ game+0x392e560
	void OnRep_MegapacketApplied(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_MegapacketApplied // (Final|Native|Private) // @ game+0x392e490
	void OnRep_GameRuleBoolValues_InitialOnly(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_GameRuleBoolValues_InitialOnly // (Final|Native|Private) // @ game+0x392e470
	void OnRep_GameFeatureToggleValues_InitialOnly(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_GameFeatureToggleValues_InitialOnly // (Final|Native|Private) // @ game+0x392e450
	void OnRep_GameFeatureFloatConfigValues_InitialOnly(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_GameFeatureFloatConfigValues_InitialOnly // (Final|Native|Private) // @ game+0x392e430
	void MulticastSetGameRuleBool(enum class EGameRuleBoolName GameRuleBoolName, bool bEnabled); // Function ShooterGame.GameFeatureTogglesComponent.MulticastSetGameRuleBool // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x392e350
	void MulticastSetGameFloatConfigValue(enum class EGameFeatureFloatConfigName ConfigName, float ConfigValue); // Function ShooterGame.GameFeatureTogglesComponent.MulticastSetGameFloatConfigValue // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x392e280
	void MulticastSetGameFeatureEnabled(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.GameFeatureTogglesComponent.MulticastSetGameFeatureEnabled // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x392e1a0
	struct AActor* GetGameFeatureClass(struct FGameFeatureSubclass& GameFeatureClass, struct UObject* WorldContextObject); // Function ShooterGame.GameFeatureTogglesComponent.GetGameFeatureClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x392dec0
};

// Class ShooterGame.GameFlowPredictionManager
// Size: 0x70 (Inherited: 0x30)
struct UGameFlowPredictionManager : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct UPlatformSessionManager* SessionManager; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void HandleSessionLoopStateChanged(); // Function ShooterGame.GameFlowPredictionManager.HandleSessionLoopStateChanged // (Final|Native|Private) // @ game+0x392e100
	void ClearSessionLoopStatePrediction(); // Function ShooterGame.GameFlowPredictionManager.ClearSessionLoopStatePrediction // (Final|Native|Private) // @ game+0x392ddc0
};

// Class ShooterGame.GameFlowStateManager
// Size: 0x180 (Inherited: 0x80)
struct UGameFlowStateManager : UInitSystem {
	struct FMulticastInlineDelegate OnStateChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTransitionWidgetVisibilityChanged; // 0x90(0x10)
	char pad_A0[0x10]; // 0xa0(0x10)
	struct UGameFlowState* CurrentState; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)
	struct TMap<enum class EGameFlowStateType, struct UGameFlowState*> GameFlowStates; // 0xc0(0x50)
	struct TArray<struct FTimerHandle> ReconcileTimerHandles; // 0x110(0x10)
	struct UGameFlowStateDependencySet* DependencySet; // 0x120(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x128(0x08)
	struct UPartyManager* PartyManager; // 0x130(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x138(0x08)
	struct UConfigManager* ConfigManager; // 0x140(0x08)
	struct UPregameManager* PregameManager; // 0x148(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x150(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x158(0x08)
	char pad_160[0x8]; // 0x160(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x168(0x08)
	struct UGameInstance* TransitionWidgetOuter; // 0x170(0x08)
	struct UTransitionManagerWidget* TransitionManagerWidget; // 0x178(0x08)

	void Reconcile(); // Function ShooterGame.GameFlowStateManager.Reconcile // (Final|Native|Private) // @ game+0x392e540
	void PlatformUnhealthyReconcileWrapper(enum class EPlatformFaultReason& Reason); // Function ShooterGame.GameFlowStateManager.PlatformUnhealthyReconcileWrapper // (Final|Native|Private|HasOutParms) // @ game+0x392e4b0
	void HandleTransitionWidgetVisibilityChanged(enum class ESlateVisibility NewVisibility); // Function ShooterGame.GameFlowStateManager.HandleTransitionWidgetVisibilityChanged // (Final|Native|Private) // @ game+0x392e120
	enum class ESlateVisibility GetVisibilityOfTransitionWidget(); // Function ShooterGame.GameFlowStateManager.GetVisibilityOfTransitionWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x392e0d0
	struct UGameFlowState* GetState(enum class EGameFlowStateType GameFlowStateType); // Function ShooterGame.GameFlowStateManager.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x392e040
	struct UGameFlowStateManager* GetGameFlowStateManager(struct UObject* WorldContextObject); // Function ShooterGame.GameFlowStateManager.GetGameFlowStateManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x392dfb0
	enum class EGameFlowStateType GetCurrentStateType(); // Function ShooterGame.GameFlowStateManager.GetCurrentStateType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x392de90
	struct UGameFlowState* GetCurrentState(); // Function ShooterGame.GameFlowStateManager.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x392de60
	struct TArray<struct UTransitionGameFlowState*> GetAllTransitionStates(); // Function ShooterGame.GameFlowStateManager.GetAllTransitionStates // (Final|Native|Public|Const) // @ game+0x392dde0
};

// Class ShooterGame.GameFlowState
// Size: 0x88 (Inherited: 0x30)
struct UGameFlowState : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	bool bRequiresValidMatchID; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct UAresClientEvents* AresClientEvents; // 0x58(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x60(0x08)
	struct UConfigManager* ConfigManager; // 0x68(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x70(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x78(0x08)
	char pad_80[0x8]; // 0x80(0x08)

	enum class EGameFlowStateType GetType(); // Function ShooterGame.GameFlowState.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x377ecd0
};

// Class ShooterGame.GameFlowStateDependencySet
// Size: 0x90 (Inherited: 0x30)
struct UGameFlowStateDependencySet : UObject {
	struct UAresClientEvents* AresClientEvents; // 0x30(0x08)
	struct UPartyManager* PartyManager; // 0x38(0x08)
	struct UPingManager* PingManager; // 0x40(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x48(0x08)
	struct UConfigManager* ConfigManager; // 0x50(0x08)
	struct UPregameManager* PregameManager; // 0x58(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x60(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x78(0x08)
	struct UAntiAddictionManager* AntiAddictionManager; // 0x80(0x08)
	struct UCNAntiAddictionManager* CNAntiAddictionManager; // 0x88(0x08)
};

// Class ShooterGame.GameInfoContentWidget
// Size: 0x2f8 (Inherited: 0x2c8)
struct UGameInfoContentWidget : UUserWidget {
	struct UCoordinatedHUDElement* GameInfoTimerElement; // 0x2c8(0x08)
	struct UCoordinatedHUDElement* GameInfoRoundElement; // 0x2d0(0x08)
	struct UCoordinatedHUDElement* MyTeamScoreElement; // 0x2d8(0x08)
	struct UCoordinatedHUDElement* EnemyTeamScoreElement; // 0x2e0(0x08)
	struct UCoordinatedHUDElement* AlliedTeamParticipants; // 0x2e8(0x08)
	struct UCoordinatedHUDElement* EnemyTeamParticipants; // 0x2f0(0x08)
};

// Class ShooterGame.GameModeControllerData
// Size: 0xf0 (Inherited: 0xe8)
struct UGameModeControllerData : UActorComponent {
	bool bShouldAnnounceUltimate; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class ShooterGame.GameModeReplayComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UGameModeReplayComponent : UActorComponent {

	void AuthOnGamePhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.GameModeReplayComponent.AuthOnGamePhaseChanged // (Final|Native|Public) // @ game+0x36908e0
};

// Class ShooterGame.GameModeStateMachineComponent
// Size: 0x1e0 (Inherited: 0x1e0)
struct UGameModeStateMachineComponent : UStateMachineComponent {

	void ScriptSetStartingState(struct UStateComponent* State); // Function ShooterGame.GameModeStateMachineComponent.ScriptSetStartingState // (Final|Native|Protected|BlueprintCallable) // @ game+0x3935e60
};

// Class ShooterGame.GameModifierInputComponent
// Size: 0x178 (Inherited: 0x158)
struct UGameModifierInputComponent : UGameModifierComponent {
	struct TArray<struct FText> InputBindingDisplayNames; // 0x158(0x10)
	struct TArray<struct FName> InputBindingNames; // 0x168(0x10)

	void HandleInputActivated(struct FName InputName); // Function ShooterGame.GameModifierInputComponent.HandleInputActivated // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	struct TArray<struct FName> GetInputBindingNames(); // Function ShooterGame.GameModifierInputComponent.GetInputBindingNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39354e0
	struct TArray<struct FText> GetInputBindingDisplayNames(); // Function ShooterGame.GameModifierInputComponent.GetInputBindingDisplayNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39353e0
};

// Class ShooterGame.GameModifierManager
// Size: 0x3d8 (Inherited: 0x3d8)
struct AGameModifierManager : AInfo {

	void AuthWalk(struct ACharacter* TargetCharacter); // Function ShooterGame.GameModifierManager.AuthWalk // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x372eb00
	void AuthGhost(struct ACharacter* TargetCharacter); // Function ShooterGame.GameModifierManager.AuthGhost // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x372eb00
	void AuthFly(struct ACharacter* TargetCharacter, bool bIsCheat); // Function ShooterGame.GameModifierManager.AuthFly // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x381ddf0
};

// Class ShooterGame.GameModifiersMenu
// Size: 0x2f0 (Inherited: 0x2c8)
struct UGameModifiersMenu : UUserWidget {
	struct UVerticalBox* KeybindWidgetBox; // 0x2c8(0x08)
	struct UVerticalBox* MatchFlowWidgetBox; // 0x2d0(0x08)
	struct UVerticalBox* GameWidgetBox; // 0x2d8(0x08)
	struct UVerticalBox* PlayerWidgetBox; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void TryPopulateModifierMenu(); // Function ShooterGame.GameModifiersMenu.TryPopulateModifierMenu // (Final|Native|Private|BlueprintCallable) // @ game+0x3936030
	void RetryPopulateModifierMenu(struct AAresPlayerStateBase* NewPlayerState); // Function ShooterGame.GameModifiersMenu.RetryPopulateModifierMenu // (Final|Native|Private) // @ game+0x3935dd0
	void PopulateMenuWithWidgets(struct TArray<struct UGameModifierWidget*>& DisplayedModifiers); // Function ShooterGame.GameModifiersMenu.PopulateMenuWithWidgets // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void OnModifierManagerReplicated(); // Function ShooterGame.GameModifiersMenu.OnModifierManagerReplicated // (Final|Native|Private) // @ game+0x3935d10
	void OnMegapacketAppliedReplicated(bool bMegapacketApplied); // Function ShooterGame.GameModifiersMenu.OnMegapacketAppliedReplicated // (Final|Native|Private) // @ game+0x3935c80
	struct UGameModifierWidget* CreateModifierWidget(struct UGameModifierComponent* Modifier); // Function ShooterGame.GameModifiersMenu.CreateModifierWidget // (Native|Event|Protected|BlueprintEvent) // @ game+0x3935100
};

// Class ShooterGame.GameModifierWidget
// Size: 0x2d0 (Inherited: 0x2c8)
struct UGameModifierWidget : UDesignableUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void SetUpCustom(struct UGameModifierComponent* Modifier); // Function ShooterGame.GameModifierWidget.SetUpCustom // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void Setup(struct UGameModifierComponent* Modifier); // Function ShooterGame.GameModifierWidget.Setup // (Final|Native|Public|BlueprintCallable) // @ game+0x3935ef0
	void OnAddedToMenu(struct UGameModifiersMenu* Menu); // Function ShooterGame.GameModifierWidget.OnAddedToMenu // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnAddedToGamepadMenu(struct UGamepadModifiersMenu* Menu); // Function ShooterGame.GameModifierWidget.OnAddedToGamepadMenu // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct UGameModifierComponent* GetSourceModifier(); // Function ShooterGame.GameModifierWidget.GetSourceModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a0050
};

// Class ShooterGame.BoolModifierBaseWidgetNative
// Size: 0x2f8 (Inherited: 0x2d0)
struct UBoolModifierBaseWidgetNative : UGameModifierWidget {
	struct UTextBlock* DisplayNameText; // 0x2d0(0x08)
	struct UButton* FalseButton; // 0x2d8(0x08)
	struct UTextBlock* FalseText; // 0x2e0(0x08)
	struct UButton* TrueButton; // 0x2e8(0x08)
	struct UTextBlock* TrueText; // 0x2f0(0x08)
};

// Class ShooterGame.TriggerModifierBaseWidgetNative
// Size: 0x2e0 (Inherited: 0x2d0)
struct UTriggerModifierBaseWidgetNative : UGameModifierWidget {
	struct UTextBlock* TextBlockNormal; // 0x2d0(0x08)
	struct UTextBlock* TextBlockHover; // 0x2d8(0x08)
};

// Class ShooterGame.DropdownModifierBaseWidgetNative
// Size: 0x2e0 (Inherited: 0x2d0)
struct UDropdownModifierBaseWidgetNative : UGameModifierWidget {
	struct UComboBoxString* ComboBox; // 0x2d0(0x08)
	struct UTextBlock* DisplayNameText; // 0x2d8(0x08)
};

// Class ShooterGame.RoundRestoreModifierBaseWidgetNative
// Size: 0x2e8 (Inherited: 0x2d0)
struct URoundRestoreModifierBaseWidgetNative : UGameModifierWidget {
	struct UButton* Button; // 0x2d0(0x08)
	struct UTextBlock* ButtonText; // 0x2d8(0x08)
	struct UComboBoxString* ComboBox; // 0x2e0(0x08)
};

// Class ShooterGame.GameObjectMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UGameObjectMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.GameObjectVisibilityComponent
// Size: 0x188 (Inherited: 0x188)
struct UGameObjectVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.GamepadBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UGamepadBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool WasLastInputGamepad(struct UObject* ContextObject); // Function ShooterGame.GamepadBlueprintFunctionLibrary.WasLastInputGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3936150
	bool IsGamepadEnabled(struct UObject* WorldContextObject); // Function ShooterGame.GamepadBlueprintFunctionLibrary.IsGamepadEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39358f0
};

// Class ShooterGame.GamepadInputComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UGamepadInputComponent : UActorComponent {
	char pad_E8[0x70]; // 0xe8(0x70)
	struct FMulticastInlineDelegate OnSensitivityModifierPressed; // 0x158(0x10)
	struct FMulticastInlineDelegate OnSensitivityModifierReleased; // 0x168(0x10)
	struct FVector2D CurAdjustedRotationRates; // 0x178(0x08)
	struct FVector2D CurLookStickVector; // 0x180(0x08)
	struct FVector2D CurWalkStickVector; // 0x188(0x08)
	struct FVector2D CurAccelDelayPercent; // 0x190(0x08)
	struct FVector2D CurAccelRampUpPercent; // 0x198(0x08)
	struct FVector2D CurAimAccelStartVector; // 0x1a0(0x08)

	void RPC_ServerSetZoomForced(bool bZoomForced); // Function ShooterGame.GamepadInputComponent.RPC_ServerSetZoomForced // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3935d30
	void OnEquippableChanged(struct AAresEquippable* NewEquippable); // Function ShooterGame.GamepadInputComponent.OnEquippableChanged // (Final|Native|Public) // @ game+0x3634e00
	void GamepadTurnAtRate(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadTurnAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x3935330
	void GamepadMoveRight(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x39352b0
	void GamepadMoveForward(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x3935230
	void GamepadLookUpAtRate(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadLookUpAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x39351b0
};

// Class ShooterGame.GamepadInputIconBase
// Size: 0x2f8 (Inherited: 0x2c8)
struct UGamepadInputIconBase : UUserWidget {
	struct FMulticastInlineDelegate OnKeyChanged; // 0x2c8(0x10)
	struct FKey InternalKey; // 0x2d8(0x20)

	void SetBaseKey(struct FKey Key); // Function ShooterGame.GamepadInputIconBase.SetBaseKey // (Final|Native|Public|BlueprintCallable) // @ game+0x3940b40
};

// Class ShooterGame.GamepadOptionsScreen
// Size: 0x320 (Inherited: 0x2c8)
struct UGamepadOptionsScreen : UUserWidget {
	struct FKey RightNavigationKey; // 0x2c8(0x20)
	struct FKey LeftNavigationKey; // 0x2e8(0x20)
	char pad_308[0x18]; // 0x308(0x18)

	void SetupNavigationList(struct TArray<struct UWidget*> OrderedWidgetList, enum class EUINavigation Direction, bool bStopsOtherDirections); // Function ShooterGame.GamepadOptionsScreen.SetupNavigationList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3940d50
	void SetupNavigationLink(struct UWidget* Start, enum class EUINavigation Direction, struct UWidget* End); // Function ShooterGame.GamepadOptionsScreen.SetupNavigationLink // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3940c50
	struct UWidget* GetLastFocusableNavigationWidget(struct TArray<struct UWidget*>& VerticalWidgetList); // Function ShooterGame.GamepadOptionsScreen.GetLastFocusableNavigationWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x393fc30
	struct UWidget* GetFirstFocusableNavigationWidget(struct TArray<struct UWidget*>& VerticalWidgetList); // Function ShooterGame.GamepadOptionsScreen.GetFirstFocusableNavigationWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x393fb40
	struct UWidget* GetFirstAvailableChildOfType(struct TArray<struct UPanelWidget*> Parents, struct UWidget* RequestedClass); // Function ShooterGame.GamepadOptionsScreen.GetFirstAvailableChildOfType // (Final|Native|Protected|BlueprintCallable) // @ game+0x393fa00
	void AddButtonToNavigationTabs(struct UButton* Button); // Function ShooterGame.GamepadOptionsScreen.AddButtonToNavigationTabs // (Final|Native|Protected|BlueprintCallable) // @ game+0x393f530
	void AddButtonsToNavigationTabs(struct TArray<struct UButton*> ButtonsInOrder); // Function ShooterGame.GamepadOptionsScreen.AddButtonsToNavigationTabs // (Final|Native|Protected|BlueprintCallable) // @ game+0x393f5c0
	void ActivateButton(struct UButton* Button); // Function ShooterGame.GamepadOptionsScreen.ActivateButton // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x393f4b0
};

// Class ShooterGame.GamepadModifiersMenu
// Size: 0x348 (Inherited: 0x320)
struct UGamepadModifiersMenu : UGamepadOptionsScreen {
	struct UVerticalBox* KeybindWidgetBox; // 0x320(0x08)
	struct UVerticalBox* MatchFlowWidgetBox; // 0x328(0x08)
	struct UVerticalBox* GameWidgetBox; // 0x330(0x08)
	struct UVerticalBox* PlayerWidgetBox; // 0x338(0x08)
	char pad_340[0x8]; // 0x340(0x08)

	void TryPopulateModifierMenu(); // Function ShooterGame.GamepadModifiersMenu.TryPopulateModifierMenu // (Final|Native|Private|BlueprintCallable) // @ game+0x3940f40
	void RetryPopulateModifierMenu(struct AAresPlayerStateBase* NewPlayerState); // Function ShooterGame.GamepadModifiersMenu.RetryPopulateModifierMenu // (Final|Native|Private) // @ game+0x3940ab0
	void PopulateMenuWithWidgets(struct TArray<struct UGameModifierWidget*>& DisplayedModifiers); // Function ShooterGame.GamepadModifiersMenu.PopulateMenuWithWidgets // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void OnModifierManagerReplicated(); // Function ShooterGame.GamepadModifiersMenu.OnModifierManagerReplicated // (Final|Native|Private) // @ game+0x39409f0
	void OnMegapacketAppliedReplicated(bool bMegapacketApplied); // Function ShooterGame.GamepadModifiersMenu.OnMegapacketAppliedReplicated // (Final|Native|Private) // @ game+0x3940960
	struct UGameModifierWidget* CreateModifierWidget(struct UGameModifierComponent* Modifier); // Function ShooterGame.GamepadModifiersMenu.CreateModifierWidget // (Native|Event|Protected|BlueprintEvent) // @ game+0x3935100
};

// Class ShooterGame.GamepadNavigationSlider
// Size: 0x568 (Inherited: 0x568)
struct UGamepadNavigationSlider : USlider {

	void SimulateMouseLeave(); // Function ShooterGame.GamepadNavigationSlider.SimulateMouseLeave // (Final|Native|Protected|BlueprintCallable) // @ game+0x3940ee0
	void SimulateMouseEnter(); // Function ShooterGame.GamepadNavigationSlider.SimulateMouseEnter // (Final|Native|Protected|BlueprintCallable) // @ game+0x3940ec0
};

// Class ShooterGame.GamepadNavigationWidgetSwitcher
// Size: 0x1c8 (Inherited: 0x178)
struct UGamepadNavigationWidgetSwitcher : UWidgetSwitcher {
	char pad_178[0x50]; // 0x178(0x50)

	void AddTabFocusWidgetPair(struct UWidget* Key, struct UWidget* Value); // Function ShooterGame.GamepadNavigationWidgetSwitcher.AddTabFocusWidgetPair // (Final|Native|Public|BlueprintCallable) // @ game+0x393f6c0
};

// Class ShooterGame.GameplayNotificationWidget
// Size: 0x2f0 (Inherited: 0x2d8)
struct UGameplayNotificationWidget : UCoordinatedHUDElement {
	bool bIsRequired; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	float WidgetPriority; // 0x2dc(0x04)
	enum class EGameplayNotificationWidgetSlot NotificationSlot; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct UGameplayNotificationView* NotificationView; // 0x2e8(0x08)

	void StartFadeOut(); // Function ShooterGame.GameplayNotificationWidget.StartFadeOut // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void StartFadeIn(); // Function ShooterGame.GameplayNotificationWidget.StartFadeIn // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	enum class EGameplayNotificationStatus GetStatus(); // Function ShooterGame.GameplayNotificationWidget.GetStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940290
	struct UGameplayNotificationType* GetNotificationType(); // Function ShooterGame.GameplayNotificationWidget.GetNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fce0
	void DisplayEditorPreview(); // Function ShooterGame.GameplayNotificationWidget.DisplayEditorPreview // (Native|Event|Public|BlueprintEvent) // @ game+0x393f8f0
};

// Class ShooterGame.GameplayNotificationType
// Size: 0x70 (Inherited: 0x30)
struct UGameplayNotificationType : UObject {
	enum class EGameplayNotificationDurationType DurationType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float DisplayTime; // 0x34(0x04)
	float FadeOutDuration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct UGameplayNotificationWidget*> WidgetTypes; // 0x40(0x10)
	char pad_50[0x18]; // 0x50(0x18)
	struct UCoordinatedHUDModel* HUDModel; // 0x68(0x08)

	void StopNotification(); // Function ShooterGame.GameplayNotificationType.StopNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x3940f20
	void StartNotification(); // Function ShooterGame.GameplayNotificationType.StartNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x3940f00
	void SetHUDModel(struct UCoordinatedHUDModel* InHUDModel); // Function ShooterGame.GameplayNotificationType.SetHUDModel // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x379b9a0
};

// Class ShooterGame.GameplayNotificationSystemComponent
// Size: 0x108 (Inherited: 0xe8)
struct UGameplayNotificationSystemComponent : UActorComponent {
	struct TArray<struct UGameplayNotificationType*> SupportedNotificationTypes; // 0xe8(0x10)
	struct TArray<struct UGameplayNotificationType*> NotificationTypes; // 0xf8(0x10)
};

// Class ShooterGame.GameplayNotificationView
// Size: 0x78 (Inherited: 0x30)
struct UGameplayNotificationView : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct UGameplayNotificationWidget*> Widgets; // 0x48(0x10)
	struct UGameplayNotificationType* NotificationType; // 0x58(0x08)
	char pad_60[0x8]; // 0x60(0x08)
	struct UGameplayNotificationContainerHUDElement* Container; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	void HandleDesiredVisibilityChanged(struct UGameplayNotificationType* Notification, bool bDesiredVisibility); // Function ShooterGame.GameplayNotificationView.HandleDesiredVisibilityChanged // (Final|Native|Protected) // @ game+0x3940460
};

// Class ShooterGame.GameplayNotificationContainerHUDElement
// Size: 0x368 (Inherited: 0x2d8)
struct UGameplayNotificationContainerHUDElement : UCoordinatedHUDElement {
	struct UWidgetSwitcher* BannerSwitcher; // 0x2d8(0x08)
	struct UWidgetSwitcher* IconSwitcher; // 0x2e0(0x08)
	struct UWidgetSwitcher* RingSwitcher; // 0x2e8(0x08)
	struct UWidgetSwitcher* BackgroundSwitcher; // 0x2f0(0x08)
	struct TSoftClassPtr<UObject> PreviewNotificationType; // 0x2f8(0x30)
	struct UGameplayNotificationType* CachedPreviewNotificationType; // 0x328(0x08)
	struct UGameplayNotificationType* PreviewNotification; // 0x330(0x08)
	struct UCoordinatedHUDModel* HUDModel; // 0x338(0x08)
	struct UGameplayNotificationSystemComponent* NotificationComponent; // 0x340(0x08)
	char pad_348[0x10]; // 0x348(0x10)
	struct TArray<struct UGameplayNotificationView*> NotificationViews; // 0x358(0x10)

	void HandleGameStateChanged(); // Function ShooterGame.GameplayNotificationContainerHUDElement.HandleGameStateChanged // (Final|Native|Protected) // @ game+0x3940530
	struct UCoordinatedHUDModel* GetHUDModel(); // Function ShooterGame.GameplayNotificationContainerHUDElement.GetHUDModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fc10
};

// Class ShooterGame.GameplayVote
// Size: 0x4f0 (Inherited: 0x3d8)
struct AGameplayVote : AInfo {
	struct UReplicationSleepComponent* ReplicationSleepComponent; // 0x3d8(0x08)
	struct FMulticastInlineDelegate OnOptionUpdated; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnParticipantsUpdated; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnObserversUpdated; // 0x400(0x10)
	struct FMulticastInlineDelegate OnCurrentStateUpdated; // 0x410(0x10)
	struct TArray<struct UGameplayVoteOptionComponent*> OPTIONS; // 0x420(0x10)
	struct UGameplayVoteOptionComponent* DefaultOption; // 0x430(0x08)
	float VotePeriodSeconds; // 0x438(0x04)
	float ResultsPeriodSeconds; // 0x43c(0x04)
	float StartOfPhaseVoteCallingWindowSeconds; // 0x440(0x04)
	bool bExtendVoteByVoteCallingWindow; // 0x444(0x01)
	bool bExtendsPastCurrentGamePhase; // 0x445(0x01)
	bool bCanDisplayDuringPlay; // 0x446(0x01)
	char pad_447[0x1]; // 0x447(0x01)
	float ForceDisplayTimeSeconds; // 0x448(0x04)
	enum class EVoteState CurrentState; // 0x44c(0x01)
	char pad_44D[0x3]; // 0x44d(0x03)
	struct TArray<struct AShooterPlayerState*> Participants; // 0x450(0x10)
	struct TArray<struct AShooterPlayerState*> Observers; // 0x460(0x10)
	bool bCanActivateAnyTime; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct TArray<struct FText> SlashCommandStrings; // 0x478(0x10)
	struct FString TelemetryVoteName; // 0x488(0x10)
	bool bAllowCoachesToRequest; // 0x498(0x01)
	char pad_499[0x3]; // 0x499(0x03)
	int32_t Votes; // 0x49c(0x04)
	struct TArray<struct FText> RuntimeSlashCommands; // 0x4a0(0x10)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct TArray<struct AShooterPlayerState*> NotVotedParticipants; // 0x4b8(0x10)
	char pad_4C8[0xc]; // 0x4c8(0x0c)
	float TotalTimeForCurrentState; // 0x4d4(0x04)
	char pad_4D8[0x8]; // 0x4d8(0x08)
	struct AShooterPlayerState* Requester; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)

	bool Validate(struct AShooterPlayerState* RequestingPlayer, struct AShooterGameState* GameState); // Function ShooterGame.GameplayVote.Validate // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	void OnRep_Participants(); // Function ShooterGame.GameplayVote.OnRep_Participants // (Final|Native|Private) // @ game+0x3940a50
	void OnRep_Observers(); // Function ShooterGame.GameplayVote.OnRep_Observers // (Final|Native|Private) // @ game+0x3940a30
	void OnRep_CurrentState(); // Function ShooterGame.GameplayVote.OnRep_CurrentState // (Final|Native|Private) // @ game+0x3940a10
	bool IsPlayerParticipant(struct AShooterPlayerState* PotentialParticipant); // Function ShooterGame.GameplayVote.IsPlayerParticipant // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3940890
	bool IsPlayerObserver(struct AShooterPlayerState* PotentialObserver); // Function ShooterGame.GameplayVote.IsPlayerObserver // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39407f0
	bool IsCurrentStateTimed(); // Function ShooterGame.GameplayVote.IsCurrentStateTimed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940780
	bool IsCanActivateAnyTime(); // Function ShooterGame.GameplayVote.IsCanActivateAnyTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940750
	void HandleVotesNeededUpdated(struct AGameplayVote* Vote, struct UGameplayVoteOptionComponent* Option, int32_t NewVotesNeededCount); // Function ShooterGame.GameplayVote.HandleVotesNeededUpdated // (Final|Native|Private) // @ game+0x3940640
	void HandleVotesChanged(struct AGameplayVote* Vote, struct UGameplayVoteOptionComponent* Option, int32_t NewVoteCount); // Function ShooterGame.GameplayVote.HandleVotesChanged // (Final|Native|Private) // @ game+0x3940640
	void HandleOptionsUpdated(struct AGameplayVote* Vote, struct TArray<struct UGameplayVoteOptionComponent*>& NewOptions); // Function ShooterGame.GameplayVote.HandleOptionsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3940550
	struct FText GetVoteQueuedNotification(); // Function ShooterGame.GameplayVote.GetVoteQueuedNotification // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	int32_t GetVotePeriodSeconds(); // Function ShooterGame.GameplayVote.GetVotePeriodSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39403d0
	struct FText GetVoteDebugText(); // Function ShooterGame.GameplayVote.GetVoteDebugText // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	float GetTotalTimeForCurrentState(); // Function ShooterGame.GameplayVote.GetTotalTimeForCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940340
	struct FString GetTelemetryVoteName(); // Function ShooterGame.GameplayVote.GetTelemetryVoteName // (Final|Native|Public|Const) // @ game+0x39402c0
	float GetStartOfPhaseVoteCallingWindowSeconds(); // Function ShooterGame.GameplayVote.GetStartOfPhaseVoteCallingWindowSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940150
	struct FText GetStartedNotificationForPlayer(struct AShooterPlayerState* PlayerState); // Function ShooterGame.GameplayVote.GetStartedNotificationForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3940180
	int32_t GetResultsPeriodSeconds(); // Function ShooterGame.GameplayVote.GetResultsPeriodSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fff0
	struct AShooterPlayerState* GetRequester(); // Function ShooterGame.GameplayVote.GetRequester // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f520
	float GetRemainingTimeInCurrentState(); // Function ShooterGame.GameplayVote.GetRemainingTimeInCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393ffc0
	struct FText GetRateLimitedNotification(); // Function ShooterGame.GameplayVote.GetRateLimitedNotification // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	struct TArray<struct AShooterPlayerState*> GetParticipants(); // Function ShooterGame.GameplayVote.GetParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393ff40
	struct TArray<struct UGameplayVoteOptionComponent*> GetOptions(); // Function ShooterGame.GameplayVote.GetOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fe90
	struct FText GetOnStartedNotificationObserver(); // Function ShooterGame.GameplayVote.GetOnStartedNotificationObserver // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	struct FText GetOnStartedNotification(); // Function ShooterGame.GameplayVote.GetOnStartedNotification // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	struct TArray<struct AShooterPlayerState*> GetOnlineParticipants(); // Function ShooterGame.GameplayVote.GetOnlineParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fe10
	struct TArray<struct AShooterPlayerState*> GetOnlineObservers(); // Function ShooterGame.GameplayVote.GetOnlineObservers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fd90
	struct TArray<struct AShooterPlayerState*> GetObservers(); // Function ShooterGame.GameplayVote.GetObservers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fd10
	float GetForceDisplayTimeSeconds(); // Function ShooterGame.GameplayVote.GetForceDisplayTimeSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393fbf0
	bool GetExtendVoteByVoteCallingWindow(); // Function ShooterGame.GameplayVote.GetExtendVoteByVoteCallingWindow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f9d0
	float GetElapsedTimeInCurrentState(); // Function ShooterGame.GameplayVote.GetElapsedTimeInCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f9a0
	struct UGameplayVoteOptionComponent* GetDefaultOption(); // Function ShooterGame.GameplayVote.GetDefaultOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a02b0
	enum class EVoteState GetCurrentState(); // Function ShooterGame.GameplayVote.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f970
	struct FText GetCoachesCannotVoteNotification(); // Function ShooterGame.GameplayVote.GetCoachesCannotVoteNotification // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
	bool GetCanDisplayDuringPlay(); // Function ShooterGame.GameplayVote.GetCanDisplayDuringPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f950
	struct TArray<struct AShooterPlayerState*> GenerateParticipants(struct AShooterPlayerState* RequestingPlayer); // Function ShooterGame.GameplayVote.GenerateParticipants // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	struct TArray<struct AShooterPlayerState*> GenerateObservers(struct AShooterPlayerState* RequestingPlayer); // Function ShooterGame.GameplayVote.GenerateObservers // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	bool DoesVoteHaveObservers(); // Function ShooterGame.GameplayVote.DoesVoteHaveObservers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f920
	void AuthSetVotePeriodSeconds(float InPeriodSeconds); // Function ShooterGame.GameplayVote.AuthSetVotePeriodSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthSetRequester(struct AShooterPlayerState* Player); // Function ShooterGame.GameplayVote.AuthSetRequester // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthSetParticipants(struct TArray<struct AShooterPlayerState*>& NewParticipants); // Function ShooterGame.GameplayVote.AuthSetParticipants // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x393f840
	void AuthSetObservers(struct TArray<struct AShooterPlayerState*>& NewObservers); // Function ShooterGame.GameplayVote.AuthSetObservers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x393f840
	void AuthSetCurrentState(enum class EVoteState NewState); // Function ShooterGame.GameplayVote.AuthSetCurrentState // (Final|Native|Public|BlueprintCallable) // @ game+0x36908e0
	bool AuthRecordPlayerVote(struct AShooterPlayerState* Player, struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.GameplayVote.AuthRecordPlayerVote // (Final|Native|Public|BlueprintCallable) // @ game+0x37fca20
	void AuthOnStarted(); // Function ShooterGame.GameplayVote.AuthOnStarted // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool AuthIsReadyToActivate(); // Function ShooterGame.GameplayVote.AuthIsReadyToActivate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f810
	bool AuthIsAwaitingReplication(); // Function ShooterGame.GameplayVote.AuthIsAwaitingReplication // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f7e0
	void AuthInitialize(struct AShooterPlayerState* RequestingPlayer, int32_t VoteID); // Function ShooterGame.GameplayVote.AuthInitialize // (Final|Native|Public) // @ game+0x3636980
	int32_t AuthGetID(); // Function ShooterGame.GameplayVote.AuthGetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f7b0
	void AuthAddParticipant(struct AShooterPlayerState* Participant); // Function ShooterGame.GameplayVote.AuthAddParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthAddObserver(struct AShooterPlayerState* Observer); // Function ShooterGame.GameplayVote.AuthAddObserver // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	bool AreCoachesAllowedToRequest(); // Function ShooterGame.GameplayVote.AreCoachesAllowedToRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f790
};

// Class ShooterGame.GameplayVoteOptionComponent
// Size: 0x140 (Inherited: 0xe8)
struct UGameplayVoteOptionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnVotesChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnVotesNeededUpdated; // 0xf8(0x10)
	struct TArray<struct FText> SlashCommands; // 0x108(0x10)
	struct TArray<struct FText> RuntimeSlashCommands; // 0x118(0x10)
	char pad_128[0x1]; // 0x128(0x01)
	bool bIsDefaultOption; // 0x129(0x01)
	char pad_12A[0x2]; // 0x12a(0x02)
	int32_t VoteKeybindIndex; // 0x12c(0x04)
	float VotesNeededRatio; // 0x130(0x04)
	int32_t Votes; // 0x134(0x04)
	int32_t VotesNeeded; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)

	void OnSelected(); // Function ShooterGame.GameplayVoteOptionComponent.OnSelected // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnRep_VotesNeeded(); // Function ShooterGame.GameplayVoteOptionComponent.OnRep_VotesNeeded // (Final|Native|Private) // @ game+0x3940a90
	void OnRep_Votes(); // Function ShooterGame.GameplayVoteOptionComponent.OnRep_Votes // (Final|Native|Private) // @ game+0x3940a70
	bool IsSelected(); // Function ShooterGame.GameplayVoteOptionComponent.IsSelected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940930
	bool IsDefaultOption(); // Function ShooterGame.GameplayVoteOptionComponent.IsDefaultOption // (Final|Native|Public|Const) // @ game+0x39407c0
	int32_t GetVotesNeeded(); // Function ShooterGame.GameplayVoteOptionComponent.GetVotesNeeded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940430
	int32_t GetVotes(); // Function ShooterGame.GameplayVoteOptionComponent.GetVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940400
	struct FText GetVoteOptionDebugText(); // Function ShooterGame.GameplayVoteOptionComponent.GetVoteOptionDebugText // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	int32_t GetVoteKeybindIndex(); // Function ShooterGame.GameplayVoteOptionComponent.GetVoteKeybindIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39403b0
	struct FName GetVoteActionName(); // Function ShooterGame.GameplayVoteOptionComponent.GetVoteActionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3940370
	struct TArray<struct FText> GetSlashCommands(); // Function ShooterGame.GameplayVoteOptionComponent.GetSlashCommands // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3940020
	struct AGameplayVote* GetParentVote(); // Function ShooterGame.GameplayVoteOptionComponent.GetParentVote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393ff10
	void AuthUpdateVotesNeeded(); // Function ShooterGame.GameplayVoteOptionComponent.AuthUpdateVotesNeeded // (Native|Event|Public|BlueprintEvent) // @ game+0x36355e0
	void AuthIncrement(); // Function ShooterGame.GameplayVoteOptionComponent.AuthIncrement // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.GameRewardsOverrideComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UGameRewardsOverrideComponent : UActorComponent {
	struct TArray<struct FAresGameRewardTuning> GameRewardsOverrideTable; // 0xe8(0x10)

	void AddMoneyOverride(struct FAresGameRewardTuning Reward, int32_t Money); // Function ShooterGame.GameRewardsOverrideComponent.AddMoneyOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x39493c0
};

// Class ShooterGame.GameRuleViewModel
// Size: 0x68 (Inherited: 0x48)
struct UGameRuleViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnGameRuleChanged; // 0x48(0x10)
	struct UPartyViewController* PartyViewController; // 0x58(0x08)
	char pad_60[0x8]; // 0x60(0x08)

	void SetGameRuleName(enum class EGameRuleBoolName GameRuleName); // Function ShooterGame.GameRuleViewModel.SetGameRuleName // (Final|Native|Public|BlueprintCallable) // @ game+0x394a9b0
	void SetGameRule(bool Value); // Function ShooterGame.GameRuleViewModel.SetGameRule // (Final|Native|Public|BlueprintCallable) // @ game+0x394a920
	enum class EGameRuleBoolName GetGameRuleName(); // Function ShooterGame.GameRuleViewModel.GetGameRuleName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e17a0
	bool GetGameRule(); // Function ShooterGame.GameRuleViewModel.GetGameRule // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a350
};

// Class ShooterGame.GameStateHUDConfig
// Size: 0xc0 (Inherited: 0x30)
struct UGameStateHUDConfig : UObject {
	struct FHUDTimerConfig MatchTimerConfig; // 0x30(0x68)
	struct FHUDVisibilityConfig ElementVisibilityConfig; // 0x98(0x0d)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FHUDPhaseContext PhaseContext; // 0xa8(0x18)
};

// Class ShooterGame.GameStateStageLoadoutsComponent
// Size: 0x100 (Inherited: 0xe8)
struct UGameStateStageLoadoutsComponent : UActorComponent {
	struct TArray<struct FStageLoadoutList> Stages; // 0xe8(0x10)
	float PendingWeaponUpgradeTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	int32_t GetNumStages(); // Function ShooterGame.GameStateStageLoadoutsComponent.GetNumStages // (Final|Native|Public|BlueprintCallable) // @ game+0x3635f90
	struct FStageLoadoutList GetLoadoutsForStage(int32_t Stage); // Function ShooterGame.GameStateStageLoadoutsComponent.GetLoadoutsForStage // (Final|Native|Public|BlueprintCallable) // @ game+0x3949e60
};

// Class ShooterGame.GameStateStageManagerComponent
// Size: 0x108 (Inherited: 0xe8)
struct UGameStateStageManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnStageAdvanced; // 0xe8(0x10)
	struct FStageInfo CurrentStageInfo; // 0xf8(0x10)

	void OnRep_CurrentStageInfo(struct FStageInfo& OldStageInfo); // Function ShooterGame.GameStateStageManagerComponent.OnRep_CurrentStageInfo // (Final|Native|Public|HasOutParms) // @ game+0x394a520
	float GetCurrentStageTotalTime(); // Function ShooterGame.GameStateStageManagerComponent.GetCurrentStageTotalTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3949c40
	float GetCurrentStageElapsedTime(); // Function ShooterGame.GameStateStageManagerComponent.GetCurrentStageElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3949c10
	int32_t GetCurrentStage(); // Function ShooterGame.GameStateStageManagerComponent.GetCurrentStage // (Final|Native|Public|BlueprintCallable) // @ game+0x37e5fa0
	void AuthSetStage(int32_t NewStage); // Function ShooterGame.GameStateStageManagerComponent.AuthSetStage // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthResetStage(); // Function ShooterGame.GameStateStageManagerComponent.AuthResetStage // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthOnInRound(int32_t InRoundNumberBeginning); // Function ShooterGame.GameStateStageManagerComponent.AuthOnInRound // (Final|Native|Public) // @ game+0x3635550
	void AuthAdvanceStage(); // Function ShooterGame.GameStateStageManagerComponent.AuthAdvanceStage // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.GameStatisticsComponent
// Size: 0x118 (Inherited: 0xe8)
struct UGameStatisticsComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAbilityUsed; // 0xe8(0x10)
	struct FMulticastInlineDelegate AuthOnAbilitySpawnedSubActor; // 0xf8(0x10)
	struct TArray<struct FIndividualGameStatistic> StatsToTrack; // 0x108(0x10)

	int32_t GetLatestCastIndex(); // Function ShooterGame.GameStatisticsComponent.GetLatestCastIndex // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3949e20
	void AuthUpdateAbilityLocationWithIndex(int32_t CastIndex, struct FVector AbilityLocation); // Function ShooterGame.GameStatisticsComponent.AuthUpdateAbilityLocationWithIndex // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x3949920
	void AuthUpdateAbilityLocationType(enum class EAbilityUsageLocationType LocationType); // Function ShooterGame.GameStatisticsComponent.AuthUpdateAbilityLocationType // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3949890
	void AuthUpdateAbilityLocation(struct FVector AbilityLocation); // Function ShooterGame.GameStatisticsComponent.AuthUpdateAbilityLocation // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x39497f0
	bool AuthShouldInferAbilityLocationType(); // Function ShooterGame.GameStatisticsComponent.AuthShouldInferAbilityLocationType // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37dee50
	void AuthClearAbilityLocationsWithIndex(int32_t CastIndex); // Function ShooterGame.GameStatisticsComponent.AuthClearAbilityLocationsWithIndex // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3949760
	int32_t AuthCastAbility(struct FVector AbilityLocation); // Function ShooterGame.GameStatisticsComponent.AuthCastAbility // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x39496b0
	bool AuthAddStatistic(struct FName KeyName, float ValueToAdd, enum class EAresAlliance Alliance); // Function ShooterGame.GameStatisticsComponent.AuthAddStatistic // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3949580
};

// Class ShooterGame.GenericConfirmationModalViewModel
// Size: 0x128 (Inherited: 0x70)
struct UGenericConfirmationModalViewModel : UConfirmationModalViewModelBase {
	struct FMulticastInlineDelegate OnConfirmTextChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnCancelTextChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTitleChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnDescriptionChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnImageChanged; // 0xb0(0x10)
	struct FText ConfirmText; // 0xc0(0x18)
	struct FText CancelText; // 0xd8(0x18)
	struct FText Title; // 0xf0(0x18)
	struct FText Description; // 0x108(0x18)
	struct UTexture2D* Image; // 0x120(0x08)

	void SetTitle(struct FText NewTitle); // Function ShooterGame.GenericConfirmationModalViewModel.SetTitle // (Final|Native|Protected|BlueprintCallable) // @ game+0x394ac30
	void SetImage(struct UTexture2D* NewImage); // Function ShooterGame.GenericConfirmationModalViewModel.SetImage // (Final|Native|Protected|BlueprintCallable) // @ game+0x394aa30
	void SetDescription(struct FText NewDescription); // Function ShooterGame.GenericConfirmationModalViewModel.SetDescription // (Final|Native|Protected|BlueprintCallable) // @ game+0x394a830
	void SetConfirmText(struct FText NewConfirmText); // Function ShooterGame.GenericConfirmationModalViewModel.SetConfirmText // (Final|Native|Protected|BlueprintCallable) // @ game+0x394a6b0
	void SetCancelText(struct FText NewCancelText); // Function ShooterGame.GenericConfirmationModalViewModel.SetCancelText // (Final|Native|Protected|BlueprintCallable) // @ game+0x394a5c0
	struct FText GetTitle(); // Function ShooterGame.GenericConfirmationModalViewModel.GetTitle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x394a030
	struct UTexture2D* GetImage(); // Function ShooterGame.GenericConfirmationModalViewModel.GetImage // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c40
	struct FText GetDescription(); // Function ShooterGame.GenericConfirmationModalViewModel.GetDescription // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949d40
	struct FText GetConfirmText(); // Function ShooterGame.GenericConfirmationModalViewModel.GetConfirmText // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949b50
	struct FText GetCancelText(); // Function ShooterGame.GenericConfirmationModalViewModel.GetCancelText // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949a90
};

// Class ShooterGame.NotificationAction
// Size: 0x58 (Inherited: 0x30)
struct UNotificationAction : UObject {
	struct FText Label; // 0x30(0x18)
	char pad_48[0x10]; // 0x48(0x10)
};

// Class ShooterGame.Notification
// Size: 0x58 (Inherited: 0x30)
struct UNotification : UObject {
	char pad_30[0x28]; // 0x30(0x28)

	struct FString GetRelatedSubject(); // Function ShooterGame.Notification.GetRelatedSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f0300
	struct FString GetID(); // Function ShooterGame.Notification.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bd10
	struct FDateTime GetCreatedAt(); // Function ShooterGame.Notification.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860e80
};

// Class ShooterGame.GenericNotification
// Size: 0xe8 (Inherited: 0x58)
struct UGenericNotification : UNotification {
	char pad_58[0x58]; // 0x58(0x58)
	struct UNotificationAction* ActionA; // 0xb0(0x08)
	struct UNotificationAction* ActionB; // 0xb8(0x08)
	struct UNotificationAction* DismissAction; // 0xc0(0x08)
	enum class EAresNotificationType NotificationType; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct FString additionalInfo; // 0xd0(0x10)
	struct UWidget* CustomBody; // 0xe0(0x08)

	void SetTitle(struct FText NewTitle); // Function ShooterGame.GenericNotification.SetTitle // (Final|Native|Public|BlueprintCallable) // @ game+0x394ad20
	void SetNotificationType(enum class EAresNotificationType NewNotificationType); // Function ShooterGame.GenericNotification.SetNotificationType // (Final|Native|Public|BlueprintCallable) // @ game+0x394abb0
	void SetMessage(struct FText NewMessage); // Function ShooterGame.GenericNotification.SetMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x394aac0
	void SetCustomBody(struct UWidget* NewCustomBody); // Function ShooterGame.GenericNotification.SetCustomBody // (Final|Native|Public|BlueprintCallable) // @ game+0x394a7a0
	struct UGenericNotification* Make(struct FText Title, struct FText Message, struct UNotificationAction* ActionA, struct UNotificationAction* ActionB, struct UWidget* CustomBody, enum class EAresNotificationType NotificationType); // Function ShooterGame.GenericNotification.Make // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x394a270
	bool HasDismissAction(); // Function ShooterGame.GenericNotification.HasDismissAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x394a240
	bool HasCustomBody(); // Function ShooterGame.GenericNotification.HasCustomBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x394a210
	bool HasActionB(); // Function ShooterGame.GenericNotification.HasActionB // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x394a1e0
	bool HasActionA(); // Function ShooterGame.GenericNotification.HasActionA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x394a1b0
	struct FText GetTitle(); // Function ShooterGame.GenericNotification.GetTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x394a0f0
	struct FDateTime GetTimestamp(); // Function ShooterGame.GenericNotification.GetTimestamp // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x380c2b0
	enum class EAresNotificationType GetNotificationType(); // Function ShooterGame.GenericNotification.GetNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e3e0
	struct FText GetMessage(); // Function ShooterGame.GenericNotification.GetMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949f70
	struct UNotificationAction* GetDismissAction(); // Function ShooterGame.GenericNotification.GetDismissAction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3949e00
	struct FText GetDateTimeFormat(); // Function ShooterGame.GenericNotification.GetDateTimeFormat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949c90
	struct UWidget* GetCustomBody(); // Function ShooterGame.GenericNotification.GetCustomBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949c70
	struct FString GetAdditionalInfo(); // Function ShooterGame.GenericNotification.GetAdditionalInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911b80
	struct UNotificationAction* GetActionB(); // Function ShooterGame.GenericNotification.GetActionB // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x363ed50
	struct UNotificationAction* GetActionA(); // Function ShooterGame.GenericNotification.GetActionA // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3949a70
	void ExecuteDismissAction(); // Function ShooterGame.GenericNotification.ExecuteDismissAction // (Final|Native|Public|BlueprintCallable) // @ game+0x3949a10
	void ExecuteActionB(); // Function ShooterGame.GenericNotification.ExecuteActionB // (Final|Native|Public|BlueprintCallable) // @ game+0x3949a50
	void ExecuteActionA(); // Function ShooterGame.GenericNotification.ExecuteActionA // (Final|Native|Public|BlueprintCallable) // @ game+0x3949a30
	void Dismiss(); // Function ShooterGame.GenericNotification.Dismiss // (Final|Native|Public|BlueprintCallable) // @ game+0x3949a10
};

// Class ShooterGame.GetOuterWorldObject
// Size: 0x30 (Inherited: 0x30)
struct UGetOuterWorldObject : UObject {
};

// Class ShooterGame.GlideLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UGlideLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.GlobalAudioManager
// Size: 0x80 (Inherited: 0x30)
struct UGlobalAudioManager : UGetOuterWorldObject {
	struct UAkComponent* PersistentEmitter; // 0x30(0x08)
	struct FString VOTestUIClassPath; // 0x38(0x10)
	char pad_48[0x38]; // 0x48(0x38)

	void SetIsWwiseDefaultSpeakerConfigInitialized(bool IsWwiseDefaultSpeakerConfigInitialized); // Function ShooterGame.GlobalAudioManager.SetIsWwiseDefaultSpeakerConfigInitialized // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3951860
	void SetbRequiresRestartToApplyAudioSettings(bool RequiresRestartToApplyAudioSettings); // Function ShooterGame.GlobalAudioManager.SetbRequiresRestartToApplyAudioSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3951f00
	void PlayOnPersistentEmitter(struct UAkAudioEvent* Event); // Function ShooterGame.GlobalAudioManager.PlayOnPersistentEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0x3951260
	void OnWinningTeam(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.GlobalAudioManager.OnWinningTeam // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAudioDeviceChanged(int32_t NumAudioChannels, bool bSpatialAudio, bool bPassthroughAudio); // Function ShooterGame.GlobalAudioManager.OnAudioDeviceChanged // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnApplicationActivationStateChange(bool bActive); // Function ShooterGame.GlobalAudioManager.OnApplicationActivationStateChange // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct UGlobalAudioManager* GetUGlobalAudioManager(struct UObject* WorldContextObject); // Function ShooterGame.GlobalAudioManager.GetUGlobalAudioManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950dd0
	bool GetIsWwiseDefaultSpeakerConfigInitialized(); // Function ShooterGame.GlobalAudioManager.GetIsWwiseDefaultSpeakerConfigInitialized // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950da0
	bool GetIsUsingSpatialAudioObjects(); // Function ShooterGame.GlobalAudioManager.GetIsUsingSpatialAudioObjects // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950d70
	bool GetIsUsingAudioPassthrough(); // Function ShooterGame.GlobalAudioManager.GetIsUsingAudioPassthrough // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950d40
	int32_t GetCurrentAudioDeviceNumChannels(); // Function ShooterGame.GlobalAudioManager.GetCurrentAudioDeviceNumChannels // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950ce0
	bool GetbRequiresRestartToApplyAudioSettings(); // Function ShooterGame.GlobalAudioManager.GetbRequiresRestartToApplyAudioSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3950e60
	void EndPregame(); // Function ShooterGame.GlobalAudioManager.EndPregame // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginTransitionToPregame(); // Function ShooterGame.GlobalAudioManager.BeginTransitionToPregame // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginTransitionToMainMenu(); // Function ShooterGame.GlobalAudioManager.BeginTransitionToMainMenu // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginTransitionToInGame(); // Function ShooterGame.GlobalAudioManager.BeginTransitionToInGame // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginPregame(); // Function ShooterGame.GlobalAudioManager.BeginPregame // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginPlatformFaulted(); // Function ShooterGame.GlobalAudioManager.BeginPlatformFaulted // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginMainMenu(); // Function ShooterGame.GlobalAudioManager.BeginMainMenu // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginInitialization(); // Function ShooterGame.GlobalAudioManager.BeginInitialization // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginInGame(); // Function ShooterGame.GlobalAudioManager.BeginInGame // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginGame(); // Function ShooterGame.GlobalAudioManager.BeginGame // (Final|Native|Public) // @ game+0x3950b20
};

// Class ShooterGame.GrantResult
// Size: 0x38 (Inherited: 0x30)
struct UGrantResult : UObject {
	bool GrantedSuccessfully; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class ShooterGame.OrderedListSimpleWidgetContainerSlot
// Size: 0x40 (Inherited: 0x30)
struct UOrderedListSimpleWidgetContainerSlot : UVisual {
	struct UWidget* OwnerWidget; // 0x30(0x08)
	struct UUserWidget* Content; // 0x38(0x08)
};

// Class ShooterGame.GridListSlot
// Size: 0x78 (Inherited: 0x40)
struct UGridListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x50(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x51(0x01)
	char pad_52[0x2]; // 0x52(0x02)
	int32_t Row; // 0x54(0x04)
	int32_t RowSpan; // 0x58(0x04)
	int32_t Column; // 0x5c(0x04)
	int32_t ColumnSpan; // 0x60(0x04)
	int32_t Layer; // 0x64(0x04)
	struct FVector2D Nudge; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.GridListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3951e00
	void SetRowSpan(int32_t InRowSpan); // Function ShooterGame.GridListSlot.SetRowSpan // (Final|Native|Public|BlueprintCallable) // @ game+0x3951d70
	void SetRow(int32_t InRow); // Function ShooterGame.GridListSlot.SetRow // (Final|Native|Public|BlueprintCallable) // @ game+0x3951c10
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.GridListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x3951b80
	void SetNudge(struct FVector2D InNudge); // Function ShooterGame.GridListSlot.SetNudge // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3951a80
	void SetLayer(int32_t InLayer); // Function ShooterGame.GridListSlot.SetLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x39518e0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.GridListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3951760
	void SetColumnSpan(int32_t InColumnSpan); // Function ShooterGame.GridListSlot.SetColumnSpan // (Final|Native|Public|BlueprintCallable) // @ game+0x39516d0
	void SetColumn(int32_t InColumn); // Function ShooterGame.GridListSlot.SetColumn // (Final|Native|Public|BlueprintCallable) // @ game+0x3951570
};

// Class ShooterGame.OrderedListSimpleWidgetContainerBase
// Size: 0x298 (Inherited: 0x148)
struct UOrderedListSimpleWidgetContainerBase : UWidget {
	char pad_148[0x10]; // 0x148(0x10)
	struct FMulticastInlineDelegate OnItemActivated; // 0x158(0x10)
	struct UUserWidget* EntryWidgetClass; // 0x168(0x08)
	struct UListEntrySlotConfigurerFactoryBase* EntrySlotConfigurerFactory; // 0x170(0x08)
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x178(0x10)
	struct UUserWidget* SelectedWidget; // 0x188(0x08)
	struct FWildcard SharedListItemData; // 0x190(0x40)
	struct TArray<struct UOrderedListSimpleWidgetContainerSlot*> EntrySlots; // 0x1d0(0x10)
	struct TScriptInterface<IListEntrySlotConfigurerFactory> EntrySlotConfigurerFactoryInternal; // 0x1e0(0x10)
	struct TScriptInterface<IListEntrySlotConfigurer> EntrySlotConfigurer; // 0x1f0(0x10)
	struct TArray<struct TScriptInterface<IListEntryPerSlotConfigurer>> EntryPerSlotConfigurers; // 0x200(0x10)
	struct FUserWidgetPool EntryWidgetPool; // 0x210(0x80)
	struct UAresTouchScreen* AresTouchScreen; // 0x290(0x08)

	void SetListModel(struct TScriptInterface<IOrderedListModel> NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.SetListModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06e40
	void SetEntryWidgetClass(struct UUserWidget* NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.SetEntryWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06c50
	void SetEntrySlotConfigurerFactory(struct TScriptInterface<IListEntrySlotConfigurerFactory> NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.SetEntrySlotConfigurerFactory // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06bb0
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.HandleListModelChange // (Native|Protected|HasOutParms) // @ game+0x3a04500
	void HandleEntrySlotSettingsChanged(struct UObject* Source); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.HandleEntrySlotSettingsChanged // (Final|Native|Protected) // @ game+0x3a04470
	void GetAllEntryWidgets(struct TArray<struct UUserWidget*>& Widgets); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.GetAllEntryWidgets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a031a0
	void EntryActivatedMulticastDelegate__DelegateSignature(struct UOrderedListSimpleWidgetContainerBase* Source, struct FListItemDisplayEntryActivatedEventData EventData); // DelegateFunction ShooterGame.OrderedListSimpleWidgetContainerBase.EntryActivatedMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
	void BP_SetSharedListItemData(int32_t NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.BP_SetSharedListItemData // (Final|Native|Public|BlueprintCallable) // @ game+0x36116d0
};

// Class ShooterGame.GridPanelList
// Size: 0x2c8 (Inherited: 0x298)
struct UGridPanelList : UOrderedListSimpleWidgetContainerBase {
	struct TArray<float> ColumnFill; // 0x298(0x10)
	struct TArray<float> RowFill; // 0x2a8(0x10)
	char pad_2B8[0x10]; // 0x2b8(0x10)

	void SetRowFill(int32_t RowIndex, float Coefficient); // Function ShooterGame.GridPanelList.SetRowFill // (Final|Native|Public|BlueprintCallable) // @ game+0x3951ca0
	void SetColumnFill(int32_t ColumnIndex, float Coefficient); // Function ShooterGame.GridPanelList.SetColumnFill // (Final|Native|Public|BlueprintCallable) // @ game+0x3951600
};

// Class ShooterGame.GridSlotConfigurer
// Size: 0x70 (Inherited: 0x50)
struct UGridSlotConfigurer : UListEntrySlotConfigurerBase {
	struct FMargin Padding; // 0x50(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x60(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x61(0x01)
	enum class EGridAxis2D MajorAxis; // 0x62(0x01)
	char pad_63[0x1]; // 0x63(0x01)
	int32_t MaxMinorItemCount; // 0x64(0x04)
	struct FVector2D Nudge; // 0x68(0x08)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.GridSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3951e80
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.GridSlotConfigurer.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6cd0
	void SetNudge(struct FVector2D InNudge); // Function ShooterGame.GridSlotConfigurer.SetNudge // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3951b00
	void SetMaxMinorItemCount(int32_t InMaxMinorItemCount); // Function ShooterGame.GridSlotConfigurer.SetMaxMinorItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x39519f0
	void SetMajorAxis(enum class EGridAxis2D InMajorAxis); // Function ShooterGame.GridSlotConfigurer.SetMajorAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x3951970
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.GridSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x39517e0
};

// Class ShooterGame.GunRequestComponent
// Size: 0x168 (Inherited: 0xe8)
struct UGunRequestComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMakeGunRequest; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnFulfillGunRequest; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnCancelGunRequest; // 0x108(0x10)
	struct FAresGunRequest GunRequest; // 0x118(0x10)
	float FulfilledStateDuration; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FRateLimiter RateLimiter; // 0x130(0x30)
	bool bCanRequest; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)

	void NetMulticastMakeGunRequest(struct FAresGunRequest InGunRequest); // Function ShooterGame.GunRequestComponent.NetMulticastMakeGunRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3951140
	void NetMulticastFulfillGunRequest(struct FAresGunRequest InGunRequest, struct AShooterPlayerState* FulfillingPlayer); // Function ShooterGame.GunRequestComponent.NetMulticastFulfillGunRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3951060
	void NetMulticastCancelGunRequest(struct FAresGunRequest InGunRequest); // Function ShooterGame.GunRequestComponent.NetMulticastCancelGunRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3950fd0
	bool IsGunRequestOnExtendedCooldown(); // Function ShooterGame.GunRequestComponent.IsGunRequestOnExtendedCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3950f60
	float GetGunRequestExtendedCooldownRemaining(); // Function ShooterGame.GunRequestComponent.GetGunRequestExtendedCooldownRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3950d10
	struct FAresGunRequest GetActiveGunRequest(); // Function ShooterGame.GunRequestComponent.GetActiveGunRequest // (Final|Native|Public|Const) // @ game+0x3950c10
	void ClearGunRequest(); // Function ShooterGame.GunRequestComponent.ClearGunRequest // (Final|Native|Private) // @ game+0x3950bf0
	void AuthOnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.GunRequestComponent.AuthOnRoundEnd // (Final|Native|Public) // @ game+0x3635550
	void AuthMakeGunRequest(struct UAresPurchasableEquippable* GunToRequest); // Function ShooterGame.GunRequestComponent.AuthMakeGunRequest // (Final|Native|Public) // @ game+0x3634e00
	void AuthFulfillMyGunRequest(struct UAresPurchasableEquippable* GunToFulfill, struct AShooterPlayerState* FulfillingPlayer); // Function ShooterGame.GunRequestComponent.AuthFulfillMyGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3669300
	void AuthCancelGunRequest(struct UAresPurchasableEquippable* GunToCancel); // Function ShooterGame.GunRequestComponent.AuthCancelGunRequest // (Final|Native|Public) // @ game+0x3634e00
};

// Class ShooterGame.HasNetworkStreamInterface
// Size: 0x30 (Inherited: 0x30)
struct UHasNetworkStreamInterface : UInterface {
};

// Class ShooterGame.HeadshotDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UHeadshotDamageQuery : UInterface {

	bool IsHeadshot(); // Function ShooterGame.HeadshotDamageQuery.IsHeadshot // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3950f90
};

// Class ShooterGame.HealthResourceComponent
// Size: 0x170 (Inherited: 0x158)
struct UHealthResourceComponent : UAbilityResourceComponent {
	float HealthCost; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct UDamageType* DamageType; // 0x160(0x08)
	bool bCanBeUsedWithoutEnoughHealth; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
};

// Class ShooterGame.HitScanMovementComponent
// Size: 0x188 (Inherited: 0x188)
struct UHitScanMovementComponent : USimpleProjectileMovementComponent {
};

// Class ShooterGame.HomingProjectileMovementComponent
// Size: 0x2e0 (Inherited: 0x2d0)
struct UHomingProjectileMovementComponent : UFiniteSpeedMovementComponent {
	float HomingTurnSpeed; // 0x2d0(0x04)
	enum class EHomingProjectileFacing Facing; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct AActor* HomingTarget; // 0x2d8(0x08)

	struct AActor* GetHomingTarget(); // Function ShooterGame.HomingProjectileMovementComponent.GetHomingTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ef40
	void AuthSetHomingTarget(struct AActor* Target); // Function ShooterGame.HomingProjectileMovementComponent.AuthSetHomingTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37dfc20
};

// Class ShooterGame.HorizontalBoxList
// Size: 0x2a8 (Inherited: 0x298)
struct UHorizontalBoxList : UOrderedListSimpleWidgetContainerBase {
	char pad_298[0x10]; // 0x298(0x10)
};

// Class ShooterGame.HorizontalBoxListSlot
// Size: 0x68 (Inherited: 0x40)
struct UHorizontalBoxListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	struct FSlateChildSize Size; // 0x50(0x08)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x58(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x59(0x01)
	char pad_5A[0xe]; // 0x5a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.HorizontalBoxListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3958df0
	void SetSize(struct FSlateChildSize InSize); // Function ShooterGame.HorizontalBoxListSlot.SetSize // (Final|Native|Public|BlueprintCallable) // @ game+0x3958d60
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.HorizontalBoxListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x3958cd0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.HorizontalBoxListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3958c50
};

// Class ShooterGame.HovercardCacheManager
// Size: 0x120 (Inherited: 0x80)
struct UHovercardCacheManager : UInitSystem {
	struct FMulticastInlineDelegate OnCacheEntry; // 0x80(0x10)
	char pad_90[0x90]; // 0x90(0x90)

	bool RequestCacheEntry(struct FString Subject); // Function ShooterGame.HovercardCacheManager.RequestCacheEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x3958b50
	void HandleRateLimitTimerCompleted(); // Function ShooterGame.HovercardCacheManager.HandleRateLimitTimerCompleted // (Final|Native|Private) // @ game+0x3956690
	struct UHovercardCacheManager* GetHovercardCacheManager(struct UObject* WorldContextObject); // Function ShooterGame.HovercardCacheManager.GetHovercardCacheManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3956350
	void GetFromCache(struct FString Subject, struct FHovercardCacheEntry& OutEntry); // Function ShooterGame.HovercardCacheManager.GetFromCache // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39561d0
	void FetchDataAndAddToCache(struct FString Subject); // Function ShooterGame.HovercardCacheManager.FetchDataAndAddToCache // (Final|Native|Private) // @ game+0x2024240
};

// Class ShooterGame.HUDPlayerModel
// Size: 0x248 (Inherited: 0x30)
struct UHUDPlayerModel : UObject {
	struct FMulticastInlineDelegate PlayerStateChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate NumUltimatePointsChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEquippableChargeInfosChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTeamChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnAliveStateChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnPlayerScoreUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate DesiredClassChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate CombatReportDirtied; // 0xa0(0x10)
	struct FMulticastInlineDelegate TrackedRewardsChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate PreviousRoundRewardsFinalized; // 0xc0(0x10)
	struct FMulticastInlineDelegate SpawnedCharacterChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnDamaged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnHealed; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnDeath; // 0x100(0x10)
	struct FMulticastInlineDelegate OnVitalityDirtied; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCurrentEquippableChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnInventoryItemsChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnCurrentUsingComponentTimeChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnUsableComponentsChangedSignature; // 0x150(0x10)
	struct FMulticastInlineDelegate OnMissionInfoChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnMissionStatusChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnObjectiveStatusChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnCalloutRegionChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnConnectionStatusChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnCharacterPostureChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnAwayPenaltyStateChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnAFKStatusChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnPlayersSpectatingUpdated; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnSuppressRevealed; // 0x1f0(0x10)
	struct FVector SpawnedCharacterLocation; // 0x200(0x0c)
	struct FRotator SpawnedCharacterOrientation; // 0x20c(0x0c)
	struct AAresPlayerStateBase* PlayerState; // 0x218(0x08)
	struct AMission* ActiveMission; // 0x220(0x08)
	struct AShooterCharacter* SpawnedCharacter; // 0x228(0x08)
	struct AAresEquippable* CurrentEquippable; // 0x230(0x08)
	float SpectatorCountUpdateRate; // 0x238(0x04)
	float LastSpectatorCountUpdate; // 0x23c(0x04)
	struct FTimerHandle SpectatorCountTimerHandle; // 0x240(0x08)

	void UpdateSpawnedCharacterData(); // Function ShooterGame.HUDPlayerModel.UpdateSpawnedCharacterData // (Final|Native|Public) // @ game+0x3958ea0
	struct AMission* TryGetActiveMission(); // Function ShooterGame.HUDPlayerModel.TryGetActiveMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3958e70
	void RebroadcastTrackedRewardsChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastTrackedRewardsChanged // (Final|Native|Public) // @ game+0x3958b20
	void RebroadcastSuppressRevealed(bool bIsRevealed); // Function ShooterGame.HUDPlayerModel.RebroadcastSuppressRevealed // (Final|Native|Public) // @ game+0x3958a80
	void RebroadcastPreviousRoundRewardsFinalized(struct TArray<struct FAresTrackedReward>& PreviousRoundRewards); // Function ShooterGame.HUDPlayerModel.RebroadcastPreviousRoundRewardsFinalized // (Final|Native|Public|HasOutParms) // @ game+0x3958830
	void RebroadcastOnVitalityDirtied(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnVitalityDirtied // (Final|Native|Public) // @ game+0x3958800
	void RebroadcastOnUsableComponentsChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnUsableComponentsChanged // (Final|Native|Public) // @ game+0x39587d0
	void RebroadcastOnTeamChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnTeamChanged // (Final|Native|Public) // @ game+0x3958790
	void RebroadcastOnPlayerScoreUpdated(int32_t NewScore); // Function ShooterGame.HUDPlayerModel.RebroadcastOnPlayerScoreUpdated // (Final|Native|Public) // @ game+0x3958250
	void RebroadcastOnInventoryItemsChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnInventoryItemsChanged // (Final|Native|Public) // @ game+0x3958000
	void RebroadcastOnHealed(float Health, struct AActor* HealedActor, struct TArray<struct UDamageSectionComponent*>& Components, struct AController* EventInstigator, struct APawn* EventInstigatorPawn, struct AActor* HealCauser); // Function ShooterGame.HUDPlayerModel.RebroadcastOnHealed // (Final|Native|Public|HasOutParms) // @ game+0x3957d80
	void RebroadcastOnEquippableChargeInfosChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnEquippableChargeInfosChanged // (Final|Native|Public) // @ game+0x3957cc0
	void RebroadcastOnDeath(struct UDamageResponse* DamageResponse); // Function ShooterGame.HUDPlayerModel.RebroadcastOnDeath // (Final|Native|Public) // @ game+0x3957c20
	void RebroadcastOnDamaged(struct UDamageResponse* DamageResponse); // Function ShooterGame.HUDPlayerModel.RebroadcastOnDamaged // (Final|Native|Public) // @ game+0x3957b80
	void RebroadcastOnCurrentUsingComponentTimeChanged(float CurrentUseTime, float TotalUseTime); // Function ShooterGame.HUDPlayerModel.RebroadcastOnCurrentUsingComponentTimeChanged // (Final|Native|Public) // @ game+0x3957aa0
	void RebroadcastOnAliveStateChanged(bool NewValue); // Function ShooterGame.HUDPlayerModel.RebroadcastOnAliveStateChanged // (Final|Native|Public) // @ game+0x39572b0
	void RebroadcastObjectiveStatusChanged(struct UObjectiveComponent* ChangedObjective, enum class EObjectiveType ObjectiveType, enum class EObjectiveStatus OldStatus, enum class EObjectiveStatus NewStatus); // Function ShooterGame.HUDPlayerModel.RebroadcastObjectiveStatusChanged // (Final|Native|Public) // @ game+0x3957150
	void RebroadcastNumUltimatePointsChanged(int32_t NewValue, bool bUltNewlyReady); // Function ShooterGame.HUDPlayerModel.RebroadcastNumUltimatePointsChanged // (Final|Native|Public) // @ game+0x3957080
	void RebroadcastMissionUIVisibilityChanged(struct AMission* ChangedMission); // Function ShooterGame.HUDPlayerModel.RebroadcastMissionUIVisibilityChanged // (Final|Native|Public) // @ game+0x3956ff0
	void RebroadcastMissionStatusChanged(struct AMission* ChangedMission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.HUDPlayerModel.RebroadcastMissionStatusChanged // (Final|Native|Public) // @ game+0x3956ee0
	void RebroadcastDesiredClassChanged(struct AShooterCharacter* NewValue); // Function ShooterGame.HUDPlayerModel.RebroadcastDesiredClassChanged // (Final|Native|Public) // @ game+0x3956d60
	void RebroadcastConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.HUDPlayerModel.RebroadcastConnectionStatusChanged // (Final|Native|Public) // @ game+0x3956c40
	void RebroadcastCombatReportDirtied(); // Function ShooterGame.HUDPlayerModel.RebroadcastCombatReportDirtied // (Final|Native|Public) // @ game+0x3956c10
	void RebroadcastCharacterPostureChanged(enum class EAresCharacterPosture NewPosture); // Function ShooterGame.HUDPlayerModel.RebroadcastCharacterPostureChanged // (Final|Native|Protected) // @ game+0x3956b90
	void RebroadcastCalloutRegionChanged(struct AAresCalloutRegion* NewRegion); // Function ShooterGame.HUDPlayerModel.RebroadcastCalloutRegionChanged // (Final|Native|Public) // @ game+0x3956af0
	void RebroadcastAwayPenaltyStateChanged(struct AShooterPlayerState* Owner, bool bIsPenalizedForBeingAway); // Function ShooterGame.HUDPlayerModel.RebroadcastAwayPenaltyStateChanged // (Final|Native|Public) // @ game+0x3956a10
	void RebroadcastAFKStatusChanged(struct AShooterPlayerState* Owner, bool bIsAFK); // Function ShooterGame.HUDPlayerModel.RebroadcastAFKStatusChanged // (Final|Native|Public) // @ game+0x3956930
	void OnNewSpawnedCharacter(struct AShooterCharacter* NewSpawnedCharacter); // Function ShooterGame.HUDPlayerModel.OnNewSpawnedCharacter // (Final|Native|Protected) // @ game+0x39568a0
	void OnNewMissionAssigned(struct AMission* NewMission); // Function ShooterGame.HUDPlayerModel.OnNewMissionAssigned // (Final|Native|Protected) // @ game+0x3956810
	void OnNewCurrentEquippable(struct AAresEquippable* NewCurrentEquippable); // Function ShooterGame.HUDPlayerModel.OnNewCurrentEquippable // (Final|Native|Protected) // @ game+0x3956780
	void OnAFKDetectionComponentReplicated(struct UAFKDetectionComponent* PreviousAFKDetectionComponent, struct UAFKDetectionComponent* NewAFKDetectionComponent); // Function ShooterGame.HUDPlayerModel.OnAFKDetectionComponentReplicated // (Final|Native|Protected) // @ game+0x39566b0
	void HandlePlayersSpectatingUpdated(); // Function ShooterGame.HUDPlayerModel.HandlePlayersSpectatingUpdated // (Final|Native|Public) // @ game+0x3956670
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.HUDPlayerModel.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3956470
	struct AAresPlayerStateBase* GetPlayerState(); // Function ShooterGame.HUDPlayerModel.GetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x3956440
	struct AAresEquippable* GetCurrentEquippable(); // Function ShooterGame.HUDPlayerModel.GetCurrentEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x36f6d00
};

// Class ShooterGame.HUDSelfPlayerModel
// Size: 0x260 (Inherited: 0x248)
struct UHUDSelfPlayerModel : UHUDPlayerModel {
	struct FMulticastInlineDelegate OnCharacterTooltipRequestStateChanged; // 0x248(0x10)
	struct AOwnerExclusivePlayerInfo* PlayerInfo; // 0x258(0x08)

	void HandleCharacterTooltipRequestStateChanged(bool bRequested); // Function ShooterGame.HUDSelfPlayerModel.HandleCharacterTooltipRequestStateChanged // (Final|Native|Public) // @ game+0x39564a0
	struct AOwnerExclusivePlayerInfo* GetPlayerInfo(); // Function ShooterGame.HUDSelfPlayerModel.GetPlayerInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3956410
};

// Class ShooterGame.CoordinatedHUDModel
// Size: 0x228 (Inherited: 0x30)
struct UCoordinatedHUDModel : UObject {
	struct FMulticastInlineDelegate OnGameStateChanged; // 0x30(0x10)
	struct UHUDPlayerModel* FirstPersonModel; // 0x40(0x08)
	struct UHUDSelfPlayerModel* SelfModel; // 0x48(0x08)
	struct TArray<struct UHUDPlayerModel*> HUDPlayerModelsList; // 0x50(0x10)
	struct FMulticastInlineDelegate OnHUDPlayerModelListUpdated; // 0x60(0x10)
	struct FMulticastInlineDelegate OnTeamCompositionsChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnViewTargetChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPlayerViewTargetModeChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnCinematicModeUpdated; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnGameStateHUDConfigChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnRoundNumebrChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnTeamAverageLoadoutValueUpdated; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayerStateListUpdated; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPointsUpdated; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnRoundResultsUpdated; // 0x100(0x10)
	struct FMulticastInlineDelegate OnMatchEnd; // 0x110(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerKilled; // 0x120(0x10)
	struct FMulticastInlineDelegate OnNonPlayerActorKilled; // 0x130(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerResurrected; // 0x140(0x10)
	struct FMulticastInlineDelegate OnPlayerSpawn; // 0x150(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerTemporaryDeath; // 0x160(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerRecovered; // 0x170(0x10)
	struct FMulticastInlineDelegate OnSimulatedNetworkDegradationChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnSimulatingBurstLossChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnSkillTestStarted; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnSkillTestEnded; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnMatchTimeoutStateChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate ShowScoreboardPressed; // 0x1d0(0x10)
	struct FMulticastInlineDelegate ShowScoreboardReleased; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnIsReady; // 0x1f0(0x10)
	struct AShooterGameState* GameState; // 0x200(0x08)
	char pad_208[0x8]; // 0x208(0x08)
	struct AAresPlayerController* PlayerController; // 0x210(0x08)
	struct TArray<struct AAresPlayerStateBase*> ListenedPlayerStates; // 0x218(0x10)

	void RebroadcastOnTeamCompositionsChanged(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnTeamCompositionsChanged // (Final|Native|Public) // @ game+0x39587b0
	void RebroadcastOnTeamAverageLoadoutValueUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnTeamAverageLoadoutValueUpdated // (Final|Native|Public) // @ game+0x3958760
	void RebroadcastOnSkillTestStarted(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSkillTestStarted // (Final|Native|Public) // @ game+0x3958730
	void RebroadcastOnSkillTestEnded(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSkillTestEnded // (Final|Native|Public) // @ game+0x3958700
	void RebroadcastOnSimulatingBurstLossChanged(struct UAresNetDriver* AresNetDriver, bool bIsSimulatingBurstLoss); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSimulatingBurstLossChanged // (Final|Native|Public) // @ game+0x3958620
	void RebroadcastOnSimulatedNetworkDegradationChanged(struct UAresNetDriver* AresNetDriver, bool bEnabled, struct FString PresetName); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSimulatedNetworkDegradationChanged // (Final|Native|Public) // @ game+0x39583d0
	void RebroadcastOnRoundResultsUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnRoundResultsUpdated // (Final|Native|Public) // @ game+0x39583a0
	void RebroadcastOnRoundNumberChanged(int32_t NewValue); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnRoundNumberChanged // (Final|Native|Public) // @ game+0x3958310
	void RebroadcastOnPointsUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnPointsUpdated // (Final|Native|Public) // @ game+0x39582e0
	void RebroadcastOnNonPlayerActorKilled(struct AShooterPlayerState* KillerPlayerState, struct AActor* KilledActor, struct AAresEquippable* EquippableUsed, bool bWasHeadshot); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnNonPlayerActorKilled // (Final|Native|Public) // @ game+0x39580e0
	void RebroadcastOnMatchEnd(struct FAresMatchResult& MatchResults); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnMatchEnd // (Final|Native|Public|HasOutParms) // @ game+0x3958030
	void RebroadcastOnGameStateHUDConfigChanged(struct UGameStateHUDConfig* NewConfig); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnGameStateHUDConfigChanged // (Final|Native|Public) // @ game+0x3957ce0
	void RebroadcastOnCinematicModeUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnCinematicModeUpdated // (Final|Native|Public) // @ game+0x3956c10
	void RebroadcastOnAnyPlayerTemporaryDeath(struct AShooterPlayerState* DamagerPlayerState, struct AShooterPlayerState* DownedPlayerState, struct UDamageResponse* DamageResponse, struct AAresEquippable* EquippableUsed, bool bRecoversInstantly); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerTemporaryDeath // (Final|Native|Public) // @ game+0x3957900
	void RebroadcastOnAnyPlayerSpawn(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerSpawn // (Final|Native|Public) // @ game+0x3957820
	void RebroadcastOnAnyPlayerResurrected(struct AShooterPlayerState* ResurrectorPlayerState, struct AShooterPlayerState* ResurrectedPlayerState, int32_t KillNumberInRoundForResurrector, int32_t KillNumberInRoundForResurrected); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerResurrected // (Final|Native|Public) // @ game+0x39576c0
	void RebroadcastOnAnyPlayerRecovered(struct AShooterPlayerState* RecoveredByPlayerState, struct AShooterPlayerState* RecoveredPlayerState); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerRecovered // (Final|Native|Public) // @ game+0x39575e0
	void RebroadcastOnAnyPlayerKilled(struct AShooterPlayerState* KillerPlayerState, struct AShooterPlayerState* KilledPlayerState, int32_t KillNumberInRoundForKiller, int32_t KillNumberInRoundForKilled, struct UDamageResponse* Response, struct AAresEquippable* EquippableUsed, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerKilled // (Final|Native|Public|HasOutParms) // @ game+0x3957340
	void RebroadcastMatchTimeoutStateChanged(enum class EAresMatchTimeoutState TimeoutState, float Duration); // Function ShooterGame.CoordinatedHUDModel.RebroadcastMatchTimeoutStateChanged // (Final|Native|Public) // @ game+0x3956e00
	void HandlePlayerStateListUpdated(); // Function ShooterGame.CoordinatedHUDModel.HandlePlayerStateListUpdated // (Final|Native|Public) // @ game+0x3956650
	void HandleOnViewTargetChanged(struct AActor* NewViewTarget); // Function ShooterGame.CoordinatedHUDModel.HandleOnViewTargetChanged // (Final|Native|Public) // @ game+0x39565c0
	void HandleOnPlayerViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.CoordinatedHUDModel.HandleOnPlayerViewTargetModeChanged // (Final|Native|Public|HasOutParms) // @ game+0x3956530
	struct AAresPlayerController* GetLocalPlayerController(); // Function ShooterGame.CoordinatedHUDModel.GetLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39563e0
	struct AShooterGameState* GetGameState(); // Function ShooterGame.CoordinatedHUDModel.GetGameState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3956320
	void BuildAndBroadcastHUDPlayerModels(); // Function ShooterGame.CoordinatedHUDModel.BuildAndBroadcastHUDPlayerModels // (Final|Native|Public) // @ game+0x39561b0
};

// Class ShooterGame.HUDElementCoordinator
// Size: 0x80 (Inherited: 0x30)
struct UHUDElementCoordinator : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct AAresPlayerController* PlayerController; // 0x50(0x08)
	struct TArray<struct UCoordinatedHUDElement*> HUDElements; // 0x58(0x10)
	struct UCoordinatedHUDModel* CoordinatedHUDModel; // 0x68(0x08)
	struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel; // 0x70(0x08)
	struct UCoordinatedHUDElement* InformationalHUDElement; // 0x78(0x08)
};

// Class ShooterGame.HUDVisibilityData
// Size: 0xf0 (Inherited: 0xe8)
struct UHUDVisibilityData : UActorComponent {
	bool bHideTimerWidget; // 0xe8(0x01)
	bool bHideSpectatorWidget; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
};

// Class ShooterGame.ButtonTextWidgetComponent
// Size: 0x30 (Inherited: 0x30)
struct UButtonTextWidgetComponent : UInterface {

	void SetTextComponentText(struct FText& InText); // Function ShooterGame.ButtonTextWidgetComponent.SetTextComponentText // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3960700
	enum class EButtonTextWidgetComponentType GetTextComponentType(); // Function ShooterGame.ButtonTextWidgetComponent.GetTextComponentType // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x395fde0
};

// Class ShooterGame.ConditionalInputActivationProvider
// Size: 0x30 (Inherited: 0x30)
struct UConditionalInputActivationProvider : UInterface {

	bool HandleChildWidgetActivationPreferenceChanged(); // Function ShooterGame.ConditionalInputActivationProvider.HandleChildWidgetActivationPreferenceChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	enum class EActivationPreference GetActivationPreferenceForAction(struct FAresConditionalInputAction Action); // Function ShooterGame.ConditionalInputActivationProvider.GetActivationPreferenceForAction // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ConditionalInputActivationPreferenceWidget
// Size: 0x30 (Inherited: 0x30)
struct UConditionalInputActivationPreferenceWidget : UInterface {

	enum class EActivationPreference GetActivationPreferenceForAction(struct FAresConditionalInputAction Action); // Function ShooterGame.ConditionalInputActivationPreferenceWidget.GetActivationPreferenceForAction // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.IdleAdditiveAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAdditiveAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.IdleAimLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAimLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.IdleAimUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAimUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.IdleAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.IdleLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.IdleUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.IdleBaseAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UIdleBaseAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.IdleBaseUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleBaseUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.EffectLifecycleInterface
// Size: 0x30 (Inherited: 0x30)
struct UEffectLifecycleInterface : UInterface {
};

// Class ShooterGame.IgnoreAllyWallPenetrationComponent
// Size: 0x138 (Inherited: 0x138)
struct UIgnoreAllyWallPenetrationComponent : UIgnoreWallPenetrationComponent {
};

// Class ShooterGame.IgnoreUntilSeparatedComponent
// Size: 0x110 (Inherited: 0xe8)
struct UIgnoreUntilSeparatedComponent : UActorComponent {
	struct TArray<struct AActor*> IgnoredActors; // 0xe8(0x10)
	struct TArray<struct AActor*> ClientIgnoredActors; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)

	void OnRep_IgnoredActors(); // Function ShooterGame.IgnoreUntilSeparatedComponent.OnRep_IgnoredActors // (Final|Native|Private) // @ game+0x3960110
	void AuthAddIgnoredActor(struct AActor* IgnoreActor); // Function ShooterGame.IgnoreUntilSeparatedComponent.AuthAddIgnoredActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
};

// Class ShooterGame.InfiniteCarouselEntry
// Size: 0x30 (Inherited: 0x30)
struct UInfiniteCarouselEntry : UInterface {

	void SetSelected(bool bSelected); // Function ShooterGame.InfiniteCarouselEntry.SetSelected // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3960670
	void SetDimensions(struct FVector2D Dimensions); // Function ShooterGame.InfiniteCarouselEntry.SetDimensions // (Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnEntryObjectSet(struct UObject* EntryObject); // Function ShooterGame.InfiniteCarouselEntry.OnEntryObjectSet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnCarouselSet(struct UInfiniteCarouselV2* InfiniteCarousel); // Function ShooterGame.InfiniteCarouselEntry.OnCarouselSet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct UObject* GetEntryObject(); // Function ShooterGame.InfiniteCarouselEntry.GetEntryObject // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x37c2760
};

// Class ShooterGame.PureEffectManagerComponent
// Size: 0x140 (Inherited: 0xe8)
struct UPureEffectManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TMap<struct UObject*, struct FPureEffectInstancePool> InstancePools; // 0xf0(0x50)
};

// Class ShooterGame.ImpactEffectManagerComponent
// Size: 0x168 (Inherited: 0x140)
struct UImpactEffectManagerComponent : UPureEffectManagerComponent {
	struct TArray<struct UAresAudioComponent*> AudioComponentPool; // 0x140(0x10)
	struct TArray<struct UStaticMeshComponent*> StaticMeshComponentPool; // 0x150(0x10)
	struct AActor* PooledComponentActor; // 0x160(0x08)

	void ReleasePooledStaticMeshComponent(struct UStaticMeshComponent* Component); // Function ShooterGame.ImpactEffectManagerComponent.ReleasePooledStaticMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3960360
	void ReleasePooledAudioComponent(struct UAresAudioComponent* Component); // Function ShooterGame.ImpactEffectManagerComponent.ReleasePooledAudioComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x39602d0
	struct UStaticMeshComponent* GetPooledStaticMeshComponent(struct FVector& Location, struct FRotator& Rotation, struct UStaticMesh* StaticMesh); // Function ShooterGame.ImpactEffectManagerComponent.GetPooledStaticMeshComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x395fca0
	struct UAresAudioComponent* GetPooledAudioComponent(struct FVector& Location); // Function ShooterGame.ImpactEffectManagerComponent.GetPooledAudioComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x395fc00
	struct UImpactEffectManagerComponent* GET(struct UObject* WorldContextObject); // Function ShooterGame.ImpactEffectManagerComponent.GET // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x395f900
};

// Class ShooterGame.ImpactEffectsOverrideComponent
// Size: 0x118 (Inherited: 0xe8)
struct UImpactEffectsOverrideComponent : UActorComponent {
	struct FImpactEffects ImpactEffects; // 0xe8(0x28)
	struct AEffectContainer* MeleeEffect; // 0x110(0x08)
};

// Class ShooterGame.UltPointsComponent
// Size: 0x168 (Inherited: 0x158)
struct UUltPointsComponent : UAbilityResourceComponent {
	struct AShooterCharacter* OwningCharacter; // 0x158(0x08)
	struct AShooterPlayerState* OwningPlayerState; // 0x160(0x08)

	void OnUltPointsChanged(int32_t NewValue, bool bUltNewlyReady); // Function ShooterGame.UltPointsComponent.OnUltPointsChanged // (Final|Native|Protected) // @ game+0x3c598a0
	void OnOwningStateChanged(struct AShooterPlayerState* NewState); // Function ShooterGame.UltPointsComponent.OnOwningStateChanged // (Final|Native|Protected) // @ game+0x3c59720
};

// Class ShooterGame.IncrementalUltPointsComponent
// Size: 0x170 (Inherited: 0x168)
struct UIncrementalUltPointsComponent : UUltPointsComponent {
	int32_t UltsPointsPerUse; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
};

// Class ShooterGame.IndexedSequenceAnimationConductorNodeBase
// Size: 0xa0 (Inherited: 0x70)
struct UIndexedSequenceAnimationConductorNodeBase : UNumericProgressModelBase {
	char pad_70[0x10]; // 0x70(0x10)
	int32_t CurrentIndex; // 0x80(0x04)
	char pad_84[0x1c]; // 0x84(0x1c)

	void OnStartItem(int32_t Index); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnStartItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x378d8e0
	void OnSkipItem(int32_t Index); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnSkipItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x3960240
	void OnSequenceStarted(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnSequenceStarted // (Native|Event|Protected|BlueprintEvent) // @ game+0x2024340
	void OnSequenceCompleted(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnSequenceCompleted // (Native|Event|Protected|BlueprintEvent) // @ game+0x36b8220
	void OnResetItem(int32_t Index, enum class EAnimationConductorNodeResetType ResetType, int32_t OriginalIndex); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnResetItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x3960130
	void OnPreSkip(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPreSkip // (Native|Event|Protected|BlueprintEvent) // @ game+0x36b81f0
	void OnPreReset(enum class EAnimationConductorNodeResetType ResetType); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPreReset // (Native|Event|Protected|BlueprintEvent) // @ game+0x3960080
	void OnPostSkip(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPostSkip // (Native|Event|Protected|BlueprintEvent) // @ game+0x288aab0
	void OnPostReset(enum class EAnimationConductorNodeResetType ResetType); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPostReset // (Native|Event|Protected|BlueprintEvent) // @ game+0x395fff0
	int32_t GetNumItems(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.GetNumItems // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x395faf0
	int32_t GetCurrentIndex(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.GetCurrentIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x395faa0
	void BP_StartNextItem(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.BP_StartNextItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x395f8e0
	void BP_BroadcastNewCueEvent(struct FName CueName); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.BP_BroadcastNewCueEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x395f840
	void BP_BroadcastCueEvent(struct FAnimationCueSource_CueEventData& EventData); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.BP_BroadcastCueEvent // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x395f7a0
};

// Class ShooterGame.GridAnchorIndexProvider
// Size: 0x30 (Inherited: 0x30)
struct UGridAnchorIndexProvider : UInterface {

	int32_t GetAnchorIndex(); // Function ShooterGame.GridAnchorIndexProvider.GetAnchorIndex // (Native|Event|Public|BlueprintEvent) // @ game+0x395fa60
};

// Class ShooterGame.IndexGridAnchorContainer
// Size: 0x3b0 (Inherited: 0x3a8)
struct UIndexGridAnchorContainer : UGridAnchorContainer {
	struct UNamedSlot* NS_IndexButtonContents; // 0x3a8(0x08)
};

// Class ShooterGame.InfiniteCarouselV2
// Size: 0x3f8 (Inherited: 0x2c8)
struct UInfiniteCarouselV2 : UUserWidget {
	struct FMulticastInlineDelegate OnEntryWidgetCreated; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnCurrentObjectChanged; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnCurrentIndexChanged; // 0x2e8(0x10)
	struct UUserWidget* EntryWidgetClass; // 0x2f8(0x08)
	struct UUserWidget* EntryPreviewClassOverride; // 0x300(0x08)
	int32_t MaxVisibleEntriesPerSide; // 0x308(0x04)
	int32_t EntryWidth; // 0x30c(0x04)
	int32_t EntryHeight; // 0x310(0x04)
	int32_t Margin; // 0x314(0x04)
	int32_t InnerPadding; // 0x318(0x04)
	int32_t BufferEntryCountPerSide; // 0x31c(0x04)
	int32_t DesignTimeEntryCount; // 0x320(0x04)
	struct FDelegate Filter; // 0x324(0x14)
	struct UOverlay* BindWidget; // 0x338(0x08)
	struct USizeBox* ContainerSizeBox; // 0x340(0x08)
	struct USizeBox* ResponsiveSizeBox; // 0x348(0x08)
	struct UCanvasPanel* Container; // 0x350(0x08)
	bool bDirty; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	double CurrentIndex; // 0x360(0x08)
	float Velocity; // 0x368(0x04)
	float Acceleration; // 0x36c(0x04)
	int32_t TargetIndex; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct UObject* TargetObject; // 0x378(0x08)
	struct UObject* CurrentObject; // 0x380(0x08)
	struct TArray<struct UObject*> AllObjects; // 0x388(0x10)
	struct TArray<struct UObject*> FilteredObjects; // 0x398(0x10)
	struct TMap<int32_t, struct UUserWidget*> Entries; // 0x3a8(0x50)

	void UpdateObjectsAndDimensions(); // Function ShooterGame.InfiniteCarouselV2.UpdateObjectsAndDimensions // (Final|Native|Public|BlueprintCallable) // @ game+0x3960ae0
	void UpdateConfig(struct UUserWidget* NewEntryPreviewClassOverride, struct UUserWidget* NewEntryWidgetClass, bool bDesignTime, int32_t NewMaxVisibleEntriesPerSide, int32_t NewEntryWidth, int32_t NewEntryHeight, int32_t NewBufferEntryCountPerSide, int32_t NewDesignTimeEntryCount, int32_t NewMargin, int32_t NewInnerPadding); // Function ShooterGame.InfiniteCarouselV2.UpdateConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x39607f0
	void SetFilter(struct FDelegate NewFilter); // Function ShooterGame.InfiniteCarouselV2.SetFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x39605c0
	void ScrollToObject(struct UObject* Object); // Function ShooterGame.InfiniteCarouselV2.ScrollToObject // (Final|Native|Public|BlueprintCallable) // @ game+0x3960530
	void ScrollToArrayIndex(int32_t Index); // Function ShooterGame.InfiniteCarouselV2.ScrollToArrayIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x39604a0
	void Scroll(int32_t Offset); // Function ShooterGame.InfiniteCarouselV2.Scroll // (Final|Native|Public|BlueprintCallable) // @ game+0x3960410
	void Reset(); // Function ShooterGame.InfiniteCarouselV2.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x39603f0
	void JumpToObject(struct UObject* Object); // Function ShooterGame.InfiniteCarouselV2.JumpToObject // (Final|Native|Public|BlueprintCallable) // @ game+0x395fe20
	struct TArray<struct UObject*> GetObjects(); // Function ShooterGame.InfiniteCarouselV2.GetObjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x395fb30
	int32_t GetCurrentObjectIndex(); // Function ShooterGame.InfiniteCarouselV2.GetCurrentObjectIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x395fac0
	struct UObject* GetCurrentObject(); // Function ShooterGame.InfiniteCarouselV2.GetCurrentObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369ff30
	struct TArray<struct UObject*> GetAllObjects(); // Function ShooterGame.InfiniteCarouselV2.GetAllObjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x395f990
	void AddObject(struct UObject* Object); // Function ShooterGame.InfiniteCarouselV2.AddObject // (Final|Native|Public|BlueprintCallable) // @ game+0x395f710
};

// Class ShooterGame.InfluenceNodeVisibilityCheckerUmbra
// Size: 0x48 (Inherited: 0x30)
struct UInfluenceNodeVisibilityCheckerUmbra : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.StaticGameFlowState
// Size: 0x90 (Inherited: 0x88)
struct UStaticGameFlowState : UGameFlowState {
	enum class EGameFlowStateType TransitionStateType; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class ShooterGame.InGameStateV2
// Size: 0xc8 (Inherited: 0x90)
struct UInGameStateV2 : UStaticGameFlowState {
	char pad_90[0x20]; // 0x90(0x20)
	struct UCoreGameManager* CoreGameManager; // 0xb0(0x08)
	struct UAntiAddictionManager* AntiAddictionManager; // 0xb8(0x08)
	struct UCNAntiAddictionManager* CNAntiAddictionManager; // 0xc0(0x08)
};

// Class ShooterGame.RNetInitPlayerController
// Size: 0x750 (Inherited: 0x750)
struct ARNetInitPlayerController : APlayerController {
};

// Class ShooterGame.InitCheatManager
// Size: 0x90 (Inherited: 0x90)
struct UInitCheatManager : UCheatManager {

	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.InitCheatManager.SetConfigurationValue // (Final|Exec|Native|Private) // @ game+0x3967950
};

// Class ShooterGame.InitializationStateV2
// Size: 0x90 (Inherited: 0x90)
struct UInitializationStateV2 : UStaticGameFlowState {
};

// Class ShooterGame.InMenuGunPersonalizationComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UInMenuGunPersonalizationComponent : UActorComponent {
	struct UEquippableDataAsset* EquippableToTrackDataAsset; // 0xe8(0x08)

	void Reset(); // Function ShooterGame.InMenuGunPersonalizationComponent.Reset // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnGunModelRecieved(struct UEquippableInventoryModel* GunModel); // Function ShooterGame.InMenuGunPersonalizationComponent.OnGunModelRecieved // (Final|Native|Private) // @ game+0x3967220
	void OnGunModelChanged(); // Function ShooterGame.InMenuGunPersonalizationComponent.OnGunModelChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x3967200
	void GetGunInventoryModel(); // Function ShooterGame.InMenuGunPersonalizationComponent.GetGunInventoryModel // (Final|Native|Private) // @ game+0x39667b0
};

// Class ShooterGame.InPerilHandlerComponent
// Size: 0x130 (Inherited: 0xe8)
struct UInPerilHandlerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct AShooterCharacter* CurrentCharacter; // 0xf0(0x08)
	struct UAresAbilitySystemComponent* AresAbilitySystemComponent; // 0xf8(0x08)
	struct FMulticastInlineDelegate InPerilAttributeChangedDelegate; // 0x100(0x10)
	struct FMulticastInlineDelegate InPerilEndedDelegate; // 0x110(0x10)
	struct FMulticastInlineDelegate InPerilStartedDelegate; // 0x120(0x10)

	void OnPossessCharacterChanged(struct AShooterCharacter* NewCharacter); // Function ShooterGame.InPerilHandlerComponent.OnPossessCharacterChanged // (Final|Native|Protected) // @ game+0x3967580
	void OnInPerilAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.InPerilHandlerComponent.OnInPerilAttributeChanged // (Final|Native|Protected|HasOutParms) // @ game+0x39672b0
	void Multicast_OnInPerilAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute Attribute, float OldValue, float NewValue); // Function ShooterGame.InPerilHandlerComponent.Multicast_OnInPerilAttributeChanged // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3966dc0
	bool IsInPeril(); // Function ShooterGame.InPerilHandlerComponent.IsInPeril // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3966d90
	float GetInPerilStacks(); // Function ShooterGame.InPerilHandlerComponent.GetInPerilStacks // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39667d0
};

// Class ShooterGame.InputActionBindingLibrary
// Size: 0x30 (Inherited: 0x30)
struct UInputActionBindingLibrary : UBlueprintFunctionLibrary {
};

// Class ShooterGame.InputMethodInterface
// Size: 0x30 (Inherited: 0x30)
struct UInputMethodInterface : UInterface {

	void UnbindOnInputMethodChanged(struct FDelegate& Event); // Function ShooterGame.InputMethodInterface.UnbindOnInputMethodChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x378ca00
	enum class EPlayerInputMethod GetLastInputMethod(); // Function ShooterGame.InputMethodInterface.GetLastInputMethod // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3966800
	void BindOnInputMethodChanged(struct FDelegate& Event); // Function ShooterGame.InputMethodInterface.BindOnInputMethodChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x378dcb0
};

// Class ShooterGame.InstabilityTrackingDetails
// Size: 0x58 (Inherited: 0x30)
struct UInstabilityTrackingDetails : UObject {
	struct FString DebugName; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInstabilityStateChanged; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)

	void WipeInstabilityState(); // Function ShooterGame.InstabilityTrackingDetails.WipeInstabilityState // (Native|Public|BlueprintCallable) // @ game+0x2432e40
	bool SetInstabilityState(bool bNewInstability, bool bNewIsCritical); // Function ShooterGame.InstabilityTrackingDetails.SetInstabilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x3967a60
	bool IsInstabilityDetected(); // Function ShooterGame.InstabilityTrackingDetails.IsInstabilityDetected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x382d520
	bool IsCriticalInstabilityDetected(); // Function ShooterGame.InstabilityTrackingDetails.IsCriticalInstabilityDetected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3966d60
};

// Class ShooterGame.MetricInstabilityTrackingDetails
// Size: 0x88 (Inherited: 0x58)
struct UMetricInstabilityTrackingDetails : UInstabilityTrackingDetails {
	float CriticalThreshold; // 0x58(0x04)
	float Threshold; // 0x5c(0x04)
	float LastFrameValue; // 0x60(0x04)
	float LastFrameAverage; // 0x64(0x04)
	float StartTime; // 0x68(0x04)
	float PersistenceDuration; // 0x6c(0x04)
	enum class EBound Bound; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct UCurveFloat* ThresholdCurve; // 0x78(0x08)
	struct UCurveFloat* CriticalThresholdCurve; // 0x80(0x08)

	void InitializeState(struct FString InDebugName, float InThreshold, float InCriticalThreshold, enum class EBound InBound, struct UCurveFloat* InThresholdCurve, struct UCurveFloat* InCriticalThresholdCurve, float InFalloffDuration, float InStartTime, float InPersistenceDuration); // Function ShooterGame.MetricInstabilityTrackingDetails.InitializeState // (Final|Native|Public) // @ game+0x3966a80
};

// Class ShooterGame.NetworkOutageInstabilityTrackingDetails
// Size: 0x78 (Inherited: 0x58)
struct UNetworkOutageInstabilityTrackingDetails : UInstabilityTrackingDetails {
	char pad_58[0x20]; // 0x58(0x20)

	void OnNetworkLagStateChanged(struct UWorld* World, struct UNetDriver* Driver, enum class ENetworkLagState State); // Function ShooterGame.NetworkOutageInstabilityTrackingDetails.OnNetworkLagStateChanged // (Final|Native|Protected) // @ game+0x3967470
	void OnBurstLossStateChanged(struct UWorld* World, struct UNetDriver* Driver, bool bInIsExperiencingBurstLoss); // Function ShooterGame.NetworkOutageInstabilityTrackingDetails.OnBurstLossStateChanged // (Final|Native|Protected) // @ game+0x39670d0
	void OnAresNetworkErrorStateChanged(enum class EAresNetworkErrorType Type, bool bErrorActive); // Function ShooterGame.NetworkOutageInstabilityTrackingDetails.OnAresNetworkErrorStateChanged // (Final|Native|Protected) // @ game+0x3967000
};

// Class ShooterGame.RemoteClientPredictionTrackingDetails
// Size: 0x58 (Inherited: 0x58)
struct URemoteClientPredictionTrackingDetails : UInstabilityTrackingDetails {

	void OnPredictionStateChanged(bool bForwardPredicting); // Function ShooterGame.RemoteClientPredictionTrackingDetails.OnPredictionStateChanged // (Final|Native|Public) // @ game+0x3967610
};

// Class ShooterGame.InteractableUserComponent
// Size: 0x358 (Inherited: 0xe8)
struct UInteractableUserComponent : UInputBindingComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float CurrentUsableScoreBias; // 0xf0(0x04)
	float NotUsableScoreBias; // 0xf4(0x04)
	float MaxUseDistance; // 0xf8(0x04)
	float UseDistanceScoreFactor; // 0xfc(0x04)
	struct FClassInclusionExclusionFilter UsableFilter; // 0x100(0x50)
	struct FMulticastInlineDelegate OnCurrentUsingComponentTimeChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnUsableComponentsChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnBestUsableUpdated; // 0x170(0x10)
	struct FMulticastInlineDelegate OnUseInteractablePressed; // 0x180(0x10)
	struct TMap<enum class EUseKeyType, struct UUsableComponent*> BestUsableComponents; // 0x190(0x50)
	struct TArray<struct UUsableComponent*> BestUsableComponentsForUI; // 0x1e0(0x10)
	struct TMap<enum class EUseKeyType, bool> LastCanUseComponentChecks; // 0x1f0(0x50)
	char pad_240[0x60]; // 0x240(0x60)
	struct AShooterCharacter* OwningShooterCharacter; // 0x2a0(0x08)
	char pad_2A8[0x10]; // 0x2a8(0x10)
	enum class EUseKeyType InteractionsActive; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct FCurrentUsableInfo AuthCurrentUsingInfo; // 0x2c0(0x28)
	struct FCurrentUsableInfo PredictedCurrentUsingInfo; // 0x2e8(0x28)
	char pad_310[0x8]; // 0x310(0x08)
	struct UUsableComponent* CurrentlyActivatedContinuousUsable; // 0x318(0x08)
	char pad_320[0x8]; // 0x320(0x08)
	enum class EUseKeyType UseKeysBound; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct TArray<enum class EUseKeyType> ActivatableKeyTypes; // 0x330(0x10)
	struct TArray<enum class EUseKeyType> UseKeyTypesForUITypes; // 0x340(0x10)
	struct UUserWidget* NonLookingPickupWidget; // 0x350(0x08)

	void UseObjectUp(); // Function ShooterGame.InteractableUserComponent.UseObjectUp // (Final|Native|Private) // @ game+0x3967c70
	void UseObjectDown(); // Function ShooterGame.InteractableUserComponent.UseObjectDown // (Final|Native|Private) // @ game+0x3967c50
	void UpdateClientUsables(); // Function ShooterGame.InteractableUserComponent.UpdateClientUsables // (Final|Native|Protected) // @ game+0x3967c30
	void TickUseButtonsHeld(enum class EUseKeyType KeyTypes, float DeltaTime); // Function ShooterGame.InteractableUserComponent.TickUseButtonsHeld // (Final|Native|Protected) // @ game+0x3967b60
	void TickCurrentUsable(); // Function ShooterGame.InteractableUserComponent.TickCurrentUsable // (Final|Native|Protected) // @ game+0x3967b40
	void ServerUpdateDebugServerCancelPoint(float NewCancelPoint); // Function ShooterGame.InteractableUserComponent.ServerUpdateDebugServerCancelPoint // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3687f90
	void ServerUpdateDebugMode(int32_t NewMode); // Function ShooterGame.InteractableUserComponent.ServerUpdateDebugMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x39678c0
	void ServerNotifyClientPredictedUseEvent(struct FNetworkedPredictedUse PredictedUse); // Function ShooterGame.InteractableUserComponent.ServerNotifyClientPredictedUseEvent // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3967820
	void PossessChanged(struct AController* Controller); // Function ShooterGame.InteractableUserComponent.PossessChanged // (Final|Native|Private) // @ game+0x3967790
	void OnUseInteractableObjectChanged(enum class EUseKeyType KeyTypes, bool bStartUsing); // Function ShooterGame.InteractableUserComponent.OnUseInteractableObjectChanged // (Final|Native|Public) // @ game+0x39676c0
	void OnRep_AuthCurrentUsingInfo(); // Function ShooterGame.InteractableUserComponent.OnRep_AuthCurrentUsingInfo // (Final|Native|Public) // @ game+0x39676a0
	void OnClearHeldInputs(); // Function ShooterGame.InteractableUserComponent.OnClearHeldInputs // (Final|Native|Public) // @ game+0x39671e0
	void NonLookingPickupActorDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.InteractableUserComponent.NonLookingPickupActorDestroyed // (Final|Native|Private) // @ game+0x3966f70
	void HandleActionBindingChanged(struct UActionBindSet* ActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.InteractableUserComponent.HandleActionBindingChanged // (Final|Native|Private) // @ game+0x3966900
	struct UUsableComponent* GetUsingComponent(); // Function ShooterGame.InteractableUserComponent.GetUsingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fe70
	float GetUseObjectTotalTime(); // Function ShooterGame.InteractableUserComponent.GetUseObjectTotalTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39668d0
	float GetUseObjectTime(); // Function ShooterGame.InteractableUserComponent.GetUseObjectTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39668a0
	enum class EUseFinishType GetUseFinishType(); // Function ShooterGame.InteractableUserComponent.GetUseFinishType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3966870
	struct UUserWidget* GetNonLookingPickupWidget(); // Function ShooterGame.InteractableUserComponent.GetNonLookingPickupWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x3966840
	struct FName GetFunctionalActionName(struct UUsableComponent* UsableComponent); // Function ShooterGame.InteractableUserComponent.GetFunctionalActionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3966700
	struct UUsableComponent* GetBestDefaultUIUsableComponent(); // Function ShooterGame.InteractableUserComponent.GetBestDefaultUIUsableComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39666d0
	struct UUsableComponent* GetBestAlternateUIUsableComponent(); // Function ShooterGame.InteractableUserComponent.GetBestAlternateUIUsableComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39666a0
	struct UUsableComponent* FindBestUsable(enum class EUseKeyType KeyTypes); // Function ShooterGame.InteractableUserComponent.FindBestUsable // (Final|Native|Protected) // @ game+0x3966610
	void DeactivateCurrentContinuousUsable(); // Function ShooterGame.InteractableUserComponent.DeactivateCurrentContinuousUsable // (Final|Native|Public|BlueprintCallable) // @ game+0x39665f0
	void ClearNonLookingPickupsOnOwnerDeath(struct AShooterCharacter* Owner, struct UDamageResponse* Response); // Function ShooterGame.InteractableUserComponent.ClearNonLookingPickupsOnOwnerDeath // (Final|Native|Public) // @ game+0x3966520
	bool CanUseComponent(struct UUsableComponent* TargetObject); // Function ShooterGame.InteractableUserComponent.CanUseComponent // (Final|Native|Public|Const) // @ game+0x3966480
	bool CanSelectComponent(struct UUsableComponent* TargetObject); // Function ShooterGame.InteractableUserComponent.CanSelectComponent // (Final|Native|Public|Const) // @ game+0x39663e0
	void BeginUsingComponent(struct UUsableComponent* UsableComponent); // Function ShooterGame.InteractableUserComponent.BeginUsingComponent // (Final|Native|Protected) // @ game+0x3966350
	void AuthUseComponent(struct UUsableComponent* ComponentToUse); // Function ShooterGame.InteractableUserComponent.AuthUseComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthUseButtonReleased(enum class EUseKeyType KeyType); // Function ShooterGame.InteractableUserComponent.AuthUseButtonReleased // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void AuthUseButtonPressed(enum class EUseKeyType KeyType); // Function ShooterGame.InteractableUserComponent.AuthUseButtonPressed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void AuthCancelUsingComponent(enum class EUsableCancelReason CancelReason); // Function ShooterGame.InteractableUserComponent.AuthCancelUsingComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void ActivateContinuousUsable(struct UUsableComponent* UsableComponent); // Function ShooterGame.InteractableUserComponent.ActivateContinuousUsable // (Final|Native|Public|BlueprintCallable) // @ game+0x39662c0
};

// Class ShooterGame.InventoryInitManager
// Size: 0x88 (Inherited: 0x80)
struct UInventoryInitManager : UInitSystem {
	struct UInventoryManager* InventoryManager; // 0x80(0x08)

	struct UInventoryInitManager* GetInventoryInitManager(struct UObject* WorldContextObject); // Function ShooterGame.InventoryInitManager.GetInventoryInitManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39730e0
};

// Class ShooterGame.InventoryManager
// Size: 0x830 (Inherited: 0x30)
struct UInventoryManager : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnContentEquippedChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxBalanceChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAnyJuiceContentsStatusChanged; // 0x68(0x10)
	struct TArray<struct UBaseInventoryModel*> LastGameUnlocks; // 0x78(0x10)
	struct UBaseInventoryModel* PreviousUnlock; // 0x88(0x08)
	struct UBaseInventoryModel* NextUnlock; // 0x90(0x08)
	int32_t PreviousUnlockLevel; // 0x98(0x04)
	int32_t NextUnlockLevel; // 0x9c(0x04)
	bool DidLevelOnLastGame; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct UContentIndex* ContentIndex; // 0xa8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xb0(0x08)
	struct UContentManager* ContentManager; // 0xb8(0x08)
	struct UConfigManager* ConfigManager; // 0xc0(0x08)
	struct UStoreManager* StoreManager; // 0xc8(0x08)
	struct UAccountXPManager* AccountXPManager; // 0xd0(0x08)
	struct UFavoritesManager* FavoritesManager; // 0xd8(0x08)
	struct TArray<struct UEquippableInventoryModel*> EquippableModels; // 0xe0(0x10)
	struct TMap<struct UEquippableDataAsset*, struct UEquippableInventoryModel*> DataAssetToEquippableMap; // 0xf0(0x50)
	struct TMap<struct UEquippableSkinDataAsset*, struct UEquippableSkinInventoryModel*> DataAssetToEquippableSkinMap; // 0x140(0x50)
	struct TMap<struct UEquippableSkinLevelDataAsset*, struct UEquippableSkinLevelInventoryModel*> DataAssetToEquippableSkinLevelMap; // 0x190(0x50)
	struct TMap<struct UEquippableAttachmentDataAsset*, struct UEquippableAttachmentInventoryModel*> DataAssetToEquippableAttachmentMap; // 0x1e0(0x50)
	struct TMap<struct UEquippableSkinChromaDataAsset*, struct UEquippableSkinChromaInventoryModel*> DataAssetToEquippableSkinChromaMap; // 0x230(0x50)
	struct TArray<struct USprayInventoryModel*> SprayModels; // 0x280(0x10)
	struct TMap<struct USprayDataAsset*, struct USprayInventoryModel*> DataAssetToSprayMap; // 0x290(0x50)
	struct TMap<struct USprayLevelDataAsset*, struct USprayLevelInventoryModel*> DataAssetToSprayLevelMap; // 0x2e0(0x50)
	struct TArray<struct UTotemInventoryModel*> TotemModels; // 0x330(0x10)
	struct TMap<struct USprayEquipSlotDataAsset*, struct USprayEquipSlotInventoryModel*> DataAssetToSprayEquipSlotMap; // 0x340(0x50)
	struct TMap<struct UExpressionEquipSlotDataAsset*, struct UExpressionEquipSlotInventoryModel*> DataAssetToExpressionEquipSlotMap; // 0x390(0x50)
	struct TMap<struct UTotemDataAsset*, struct UTotemInventoryModel*> DataAssetToTotemMap; // 0x3e0(0x50)
	struct TMap<struct UEquippableCharmDataAsset*, struct UEquippableCharmInventoryModel*> DataAssetToEquippableCharmMap; // 0x430(0x50)
	struct TMap<struct UEquippableCharmLevelDataAsset*, struct UEquippableCharmLevelInventoryModel*> DataAssetToEquippableCharmLevelMap; // 0x480(0x50)
	struct TMap<struct UPlayerCardDataAsset*, struct UPlayerCardInventoryModel*> DataAssetToPlayerCardMap; // 0x4d0(0x50)
	struct TMap<struct UPlayerTitleDataAsset*, struct UPlayerTitleInventoryModel*> DataAssetToPlayerTitleMap; // 0x520(0x50)
	struct TMap<struct UJuiceBoxDataAsset*, struct UJuiceBoxInventoryModel*> DataAssetToJuiceBoxMap; // 0x570(0x50)
	struct TMap<struct UCurrencyDataAsset*, struct UCurrencyInventoryModel*> DataAssetToCurrencyMap; // 0x5c0(0x50)
	struct TArray<struct UJuiceBoxInventoryModel*> JuiceBoxModels; // 0x610(0x10)
	struct TMap<struct ULevelBorderDataAsset*, struct ULevelBorderInventoryModel*> DataAssetToLevelBorderMap; // 0x620(0x50)
	struct TArray<struct UCharacterInventoryModel*> CharacterModels; // 0x670(0x10)
	struct TArray<struct UMapInventoryModel*> MapModels; // 0x680(0x10)
	struct TArray<struct UPremiumContractInventoryModel*> PremiumContractModels; // 0x690(0x10)
	struct TMap<struct UCharacterDataAsset*, struct UCharacterInventoryModel*> DataAssetToCharacterMap; // 0x6a0(0x50)
	struct TMap<struct UMapDataAsset*, struct UMapInventoryModel*> DataAssetToMapMap; // 0x6f0(0x50)
	struct TMap<struct UContractDataAssetV2*, struct UPremiumContractInventoryModel*> DataAssetToContractMap; // 0x740(0x50)
	struct TMap<struct FGuid, struct UEquippableCharmInstanceInventoryModel*> EquippableCharmInstanceMap; // 0x790(0x50)
	char pad_7E0[0x50]; // 0x7e0(0x50)

	void UpdateTotemOwnershipState(); // Function ShooterGame.InventoryManager.UpdateTotemOwnershipState // (Final|Native|Private) // @ game+0x39747f0
	void UpdateSubscriptionRewardsOwnershipState(); // Function ShooterGame.InventoryManager.UpdateSubscriptionRewardsOwnershipState // (Final|Native|Private) // @ game+0x39747d0
	void UpdateSprayOwnershipState(); // Function ShooterGame.InventoryManager.UpdateSprayOwnershipState // (Final|Native|Private) // @ game+0x39747b0
	void UpdateSprayLevelOwnershipState(); // Function ShooterGame.InventoryManager.UpdateSprayLevelOwnershipState // (Final|Native|Private) // @ game+0x39747b0
	void UpdatePremiumContractOwnershipState(); // Function ShooterGame.InventoryManager.UpdatePremiumContractOwnershipState // (Final|Native|Private) // @ game+0x3974790
	void UpdatePlayerTitleOwnershipState(); // Function ShooterGame.InventoryManager.UpdatePlayerTitleOwnershipState // (Final|Native|Private) // @ game+0x3974770
	void UpdatePlayerCardOwnershipState(); // Function ShooterGame.InventoryManager.UpdatePlayerCardOwnershipState // (Final|Native|Private) // @ game+0x3974750
	void UpdateLevelBorderOwnershipState(); // Function ShooterGame.InventoryManager.UpdateLevelBorderOwnershipState // (Final|Native|Private) // @ game+0x3974730
	void UpdateJuiceContentBalances(enum class EWalletType& TypeOfWallet); // Function ShooterGame.InventoryManager.UpdateJuiceContentBalances // (Final|Native|Private|HasOutParms) // @ game+0x39746a0
	void UpdateJuiceBoxInventoryModels(); // Function ShooterGame.InventoryManager.UpdateJuiceBoxInventoryModels // (Final|Native|Private) // @ game+0x3974680
	void UpdateFullyUnlockedContentTypes(); // Function ShooterGame.InventoryManager.UpdateFullyUnlockedContentTypes // (Final|Native|Private) // @ game+0x3974640
	void UpdateFavoritesState(struct TMap<struct FGuid, enum class EFavoritesActionType>& ModifiedFavorites); // Function ShooterGame.InventoryManager.UpdateFavoritesState // (Final|Native|Private|HasOutParms) // @ game+0x3974500
	void UpdateEquippableSkinOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableSkinOwnershipState // (Final|Native|Private) // @ game+0x39744e0
	void UpdateEquippableSkinLevelOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableSkinLevelOwnershipState // (Final|Native|Private) // @ game+0x39744e0
	void UpdateEquippableSkinChromasOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableSkinChromasOwnershipState // (Final|Native|Private) // @ game+0x39744c0
	void UpdateEquippableCharmsOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableCharmsOwnershipState // (Final|Native|Private) // @ game+0x39744a0
	void UpdateEquippableCharmLevelsOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableCharmLevelsOwnershipState // (Final|Native|Private) // @ game+0x3974480
	void UpdateEquippableAttachmentOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableAttachmentOwnershipState // (Final|Native|Private) // @ game+0x3974460
	void UpdateCurrencyInventoryModels(); // Function ShooterGame.InventoryManager.UpdateCurrencyInventoryModels // (Final|Native|Private) // @ game+0x3974440
	void UpdateContentForSubscriptionState(); // Function ShooterGame.InventoryManager.UpdateContentForSubscriptionState // (Final|Native|Private) // @ game+0x3974420
	void UpdateContentEquippedState(); // Function ShooterGame.InventoryManager.UpdateContentEquippedState // (Final|Native|Private) // @ game+0x3974400
	void UpdateContentEnablement(); // Function ShooterGame.InventoryManager.UpdateContentEnablement // (Final|Native|Private) // @ game+0x39743e0
	void UpdateCharacterOwnershipState(); // Function ShooterGame.InventoryManager.UpdateCharacterOwnershipState // (Final|Native|Private) // @ game+0x39743c0
	void OnEquippableCharmLevelsOwnershipChanged(); // Function ShooterGame.InventoryManager.OnEquippableCharmLevelsOwnershipChanged // (Final|Native|Private) // @ game+0x39741f0
	void HandleUIDataLoadRequested(struct UBaseInventoryModel* InventoryModel, struct FDelegate Callback); // Function ShooterGame.InventoryManager.HandleUIDataLoadRequested // (Final|Native|Private) // @ game+0x3974050
	struct UTotemInventoryModel* GetTotemModel(struct UTotemDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetTotemModel // (Final|Native|Public) // @ game+0x3973e60
	struct USprayInventoryModel* GetSprayModel(struct USprayDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetSprayModel // (Final|Native|Public) // @ game+0x3973c90
	struct USprayLevelInventoryModel* GetSprayLevelModel(struct USprayLevelDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetSprayLevelModel // (Final|Native|Public) // @ game+0x3973b50
	struct USprayEquipSlotInventoryModel* GetSprayEquipSlotModel(struct USprayEquipSlotDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetSprayEquipSlotModel // (Final|Native|Public) // @ game+0x39739e0
	struct UPlayerTitleInventoryModel* GetPlayerTitleModel(struct UPlayerTitleDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetPlayerTitleModel // (Final|Native|Public) // @ game+0x3973940
	struct UPlayerCardInventoryModel* GetPlayerCardModel(struct UPlayerCardDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetPlayerCardModel // (Final|Native|Public) // @ game+0x39738a0
	struct ULevelBorderInventoryModel* GetLevelBorderModel(struct ULevelBorderDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetLevelBorderModel // (Final|Native|Public) // @ game+0x39736a0
	struct UJuiceBoxInventoryModel* GetJuiceBoxModel(struct UJuiceBoxDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetJuiceBoxModel // (Final|Native|Public) // @ game+0x3973600
	struct UBaseInventoryModel* GetInventoryModelFromItemID(struct FString ItemId); // Function ShooterGame.InventoryManager.GetInventoryModelFromItemID // (Final|Native|Public) // @ game+0x39733c0
	struct UBaseInventoryModel* GetInventoryModelFromIDs(struct FString ItemId, struct FString ItemTypeID); // Function ShooterGame.InventoryManager.GetInventoryModelFromIDs // (Final|Native|Public) // @ game+0x39732a0
	struct UBaseInventoryModel* GetInventoryModelForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetInventoryModelForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973200
	struct UInventoryManager* GetInventoryManager(struct UObject* WorldContextObject); // Function ShooterGame.InventoryManager.GetInventoryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3973170
	struct UExpressionEquipSlotInventoryModel* GetExpressionEquipSlotModel(struct UExpressionEquipSlotDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetExpressionEquipSlotModel // (Final|Native|Public) // @ game+0x3973010
	struct UPlayerTitleInventoryModel* GetEquippedPlayerTitleModel(); // Function ShooterGame.InventoryManager.GetEquippedPlayerTitleModel // (Final|Native|Public|Const) // @ game+0x3972fe0
	struct UPlayerCardInventoryModel* GetEquippedPlayerCardModel(); // Function ShooterGame.InventoryManager.GetEquippedPlayerCardModel // (Final|Native|Public|Const) // @ game+0x3972fb0
	struct ULevelBorderInventoryModel* GetEquippedLevelBorderModel(); // Function ShooterGame.InventoryManager.GetEquippedLevelBorderModel // (Final|Native|Public|Const) // @ game+0x3972f80
	struct UEquippableSkinInventoryModel* GetEquippableSkinModel(struct UEquippableSkinDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableSkinModel // (Final|Native|Public) // @ game+0x3972cf0
	struct UEquippableSkinLevelInventoryModel* GetEquippableSkinLevelModel(struct UEquippableSkinLevelDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableSkinLevelModel // (Final|Native|Public) // @ game+0x3972bb0
	struct UEquippableSkinChromaInventoryModel* GetEquippableSkinChromaModel(struct UEquippableSkinChromaDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableSkinChromaModel // (Final|Native|Public) // @ game+0x3972a70
	struct UEquippableInventoryModel* GetEquippableModel(struct UEquippableDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableModel // (Final|Native|Public) // @ game+0x39729d0
	struct UEquippableCharmInventoryModel* GetEquippableCharmModel(struct UEquippableCharmDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableCharmModel // (Final|Native|Public) // @ game+0x3972890
	struct UEquippableCharmLevelInventoryModel* GetEquippableCharmLevelModel(struct UEquippableCharmLevelDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableCharmLevelModel // (Final|Native|Public) // @ game+0x3972750
	struct TArray<struct UEquippableCharmInstanceInventoryModel*> GetEquippableCharmInstances(struct UEquippableCharmDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableCharmInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3972670
	struct UEquippableCharmInstanceInventoryModel* GetEquippableCharmInstance(struct FGuid& CharmInstanceID); // Function ShooterGame.InventoryManager.GetEquippableCharmInstance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x39725c0
	struct UEquippableAttachmentInventoryModel* GetEquippableAttachmentModel(struct UEquippableAttachmentDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableAttachmentModel // (Final|Native|Public) // @ game+0x3972480
	struct FString GetDisabledAndEquippedContentWarningMessage(); // Function ShooterGame.InventoryManager.GetDisabledAndEquippedContentWarningMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3972430
	struct UCurrencyInventoryModel* GetCurrencyModelByCurrencyID(struct FGuid CurrencyID); // Function ShooterGame.InventoryManager.GetCurrencyModelByCurrencyID // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3972380
	struct UCurrencyInventoryModel* GetCurrencyModel(struct UCurrencyDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetCurrencyModel // (Final|Native|Public|BlueprintCallable) // @ game+0x39722e0
	struct TArray<struct UCharacterInventoryModel*> GetCharacterModels(); // Function ShooterGame.InventoryManager.GetCharacterModels // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39721b0
	struct UCharacterInventoryModel* GetCharacterModel(struct UCharacterDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetCharacterModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3972110
	struct TArray<struct UTotemInventoryModel*> GetAllTotemModels(); // Function ShooterGame.InventoryManager.GetAllTotemModels // (Final|Native|Public|Const) // @ game+0x3972090
	struct TArray<struct USprayInventoryModel*> GetAllSprayModels(); // Function ShooterGame.InventoryManager.GetAllSprayModels // (Final|Native|Public|Const) // @ game+0x3972010
	struct TArray<struct USprayEquipSlotInventoryModel*> GetAllSprayEquipSlotModels(); // Function ShooterGame.InventoryManager.GetAllSprayEquipSlotModels // (Final|Native|Public|Const) // @ game+0x3971f90
	struct TArray<struct UPlayerTitleInventoryModel*> GetAllPlayerTitleModels(); // Function ShooterGame.InventoryManager.GetAllPlayerTitleModels // (Final|Native|Public|Const) // @ game+0x3971f10
	struct TArray<struct UPlayerCardInventoryModel*> GetAllPlayerCardModels(); // Function ShooterGame.InventoryManager.GetAllPlayerCardModels // (Final|Native|Public|Const) // @ game+0x3971e90
	struct TArray<struct ULevelBorderInventoryModel*> GetAllLevelBorderModels(); // Function ShooterGame.InventoryManager.GetAllLevelBorderModels // (Final|Native|Public|Const) // @ game+0x3971e10
	struct TArray<struct UJuiceBoxInventoryModel*> GetAllJuiceBoxModels(); // Function ShooterGame.InventoryManager.GetAllJuiceBoxModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3971d90
	struct TArray<struct UExpressionEquipSlotInventoryModel*> GetAllExpressionEquipSlotModels(); // Function ShooterGame.InventoryManager.GetAllExpressionEquipSlotModels // (Final|Native|Public|Const) // @ game+0x3971d10
	struct TArray<struct UEquippableCharmInstanceInventoryModel*> GetAllEquippableCharmInstances(); // Function ShooterGame.InventoryManager.GetAllEquippableCharmInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3971c90
	struct TArray<struct UCurrencyInventoryModel*> GetAllCurrencyModels(); // Function ShooterGame.InventoryManager.GetAllCurrencyModels // (Final|Native|Public|Const) // @ game+0x3971c10
	void BuildTotemCatalog(); // Function ShooterGame.InventoryManager.BuildTotemCatalog // (Final|Native|Private) // @ game+0x3971bf0
	void BuildSprayEquipSlotCatalog(); // Function ShooterGame.InventoryManager.BuildSprayEquipSlotCatalog // (Final|Native|Private) // @ game+0x3971bd0
	void BuildSprayCatalog(); // Function ShooterGame.InventoryManager.BuildSprayCatalog // (Final|Native|Private) // @ game+0x3971bb0
	void BuildPremiumContractCatalog(); // Function ShooterGame.InventoryManager.BuildPremiumContractCatalog // (Final|Native|Private) // @ game+0x3971b90
	void BuildPlayerTitleCatalog(); // Function ShooterGame.InventoryManager.BuildPlayerTitleCatalog // (Final|Native|Private) // @ game+0x3971b70
	void BuildPlayerCardCatalog(); // Function ShooterGame.InventoryManager.BuildPlayerCardCatalog // (Final|Native|Private) // @ game+0x3971b50
	void BuildMapCatalog(); // Function ShooterGame.InventoryManager.BuildMapCatalog // (Final|Native|Private) // @ game+0x3971b30
	void BuildLevelBorderCatalog(); // Function ShooterGame.InventoryManager.BuildLevelBorderCatalog // (Final|Native|Private) // @ game+0x3971b10
	void BuildJuiceBoxCatalog(); // Function ShooterGame.InventoryManager.BuildJuiceBoxCatalog // (Final|Native|Private) // @ game+0x3971af0
	void BuildInventoryModelForBundleViewModel(struct UBundleViewModel* BundleViewModel); // Function ShooterGame.InventoryManager.BuildInventoryModelForBundleViewModel // (Final|Native|Public) // @ game+0x3971a60
	void BuildInitialCatalog(); // Function ShooterGame.InventoryManager.BuildInitialCatalog // (Final|Native|Private) // @ game+0x3971a40
	void BuildExpressionEquipSlotCatalog(); // Function ShooterGame.InventoryManager.BuildExpressionEquipSlotCatalog // (Final|Native|Private) // @ game+0x3971a20
	void BuildEquippableCatalog(); // Function ShooterGame.InventoryManager.BuildEquippableCatalog // (Final|Native|Private) // @ game+0x3971a00
	void BuildCurrencyCatalog(); // Function ShooterGame.InventoryManager.BuildCurrencyCatalog // (Final|Native|Private) // @ game+0x39719e0
	void BuildCharmCatalog(); // Function ShooterGame.InventoryManager.BuildCharmCatalog // (Final|Native|Private) // @ game+0x39719c0
	void BuildCharacterCatalog(); // Function ShooterGame.InventoryManager.BuildCharacterCatalog // (Final|Native|Private) // @ game+0x39719a0
};

// Class ShooterGame.SubscriptionOwnershipModel
// Size: 0x40 (Inherited: 0x30)
struct USubscriptionOwnershipModel : UObject {
	struct TArray<struct USubscriptionDataAsset*> OrderedSubscriptions; // 0x30(0x10)

	bool IsUnlockedBySubscription(); // Function ShooterGame.SubscriptionOwnershipModel.IsUnlockedBySubscription // (Final|Native|Public|BlueprintCallable) // @ game+0x39741d0
	struct USubscriptionDataAsset* GetHighestOwnedSubscriptionDataAsset(); // Function ShooterGame.SubscriptionOwnershipModel.GetHighestOwnedSubscriptionDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39730b0
};

// Class ShooterGame.BaseInventoryModel
// Size: 0x108 (Inherited: 0x30)
struct UBaseInventoryModel : UObject {
	struct FMulticastInlineDelegate OnIsEnabledChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnLoadingUIDataChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnIsOwnedChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnIsEquippedChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnBalanceChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnIsFavoritedChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsUnlockedChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnIsLoyaltyContentChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnIsOwnedOnlyByLoyaltyChanged; // 0xb0(0x10)
	char pad_C0[0x18]; // 0xc0(0x18)
	struct TWeakObjectPtr<struct UBaseContentUIData> BaseUIDataPtr; // 0xd8(0x08)
	struct FMulticastInlineDelegate OnSubscriptionsChanged; // 0xe0(0x10)
	bool bIsEnabled; // 0xf0(0x01)
	bool bLoadingUIData; // 0xf1(0x01)
	bool bIsOwned; // 0xf2(0x01)
	bool bIsFavorited; // 0xf3(0x01)
	bool bIsEquipped; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	int32_t iBalance; // 0xf8(0x04)
	bool bIsLoyaltyContent; // 0xfc(0x01)
	bool bIsCAPF2PContent; // 0xfd(0x01)
	bool bIsUnlockedByConfig; // 0xfe(0x01)
	char pad_FF[0x1]; // 0xff(0x01)
	struct USubscriptionOwnershipModel* SubscriptionStatus; // 0x100(0x08)

	void GetUIData(struct FDelegate Callback); // Function ShooterGame.BaseInventoryModel.GetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x3973fa0
	struct USubscriptionOwnershipModel* GetSubscriptionModel(); // Function ShooterGame.BaseInventoryModel.GetSubscriptionModel // (Final|Native|Public|BlueprintCallable) // @ game+0x38f8f50
	bool GetLoadingUIData(); // Function ShooterGame.BaseInventoryModel.GetLoadingUIData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973740
	bool GetIsUnlockedOnlyBySubscription(); // Function ShooterGame.BaseInventoryModel.GetIsUnlockedOnlyBySubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39735d0
	bool GetIsUnlockedBySubscription(); // Function ShooterGame.BaseInventoryModel.GetIsUnlockedBySubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39735a0
	bool GetIsUnlocked(); // Function ShooterGame.BaseInventoryModel.GetIsUnlocked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x382d4e0
	bool GetIsOwnedOnlyByLoyalty(); // Function ShooterGame.BaseInventoryModel.GetIsOwnedOnlyByLoyalty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973570
	bool GetIsOwned(); // Function ShooterGame.BaseInventoryModel.GetIsOwned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973540
	bool GetIsLoyaltyContent(); // Function ShooterGame.BaseInventoryModel.GetIsLoyaltyContent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973510
	bool GetIsFavorited(); // Function ShooterGame.BaseInventoryModel.GetIsFavorited // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288ac10
	bool GetIsEquipped(); // Function ShooterGame.BaseInventoryModel.GetIsEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39734e0
	bool GetIsEnabled(); // Function ShooterGame.BaseInventoryModel.GetIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39734b0
	bool GetIsCAPF2PContent(); // Function ShooterGame.BaseInventoryModel.GetIsCAPF2PContent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973480
	bool GetIsBaseContent(); // Function ShooterGame.BaseInventoryModel.GetIsBaseContent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x381f240
	int32_t GetBalance(); // Function ShooterGame.BaseInventoryModel.GetBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e5fa0
};

// Class ShooterGame.EquippableInventoryModel
// Size: 0x190 (Inherited: 0x108)
struct UEquippableInventoryModel : UBaseInventoryModel {
	struct UEquippableDataAsset* EquippableDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedSkinChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnEquippedAttachmentAdded; // 0x120(0x10)
	struct FMulticastInlineDelegate OnEquippedAttachmentRemoved; // 0x130(0x10)
	struct FMulticastInlineDelegate OnEquippedCharmChanged; // 0x140(0x10)
	struct TArray<struct UEquippableSkinInventoryModel*> PossibleSkins; // 0x150(0x10)
	struct TArray<struct UEquippableAttachmentInventoryModel*> PossibleAttachments; // 0x160(0x10)
	struct UEquippableSkinInventoryModel* EquippedSkin; // 0x170(0x08)
	struct UEquippableCharmInstanceInventoryModel* EquippedCharmInstance; // 0x178(0x08)
	struct TArray<struct UEquippableAttachmentInventoryModel*> EquippedAttachments; // 0x180(0x10)

	struct UEquippableSkinInventoryModel* GetEquippedSkin(); // Function ShooterGame.EquippableInventoryModel.GetEquippedSkin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3804a90
	struct UEquippableCharmInstanceInventoryModel* GetEquippedCharmInstance(); // Function ShooterGame.EquippableInventoryModel.GetEquippedCharmInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3804b70
	struct TArray<struct UEquippableAttachmentInventoryModel*> GetEquippedAttachments(); // Function ShooterGame.EquippableInventoryModel.GetEquippedAttachments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3972ed0
	struct UEquippableUIData* GetEquippableUIData(bool& IsValid); // Function ShooterGame.EquippableInventoryModel.GetEquippableUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3972e30
};

// Class ShooterGame.CharacterInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UCharacterInventoryModel : UBaseInventoryModel {
	struct UCharacterDataAsset* CharacterDataAsset; // 0x108(0x08)

	struct UCharacterUIData* GetCharacterUIData(bool& IsValid); // Function ShooterGame.CharacterInventoryModel.GetCharacterUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3972240
};

// Class ShooterGame.MapInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UMapInventoryModel : UBaseInventoryModel {
	struct UMapDataAsset* MapDataAsset; // 0x108(0x08)

	struct UMapUIData* GetMapUIData(bool& IsValid); // Function ShooterGame.MapInventoryModel.GetMapUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3973770
};

// Class ShooterGame.EquippableSkinLevelInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UEquippableSkinLevelInventoryModel : UBaseInventoryModel {
	struct UEquippableSkinLevelDataAsset* EquippableSkinLevelDataAsset; // 0x108(0x08)
	struct UEquippableSkinInventoryModel* ParentSkin; // 0x110(0x08)

	struct UEquippableSkinLevelUIData* GetEquippableSkinLevelUIData(bool& IsValid); // Function ShooterGame.EquippableSkinLevelInventoryModel.GetEquippableSkinLevelUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3972c50
};

// Class ShooterGame.EquippableSkinInventoryModel
// Size: 0x168 (Inherited: 0x108)
struct UEquippableSkinInventoryModel : UBaseInventoryModel {
	struct UEquippableSkinDataAsset* EquippableSkinDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedChromaChanged; // 0x110(0x10)
	struct UEquippableInventoryModel* ParentEquippable; // 0x120(0x08)
	struct TArray<struct UEquippableSkinChromaInventoryModel*> PossibleChromas; // 0x128(0x10)
	struct TArray<struct UEquippableSkinLevelInventoryModel*> PossibleLevels; // 0x138(0x10)
	struct FMulticastInlineDelegate OnOwnedUpgradesChanged; // 0x148(0x10)
	struct UEquippableSkinChromaInventoryModel* EquippedChroma; // 0x158(0x08)
	bool bIsFavoritedByChroma; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)

	void UpdateIsFavorited(); // Function ShooterGame.EquippableSkinInventoryModel.UpdateIsFavorited // (Final|Native|Public|BlueprintCallable) // @ game+0x3974660
	void SetIsFavoritedByChroma(bool Value); // Function ShooterGame.EquippableSkinInventoryModel.SetIsFavoritedByChroma // (Final|Native|Private|BlueprintCallable) // @ game+0x3974330
	bool IsOwnedAndHasNoShards(); // Function ShooterGame.EquippableSkinInventoryModel.IsOwnedAndHasNoShards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39741a0
	bool IsFullyUpgraded(); // Function ShooterGame.EquippableSkinInventoryModel.IsFullyUpgraded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3974170
	int32_t GetTotalUpgrades(); // Function ShooterGame.EquippableSkinInventoryModel.GetTotalUpgrades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973e30
	int32_t GetTotalLevels(); // Function ShooterGame.EquippableSkinInventoryModel.GetTotalLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973e00
	int32_t GetTotalChromas(); // Function ShooterGame.EquippableSkinInventoryModel.GetTotalChromas // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973dd0
	int32_t GetOwnedUpgrades(); // Function ShooterGame.EquippableSkinInventoryModel.GetOwnedUpgrades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973870
	int32_t GetOwnedLevels(); // Function ShooterGame.EquippableSkinInventoryModel.GetOwnedLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973840
	int32_t GetOwnedChromasIncludingDefault(); // Function ShooterGame.EquippableSkinInventoryModel.GetOwnedChromasIncludingDefault // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973810
	struct UEquippableSkinChromaInventoryModel* GetEquippedChroma(); // Function ShooterGame.EquippableSkinInventoryModel.GetEquippedChroma // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e270
	struct UEquippableSkinUIData* GetEquippableSkinUIData(bool& IsValid); // Function ShooterGame.EquippableSkinInventoryModel.GetEquippableSkinUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3972d90
};

// Class ShooterGame.EquippableAttachmentInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UEquippableAttachmentInventoryModel : UBaseInventoryModel {
	struct UEquippableAttachmentDataAsset* EquippableAttachmentDataAsset; // 0x108(0x08)
	struct UEquippableInventoryModel* ParentEquippable; // 0x110(0x08)

	struct UEquippableAttachmentUIData* GetEquippableAttachmentUIData(bool& IsValid); // Function ShooterGame.EquippableAttachmentInventoryModel.GetEquippableAttachmentUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3972520
};

// Class ShooterGame.EquippableSkinChromaInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UEquippableSkinChromaInventoryModel : UBaseInventoryModel {
	struct UEquippableSkinChromaDataAsset* EquippableSkinChromaDataAsset; // 0x108(0x08)
	struct UEquippableSkinInventoryModel* ParentSkin; // 0x110(0x08)

	bool IsDefaultChroma(); // Function ShooterGame.EquippableSkinChromaInventoryModel.IsDefaultChroma // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3974140
	struct UEquippableSkinChromaUIData* GetEquippableSkinChromaUIData(bool& IsValid); // Function ShooterGame.EquippableSkinChromaInventoryModel.GetEquippableSkinChromaUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3972b10
};

// Class ShooterGame.SprayEquipSlotInventoryModel
// Size: 0x128 (Inherited: 0x108)
struct USprayEquipSlotInventoryModel : UBaseInventoryModel {
	struct USprayEquipSlotDataAsset* SprayEquipSlotDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedSprayChanged; // 0x110(0x10)
	struct USprayInventoryModel* EquippedSpray; // 0x120(0x08)

	struct USprayEquipSlotUIData* GetSprayEquipSlotUIData(bool& IsValid); // Function ShooterGame.SprayEquipSlotInventoryModel.GetSprayEquipSlotUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3973a80
	struct USprayInventoryModel* GetEquippedSpray(); // Function ShooterGame.SprayEquipSlotInventoryModel.GetEquippedSpray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3972f50
};

// Class ShooterGame.SprayLevelInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct USprayLevelInventoryModel : UBaseInventoryModel {
	struct USprayLevelDataAsset* SprayLevelDataAsset; // 0x108(0x08)
	struct USprayInventoryModel* ParentSpray; // 0x110(0x08)

	struct USprayLevelUIData* GetSprayLevelUIData(bool& IsValid); // Function ShooterGame.SprayLevelInventoryModel.GetSprayLevelUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3973bf0
};

// Class ShooterGame.SprayInventoryModel
// Size: 0x138 (Inherited: 0x108)
struct USprayInventoryModel : UBaseInventoryModel {
	struct USprayDataAsset* SprayDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnSprayLevelChanged; // 0x110(0x10)
	struct TArray<struct USprayLevelInventoryModel*> PossibleLevels; // 0x120(0x10)
	struct USprayLevelInventoryModel* SprayLevel; // 0x130(0x08)

	struct USprayUIData* GetSprayUIData(bool& IsValid); // Function ShooterGame.SprayInventoryModel.GetSprayUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3973d30
	struct USprayLevelInventoryModel* GetSprayLevel(); // Function ShooterGame.SprayInventoryModel.GetSprayLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973b20
};

// Class ShooterGame.TotemInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UTotemInventoryModel : UBaseInventoryModel {
	struct UTotemDataAsset* TotemDataAsset; // 0x108(0x08)

	struct UTotemUIData* GetTotemUIData(bool& IsValid); // Function ShooterGame.TotemInventoryModel.GetTotemUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3973f00
};

// Class ShooterGame.ExpressionEquipSlotInventoryModel
// Size: 0x130 (Inherited: 0x108)
struct UExpressionEquipSlotInventoryModel : UBaseInventoryModel {
	struct UExpressionEquipSlotDataAsset* ExpressionEquipSlotDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedExpressionItemChanged; // 0x110(0x10)
	struct UBaseInventoryModel* EquippedExpressionItem; // 0x120(0x08)
	enum class EAresContentType EquippedExpressionItemContentType; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)

	enum class EAresContentType GetEquippedExpressionItemContentType(); // Function ShooterGame.ExpressionEquipSlotInventoryModel.GetEquippedExpressionItemContentType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890e10
	struct UBaseInventoryModel* GetEquippedExpressionItem(); // Function ShooterGame.ExpressionEquipSlotInventoryModel.GetEquippedExpressionItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3972f50
};

// Class ShooterGame.EquippableCharmInventoryModel
// Size: 0x120 (Inherited: 0x108)
struct UEquippableCharmInventoryModel : UBaseInventoryModel {
	struct UEquippableCharmDataAsset* EquippableCharmDataAsset; // 0x108(0x08)
	struct TArray<struct UEquippableCharmLevelInventoryModel*> LevelInventoryModels; // 0x110(0x10)

	struct UEquippableCharmUIData* GetEquippableCharmUIData(bool& IsValid); // Function ShooterGame.EquippableCharmInventoryModel.GetEquippableCharmUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3972930
};

// Class ShooterGame.EquippableCharmLevelInventoryModel
// Size: 0x120 (Inherited: 0x108)
struct UEquippableCharmLevelInventoryModel : UBaseInventoryModel {
	struct UEquippableCharmLevelDataAsset* EquippableCharmLevelDataAsset; // 0x108(0x08)
	struct UEquippableCharmDataAsset* BaseCharmDataAsset; // 0x110(0x08)
	struct UEquippableCharmInventoryModel* BaseCharmInventoryModel; // 0x118(0x08)

	struct UEquippableCharmLevelUIData* GetEquippableCharmLevelUIData(bool& IsValid); // Function ShooterGame.EquippableCharmLevelInventoryModel.GetEquippableCharmLevelUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39727f0
};

// Class ShooterGame.EquippableCharmInstanceInventoryModel
// Size: 0x78 (Inherited: 0x30)
struct UEquippableCharmInstanceInventoryModel : UObject {
	struct FMulticastInlineDelegate OnLevelChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnAssignedEquippableChanged; // 0x40(0x10)
	struct FGuid InstanceId; // 0x50(0x10)
	struct UEquippableDataAsset* AssignedEquippable; // 0x60(0x08)
	struct UEquippableCharmDataAsset* EquippableCharmDataAsset; // 0x68(0x08)
	struct UEquippableCharmLevelDataAsset* EquippableCharmLevelDataAsset; // 0x70(0x08)

	void SetCharmLevel(struct UEquippableCharmLevelDataAsset* CharmLevelDataAsset); // Function ShooterGame.EquippableCharmInstanceInventoryModel.SetCharmLevel // (Final|Native|Public) // @ game+0x39742a0
	void SetAssignedEquippable(struct UEquippableDataAsset* Equippable); // Function ShooterGame.EquippableCharmInstanceInventoryModel.SetAssignedEquippable // (Final|Native|Public) // @ game+0x3974210
};

// Class ShooterGame.PremiumContractInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UPremiumContractInventoryModel : UBaseInventoryModel {
	struct FGuid ID; // 0x108(0x10)
};

// Class ShooterGame.InventoryOfferModel
// Size: 0x68 (Inherited: 0x30)
struct UInventoryOfferModel : UObject {
	int32_t Price; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct UBaseInventoryModel*> EntitlementGrants; // 0x38(0x10)
	struct TArray<struct UBaseInventoryModel*> BonusEntitlementGrants; // 0x48(0x10)
	struct FString OfferId; // 0x58(0x10)
};

// Class ShooterGame.PlayerCardInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UPlayerCardInventoryModel : UBaseInventoryModel {
	struct UPlayerCardDataAsset* PlayerCardDataAsset; // 0x108(0x08)
};

// Class ShooterGame.LevelBorderInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct ULevelBorderInventoryModel : UBaseInventoryModel {
	struct ULevelBorderDataAsset* LevelBorderDataAsset; // 0x108(0x08)
};

// Class ShooterGame.PlayerTitleInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UPlayerTitleInventoryModel : UBaseInventoryModel {
	struct UPlayerTitleDataAsset* PlayerTitleDataAsset; // 0x108(0x08)
};

// Class ShooterGame.JuiceBoxInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UJuiceBoxInventoryModel : UBaseInventoryModel {
	struct UJuiceBoxDataAsset* DataAsset; // 0x108(0x08)
};

// Class ShooterGame.CurrencyInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UCurrencyInventoryModel : UBaseInventoryModel {
	struct UCurrencyDataAsset* DataAsset; // 0x108(0x08)
};

// Class ShooterGame.PreloadableAsset
// Size: 0x30 (Inherited: 0x30)
struct UPreloadableAsset : UInterface {

	bool ArePreloadableSoftRefsLoaded(int32_t AssetTypes); // Function ShooterGame.PreloadableAsset.ArePreloadableSoftRefsLoaded // (Native|Public|BlueprintCallable) // @ game+0x397e820
};

// Class ShooterGame.RiotLogin
// Size: 0x30 (Inherited: 0x30)
struct URiotLogin : UInterface {
};

// Class ShooterGame.ItemGrantResult
// Size: 0x40 (Inherited: 0x38)
struct UItemGrantResult : UGrantResult {
	struct AAresItem* GrantedItem; // 0x38(0x08)
};

// Class ShooterGame.ItemSlot
// Size: 0x48 (Inherited: 0x30)
struct UItemSlot : UObject {
	enum class EAresItemSlot SlotType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct AAresItem* Contents; // 0x38(0x08)
	struct UAresInventory* Inventory; // 0x40(0x08)

	bool TryGetIndexForItem(struct AAresItem* Item, char& OutIndex); // Function ShooterGame.ItemSlot.TryGetIndexForItem // (Native|Public|HasOutParms|Const) // @ game+0x39801a0
	bool RemoveItem(struct AAresItem* Item); // Function ShooterGame.ItemSlot.RemoveItem // (Native|Public) // @ game+0x397fbc0
	void OnRep_Contents(); // Function ShooterGame.ItemSlot.OnRep_Contents // (Final|Native|Public) // @ game+0x397fb80
	bool IsFull(); // Function ShooterGame.ItemSlot.IsFull // (Native|Public|Const) // @ game+0x36a0730
	struct AAresItem* GetLastItem(); // Function ShooterGame.ItemSlot.GetLastItem // (Native|Public|Const) // @ game+0x397f570
	int32_t GetItemQuantityByClass(struct AAresItem* ItemClass); // Function ShooterGame.ItemSlot.GetItemQuantityByClass // (Native|Public|Const) // @ game+0x397ef00
	int32_t GetItemCount(); // Function ShooterGame.ItemSlot.GetItemCount // (Native|Public|Const) // @ game+0x397eec0
	struct AAresItem* GetItemByIndex(int32_t Index); // Function ShooterGame.ItemSlot.GetItemByIndex // (Native|Public|Const) // @ game+0x397ee20
	int32_t GetCapacity(); // Function ShooterGame.ItemSlot.GetCapacity // (Native|Public|Const) // @ game+0x397edc0
	struct AAresItem* FindPreviousItem(struct AAresItem* StartingItem); // Function ShooterGame.ItemSlot.FindPreviousItem // (Native|Public|Const) // @ game+0x397ed10
	struct AAresItem* FindNextItem(struct AAresItem* StartingItem); // Function ShooterGame.ItemSlot.FindNextItem // (Native|Public|Const) // @ game+0x397ec60
	struct AAresItem* FindItemByClass(struct AAresItem* ItemClass); // Function ShooterGame.ItemSlot.FindItemByClass // (Native|Public|Const) // @ game+0x397ebb0
	struct TArray<struct AAresItem*> FindIncompatibleItems(struct TArray<enum class EAresItemSlot>& CompatibleSlotTypes); // Function ShooterGame.ItemSlot.FindIncompatibleItems // (Native|Public|HasOutParms|Const) // @ game+0x397eaa0
	bool ContainsItem(struct AAresItem* Item); // Function ShooterGame.ItemSlot.ContainsItem // (Native|Public|Const) // @ game+0x397e9f0
	bool AddItem(struct AAresItem* Item); // Function ShooterGame.ItemSlot.AddItem // (Native|Public) // @ game+0x397e5b0
};

// Class ShooterGame.JanusControlsWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UJanusControlsWidget : UUserWidget {
};

// Class ShooterGame.ObserverPawn
// Size: 0x488 (Inherited: 0x460)
struct AObserverPawn : ASpectatorPawn {
	struct UCalloutRegionTrackingComponent* CalloutRegionTrackingComponent; // 0x460(0x08)
	struct UGamepadTuningDataAsset* GamepadTuningData; // 0x468(0x08)
	float WalkSpeedMultiplier; // 0x470(0x04)
	float RunSpeedMultiplier; // 0x474(0x04)
	char pad_478[0x10]; // 0x478(0x10)

	void OnObserverWalkSpeedChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.ObserverPawn.OnObserverWalkSpeedChanged // (Final|Native|Public) // @ game+0x39f0910
	void OnObserverRunSpeedChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.ObserverPawn.OnObserverRunSpeedChanged // (Final|Native|Public) // @ game+0x39f0800
	void OnMouseSensitivityChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.ObserverPawn.OnMouseSensitivityChanged // (Final|Native|Public) // @ game+0x39f06f0
};

// Class ShooterGame.JanusPawn
// Size: 0x488 (Inherited: 0x488)
struct AJanusPawn : AObserverPawn {
};

// Class ShooterGame.JanusPlaybackExistCheckCallbackProxy
// Size: 0x78 (Inherited: 0x38)
struct UJanusPlaybackExistCheckCallbackProxy : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate OnPlaybackFound; // 0x38(0x10)
	char pad_48[0x30]; // 0x48(0x30)

	struct UJanusPlaybackExistCheckCallbackProxy* CheckPlaybackExist(struct UObject* WorldContextObject, struct FString MatchID); // Function ShooterGame.JanusPlaybackExistCheckCallbackProxy.CheckPlaybackExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x397e8c0
};

// Class ShooterGame.JuiceBoxUIData
// Size: 0xb8 (Inherited: 0x90)
struct UJuiceBoxUIData : UBaseContentUIData {
	bool UseModelViewerOverrides; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FVector CameraPosition; // 0x94(0x0c)
	float DefaultFOV; // 0xa0(0x04)
	float MaxFOV; // 0xa4(0x04)
	float MinFOV; // 0xa8(0x04)
	struct FVector PivotPoint; // 0xac(0x0c)
};

// Class ShooterGame.JuiceBoxDataAsset
// Size: 0xb8 (Inherited: 0x50)
struct UJuiceBoxDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Currency; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
	struct AEffectContainer* Effect; // 0xb0(0x08)
};

// Class ShooterGame.JuiceBoxShopWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UJuiceBoxShopWidget : UUserWidget {
	struct UStoreViewModelV2* StoreViewModel; // 0x2c8(0x08)
	struct UStoreViewControllerV2* StoreViewController; // 0x2d0(0x08)

	struct UStoreViewModelV2* GetViewModel(); // Function ShooterGame.JuiceBoxShopWidget.GetViewModel // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612c0
	struct UStoreViewControllerV2* GetViewController(); // Function ShooterGame.JuiceBoxShopWidget.GetViewController // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612a0
};

// Class ShooterGame.JuiceScreenViewController
// Size: 0x120 (Inherited: 0x80)
struct UJuiceScreenViewController : UInitSystem {
	struct UJuiceScreenViewModel* ViewModel; // 0x80(0x08)
	struct FMulticastInlineDelegate OnJuiceContentsReloaded; // 0x88(0x10)
	struct FGuid JuiceCraftOrderID; // 0x98(0x10)
	struct FGuid JuiceCraftXID; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftingStateChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftOrderSubmitted; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftOrderComplete; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftOrderFailed; // 0xe8(0x10)
	struct UConfigManager* ConfigManager; // 0xf8(0x08)
	struct UPurchaseManager* PurchaseManager; // 0x100(0x08)
	struct UStoreManager* StoreManager; // 0x108(0x08)
	struct UInventoryManager* InventoryManager; // 0x110(0x08)
	struct UContentIndex* ContentIndex; // 0x118(0x08)

	void UpdateJuiceContentMapping(struct TArray<struct FGuid> UpdatedIDs); // Function ShooterGame.JuiceScreenViewController.UpdateJuiceContentMapping // (Final|Native|Public) // @ game+0x39802b0
	void SubmitJuiceCraftOrder(); // Function ShooterGame.JuiceScreenViewController.SubmitJuiceCraftOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x3980180
	void SelectTargetJuiceReward(struct FGuid RewardContentID); // Function ShooterGame.JuiceScreenViewController.SelectTargetJuiceReward // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x397fed0
	void SelectJuiceContentForCrafting(struct FGuid JuiceContentID); // Function ShooterGame.JuiceScreenViewController.SelectJuiceContentForCrafting // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x397fe30
	void RemoveJuiceContentFromCrafting(struct UJuiceContentViewModel* JuiceContent); // Function ShooterGame.JuiceScreenViewController.RemoveJuiceContentFromCrafting // (Final|Native|Public|BlueprintCallable) // @ game+0x397fc70
	void OnJuiceCraftSubmitOrderError(); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftSubmitOrderError // (Final|Native|Public) // @ game+0x37e69c0
	void OnJuiceCraftOrderSubmittedInternal(struct FGuid& SubmittedOrderID, struct FGuid& SubmittedOrderXID); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftOrderSubmittedInternal // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397fa80
	void OnJuiceCraftOrderFailedInternal(struct FGuid& FailedOrderID, struct FGuid& FailedOrderXID); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftOrderFailedInternal // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397f980
	void OnJuiceCraftOrderCompleteInternal(struct FGuid& CompletedOrderID, struct FGuid& CompletedOrderXID); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftOrderCompleteInternal // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397f880
	bool IsJuiceEnergyAutoSpendEnabled(); // Function ShooterGame.JuiceScreenViewController.IsJuiceEnergyAutoSpendEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x397f850
	bool IsCrafting(); // Function ShooterGame.JuiceScreenViewController.IsCrafting // (Final|Native|Public|BlueprintCallable) // @ game+0x397f770
	void ClearJuiceCraftingTray(); // Function ShooterGame.JuiceScreenViewController.ClearJuiceCraftingTray // (Final|Native|Public|BlueprintCallable) // @ game+0x397e9b0
};

// Class ShooterGame.JuiceContentViewModel
// Size: 0x60 (Inherited: 0x30)
struct UJuiceContentViewModel : UObject {
	enum class EJuiceContentViewModelType JuiceContentType; // 0x30(0x01)
	enum class EJuiceContentViewModelLocation Location; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	int32_t JuiceTrayLocationIndex; // 0x34(0x04)
	struct FGuid JuiceContentID; // 0x38(0x10)
	int32_t JuiceValue; // 0x48(0x04)
	int32_t JuiceCost; // 0x4c(0x04)
	bool IsBlueprint; // 0x50(0x01)
	bool IsPlaceholder; // 0x51(0x01)
	char pad_52[0x6]; // 0x52(0x06)
	struct UBaseInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.FilteredJuiceContentsViewModel
// Size: 0x58 (Inherited: 0x30)
struct UFilteredJuiceContentsViewModel : UObject {
	struct FString ContentsName; // 0x30(0x10)
	struct TArray<struct UJuiceContentViewModel*> JuiceContents; // 0x40(0x10)
	enum class EJuiceFilterViewType FilterType; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class ShooterGame.JuiceContentReward
// Size: 0x50 (Inherited: 0x30)
struct UJuiceContentReward : UObject {
	enum class EJuiceRewardType RewardType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UBaseInventoryModel* RewardInventoryModel; // 0x38(0x08)
	struct FGuid RewardContentID; // 0x40(0x10)

	enum class EJuiceOrderRequestType GetJuiceOrderTypeForRewardType(); // Function ShooterGame.JuiceContentReward.GetJuiceOrderTypeForRewardType // (Final|Native|Public) // @ game+0x397f1b0
	struct FGuid GetItemTypeID(); // Function ShooterGame.JuiceContentReward.GetItemTypeID // (Final|Native|Public|HasDefaults) // @ game+0x397efb0
};

// Class ShooterGame.JuiceScreenViewModel
// Size: 0x1a8 (Inherited: 0x30)
struct UJuiceScreenViewModel : UObject {
	struct FMulticastInlineDelegate OnJuiceTrayBlueprintChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnJuiceTraySelectedRewardChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnJuiceTrayContentsChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnJuiceTrayMessageChanged; // 0x60(0x10)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x70(0x08)
	struct TMap<struct FGuid, struct UJuiceContentViewModel*> JuiceContentMapping; // 0x78(0x50)
	struct TMap<enum class EJuiceFilterViewType, struct UFilteredJuiceContentsViewModel*> FilteredViewModels; // 0xc8(0x50)
	struct TArray<struct UJuiceContentViewModel*> JuiceTrayContents; // 0x118(0x10)
	struct TMap<struct FGuid, int32_t> JuiceTrayContentCounts; // 0x128(0x50)
	struct UJuiceContentViewModel* JuiceTrayBlueprint; // 0x178(0x08)
	struct UJuiceContentReward* JuiceTraySelectedReward; // 0x180(0x08)
	struct TArray<struct UJuiceContentReward*> JuiceTrayRewardOptions; // 0x188(0x10)
	int32_t JuiceTrayBlueprintCost; // 0x198(0x04)
	int32_t JuiceTrayContentsTotalValue; // 0x19c(0x04)
	int32_t JuiceTrayContentsEnergyOnlyTotal; // 0x1a0(0x04)
	enum class EJuiceTrayMessage JuiceTrayMessage; // 0x1a4(0x01)
	bool IsCraftingReadyToSubmit; // 0x1a5(0x01)
	char pad_1A6[0x2]; // 0x1a6(0x02)

	enum class EJuiceTrayMessage UpdateIsCraftingReadyToSubmit(); // Function ShooterGame.JuiceScreenViewModel.UpdateIsCraftingReadyToSubmit // (Final|Native|Public) // @ game+0x3980280
	void SetJuiceTraySelectedReward(struct FGuid& RewardID); // Function ShooterGame.JuiceScreenViewModel.SetJuiceTraySelectedReward // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x39800e0
	void SetJuiceTrayMessage(enum class EJuiceTrayMessage Message); // Function ShooterGame.JuiceScreenViewModel.SetJuiceTrayMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x3980060
	void SetJuiceTrayBlueprint(struct FGuid& CurrencyID, bool AutoSpendEnergyEnabled); // Function ShooterGame.JuiceScreenViewModel.SetJuiceTrayBlueprint // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397ff70
	void RemoveJuiceContents(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.RemoveJuiceContents // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397fd90
	void RemoveJuiceContentFromTray(struct UJuiceContentViewModel* JuiceContent); // Function ShooterGame.JuiceScreenViewModel.RemoveJuiceContentFromTray // (Final|Native|Public) // @ game+0x397fd00
	void RemakeJuiceContentsList(); // Function ShooterGame.JuiceScreenViewModel.RemakeJuiceContentsList // (Final|Native|Public) // @ game+0x397fba0
	bool IsJuiceEnergy(struct FGuid& JuiceContentID); // Function ShooterGame.JuiceScreenViewModel.IsJuiceEnergy // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x397f7a0
	bool HasJuiceContent(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.HasJuiceContent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397f6c0
	struct URewardModel* GetRewardModelForCraft(); // Function ShooterGame.JuiceScreenViewModel.GetRewardModelForCraft // (Final|Native|Public|BlueprintCallable) // @ game+0x397f690
	struct TArray<struct UJuiceContentReward*> GetNextRewardOptionsForSkin(struct UEquippableSkinInventoryModel* EquippableSkinInventoryModel); // Function ShooterGame.JuiceScreenViewModel.GetNextRewardOptionsForSkin // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x397f5b0
	struct UJuiceContentReward* GetJuiceTraySelectedReward(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTraySelectedReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x397f550
	enum class EJuiceTrayMessage GetJuiceTrayMessage(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x397f530
	int32_t GetJuiceTrayCountForContentIncludingBlueprint(struct FGuid& JuiceContentID); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayCountForContentIncludingBlueprint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x397f480
	int32_t GetJuiceTrayCountForContent(struct FGuid& JuiceContentID); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayCountForContent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x397f3d0
	struct TArray<struct UJuiceContentViewModel*> GetJuiceTrayContentsForConfirmation(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayContentsForConfirmation // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x397f350
	struct TArray<struct UJuiceContentViewModel*> GetJuiceTrayContentsAllDisplayItems(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayContentsAllDisplayItems // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x397f2d0
	struct TArray<struct UJuiceContentViewModel*> GetJuiceTrayContents(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayContents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x397f200
	struct UJuiceContentViewModel* GetJuiceTrayBlueprint(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x397f1e0
	struct UJuiceContentViewModel* GetJuiceContentsByID(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.GetJuiceContentsByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x397f100
	struct UFilteredJuiceContentsViewModel* GetJuiceContentsByFilter(enum class EJuiceFilterViewType FilterType); // Function ShooterGame.JuiceScreenViewModel.GetJuiceContentsByFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x397f070
	struct TArray<struct UJuiceContentViewModel*> GetJuiceContents(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceContents // (Final|Native|Public|BlueprintCallable) // @ game+0x397eff0
	bool GetIsCraftingReadyToSubmit(); // Function ShooterGame.JuiceScreenViewModel.GetIsCraftingReadyToSubmit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x397ee00
	void ClearJuiceTray(); // Function ShooterGame.JuiceScreenViewModel.ClearJuiceTray // (Final|Native|Public) // @ game+0x397e9d0
	void AddJuiceContentToTray(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.AddJuiceContentToTray // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397e660
	void AddJuiceContents(struct FGuid& CurrencyID, struct UBaseInventoryModel* InventoryModel, enum class EJuiceContentViewModelType JuiceContentType); // Function ShooterGame.JuiceScreenViewModel.AddJuiceContents // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x397e700
};

// Class ShooterGame.JumpAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.JumpAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.JumpLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.JumpUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.JumpLandAddLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAddLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.JumpLandAddUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAddUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.JumpLandAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.JumpLandAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.JumpLandLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.JumpLandUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.KeyBindingViewModel
// Size: 0x158 (Inherited: 0x48)
struct UKeyBindingViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnActionDisplayNameChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnActionDescriptionChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnIsCustomBindingChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnIsDangerChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnIsLockedChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnIsNotifyIconVisible; // 0x98(0x10)
	struct FMulticastInlineDelegate OnNewBindingChanged; // 0xa8(0x10)
	char pad_B8[0xa0]; // 0xb8(0xa0)

	void SetNewBinding(struct FActionChord NewNewBinding); // Function ShooterGame.KeyBindingViewModel.SetNewBinding // (Final|Native|Protected|BlueprintCallable) // @ game+0x3987270
	void SetIsNotifyIconVisible(bool bNewIsNotifyIconVisible); // Function ShooterGame.KeyBindingViewModel.SetIsNotifyIconVisible // (Final|Native|Protected|BlueprintCallable) // @ game+0x39870c0
	void SetIsLocked(bool NewIsLocked); // Function ShooterGame.KeyBindingViewModel.SetIsLocked // (Final|Native|Protected|BlueprintCallable) // @ game+0x3987030
	void SetIsDanger(bool NewIsDanger); // Function ShooterGame.KeyBindingViewModel.SetIsDanger // (Final|Native|Protected|BlueprintCallable) // @ game+0x3986fa0
	void SetIsCustomBinding(bool NewIsCustomBinding); // Function ShooterGame.KeyBindingViewModel.SetIsCustomBinding // (Final|Native|Protected|BlueprintCallable) // @ game+0x3986f10
	void SetActionDisplayName(struct FName& NewActionDisplayName); // Function ShooterGame.KeyBindingViewModel.SetActionDisplayName // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x3986e70
	void SetActionDescription(struct FText& NewActionDescription); // Function ShooterGame.KeyBindingViewModel.SetActionDescription // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x3986d90
	void Refresh(); // Function ShooterGame.KeyBindingViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x3986d30
	bool IsChild(); // Function ShooterGame.KeyBindingViewModel.IsChild // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3986ce0
	void InitializeViewModel(struct UActionTraits*& BaseActionTrait); // Function ShooterGame.KeyBindingViewModel.InitializeViewModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3986c50
	void HandleSetBindingRequest(struct FKey& InputKey, struct FName CharacterName); // Function ShooterGame.KeyBindingViewModel.HandleSetBindingRequest // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3986a50
	void HandleClearBindingRequest(struct FName CharacterName); // Function ShooterGame.KeyBindingViewModel.HandleClearBindingRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3986870
	void HandleActionBindingUpdated(struct UActionBindSet* InputActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.KeyBindingViewModel.HandleActionBindingUpdated // (Final|Native|Public) // @ game+0x39866f0
	struct UActionTraits* GetParentActionTraitsClass(); // Function ShooterGame.KeyBindingViewModel.GetParentActionTraitsClass // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39866c0
	struct FActionChord GetNewBinding(); // Function ShooterGame.KeyBindingViewModel.GetNewBinding // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3986550
	bool GetIsNotifyIconVisible(); // Function ShooterGame.KeyBindingViewModel.GetIsNotifyIconVisible // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3986530
	bool GetIsLocked(); // Function ShooterGame.KeyBindingViewModel.GetIsLocked // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3986510
	bool GetIsDanger(); // Function ShooterGame.KeyBindingViewModel.GetIsDanger // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x39864f0
	bool GetIsCustomBinding(); // Function ShooterGame.KeyBindingViewModel.GetIsCustomBinding // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3869eb0
	struct TArray<struct FName> GetConsoleParentActionTraitName(); // Function ShooterGame.KeyBindingViewModel.GetConsoleParentActionTraitName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3986420
	struct FName GetActionDisplayName(); // Function ShooterGame.KeyBindingViewModel.GetActionDisplayName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x39863d0
	struct FText GetActionDescription(); // Function ShooterGame.KeyBindingViewModel.GetActionDescription // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3986310
	void DeinitializeViewModel(); // Function ShooterGame.KeyBindingViewModel.DeinitializeViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x39862f0
};

// Class ShooterGame.KeyLocationObject
// Size: 0x408 (Inherited: 0x3d8)
struct AKeyLocationObject : ATargetPoint {
	struct FName LocationName; // 0x3d8(0x0c)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct FText LocalizedLocationName; // 0x3e8(0x18)
	enum class EAresTeam Team; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
};

// Class ShooterGame.KeyLocationVolume
// Size: 0x450 (Inherited: 0x420)
struct AKeyLocationVolume : APhysicsVolume {
	struct FString LocationName; // 0x420(0x10)
	struct FText LocalizedLocationName; // 0x430(0x18)
	struct TWeakObjectPtr<struct AKeyLocationObject> LinkedKeyLocationObject; // 0x448(0x08)
};

// Class ShooterGame.KillBannerData
// Size: 0x30 (Inherited: 0x30)
struct UKillBannerData : UObject {
};

// Class ShooterGame.KillFeedAssisterPortraits_Base
// Size: 0x2f8 (Inherited: 0x2c8)
struct UKillFeedAssisterPortraits_Base : UUserWidget {
	struct UImage* BGGradient; // 0x2c8(0x08)
	struct UImage* AssistPortrait1; // 0x2d0(0x08)
	struct UImage* AssistPortrait2; // 0x2d8(0x08)
	struct UImage* AssistPortrait3; // 0x2e0(0x08)
	struct UImage* AssistPortrait4; // 0x2e8(0x08)
	struct UOverlay* MeBorder; // 0x2f0(0x08)
};

// Class ShooterGame.KillFeedParticipant_Base
// Size: 0x360 (Inherited: 0x2c8)
struct UKillFeedParticipant_Base : UUserWidget {
	struct UImage* BGGradient; // 0x2c8(0x08)
	struct UImage* Portrait; // 0x2d0(0x08)
	struct UTextBlock* PlayerName; // 0x2d8(0x08)
	struct UOverlay* UltimateOverlay; // 0x2e0(0x08)
	struct UImage* UltimateActiveVFX; // 0x2e8(0x08)
	struct USizeBox* UltimateAbilityIconSizeBox; // 0x2f0(0x08)
	struct UImage* UltimateAbilityIcon; // 0x2f8(0x08)
	struct USizeBox* AssistSizeBox; // 0x300(0x08)
	struct UImage* AssistImage; // 0x308(0x08)
	struct USizeBox* WeaponSizeBox; // 0x310(0x08)
	struct UImage* WeaponImage; // 0x318(0x08)
	struct USizeBox* WallPenSizeBox; // 0x320(0x08)
	struct UImage* WallPenImage; // 0x328(0x08)
	struct USizeBox* HeadshotSizeBox; // 0x330(0x08)
	struct UImage* HeadshotImage; // 0x338(0x08)
	struct UOverlay* MeBorder; // 0x340(0x08)
	struct UImage* TopGradient; // 0x348(0x08)
	struct UImage* BotGradient; // 0x350(0x08)
	struct UImage* MeDiamondImage; // 0x358(0x08)
};

// Class ShooterGame.KillFeedRow_Base
// Size: 0x318 (Inherited: 0x2c8)
struct UKillFeedRow_Base : UUserWidget {
	struct UImage* OnFireVFX; // 0x2c8(0x08)
	struct UKillFeedAssisterPortraits_Base* KillFeedAssisterPortraits; // 0x2d0(0x08)
	struct UOverlay* Numerals; // 0x2d8(0x08)
	struct UImage* NumberBacker; // 0x2e0(0x08)
	struct UTextBlock* KillNumberText; // 0x2e8(0x08)
	struct UKillFeedParticipant_Base* KillFeedParticipant1; // 0x2f0(0x08)
	struct UKillFeedParticipant_Base* KillFeedParticipant2; // 0x2f8(0x08)
	struct UImage* ArrowRight; // 0x300(0x08)
	struct UImage* ArrowLeft; // 0x308(0x08)
	struct UImage* AnimateIn; // 0x310(0x08)
};

// Class ShooterGame.KillCalloutHUDElement_Base
// Size: 0x2e0 (Inherited: 0x2d8)
struct UKillCalloutHUDElement_Base : UCoordinatedHUDElement {
	struct UVerticalBox* VerticalBoxForKillRows; // 0x2d8(0x08)
};

// Class ShooterGame.KillProxyComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UKillProxyComponent : UActorComponent {
	struct TArray<struct FGameplayTag> ProxyTags; // 0xe8(0x10)

	void ProxyKillToPlayer(struct AShooterCharacter* KillerCharacter, struct AShooterCharacter* KilledCharacter, struct UDamageResponse* Response); // Function ShooterGame.KillProxyComponent.ProxyKillToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3634fc0
};

// Class ShooterGame.KillStreakComponent
// Size: 0x110 (Inherited: 0xe8)
struct UKillStreakComponent : UActorComponent {
	char pad_E8[0x28]; // 0xe8(0x28)

	void SetKills(int32_t Kills); // Function ShooterGame.KillStreakComponent.SetKills // (Final|Native|Public|BlueprintCallable) // @ game+0x3987150
	void ResetKills(); // Function ShooterGame.KillStreakComponent.ResetKills // (Final|Native|Public|BlueprintCallable) // @ game+0x3986d70
	int32_t GetNumKillsStreak(); // Function ShooterGame.KillStreakComponent.GetNumKillsStreak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b930
	int32_t GetNumKillsCurrentLife(); // Function ShooterGame.KillStreakComponent.GetNumKillsCurrentLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391b910
	void ClientRPCOnPlayerKill(int32_t LocalNumKillsStreak, bool bWasHeadshot); // Function ShooterGame.KillStreakComponent.ClientRPCOnPlayerKill // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3986210
};

// Class ShooterGame.LadderComponent
// Size: 0xe8 (Inherited: 0xe8)
struct ULadderComponent : UActorComponent {
};

// Class ShooterGame.LandingScreenViewModel
// Size: 0xf0 (Inherited: 0x48)
struct ULandingScreenViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnChildScreenAdded; // 0x48(0x10)
	struct FMulticastInlineDelegate OnChildScreenRemoved; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLandingChildIndexChanged; // 0x68(0x10)
	struct TArray<struct FName> ValidChildScreens; // 0x78(0x10)
	struct TArray<struct FName> InstantiatedChildScreens; // 0x88(0x10)
	char pad_98[0x8]; // 0x98(0x08)
	struct TArray<struct FRGICommonNavBarDetails> NavigationBarData; // 0xa0(0x10)
	struct FName MenuStack; // 0xb0(0x0c)
	struct FName ScreenName; // 0xbc(0x0c)
	struct TArray<struct FName> LandingUrl; // 0xc8(0x10)
	int32_t LandingChildIndex; // 0xd8(0x04)
	char pad_DC[0x14]; // 0xdc(0x14)

	void UpdateLandingNavigation(int32_t StartingChildIndex); // Function ShooterGame.LandingScreenViewModel.UpdateLandingNavigation // (Final|Native|Protected|BlueprintCallable) // @ game+0x39874f0
	void UpdateIsLandingActive(struct FAresMenuUrl& InUrl); // Function ShooterGame.LandingScreenViewModel.UpdateIsLandingActive // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x39873b0
	bool ShouldAutoForwardToChildren(); // Function ShooterGame.LandingScreenViewModel.ShouldAutoForwardToChildren // (Native|Event|Public|BlueprintEvent) // @ game+0x3987390
	void SetLandingChildIndex(int32_t InIndex); // Function ShooterGame.LandingScreenViewModel.SetLandingChildIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x39871e0
	void RemoveAllChildScreens(); // Function ShooterGame.LandingScreenViewModel.RemoveAllChildScreens // (Final|Native|Protected|BlueprintCallable) // @ game+0x3986d50
	void PopulateChildScreens(); // Function ShooterGame.LandingScreenViewModel.PopulateChildScreens // (Final|Native|Protected|BlueprintCallable) // @ game+0x3986d10
	void InitializeFromLandingUrl(struct TArray<struct FName>& InLandingUrl); // Function ShooterGame.LandingScreenViewModel.InitializeFromLandingUrl // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3986ba0
	void HandleOnMenuUrlChanged(struct FAresMenuUrl& NewUrl); // Function ShooterGame.LandingScreenViewModel.HandleOnMenuUrlChanged // (Final|Native|Public|HasOutParms) // @ game+0x3986910
	struct FName GetAutoForwardChildName(); // Function ShooterGame.LandingScreenViewModel.GetAutoForwardChildName // (Native|Event|Public|BlueprintEvent) // @ game+0x3986400
	void FilterChildScreens(); // Function ShooterGame.LandingScreenViewModel.FilterChildScreens // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.LatencyService
// Size: 0xa0 (Inherited: 0x80)
struct ULatencyService : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct UPingManager* PingManager; // 0x98(0x08)
};

// Class ShooterGame.LazyPlatformWidgetLoader_Base
// Size: 0x308 (Inherited: 0x2c8)
struct ULazyPlatformWidgetLoader_Base : UUserWidget {
	enum class EAresPlatformWidgetFamily WidgetFamily; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	struct FName WidgetID; // 0x2cc(0x0c)
	struct FMulticastInlineDelegate OnWidgetLoaded; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnWidgetLoadFailed; // 0x2e8(0x10)
	struct UUserWidget* CurrentWidgetInstance; // 0x2f8(0x08)
	struct UUserWidget* CurrentWidgetClass; // 0x300(0x08)

	struct UUserWidget* GetWidgetInstance(struct UUserWidget* WidgetBaseClass, bool LoadBlockingIfNotYetLoaded); // Function ShooterGame.LazyPlatformWidgetLoader_Base.GetWidgetInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x398f000
};

// Class ShooterGame.LeaderboardManager
// Size: 0xe8 (Inherited: 0x80)
struct ULeaderboardManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct ULeaderboardService* LeaderboardService; // 0x90(0x08)
	struct UPremierManager* PremierManager; // 0x98(0x08)
	struct UPremierRosterViewController* PremierRosterViewController; // 0xa0(0x08)
	char pad_A8[0x40]; // 0xa8(0x40)

	void HandleActiveSeasonChanged(); // Function ShooterGame.LeaderboardManager.HandleActiveSeasonChanged // (Final|Native|Private) // @ game+0x398f0d0
	struct ULeaderboardManager* GET(struct UWorld* FromWorld); // Function ShooterGame.LeaderboardManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398de30
};

// Class ShooterGame.LeaderboardService
// Size: 0x38 (Inherited: 0x30)
struct ULeaderboardService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.LeaderboardViewController
// Size: 0x88 (Inherited: 0x80)
struct ULeaderboardViewController : UInitSystem {
	struct ULeaderboardManager* LeaderboardManager; // 0x80(0x08)

	struct TMap<struct FString, struct UPremierSeasonModel*> PopulateLeaderboardSeasons(); // Function ShooterGame.LeaderboardViewController.PopulateLeaderboardSeasons // (Final|Native|Public|BlueprintCallable) // @ game+0x398f320
	struct TMap<struct FString, struct UPremierConferenceModel*> PopulateLeaderboardConferences(); // Function ShooterGame.LeaderboardViewController.PopulateLeaderboardConferences // (Final|Native|Public|BlueprintCallable) // @ game+0x398f230
	int32_t GetTotalPageNumber(struct FPremierLeaderboard Leaderboard); // Function ShooterGame.LeaderboardViewController.GetTotalPageNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398ed80
	int32_t GetStartRankFromPageNumber(int32_t PageNumber); // Function ShooterGame.LeaderboardViewController.GetStartRankFromPageNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398ebe0
	void GetLeaderboardJumpToMe(struct FGuid SeasonID, struct FGuid ConferenceID, int32_t Division, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.LeaderboardViewController.GetLeaderboardJumpToMe // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x398e910
	void GetLeaderboardJumpToID(struct FString SubjectID, struct FString Region, struct FString season, struct FString grouping, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.LeaderboardViewController.GetLeaderboardJumpToID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x398e510
	void GetLeaderboardEntries(int32_t StartRank, int32_t EndRank, struct FGuid season, struct FGuid Conference, int32_t Division, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.LeaderboardViewController.GetLeaderboardEntries // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x398e280
	int32_t GetEndRankFromPageNumber(int32_t PageNumber); // Function ShooterGame.LeaderboardViewController.GetEndRankFromPageNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398e1c0
	int32_t GetDefaultPageSize(); // Function ShooterGame.LeaderboardViewController.GetDefaultPageSize // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398e190
	int32_t GetCurrentPageNumber(struct FPremierLeaderboard Leaderboard); // Function ShooterGame.LeaderboardViewController.GetCurrentPageNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398df10
	struct FString DebugConvertLeaderboardToString(struct FPremierLeaderboard Leaderboard); // Function ShooterGame.LeaderboardViewController.DebugConvertLeaderboardToString // (Final|Native|Public|BlueprintCallable) // @ game+0x398d9f0
};

// Class ShooterGame.LeftGripUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct ULeftGripUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.LegalInfoManager
// Size: 0xd0 (Inherited: 0x80)
struct ULegalInfoManager : UInitSystem {
	struct FString EndUserLicenseAgreement; // 0x80(0x10)
	struct FString PrivacyPolicy; // 0x90(0x10)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct ULegalInfoService* LegalInfoService; // 0xa8(0x08)
	char pad_B0[0x20]; // 0xb0(0x20)

	struct FString GetPrivacyPolicy(); // Function ShooterGame.LegalInfoManager.GetPrivacyPolicy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398ebb0
	struct ULegalInfoManager* GetLegalInfoManager(struct UObject* WorldContextObject); // Function ShooterGame.LegalInfoManager.GetLegalInfoManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x398eb20
	struct FString GetEndUserLicenseAgreement(); // Function ShooterGame.LegalInfoManager.GetEndUserLicenseAgreement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398e250
};

// Class ShooterGame.LegalInfoService
// Size: 0x38 (Inherited: 0x30)
struct ULegalInfoService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.LevelBorderDataAsset
// Size: 0x88 (Inherited: 0x50)
struct ULevelBorderDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	int32_t StartingLevel; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class ShooterGame.LevelBorderUIData
// Size: 0xa0 (Inherited: 0x90)
struct ULevelBorderUIData : UBaseContentUIData {
	struct UTexture* LevelNumberAppearance; // 0x90(0x08)
	struct UTexture* SmallPlayerCardAppearance; // 0x98(0x08)

	struct UTexture* GetTextureForAppearance(enum class EAresLevelBorderAppearance Appearance); // Function ShooterGame.LevelBorderUIData.GetTextureForAppearance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398ecf0
};

// Class ShooterGame.LevelStreamer
// Size: 0x408 (Inherited: 0x3d8)
struct ALevelStreamer : AActor {
	struct FMulticastInlineDelegate OnLevelsLoaded; // 0x3d8(0x10)
	struct TArray<struct FName> LevelsToLoad; // 0x3e8(0x10)
	char pad_3F8[0x10]; // 0x3f8(0x10)

	void UnloadLevels(); // Function ShooterGame.LevelStreamer.UnloadLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x398f510
	void LoadLevels(); // Function ShooterGame.LevelStreamer.LoadLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x398f210
	void LevelUnloadedCallback(); // Function ShooterGame.LevelStreamer.LevelUnloadedCallback // (Final|Native|Protected) // @ game+0x398f1f0
	void LevelLoadedCallback(); // Function ShooterGame.LevelStreamer.LevelLoadedCallback // (Final|Native|Protected) // @ game+0x398f1d0
};

// Class ShooterGame.LineCrosshairHudElement
// Size: 0x220 (Inherited: 0x178)
struct ULineCrosshairHudElement : UBaseCrosshairHudElement {
	bool bDoResolutionScaling; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	float SymmetricResolutionScalingThreshold; // 0x17c(0x04)
	struct FAresCrosshairImage CrosshairImages[0x5]; // 0x180(0xa0)
};

// Class ShooterGame.LineTargetingStateComponent
// Size: 0x4b8 (Inherited: 0x3d0)
struct ULineTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnValidTargetSelected; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnInvalidTargetSelected; // 0x3e0(0x10)
	float TargetingRange; // 0x3f0(0x04)
	float LineWidth; // 0x3f4(0x04)
	bool OthersSeeTargeting; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	float PlacementCheckRadius; // 0x3fc(0x04)
	struct TArray<struct FName> TagsPreventingPlacement; // 0x400(0x10)
	enum class ECollisionChannel TraceChannel; // 0x410(0x01)
	bool bUseComplexCollision; // 0x411(0x01)
	char pad_412[0x92]; // 0x412(0x92)
	bool bDrawDebugTargeting; // 0x4a4(0x01)
	char pad_4A5[0x13]; // 0x4a5(0x13)

	bool TargetingIsValid(); // Function ShooterGame.LineTargetingStateComponent.TargetingIsValid // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x398f410
	bool IsPlacementBlocked(struct FHitResult& TargetPoint); // Function ShooterGame.LineTargetingStateComponent.IsPlacementBlocked // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x398f0f0
	struct FHitResult GetTargetingResult(); // Function ShooterGame.LineTargetingStateComponent.GetTargetingResult // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398ec70
	void ForceTickScriptState(float DeltaTimeSeconds, float SubframeTimeOffset); // Function ShooterGame.LineTargetingStateComponent.ForceTickScriptState // (Final|Native|Protected|BlueprintCallable) // @ game+0x398dd60
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.LineTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x398d660
};

// Class ShooterGame.ListEntryPerSlotConfigurer
// Size: 0x30 (Inherited: 0x30)
struct UListEntryPerSlotConfigurer : UInterface {
};

// Class ShooterGame.ListEntrySlotConfigurer
// Size: 0x30 (Inherited: 0x30)
struct UListEntrySlotConfigurer : UInterface {

	void UnbindOnSlotSettingsChanged(struct FDelegate& Delegate); // Function ShooterGame.ListEntrySlotConfigurer.UnbindOnSlotSettingsChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x398f450
	void ConfigureEntrySlot(struct UObject* Slot, int32_t ListIndex); // Function ShooterGame.ListEntrySlotConfigurer.ConfigureEntrySlot // (Native|Public|BlueprintCallable|Const) // @ game+0x398d870
	void BindOnSlotSettingsChanged(struct FDelegate& Delegate); // Function ShooterGame.ListEntrySlotConfigurer.BindOnSlotSettingsChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x378ca00
};

// Class ShooterGame.ListEntrySlotConfigurerFactory
// Size: 0x30 (Inherited: 0x30)
struct UListEntrySlotConfigurerFactory : UInterface {

	struct TScriptInterface<IListEntrySlotConfigurer> GetConfigurer(); // Function ShooterGame.ListEntrySlotConfigurerFactory.GetConfigurer // (Native|Public|BlueprintCallable) // @ game+0x398dec0
	void DestroyPerSlotConfigurer(struct TScriptInterface<IListEntryPerSlotConfigurer> Configurer); // Function ShooterGame.ListEntrySlotConfigurerFactory.DestroyPerSlotConfigurer // (Native|Public|BlueprintCallable) // @ game+0x398dcb0
	struct TScriptInterface<IListEntryPerSlotConfigurer> CreatePerSlotConfigurer(struct UObject* Slot); // Function ShooterGame.ListEntrySlotConfigurerFactory.CreatePerSlotConfigurer // (Native|Public|BlueprintCallable) // @ game+0x398d940
};

// Class ShooterGame.ListItemDisplayEntry
// Size: 0x30 (Inherited: 0x30)
struct UListItemDisplayEntry : UInterface {

	void SetSharedListItemData(struct FWildcard& NewValue); // Function ShooterGame.ListItemDisplayEntry.SetSharedListItemData // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3996e00
	void SetSelected(bool NewValue); // Function ShooterGame.ListItemDisplayEntry.SetSelected // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37b0560
	void SetListItemOwner(struct TScriptInterface<IListItemDisplayEntryOwner>& NewValue); // Function ShooterGame.ListItemDisplayEntry.SetListItemOwner // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3996ab0
	void SetListItemData(struct FWildcard& NewValue); // Function ShooterGame.ListItemDisplayEntry.SetListItemData // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x39969c0
	void SetListIndex(int32_t NewValue); // Function ShooterGame.ListItemDisplayEntry.SetListIndex // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3996930
};

// Class ShooterGame.ListItemDisplayEntryBase
// Size: 0x300 (Inherited: 0x2e0)
struct UListItemDisplayEntryBase : UAnimatableUserWidget {
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct TScriptInterface<IListItemDisplayEntryOwner> ListItemOwner; // 0x2e8(0x10)
	int32_t ListIndex; // 0x2f8(0x04)
	bool bSelected; // 0x2fc(0x01)
	char pad_2FD[0x3]; // 0x2fd(0x03)

	void OnSelectedChanged(bool bOldSelected, bool bNewSelected); // Function ShooterGame.ListItemDisplayEntryBase.OnSelectedChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x39967c0
	void OnListIndexChanged(int32_t OldListIndex, int32_t NewListIndex); // Function ShooterGame.ListItemDisplayEntryBase.OnListIndexChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x39966e0
	void NotifyOwnerListEntryActivated(enum class EListItemDisplayEntryActivationType ActivationType, struct FWildcard Context); // Function ShooterGame.ListItemDisplayEntryBase.NotifyOwnerListEntryActivated // (Final|Native|Protected|BlueprintCallable) // @ game+0x3996570
};

// Class ShooterGame.ListItemDisplayEntryOwner
// Size: 0x30 (Inherited: 0x30)
struct UListItemDisplayEntryOwner : UInterface {

	void NotifyListEntryActivated(struct UObject* Source, struct FListItemDisplayEntryActivatedData& NotificationData); // Function ShooterGame.ListItemDisplayEntryOwner.NotifyListEntryActivated // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3996440
};

// Class ShooterGame.SortProvider
// Size: 0x30 (Inherited: 0x30)
struct USortProvider : UInterface {

	enum class ESortOrder SortObjects(struct FWildcard ObjectA, struct FWildcard ObjectB); // Function ShooterGame.SortProvider.SortObjects // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3996ef0
};

// Class ShooterGame.FilterProvider
// Size: 0x30 (Inherited: 0x30)
struct UFilterProvider : UInterface {

	enum class EFilterInclude FilterObject(struct FWildcard Object); // Function ShooterGame.FilterProvider.FilterObject // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3995e80
};

// Class ShooterGame.ListViewList
// Size: 0x428 (Inherited: 0x258)
struct UListViewList : UListViewBase {
	char pad_258[0xc8]; // 0x258(0xc8)
	struct FMulticastInlineDelegate OnItemActivated; // 0x320(0x10)
	enum class EOrientation Orientation; // 0x330(0x01)
	enum class ESelectionMode SelectionMode; // 0x331(0x01)
	enum class EConsumeMouseWheel ConsumeMouseWheel; // 0x332(0x01)
	bool bClearSelectionOnClick; // 0x333(0x01)
	bool bIsFocusable; // 0x334(0x01)
	char pad_335[0x3]; // 0x335(0x03)
	float EntrySpacing; // 0x338(0x04)
	bool bReturnFocusToSelection; // 0x33c(0x01)
	char pad_33D[0x3]; // 0x33d(0x03)
	struct TArray<struct FWildcard> ListItems; // 0x340(0x10)
	struct FWildcard SharedListItemData; // 0x350(0x40)
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x390(0x10)
	char pad_3A0[0x10]; // 0x3a0(0x10)
	struct FMulticastInlineDelegate BP_OnEntryInitialized; // 0x3b0(0x10)
	struct FMulticastInlineDelegate BP_OnItemClicked; // 0x3c0(0x10)
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct FMulticastInlineDelegate BP_OnItemDoubleClicked; // 0x3d8(0x10)
	char pad_3E8[0x8]; // 0x3e8(0x08)
	struct FMulticastInlineDelegate BP_OnItemIsHoveredChanged; // 0x3f0(0x10)
	char pad_400[0x8]; // 0x400(0x08)
	struct FMulticastInlineDelegate BP_OnItemSelectionChanged; // 0x408(0x10)
	struct FMulticastInlineDelegate BP_OnItemScrolledIntoView; // 0x418(0x10)

	void SetSelectionMode(enum class ESelectionMode SelectionMode); // Function ShooterGame.ListViewList.SetSelectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3996d80
	void SetSelectedIndex(int32_t Index); // Function ShooterGame.ListViewList.SetSelectedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3996cf0
	void SetListModel(struct TScriptInterface<IOrderedListModel> NewValue); // Function ShooterGame.ListViewList.SetListModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3996b50
	void ScrollIndexIntoView(int32_t Index); // Function ShooterGame.ListViewList.ScrollIndexIntoView // (Final|Native|Public|BlueprintCallable) // @ game+0x39968a0
	void NavigateToIndex(int32_t Index); // Function ShooterGame.ListViewList.NavigateToIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x39963b0
	bool IsRefreshPending(); // Function ShooterGame.ListViewList.IsRefreshPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3996340
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.ListViewList.HandleListModelChange // (Native|Protected|HasOutParms) // @ game+0x3996210
	void EntryActivatedMulticastDelegate__DelegateSignature(struct UListViewList* Source, struct FListItemDisplayEntryActivatedEventData EventData); // DelegateFunction ShooterGame.ListViewList.EntryActivatedMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
	void BP_SetSharedListItemData(int32_t NewValue); // Function ShooterGame.ListViewList.BP_SetSharedListItemData // (Final|Native|Public|BlueprintCallable) // @ game+0x3611580
	void BP_SetSelectedItem(struct FWildcard& Item); // Function ShooterGame.ListViewList.BP_SetSelectedItem // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x3995da0
	void BP_SetItemSelection(struct FWildcard& Item, bool bSelected); // Function ShooterGame.ListViewList.BP_SetItemSelection // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x3995c70
	void BP_ScrollItemIntoView(struct FWildcard& Item); // Function ShooterGame.ListViewList.BP_ScrollItemIntoView // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x3995b90
	void BP_NavigateToItem(struct FWildcard& Item); // Function ShooterGame.ListViewList.BP_NavigateToItem // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x3995ab0
	bool BP_IsItemVisible(struct FWildcard& Item); // Function ShooterGame.ListViewList.BP_IsItemVisible // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39959d0
	bool BP_GetSelectedItems(struct TArray<struct FWildcard>& Items); // Function ShooterGame.ListViewList.BP_GetSelectedItems // (Final|Native|Private|HasOutParms|BlueprintCallable|Const) // @ game+0x39958e0
	struct FWildcard BP_GetSelectedItem(); // Function ShooterGame.ListViewList.BP_GetSelectedItem // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3995860
	int32_t BP_GetNumItemsSelected(); // Function ShooterGame.ListViewList.BP_GetNumItemsSelected // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3995830
	void BP_ClearSelection(); // Function ShooterGame.ListViewList.BP_ClearSelection // (Final|Native|Private|BlueprintCallable) // @ game+0x3995810
	void BP_CancelScrollIntoView(); // Function ShooterGame.ListViewList.BP_CancelScrollIntoView // (Final|Native|Private|BlueprintCallable) // @ game+0x39957f0
};

// Class ShooterGame.LiveObserverPawn
// Size: 0x488 (Inherited: 0x488)
struct ALiveObserverPawn : AObserverPawn {
};

// Class ShooterGame.ObserverPlayerController
// Size: 0xab8 (Inherited: 0xa00)
struct AObserverPlayerController : AAresPlayerController {
	struct UFreeCamComponent* FreeCamComponent; // 0xa00(0x08)
	struct UProjectileFollowComponent* ProjectileFollowComponent; // 0xa08(0x08)
	struct UCinematicCameraComponent* CinematicCameraComponent; // 0xa10(0x08)
	struct UPlayspaceComponent* FreeCamPlayspaceComponent; // 0xa18(0x08)
	struct FMulticastInlineDelegate OnOutlinesChanged; // 0xa20(0x10)
	bool bUseBroadcastHud; // 0xa30(0x01)
	char pad_A31[0x7]; // 0xa31(0x07)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> BroadcastHudOverrides; // 0xa38(0x50)
	struct UActorVisualizationComponent* SightLinesComponent; // 0xa88(0x08)
	struct UObserverViewOptionsComponent* ClientPredictedObserverViewOptionsComponent; // 0xa90(0x08)
	char pad_A98[0x20]; // 0xa98(0x20)

	void UpdateOutlines(); // Function ShooterGame.ObserverPlayerController.UpdateOutlines // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	bool TrySpectateSpecificPlayerWithCinematicCamera(struct AShooterPlayerState* PlayerStateToSpectate); // Function ShooterGame.ObserverPlayerController.TrySpectateSpecificPlayerWithCinematicCamera // (Final|Native|Public) // @ game+0x39f8440
	void ToggleSightLines(); // Function ShooterGame.ObserverPlayerController.ToggleSightLines // (Final|Native|Protected) // @ game+0x39f7de0
	void ToggleMinimap(); // Function ShooterGame.ObserverPlayerController.ToggleMinimap // (Final|Native|Public) // @ game+0x39f7dc0
	void StopFollowingCurrentTarget(); // Function ShooterGame.ObserverPlayerController.StopFollowingCurrentTarget // (Final|Native|Public) // @ game+0x2024060
	void ServerReplicateObserverMove(struct FObserverPawnMove SavedMove); // Function ShooterGame.ObserverPlayerController.ServerReplicateObserverMove // (Net|Native|Event|Public|NetServer) // @ game+0x39f7d30
	void ServerFollowPrev(int32_t AckIndex); // Function ShooterGame.ObserverPlayerController.ServerFollowPrev // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x39f7ca0
	void ServerFollowNext(int32_t AckIndex); // Function ShooterGame.ObserverPlayerController.ServerFollowNext // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x39f7c10
	void ServerChangeObserverViewOptions(struct FObserverViewOptionsNetworkedData InObserverViewOptionsNetworkedData); // Function ShooterGame.ObserverPlayerController.ServerChangeObserverViewOptions // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x39f7b80
	void RequestFollowPrev(); // Function ShooterGame.ObserverPlayerController.RequestFollowPrev // (Final|Native|Public) // @ game+0x39f7b60
	void RequestFollowNext(); // Function ShooterGame.ObserverPlayerController.RequestFollowNext // (Final|Native|Public) // @ game+0x39f7b40
	void OutlinesNone(); // Function ShooterGame.ObserverPlayerController.OutlinesNone // (Final|Native|Protected) // @ game+0x39f7b20
	void OutlinesFriendly(); // Function ShooterGame.ObserverPlayerController.OutlinesFriendly // (Final|Native|Protected) // @ game+0x39f7b00
	void OutlinesEnemy(); // Function ShooterGame.ObserverPlayerController.OutlinesEnemy // (Final|Native|Protected) // @ game+0x39f7ae0
	void OutlinesAll(); // Function ShooterGame.ObserverPlayerController.OutlinesAll // (Final|Native|Protected) // @ game+0x39f7ac0
	void OnViewTargetChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ObserverPlayerController.OnViewTargetChanged // (Final|Native|Protected|HasOutParms) // @ game+0x39f7a30
	void OnTeamColorSettingsChange(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ObserverPlayerController.OnTeamColorSettingsChange // (Final|Native|Protected) // @ game+0x39f7910
	void OnSpectateInOrderRequestReceived(bool bFromPlayerInput); // Function ShooterGame.ObserverPlayerController.OnSpectateInOrderRequestReceived // (Final|Native|Public) // @ game+0x3635160
	void OnAuthViewTargetChanged(); // Function ShooterGame.ObserverPlayerController.OnAuthViewTargetChanged // (Final|Native|Public) // @ game+0x2024060
	void OnAuthFreeCamToggled(bool bFreeCamEnabled); // Function ShooterGame.ObserverPlayerController.OnAuthFreeCamToggled // (Final|Native|Public) // @ game+0x3635160
	void ModifyObservePlayer(); // Function ShooterGame.ObserverPlayerController.ModifyObservePlayer // (Final|Native|Protected) // @ game+0x39f7630
	void HandleFollowerViewTargetOptionsChanged(); // Function ShooterGame.ObserverPlayerController.HandleFollowerViewTargetOptionsChanged // (Final|Native|Protected) // @ game+0x39f7610
	void HandleFollowerViewTargetChanged(struct AObserverPlayerState* CurrentObserver, struct AObserverPlayerState* OldFollowTarget, struct AObserverPlayerState* NewFollowTarget); // Function ShooterGame.ObserverPlayerController.HandleFollowerViewTargetChanged // (Final|Native|Protected) // @ game+0x39f7500
	struct AObserverPlayerState* GetObserverPlayerState(); // Function ShooterGame.ObserverPlayerController.GetObserverPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f7110
	struct UObserverViewOptionsComponent* GetClientPredictedObserverViewOptionsComponent(); // Function ShooterGame.ObserverPlayerController.GetClientPredictedObserverViewOptionsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f6f20
	void ClientReceiveRemoteCharacterAndFreeCamUpdates(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates, struct TArray<struct FObserverPawnMove> FreeCamMoves); // Function ShooterGame.ObserverPlayerController.ClientReceiveRemoteCharacterAndFreeCamUpdates // (Net|Native|Event|Public|NetClient) // @ game+0x39f6dd0
	void ClientReceiveFreeCamUpdates(struct TArray<struct FObserverPawnMove> FreeCamMoves); // Function ShooterGame.ObserverPlayerController.ClientReceiveFreeCamUpdates // (Net|Native|Event|Public|NetClient) // @ game+0x39f6d20
	void ClientHandleInvalidViewTarget(); // Function ShooterGame.ObserverPlayerController.ClientHandleInvalidViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x39f6cf0
	void ClearCinematicCameraFlag(); // Function ShooterGame.ObserverPlayerController.ClearCinematicCameraFlag // (Final|Native|Public) // @ game+0x39f6cd0
	void CancelModifyObservePlayer(); // Function ShooterGame.ObserverPlayerController.CancelModifyObservePlayer // (Final|Native|Protected) // @ game+0x39f6cb0
	void AuthNotifySubscribersOfViewTargetChange(); // Function ShooterGame.ObserverPlayerController.AuthNotifySubscribersOfViewTargetChange // (Final|Native|Public) // @ game+0x2024060
	void AuthClearStateOnSpectateSpecific(); // Function ShooterGame.ObserverPlayerController.AuthClearStateOnSpectateSpecific // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.LiveObserverPlayerController
// Size: 0xab8 (Inherited: 0xab8)
struct ALiveObserverPlayerController : AObserverPlayerController {
};

// Class ShooterGame.LiveStoryNPCActor
// Size: 0x3e0 (Inherited: 0x3d8)
struct ALiveStoryNPCActor : AActor {
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x3d8(0x08)
};

// Class ShooterGame.LocalePreferenceManager
// Size: 0xb8 (Inherited: 0x80)
struct ULocalePreferenceManager : UInitSystem {
	struct URiotProductManager* RiotProductManager; // 0x80(0x08)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x88(0x08)
	struct FString Locale; // 0x90(0x10)
	struct TArray<struct FString> AvailableLocales; // 0xa0(0x10)
	bool bIsInitalized; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	void SetRiotClientLocale(struct FString LocaleValue); // Function ShooterGame.LocalePreferenceManager.SetRiotClientLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x3996bf0
	bool IsValid(); // Function ShooterGame.LocalePreferenceManager.IsValid // (Final|Native|Public|BlueprintCallable) // @ game+0x3996370
	struct FString GetRiotClientLocale(); // Function ShooterGame.LocalePreferenceManager.GetRiotClientLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x3996160
	struct FString GetDeviceLocale(); // Function ShooterGame.LocalePreferenceManager.GetDeviceLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x39960e0
	struct TArray<struct FString> GetAvailableLocales(); // Function ShooterGame.LocalePreferenceManager.GetAvailableLocales // (Final|Native|Public|BlueprintCallable) // @ game+0x3995fb0
};

// Class ShooterGame.LocationalEffectManagerComponent
// Size: 0x1a0 (Inherited: 0x178)
struct ULocationalEffectManagerComponent : UEffectManagerComponent {
	struct TArray<struct FPendingStartEffect> DeferredLocationalEffects; // 0x178(0x10)
	struct TArray<struct TWeakObjectPtr<struct AEffectContainer>> LocalOneShotEffects; // 0x188(0x10)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0x198(0x08)

	void ClientUpdateServerEffectsForManager(struct UEffectManagerComponent* Manager, struct TArray<struct FActiveEffectInfo> NewServerActiveEffects); // Function ShooterGame.LocationalEffectManagerComponent.ClientUpdateServerEffectsForManager // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x399fac0
	void ClientStopContinuousEffectAtLocation(struct FEffectID EffectID, float StopMovementTime); // Function ShooterGame.LocationalEffectManagerComponent.ClientStopContinuousEffectAtLocation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x399f9c0
	void ClientPlayOneShotEffectAtLocation(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, float StartMovementTime); // Function ShooterGame.LocationalEffectManagerComponent.ClientPlayOneShotEffectAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x399f550
	void ClientPlayContinuousEffectAtLocation(struct AEffectContainer* EffectContainer, struct FEffectID EffectID, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, float StartMovementTime); // Function ShooterGame.LocationalEffectManagerComponent.ClientPlayContinuousEffectAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x399f070
	void ClientCleanUpLocationalEffects(); // Function ShooterGame.LocationalEffectManagerComponent.ClientCleanUpLocationalEffects // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x37c24a0
};

// Class ShooterGame.LoginQueueManager
// Size: 0x148 (Inherited: 0x80)
struct ULoginQueueManager : UInitSystem {
	struct FMulticastInlineDelegate OnQueueUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnLoginReady; // 0x90(0x10)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct USessionService* SessionService; // 0xa8(0x08)
	struct URSOManager* RSOManager; // 0xb0(0x08)
	struct ULoginQueueService* LoginQueueService; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FString LoginToken; // 0xc8(0x10)
	struct FString QueueToken; // 0xd8(0x10)
	struct FLoginQueueQueueToken QueueTokenInfo; // 0xe8(0x18)
	struct FString RegionOverride; // 0x100(0x10)
	char pad_110[0x38]; // 0x110(0x38)

	bool IsQueued(); // Function ShooterGame.LoginQueueManager.IsQueued // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x399fe30
	bool IsLoginReady(); // Function ShooterGame.LoginQueueManager.IsLoginReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x399fe00
	int32_t GetLoginQueueWaitSeconds(); // Function ShooterGame.LoginQueueManager.GetLoginQueueWaitSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x399fcc0
	int32_t GetLoginQueuePosition(); // Function ShooterGame.LoginQueueManager.GetLoginQueuePosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x399fc90
	struct ULoginQueueManager* GetLoginQueueManager(struct UObject* WorldContextObject); // Function ShooterGame.LoginQueueManager.GetLoginQueueManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x399fc00
};

// Class ShooterGame.LoginQueueService
// Size: 0x38 (Inherited: 0x30)
struct ULoginQueueService : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.Look2AnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct ULook2AnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.LookAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct ULookAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.MainMenuCheatManager
// Size: 0x90 (Inherited: 0x90)
struct UMainMenuCheatManager : UAresCheatManagerBase {

	void UnlockAllTotems(); // Function ShooterGame.MainMenuCheatManager.UnlockAllTotems // (Final|Exec|Native|Private) // @ game+0x39a0b30
	void UnlockAllSprays(); // Function ShooterGame.MainMenuCheatManager.UnlockAllSprays // (Final|Exec|Native|Private) // @ game+0x39a0b30
	void UnlockAllSkins(); // Function ShooterGame.MainMenuCheatManager.UnlockAllSkins // (Final|Exec|Native|Private) // @ game+0x39a0b30
	void UnlockAllPlayerTitles(); // Function ShooterGame.MainMenuCheatManager.UnlockAllPlayerTitles // (Final|Exec|Native|Private) // @ game+0x39a0b30
	void UnlockAllPlayerCards(); // Function ShooterGame.MainMenuCheatManager.UnlockAllPlayerCards // (Final|Exec|Native|Private) // @ game+0x39a0b30
	void UnlockAllBuddies(); // Function ShooterGame.MainMenuCheatManager.UnlockAllBuddies // (Final|Exec|Native|Private) // @ game+0x39a0b30
	void ShowSecretUserWidget(struct FString WidgetPath); // Function ShooterGame.MainMenuCheatManager.ShowSecretUserWidget // (Final|Exec|Native|Private) // @ game+0x36d6150
	void SetPatchNoteVersion(struct FString Override); // Function ShooterGame.MainMenuCheatManager.SetPatchNoteVersion // (Final|Exec|Native|Private) // @ game+0x39a0920
	void SetHideAccountLevel(bool bHideAccountLevel); // Function ShooterGame.MainMenuCheatManager.SetHideAccountLevel // (Final|Exec|Native|Private) // @ game+0x39a0800
	void SetGamePodOverride(struct FString GamePodOverride); // Function ShooterGame.MainMenuCheatManager.SetGamePodOverride // (Final|Exec|Native|Private) // @ game+0x39a0750
	void SetForceGameProcessing(int32_t ForceGameProcessing); // Function ShooterGame.MainMenuCheatManager.SetForceGameProcessing // (Final|Exec|Native|Private) // @ game+0x39a06c0
	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.MainMenuCheatManager.SetConfigurationValue // (Final|Exec|Native|Private) // @ game+0x3967950
	void SetActiveSeason(struct FString Override); // Function ShooterGame.MainMenuCheatManager.SetActiveSeason // (Final|Exec|Native|Private) // @ game+0x39a0610
	void SetActiveEvent(struct FString Override); // Function ShooterGame.MainMenuCheatManager.SetActiveEvent // (Final|Exec|Native|Private) // @ game+0x39a0560
	void SetAccountLevel(int32_t Level); // Function ShooterGame.MainMenuCheatManager.SetAccountLevel // (Final|Exec|Native|Private) // @ game+0x39a04d0
	void ResetPatchNotes(); // Function ShooterGame.MainMenuCheatManager.ResetPatchNotes // (Final|Exec|Native|Private) // @ game+0x39a04b0
	void ResetEsportsHubRefreshTimer(); // Function ShooterGame.MainMenuCheatManager.ResetEsportsHubRefreshTimer // (Final|Exec|Native|Private) // @ game+0x2024060
	void PushDebugNotification(int32_t ActionCount); // Function ShooterGame.MainMenuCheatManager.PushDebugNotification // (Final|Exec|Native|Private) // @ game+0x39a01e0
	void PackmanSetThreadEnabled(int32_t Enabled); // Function ShooterGame.MainMenuCheatManager.PackmanSetThreadEnabled // (Final|Exec|Native|Private) // @ game+0x3635550
	void PackmanSetThreadDelay(int32_t NewMilliseconds); // Function ShooterGame.MainMenuCheatManager.PackmanSetThreadDelay // (Final|Exec|Native|Private) // @ game+0x3635550
	void PackmanSetReencryptMaximum(int32_t Count); // Function ShooterGame.MainMenuCheatManager.PackmanSetReencryptMaximum // (Final|Exec|Native|Private) // @ game+0x3635550
	void PackmanResetReencryptCount(); // Function ShooterGame.MainMenuCheatManager.PackmanResetReencryptCount // (Final|Exec|Native|Private) // @ game+0x2024060
	void PackmanReencryptNow(int32_t PercentageOfPages); // Function ShooterGame.MainMenuCheatManager.PackmanReencryptNow // (Final|Exec|Native|Private) // @ game+0x3635550
	void OverrideRecruitmentEventDates(int32_t StartDateSecondsOffset, int32_t EndDateSecondsOffset); // Function ShooterGame.MainMenuCheatManager.OverrideRecruitmentEventDates // (Final|Exec|Native|Private) // @ game+0x39a0110
	void OverrideBodegaOfferStartDate(struct FString StoreOfferId, int32_t SecondsFromNow); // Function ShooterGame.MainMenuCheatManager.OverrideBodegaOfferStartDate // (Final|Exec|Native|Private) // @ game+0x373ab90
	void NavigateToRelativeUrl(struct FString InUrl, struct FString InParameters); // Function ShooterGame.MainMenuCheatManager.NavigateToRelativeUrl // (Final|Exec|Native|Private) // @ game+0x39a0000
	void Logout(); // Function ShooterGame.MainMenuCheatManager.Logout // (Final|Exec|Native|Private) // @ game+0x2024060
	void LogNotifications(); // Function ShooterGame.MainMenuCheatManager.LogNotifications // (Final|Exec|Native|Private) // @ game+0x399ffe0
	void LoadDebugPaymentsURL(struct FString DebugURL); // Function ShooterGame.MainMenuCheatManager.LoadDebugPaymentsURL // (Final|Exec|Native|Private) // @ game+0x36d6150
	void LetsGoToNorCal(); // Function ShooterGame.MainMenuCheatManager.LetsGoToNorCal // (Final|Exec|Native|Private) // @ game+0x2024060
	void JoinMatchOnPlayer(struct FString SubjectToJoin, struct FString TeamID, struct FString Agents); // Function ShooterGame.MainMenuCheatManager.JoinMatchOnPlayer // (Final|Exec|Native|Private|Const) // @ game+0x399fe60
	void JoinMatch(struct FString MatchID, struct FString TeamID, struct FString Agents); // Function ShooterGame.MainMenuCheatManager.JoinMatch // (Final|Exec|Native|Private|Const) // @ game+0x399fe60
	void FetchChatFriendsMetadata(); // Function ShooterGame.MainMenuCheatManager.FetchChatFriendsMetadata // (Final|Exec|Native|Private) // @ game+0x2024060
	void DemoPlayLastMatch(int32_t Num); // Function ShooterGame.MainMenuCheatManager.DemoPlayLastMatch // (Final|Exec|Native|Private) // @ game+0x3635550
	void ClearEntitlementsLocally(); // Function ShooterGame.MainMenuCheatManager.ClearEntitlementsLocally // (Final|Exec|Native|Private) // @ game+0x2024060
	void ClearDisabledProxyAddresses(); // Function ShooterGame.MainMenuCheatManager.ClearDisabledProxyAddresses // (Final|Exec|Native|Private) // @ game+0x2024060
	void AddDisabledProxyAddress(struct FString ProxyPath); // Function ShooterGame.MainMenuCheatManager.AddDisabledProxyAddress // (Final|Exec|Native|Private) // @ game+0x36d6150
};

// Class ShooterGame.MainMenuGameMode
// Size: 0x4c8 (Inherited: 0x4c8)
struct AMainMenuGameMode : AGameMode {
};

// Class ShooterGame.MainMenuModalDialogueWidget
// Size: 0x2d0 (Inherited: 0x2c8)
struct UMainMenuModalDialogueWidget : UUserWidget {
	struct UMainMenuQueuedDialogueModel* DialogueModel; // 0x2c8(0x08)

	void SetViewContext(struct UMainMenuQueuedDialogueModel* InDialogueModel); // Function ShooterGame.MainMenuModalDialogueWidget.SetViewContext // (Final|Native|Public|BlueprintCallable) // @ game+0x39a09d0
	void OnViewContextSet(); // Function ShooterGame.MainMenuModalDialogueWidget.OnViewContextSet // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void HandleDialogueDeclined(); // Function ShooterGame.MainMenuModalDialogueWidget.HandleDialogueDeclined // (Final|Native|Public|BlueprintCallable) // @ game+0x399fd60
	void HandleDialogueCreated(); // Function ShooterGame.MainMenuModalDialogueWidget.HandleDialogueCreated // (Final|Native|Public|BlueprintCallable) // @ game+0x399fd40
	void HandleDialogueAccepted(); // Function ShooterGame.MainMenuModalDialogueWidget.HandleDialogueAccepted // (Final|Native|Public|BlueprintCallable) // @ game+0x399fd20
};

// Class ShooterGame.MainMenuParentWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UMainMenuParentWidget : UUserWidget {
	struct UMainMenuViewModel* ViewModel; // 0x2c8(0x08)
	struct UMainMenuViewController* ViewController; // 0x2d0(0x08)

	void SetViewContext(struct UMainMenuViewModel* InViewModel, struct UMainMenuViewController* InViewController); // Function ShooterGame.MainMenuParentWidget.SetViewContext // (Final|Native|Public) // @ game+0x39a0a60
	void OnViewContextSet(); // Function ShooterGame.MainMenuParentWidget.OnViewContextSet // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.MainMenuStateV2
// Size: 0xc0 (Inherited: 0x90)
struct UMainMenuStateV2 : UStaticGameFlowState {
	struct FMulticastInlineDelegate OnMatchmakingMatchFoundChanged; // 0x90(0x10)
	char pad_A0[0x18]; // 0xa0(0x18)
	struct UPartyManager* PartyManager; // 0xb8(0x08)

	float GetMatchmakingMatchFoundDurationSeconds(); // Function ShooterGame.MainMenuStateV2.GetMatchmakingMatchFoundDurationSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x399fcf0
};

// Class ShooterGame.MainMenuTelemetryManager
// Size: 0x48 (Inherited: 0x30)
struct UMainMenuTelemetryManager : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x38(0x08)
	struct UUITelemetryManager* UITelemetryManager; // 0x40(0x08)

	void RecordViewStateChange(struct UObject* WorldContextObject, enum class EAresMainMenuTopNavigationState CurrentState, enum class EAresMainMenuTopNavigationState NewState); // Function ShooterGame.MainMenuTelemetryManager.RecordViewStateChange // (Final|Native|Public) // @ game+0x39a0300
	bool RecordChangeForState(enum class EAresMainMenuTopNavigationState State); // Function ShooterGame.MainMenuTelemetryManager.RecordChangeForState // (Final|Native|Private|Const) // @ game+0x39a0270
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.MainMenuTelemetryManager.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x399fd80
};

// Class ShooterGame.MainMenuViewController
// Size: 0x90 (Inherited: 0x30)
struct UMainMenuViewController : UGetOuterWorldObject {
	struct UMainMenuViewModel* ViewModel; // 0x30(0x08)
	struct UAresClientGameInstance* AresClientGameInstance; // 0x38(0x08)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct UUserWidget*> StateWidgets; // 0x40(0x50)

	struct UUserWidget* RequestViewStateChange(enum class EAresMainMenuTopNavigationState NewState); // Function ShooterGame.MainMenuViewController.RequestViewStateChange // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x39a0410
	void LeavePrelude(); // Function ShooterGame.MainMenuViewController.LeavePrelude // (Final|Native|Public|BlueprintCallable) // @ game+0x399ffc0
	void InitCompleted(); // Function ShooterGame.MainMenuViewController.InitCompleted // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EnterPrelude(); // Function ShooterGame.MainMenuViewController.EnterPrelude // (Final|Native|Public|BlueprintCallable) // @ game+0x399fbe0
};

// Class ShooterGame.NavBarMenu
// Size: 0x30 (Inherited: 0x30)
struct UNavBarMenu : UInterface {

	bool HandleBackRequest(); // Function ShooterGame.NavBarMenu.HandleBackRequest // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct FAresMainMenuNavBarData GetNavBarData(); // Function ShooterGame.NavBarMenu.GetNavBarData // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x40572e0
};

// Class ShooterGame.MainMenuQueuedDialogueModel
// Size: 0x88 (Inherited: 0x30)
struct UMainMenuQueuedDialogueModel : UObject {
	struct UMainMenuModalDialogueWidget* WidgetClass; // 0x30(0x08)
	struct FDelegate OnDialogueCreated; // 0x38(0x14)
	struct FDelegate OnDialogueAccepted; // 0x4c(0x14)
	struct FDelegate OnDialogueDeclined; // 0x60(0x14)
	char pad_74[0x4]; // 0x74(0x04)
	struct FMulticastInlineDelegate OnDialogueCompleted; // 0x78(0x10)
};

// Class ShooterGame.MainMenuViewModel
// Size: 0x78 (Inherited: 0x30)
struct UMainMenuViewModel : UObject {
	enum class EAresMainMenuTopNavigationState MenuState; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UUserWidget* MenuWidget; // 0x38(0x08)
	bool bInPrelude; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct FMulticastInlineDelegate OnNavigationStateChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnNavigationStateRepeated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnInPreludeChanged; // 0x68(0x10)

	void SetInPrelude(bool bNewInPrelude); // Function ShooterGame.MainMenuViewModel.SetInPrelude // (Final|Native|Public) // @ game+0x39a0890
	bool IsInPrelude(); // Function ShooterGame.MainMenuViewModel.IsInPrelude // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x37ba510
	enum class EAresMainMenuTopNavigationState GetNavigationState(); // Function ShooterGame.MainMenuViewModel.GetNavigationState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2556b40
	struct UUserWidget* GetCurrentStateWidget(); // Function ShooterGame.MainMenuViewModel.GetCurrentStateWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3861260
};

// Class ShooterGame.ShooterPlayerController
// Size: 0xc58 (Inherited: 0xa00)
struct AShooterPlayerController : AAresPlayerController {
	struct FVisualizeRestoreData VisualizeRestoreData; // 0xa00(0xa0)
	char pad_AA0[0x10]; // 0xaa0(0x10)
	bool bShowPossessedCharacterForDebugCharacterNetworking; // 0xab0(0x01)
	char pad_AB1[0x7]; // 0xab1(0x07)
	struct FMulticastInlineDelegate OnMountAutoZipline; // 0xab8(0x10)
	struct FMulticastInlineDelegate OnSuppressed; // 0xac8(0x10)
	struct FMulticastInlineDelegate PreTickPlayerInput; // 0xad8(0x10)
	struct FMulticastInlineDelegate OnSwapHeldInputDown; // 0xae8(0x10)
	uint64_t DebugSubscriptionFlags; // 0xaf8(0x08)
	struct FMulticastInlineDelegate OnCharacterRespawned; // 0xb00(0x10)
	char pad_B10[0x10]; // 0xb10(0x10)
	int32_t LastSmokeFrameID; // 0xb20(0x04)
	float CurrentSmokeOpacity; // 0xb24(0x04)
	struct UVoteControllerComponent* VoteControllerComponent; // 0xb28(0x08)
	struct UCopyCrosshairCommandComponent* CopyCrosshairCommandComponent; // 0xb30(0x08)
	struct FRateLimiter ShopScreenPurchaseRateLimiter; // 0xb38(0x30)
	struct FRateLimiter ShopScreenSellRateLimiter; // 0xb68(0x30)
	struct FRateLimiter ShopScreenRequestRateLimiter; // 0xb98(0x30)
	char pad_BC8[0x8]; // 0xbc8(0x08)
	struct UViewerFogOfWarComponent* FogOfWarComponent; // 0xbd0(0x08)
	struct USceneComponent* LookAtTarget; // 0xbd8(0x08)
	struct FVector2D LookAtRotationalExtents; // 0xbe0(0x08)
	char pad_BE8[0x40]; // 0xbe8(0x40)
	struct FRateLimiter DiagnosticsRateLimiter; // 0xc28(0x30)

	void VisualizeUmbraObjectTypesStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraObjectTypesStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void VisualizeUmbraObjectTypesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraObjectTypesFunc // (Final|Native|Private|HasOutParms) // @ game+0x3baef90
	void VisualizeUmbraBackfacesStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraBackfacesStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void VisualizeUmbraBackfacesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraBackfacesFunc // (Final|Native|Private|HasOutParms) // @ game+0x3baef90
	void VisualizeSurfacesWeaponStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeSurfacesWeaponStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void VisualizeSurfacesPlayerStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeSurfacesPlayerStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void VisualizeSurfacesFunc(enum class EVisualizeSurfacesFilter Filter, struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeSurfacesFunc // (Final|Native|Private|HasOutParms) // @ game+0x3baf0b0
	void VisualizeMipLevelsStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeMipLevelsStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void VisualizeMipLevelsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeMipLevelsFunc // (Final|Native|Private|HasOutParms) // @ game+0x3baef90
	void TrySprayV2(int32_t SlotIndex); // Function ShooterGame.ShooterPlayerController.TrySprayV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x3baef00
	void TryInspectWeapon(); // Function ShooterGame.ShooterPlayerController.TryInspectWeapon // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void ToggleVirtualCursor(bool bUseVirtualCursor); // Function ShooterGame.ShooterPlayerController.ToggleVirtualCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x3baee70
	void SpawnActorTestCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.SpawnActorTestCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void SetPlayerPositionAndRotationCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.SetPlayerPositionAndRotationCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void ServerTrySprayV2Internal(int32_t SlotIndex); // Function ShooterGame.ShooterPlayerController.ServerTrySprayV2Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3baede0
	void ServerSetTeam(struct FString TeamName); // Function ShooterGame.ShooterPlayerController.ServerSetTeam // (Final|Native|Public) // @ game+0x36d6150
	void ServerSetDesiredClassForNextRound(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerController.ServerSetDesiredClassForNextRound // (Final|Native|Public|BlueprintCallable) // @ game+0x36d6150
	void ServerSetDesiredClassAndRespawn(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerController.ServerSetDesiredClassAndRespawn // (Final|Native|Public|BlueprintCallable) // @ game+0x36d6150
	void ServerSetDesiredClass(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerController.ServerSetDesiredClass // (Final|Native|Public) // @ game+0x36d6150
	void ServerSell(struct AAresItem* ItemToSell, enum class EAresItemSlot TargetSlot, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerController.ServerSell // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3baecd0
	void ServerRequestSetMatchTimeoutCheat(bool bStartTimeout, float Duration); // Function ShooterGame.ShooterPlayerController.ServerRequestSetMatchTimeoutCheat // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3baebf0
	void ServerRequestPauseMatchTimerCheat(bool bWantsToPause); // Function ShooterGame.ShooterPlayerController.ServerRequestPauseMatchTimerCheat // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3baeb50
	void ServerRequestNonLookingPickup(); // Function ShooterGame.ShooterPlayerController.ServerRequestNonLookingPickup // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x39f6cf0
	void ServerRequestLiveDiagnostics(); // Function ShooterGame.ShooterPlayerController.ServerRequestLiveDiagnostics // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3baeb20
	void ServerRemove(struct AAresItem* ItemToRemove, enum class EAresItemSlot TargetSlot, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerController.ServerRemove // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3baea10
	void ServerPurchase(struct AAresItem* ItemToPurchase, enum class EAresItemSlot TargetSlot, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerController.ServerPurchase // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3bae900
	void ServerNotifyReconnectTelemetryDetails(enum class EReconnectTelemetryType ReconnectType, struct FString Context); // Function ShooterGame.ShooterPlayerController.ServerNotifyReconnectTelemetryDetails // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3bae800
	void ServerMarkPreDisconnectReason(enum class EPlayerDisconnectReason DisconnectReason, struct FString Context); // Function ShooterGame.ShooterPlayerController.ServerMarkPreDisconnectReason // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3bae700
	void ServerMakeGunRequest(struct UAresPurchasableEquippable* PurchasableToRequest); // Function ShooterGame.ShooterPlayerController.ServerMakeGunRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bae670
	void ServerGrantMoney(int32_t Amount); // Function ShooterGame.ShooterPlayerController.ServerGrantMoney // (Final|Native|Public|BlueprintCallable) // @ game+0x3635550
	void ServerFulfillOtherPlayerGunRequest(struct UAresPurchasableEquippable* PurchasableToFulfill, struct AShooterPlayerState* FulfilleePlayerState); // Function ShooterGame.ShooterPlayerController.ServerFulfillOtherPlayerGunRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bae590
	void ServerCancelGunRequest(struct UAresPurchasableEquippable* PurchasableToCancel); // Function ShooterGame.ShooterPlayerController.ServerCancelGunRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bae500
	void SellCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.SellCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void RestoreVisualizeMaterials(); // Function ShooterGame.ShooterPlayerController.RestoreVisualizeMaterials // (Final|Native|Private) // @ game+0x2024060
	void Respawn(); // Function ShooterGame.ShooterPlayerController.Respawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bae4e0
	void RemoveSubframeInputAction(struct FName ActionName); // Function ShooterGame.ShooterPlayerController.RemoveSubframeInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x3bae440
	void RegisterLiveDiagnosticsSettingsBindings(); // Function ShooterGame.ShooterPlayerController.RegisterLiveDiagnosticsSettingsBindings // (Final|Native|Private) // @ game+0x3bae420
	void ReapplyBindingsOnCharacterChange(struct AShooterCharacter* NewValue); // Function ShooterGame.ShooterPlayerController.ReapplyBindingsOnCharacterChange // (Final|Native|Private) // @ game+0x3bae390
	void PurchaseCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.PurchaseCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void PrintSafeZones(); // Function ShooterGame.ShooterPlayerController.PrintSafeZones // (Final|Exec|Native|Public) // @ game+0x3bae370
	void OnRequestDestroyWindow(); // Function ShooterGame.ShooterPlayerController.OnRequestDestroyWindow // (Final|Native|Protected) // @ game+0x3bae350
	void OnQuitGameInstance(bool bForceImmediate); // Function ShooterGame.ShooterPlayerController.OnQuitGameInstance // (Final|Native|Protected) // @ game+0x3bae2c0
	void OnPlatformUnhealthy(enum class EPlatformFaultReason& Reason); // Function ShooterGame.ShooterPlayerController.OnPlatformUnhealthy // (Final|Native|Protected|HasOutParms) // @ game+0x3bae230
	void OnLiveDiagnosticsSettingChanged(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ShooterPlayerController.OnLiveDiagnosticsSettingChanged // (Final|Native|Private) // @ game+0x3bae110
	void OnCoachInitialized(); // Function ShooterGame.ShooterPlayerController.OnCoachInitialized // (Final|Native|Protected) // @ game+0x3bae0f0
	bool IsRapidMapPingEnabled(); // Function ShooterGame.ShooterPlayerController.IsRapidMapPingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	bool IsCoach(); // Function ShooterGame.ShooterPlayerController.IsCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bae0c0
	void GrantPurchasableCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.GrantPurchasableCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void GrantEquippableCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.GrantEquippableCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	struct UVoteControllerComponent* GetVoteControllerComponent(); // Function ShooterGame.ShooterPlayerController.GetVoteControllerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bae090
	struct TArray<struct AShooterPlayerController*> GetTeammates(); // Function ShooterGame.ShooterPlayerController.GetTeammates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bad410
	struct AShooterPlayerState* GetShooterPlayerState(); // Function ShooterGame.ShooterPlayerController.GetShooterPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bae060
	void GetPlayerPositionAndRotationCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.GetPlayerPositionAndRotationCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x3badf50
	struct AOwnerExclusivePlayerInfo* GetOwnerExclusivePlayerInfo(); // Function ShooterGame.ShooterPlayerController.GetOwnerExclusivePlayerInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3badf20
	float GetMouseSensitivity(); // Function ShooterGame.ShooterPlayerController.GetMouseSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3badef0
	void GetDefaultEquipKeyForItem(enum class EAresItemSlot ItemSlot, int32_t SlotIndex, struct FKey& OutKey); // Function ShooterGame.ShooterPlayerController.GetDefaultEquipKeyForItem // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3badd80
	struct UCopyCrosshairCommandComponent* GetCopyCrosshairCommandComponent(); // Function ShooterGame.ShooterPlayerController.GetCopyCrosshairCommandComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3badd50
	void DumpLiveDiagnostics(); // Function ShooterGame.ShooterPlayerController.DumpLiveDiagnostics // (Final|Native|Public) // @ game+0x3badd30
	void DebugToggleRapidMapPingFunc(struct UWorld* World); // Function ShooterGame.ShooterPlayerController.DebugToggleRapidMapPingFunc // (Final|Native|Static|Private) // @ game+0x372eb00
	void DebugSubscriptionHelper(enum class EDebugSubscription DebugSubscription, struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.DebugSubscriptionHelper // (Final|Native|Static|Private|HasOutParms) // @ game+0x3badbd0
	void DebugSubscriptionFlagsChanged(); // Function ShooterGame.ShooterPlayerController.DebugSubscriptionFlagsChanged // (Final|Native|Private) // @ game+0x2024060
	void DebugMessage(struct FString Message); // Function ShooterGame.ShooterPlayerController.DebugMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3badb20
	void CreateVirtualCursor(); // Function ShooterGame.ShooterPlayerController.CreateVirtualCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void ClientUpdateCalloutVolumes(struct AShooterCharacter* UpdateCharacter, struct FName TeamName, struct FCharacterReveal RevealData); // Function ShooterGame.ShooterPlayerController.ClientUpdateCalloutVolumes // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3bad9c0
	void ClientReceiveServerLiveDiagnostics(struct FString ServerDiagnosticData); // Function ShooterGame.ShooterPlayerController.ClientReceiveServerLiveDiagnostics // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3bad910
	void ClientNotifyKilledEnemy(struct AShooterCharacter* KilledCharacter, int32_t MultikillLevel); // Function ShooterGame.ShooterPlayerController.ClientNotifyKilledEnemy // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3bad830
	void ClientGameModeCheatDisplayMessage(struct FString Message); // Function ShooterGame.ShooterPlayerController.ClientGameModeCheatDisplayMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3bad780
	void ClientForcePlayerLookAt(struct USceneComponent* NewLookAtTarget, float MaxPitchOffset, float MaxYawOffset); // Function ShooterGame.ShooterPlayerController.ClientForcePlayerLookAt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3bad670
	void ClientClearPlayerLookAt(); // Function ShooterGame.ShooterPlayerController.ClientClearPlayerLookAt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3bad640
	bool CanOpenShop(); // Function ShooterGame.ShooterPlayerController.CanOpenShop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bad610
	void AutomationSimulateInputUp(enum class EAresAutomationInput Input); // Function ShooterGame.ShooterPlayerController.AutomationSimulateInputUp // (Final|Native|Public|BlueprintCallable) // @ game+0x3bad590
	void AutomationSimulateInputDown(enum class EAresAutomationInput Input); // Function ShooterGame.ShooterPlayerController.AutomationSimulateInputDown // (Final|Native|Public|BlueprintCallable) // @ game+0x3bad510
	void AutomationSimulateInput(enum class EAresAutomationInput Input); // Function ShooterGame.ShooterPlayerController.AutomationSimulateInput // (Final|Native|Public|BlueprintCallable) // @ game+0x3bad490
	void AuthSuicide(); // Function ShooterGame.ShooterPlayerController.AuthSuicide // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthResetPlayerController(); // Function ShooterGame.ShooterPlayerController.AuthResetPlayerController // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthPossessSpawnedCharacter(); // Function ShooterGame.ShooterPlayerController.AuthPossessSpawnedCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthPlayerControllerCheat(struct FString CheatString); // Function ShooterGame.ShooterPlayerController.AuthPlayerControllerCheat // (Final|Native|Public) // @ game+0x2024240
	struct TArray<struct AShooterPlayerController*> AuthGetTeammates(); // Function ShooterGame.ShooterPlayerController.AuthGetTeammates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bad410
	void ApplyActionBindingsCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.ApplyActionBindingsCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void AimAssistCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.AimAssistCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	void AddSubframeInputAction(struct FName ActionName); // Function ShooterGame.ShooterPlayerController.AddSubframeInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x3bad370
};

// Class ShooterGame.MannequinPlayerControllerBase
// Size: 0xc58 (Inherited: 0xc58)
struct AMannequinPlayerControllerBase : AShooterPlayerController {

	void MannequinPlayerInit(struct AShooterCharacter* ExecutingCharacter, struct TArray<struct FString>& Params); // Function ShooterGame.MannequinPlayerControllerBase.MannequinPlayerInit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void DestroyPlayer(); // Function ShooterGame.MannequinPlayerControllerBase.DestroyPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x39a8060
};

// Class ShooterGame.ManualNumericProgressModel
// Size: 0x88 (Inherited: 0x88)
struct UManualNumericProgressModel : UManualNumericProgressModelBase {

	void SetProgressValueMaximum(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressValueMaximum // (Final|Native|Public|BlueprintCallable) // @ game+0x39a7d10
	void SetProgressValueCurrent(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressValueCurrent // (Final|Native|Public|BlueprintCallable) // @ game+0x39a7c80
	void SetProgressValue(struct FNumericProgressValue& NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39a7be0
	void SetProgressState(struct FProgressModelState NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressState // (Final|Native|Public|BlueprintCallable) // @ game+0x39a7b60
	void CompleteProgress(); // Function ShooterGame.ManualNumericProgressModel.CompleteProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x39a7b40
	void ClearProgressValue(); // Function ShooterGame.ManualNumericProgressModel.ClearProgressValue // (Final|Native|Public|BlueprintCallable) // @ game+0x39a7b20
};

// Class ShooterGame.MapLoadModel
// Size: 0x78 (Inherited: 0x30)
struct UMapLoadModel : UObject {
	char pad_30[0x48]; // 0x30(0x48)

	void Update(); // Function ShooterGame.MapLoadModel.Update // (Final|Native|Private) // @ game+0x39a9000
	void HandleViewTargetStateChanged(struct AActor* OldViewTarget, struct AActor* NewViewTarget, struct FViewTargetTransitionParams& TransitionParams); // Function ShooterGame.MapLoadModel.HandleViewTargetStateChanged // (Final|Native|Private|HasOutParms) // @ game+0x39a84e0
	void HandleMainMenuViewControllerInit(); // Function ShooterGame.MapLoadModel.HandleMainMenuViewControllerInit // (Final|Native|Private) // @ game+0x39a84c0
	void HandleGamePhaseChanged(enum class EAresGamePhase NewPhase, int32_t RoundNumber); // Function ShooterGame.MapLoadModel.HandleGamePhaseChanged // (Final|Native|Private) // @ game+0x39a83f0
	void HandleAresPlayerStateChanged(struct AAresPlayerStateBase* NewValue); // Function ShooterGame.MapLoadModel.HandleAresPlayerStateChanged // (Final|Native|Private) // @ game+0x39a8360
};

// Class ShooterGame.MapMarkupRoomInfoComponent
// Size: 0x138 (Inherited: 0xe8)
struct UMapMarkupRoomInfoComponent : UActorComponent {
	struct TSet<struct AShooterCharacter*> PathThroughCharacters; // 0xe8(0x50)
};

// Class ShooterGame.MapPingComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UMapPingComponent : UActorComponent {
	struct TArray<struct FActivePingData> ActivePingData; // 0xe8(0x10)

	bool ValidateNewPing(struct FMapPingData& PingData, struct FVector& Location, struct TArray<struct FActivePingData>& ActivePings, struct FEffectData& NewPingEffectData); // Function ShooterGame.MapPingComponent.ValidateNewPing // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x39a9020
	void OnNewPing(enum class EMapPingType PingType, int32_t PingIndex, struct FVector& Location); // Function ShooterGame.MapPingComponent.OnNewPing // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	bool MapPingValid(struct FVector& Location, enum class EMapPingType PingType, int32_t PingIndex); // Function ShooterGame.MapPingComponent.MapPingValid // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39a8a50
	struct TArray<struct FMapPingData> GetMegaMapPings(); // Function ShooterGame.MapPingComponent.GetMegaMapPings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39a8270
	struct TArray<struct FMapPingData> GetFirstPersonPings(); // Function ShooterGame.MapPingComponent.GetFirstPersonPings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39a8110
	void CreateMapPing(struct FVector Location, enum class EMapPingType PingType, int32_t PingIndex); // Function ShooterGame.MapPingComponent.CreateMapPing // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|BlueprintCallable|NetValidate) // @ game+0x39a7e90
	void CancelPing(struct FActivePingData& PingData); // Function ShooterGame.MapPingComponent.CancelPing // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39a7da0
};

// Class ShooterGame.MapSelectScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct UMapSelectScreen : UDesignableUserWidget {
};

// Class ShooterGame.MapTargetingStateComponent
// Size: 0x518 (Inherited: 0x3d0)
struct UMapTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnMapLocationSelected; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnInvalidMapLocation; // 0x3e0(0x10)
	enum class ETargettingRotation TransformRotation; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
	struct UClickableMapWidget* MapInteractionClass; // 0x3f8(0x08)
	struct FName PrimaryInputActionName; // 0x400(0x0c)
	struct FName SecondaryInputActionName; // 0x40c(0x0c)
	bool bAutoAddToPlayerScreen; // 0x418(0x01)
	bool bCloseMapOnSilence; // 0x419(0x01)
	char pad_41A[0x2]; // 0x41a(0x02)
	float ToggleZoomScale; // 0x41c(0x04)
	float MapRange; // 0x420(0x04)
	bool bLimitCastRange; // 0x424(0x01)
	bool bCanPanMap; // 0x425(0x01)
	char pad_426[0x2]; // 0x426(0x02)
	float PanRadius; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct UCurveFloat* MapPanSpeedMultiplierCurve; // 0x430(0x08)
	bool bCanZoom; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct UCurveFloat* MapPanSpeedMultiplierZoomedInCurve; // 0x440(0x08)
	bool bHideMinimap; // 0x448(0x01)
	char pad_449[0x7]; // 0x449(0x07)
	struct UClickableMapWidget* MapInteractionWidget; // 0x450(0x08)
	bool bAwaitingServerValidation; // 0x458(0x01)
	char pad_459[0x3]; // 0x459(0x03)
	struct TWeakObjectPtr<struct AAresPlayerController> MapOpenController; // 0x45c(0x08)
	char pad_464[0x4]; // 0x464(0x04)
	struct UStateComponent* MapCloseState; // 0x468(0x08)
	struct AAresPlayerController* InteractingController; // 0x470(0x08)
	struct UInputComponent* InputComponent; // 0x478(0x08)
	struct FVector2D LocalHitLocation; // 0x480(0x08)
	struct FVector2D LastLocalHitLocation; // 0x488(0x08)
	char pad_490[0x88]; // 0x490(0x88)

	void WidgetSetup(struct UClickableMapWidget* Widget); // Function ShooterGame.MapTargetingStateComponent.WidgetSetup // (Native|Event|Protected|BlueprintEvent) // @ game+0x39a92f0
	void SetWidget(struct UClickableMapWidget* Widget); // Function ShooterGame.MapTargetingStateComponent.SetWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x39a8f70
	void SetOutputContext(struct FTransform& MapTransform); // Function ShooterGame.MapTargetingStateComponent.SetOutputContext // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x39a8e90
	void SetMapCloseState(struct UStateComponent* State); // Function ShooterGame.MapTargetingStateComponent.SetMapCloseState // (Final|Native|Public|BlueprintCallable) // @ game+0x39a8e00
	void ServerValidateMapClick(struct TArray<struct FVector> MapLocations); // Function ShooterGame.MapTargetingStateComponent.ServerValidateMapClick // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x39a8d50
	void ServerMapClosed(); // Function ShooterGame.MapTargetingStateComponent.ServerMapClosed // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3671a00
	void RightMouseButtonReleased(); // Function ShooterGame.MapTargetingStateComponent.RightMouseButtonReleased // (Final|Native|Private) // @ game+0x39a8d30
	void RightMouseButtonPressed(); // Function ShooterGame.MapTargetingStateComponent.RightMouseButtonPressed // (Final|Native|Private) // @ game+0x39a8d10
	void OnAbilitySilenced(); // Function ShooterGame.MapTargetingStateComponent.OnAbilitySilenced // (Final|Native|Private) // @ game+0x39a8cc0
	void MulticastRespondToValidMapClick(struct TArray<struct FVector> WorldLocation); // Function ShooterGame.MapTargetingStateComponent.MulticastRespondToValidMapClick // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x39a8c10
	void MulticastInvalidMapClick(struct FVector WorldLocation); // Function ShooterGame.MapTargetingStateComponent.MulticastInvalidMapClick // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x39a8b80
	bool MapLocationIsValid(struct FVector WorldLocation, struct FVector& UpdatedLocation); // Function ShooterGame.MapTargetingStateComponent.MapLocationIsValid // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x39a8950
	void LocationSelectWorld(struct FVector& MapLocation); // Function ShooterGame.MapTargetingStateComponent.LocationSelectWorld // (Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39a88c0
	void LocationSelectMultipleWorld(struct TArray<struct FVector>& MapLocations); // Function ShooterGame.MapTargetingStateComponent.LocationSelectMultipleWorld // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x39a8810
	void LeftMouseButtonReleased(); // Function ShooterGame.MapTargetingStateComponent.LeftMouseButtonReleased // (Final|Native|Private) // @ game+0x39a87f0
	void LeftMouseButtonPressed(); // Function ShooterGame.MapTargetingStateComponent.LeftMouseButtonPressed // (Final|Native|Private) // @ game+0x39a87d0
	bool IsActionBoundToKey(struct FName ActionName, struct FKey Key); // Function ShooterGame.MapTargetingStateComponent.IsActionBoundToKey // (Final|Native|Private) // @ game+0x39a8670
	void HandleZoomToggle(); // Function ShooterGame.MapTargetingStateComponent.HandleZoomToggle // (Final|Native|Private) // @ game+0x39a8620
	struct FVector2D GetMouseLocationOnWorldWidget(); // Function ShooterGame.MapTargetingStateComponent.GetMouseLocationOnWorldWidget // (Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x39a82f0
	struct TArray<struct FString> GetInputActionNamesForMaps(); // Function ShooterGame.MapTargetingStateComponent.GetInputActionNamesForMaps // (Final|Native|Protected|Const) // @ game+0x39a8190
	void FakeLocationClicked(struct FVector WorldLocation); // Function ShooterGame.MapTargetingStateComponent.FakeLocationClicked // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x372c930
	void ClientMapClosed(); // Function ShooterGame.MapTargetingStateComponent.ClientMapClosed // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x38b3b20
	void ClientCycleMapFloor(); // Function ShooterGame.MapTargetingStateComponent.ClientCycleMapFloor // (Final|Native|Private) // @ game+0x39a7e70
	void ClientCloseMap(); // Function ShooterGame.MapTargetingStateComponent.ClientCloseMap // (Final|Native|Public) // @ game+0x39a7e50
	void ClickMapLocations(struct TArray<struct FVector>& WorldLocations); // Function ShooterGame.MapTargetingStateComponent.ClickMapLocations // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x393f840
};

// Class ShooterGame.MassRewardsCeremonyUIData
// Size: 0xc0 (Inherited: 0x90)
struct UMassRewardsCeremonyUIData : UBaseContentUIData {
	struct FText UIScreenTitle; // 0x90(0x18)
	struct FText UIScreenSubtitle; // 0xa8(0x18)
};

// Class ShooterGame.MassRewardsCeremonyDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UMassRewardsCeremonyDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.MassRewardsManager
// Size: 0xb0 (Inherited: 0x80)
struct UMassRewardsManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UContentIndex* ContentIndex; // 0x90(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x98(0x08)
	struct UMassRewardsService* MassRewardsService; // 0xa0(0x08)
	struct UMassRewardViewModel* ViewModel; // 0xa8(0x08)

	struct UMassRewardViewModel* GetViewModel(); // Function ShooterGame.MassRewardsManager.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x380c2b0
	struct UMassRewardCeremonyViewModel* GetTestRankedCeremonyViewModel(); // Function ShooterGame.MassRewardsManager.GetTestRankedCeremonyViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x39a8330
	struct UMassRewardsManager* GET(struct UWorld* FromWorld); // Function ShooterGame.MassRewardsManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39a8080
};

// Class ShooterGame.MassRewardsService
// Size: 0x38 (Inherited: 0x30)
struct UMassRewardsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MassRewardCeremonyViewModel
// Size: 0x58 (Inherited: 0x30)
struct UMassRewardCeremonyViewModel : UObject {
	enum class EMassRewardCeremonyType Type; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct URewardModel*> Rewards; // 0x38(0x10)
	char pad_48[0x10]; // 0x48(0x10)
};

// Class ShooterGame.MassRewardRankedCeremonyViewModel
// Size: 0x68 (Inherited: 0x58)
struct UMassRewardRankedCeremonyViewModel : UMassRewardCeremonyViewModel {
	struct UCompetitiveSeasonDataAsset* CompetitiveSeason; // 0x58(0x08)
	struct USeasonDataAsset* season; // 0x60(0x08)
};

// Class ShooterGame.MassRewardTitledCeremonyViewModel
// Size: 0x88 (Inherited: 0x58)
struct UMassRewardTitledCeremonyViewModel : UMassRewardCeremonyViewModel {
	struct FText UIScreenTitle; // 0x58(0x18)
	struct FText UIScreenSubtitle; // 0x70(0x18)
};

// Class ShooterGame.MassRewardViewModel
// Size: 0x40 (Inherited: 0x30)
struct UMassRewardViewModel : UObject {
	struct TArray<struct UMassRewardCeremonyViewModel*> Ceremonies; // 0x30(0x10)

	struct UMassRewardCeremonyViewModel* PopCeremony(); // Function ShooterGame.MassRewardViewModel.PopCeremony // (Final|Native|Public|BlueprintCallable) // @ game+0x39a8ce0
	bool HasCeremony(); // Function ShooterGame.MassRewardViewModel.HasCeremony // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39a8640
};

// Class ShooterGame.MatchDetailsViewModel
// Size: 0x2d0 (Inherited: 0x30)
struct UMatchDetailsViewModel : UObject {
	struct FProcessedMatchDetails Data; // 0x30(0x278)
	struct FString TargetSubject; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnContentLoaded; // 0x2b8(0x10)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void SetMapUIData(struct UBaseContentUIData* BaseUIData); // Function ShooterGame.MatchDetailsViewModel.SetMapUIData // (Final|Native|Public) // @ game+0x39b1cd0
	void HandleCharacterAssetsLoaded(struct FCharacterHandles& Characters); // Function ShooterGame.MatchDetailsViewModel.HandleCharacterAssetsLoaded // (Final|Native|Public|HasOutParms) // @ game+0x39b1b90
	void HandleArmorAssetsLoaded(struct FArmorHandles& Armors); // Function ShooterGame.MatchDetailsViewModel.HandleArmorAssetsLoaded // (Final|Native|Public|HasOutParms) // @ game+0x39b1a50
	struct FName GetTargetSubjectCharacterName(); // Function ShooterGame.MatchDetailsViewModel.GetTargetSubjectCharacterName // (Final|Native|Public|BlueprintCallable) // @ game+0x39b1a10
	struct TArray<struct FName> GetEnemyCharacterNames(); // Function ShooterGame.MatchDetailsViewModel.GetEnemyCharacterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x39b1770
	struct TArray<struct FName> GetAllyCharacterNames(); // Function ShooterGame.MatchDetailsViewModel.GetAllyCharacterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x39b16f0
	struct TArray<struct FMatchDetailsEnemyInteractionList> CreateEnemyInteractions(struct FString Subject, enum class EMatchDetailsEnemyInteractionSort SortBehavior); // Function ShooterGame.MatchDetailsViewModel.CreateEnemyInteractions // (Final|Native|Public|BlueprintCallable) // @ game+0x39b0fb0
};

// Class ShooterGame.MatchDetailsManager
// Size: 0x160 (Inherited: 0x80)
struct UMatchDetailsManager : UInitSystem {
	struct FMulticastInlineDelegate OnNewMatch; // 0x80(0x10)
	struct URMSManager* RMSManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UMatchDetailsService* MatchDetailsService; // 0xa0(0x08)
	struct UInventoryManager* InventoryManager; // 0xa8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xb0(0x08)
	struct UContentIndex* ContentIndex; // 0xb8(0x08)
	char pad_C0[0xa0]; // 0xc0(0xa0)

	struct TArray<struct FPlayerDetailsDTO> SortBySubject(struct TArray<struct FPlayerDetailsDTO>& Players); // Function ShooterGame.MatchDetailsManager.SortBySubject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x39b1ee0
	struct TArray<struct FPlayerDetailsDTO> SortByScore(struct TArray<struct FPlayerDetailsDTO>& Players); // Function ShooterGame.MatchDetailsManager.SortByScore // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x39b1d60
	struct UMatchDetailsManager* GetMatchDetailsManager(struct UObject* WorldContextObject); // Function ShooterGame.MatchDetailsManager.GetMatchDetailsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39b1980
	void GetMatchDetails(struct FString MatchID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.MatchDetailsManager.GetMatchDetails // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39b17f0
	void DebugOverrideMatchDetails(struct FString MatchID, struct FMatchDetailsDebugOverrides& Overrides, struct FDelegate& OnSuccess); // Function ShooterGame.MatchDetailsManager.DebugOverrideMatchDetails // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39b1560
	struct UMatchDetailsViewModel* CreateViewModel(struct UObject* WorldContextObject, struct FMatchDetailsDTO& Input, struct FString TargetSubject); // Function ShooterGame.MatchDetailsManager.CreateViewModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39b1150
};

// Class ShooterGame.MatchDetailsService
// Size: 0x38 (Inherited: 0x30)
struct UMatchDetailsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MatchHistoryManager
// Size: 0x160 (Inherited: 0x80)
struct UMatchHistoryManager : UInitSystem {
	struct FMulticastInlineDelegate OnCacheInvalidated; // 0x80(0x10)
	struct URSOManager* RSOManager; // 0x90(0x08)
	struct UMatchHistoryService* MatchHistoryService; // 0x98(0x08)
	struct UMatchDetailsManager* MatchDetailsManager; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)
	struct UConfigManager* ConfigManager; // 0xb0(0x08)
	char pad_B8[0xa8]; // 0xb8(0xa8)

	void OnGameFlowStateUpdated(enum class EGameFlowStateType NewState); // Function ShooterGame.MatchHistoryManager.OnGameFlowStateUpdated // (Final|Native|Private) // @ game+0x39b9840
	struct UMatchHistoryManager* GetMatchHistoryManager(struct UObject* WorldContextObject); // Function ShooterGame.MatchHistoryManager.GetMatchHistoryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39b9130
	void BP_FetchMatchHistory(struct FString Subject, int32_t BeginIndex, int32_t EndIndex, struct TArray<struct FString> QueueIDs, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.MatchHistoryManager.BP_FetchMatchHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x39b87c0
};

// Class ShooterGame.MatchHistoryScreenV2
// Size: 0x2d0 (Inherited: 0x2c8)
struct UMatchHistoryScreenV2 : UUserWidget {
	struct UMatchHistoryViewController* MatchHistoryViewController; // 0x2c8(0x08)
};

// Class ShooterGame.MatchHistoryService
// Size: 0x38 (Inherited: 0x30)
struct UMatchHistoryService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MatchHistoryViewController
// Size: 0x148 (Inherited: 0x30)
struct UMatchHistoryViewController : UObject {
	struct FString Subject; // 0x30(0x10)
	struct UMatchHistoryViewModel* MatchHistoryViewModel; // 0x40(0x08)
	struct TMap<struct FLeaderboardMapKey, struct ULeaderboardViewModel*> LeaderboardModels; // 0x48(0x50)
	struct UMatchHistoryManager* MatchHistoryManager; // 0x98(0x08)
	struct UInventoryManager* InventoryManager; // 0xa0(0x08)
	struct UMMRManager* MMRManager; // 0xa8(0x08)
	struct TMap<struct FGuid, struct UCharacterUIData*> CharacterUIData; // 0xb0(0x50)
	struct UMatchViewDataContext* MatchViewDataContext; // 0x100(0x08)
	struct UContentIndex* ContentIndex; // 0x108(0x08)
	struct UContentManager* ContentManager; // 0x110(0x08)
	struct UConfigManager* ConfigManager; // 0x118(0x08)
	struct URSOManager* RSOManager; // 0x120(0x08)
	char pad_128[0x20]; // 0x128(0x20)

	void UpdateMyLeaderboardPlayerAnonymized(); // Function ShooterGame.MatchHistoryViewController.UpdateMyLeaderboardPlayerAnonymized // (Final|Native|Private) // @ game+0x39b9de0
	void UpdateLeaderboardAnonymize(struct FGuid& SeasonID, struct FDelegate OnError); // Function ShooterGame.MatchHistoryViewController.UpdateLeaderboardAnonymize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39b9cd0
	void SetPlayerSubject(struct FString Subject); // Function ShooterGame.MatchHistoryViewController.SetPlayerSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x39b9c20
	struct UMatchHistoryViewModel* GetViewModel(); // Function ShooterGame.MatchHistoryViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9760
	struct ULeaderboardViewModel* GetLeaderboardModel(struct FString SearchStr, struct FGuid& SeasonID); // Function ShooterGame.MatchHistoryViewController.GetLeaderboardModel // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39b8de0
	void FetchMMRInfo(); // Function ShooterGame.MatchHistoryViewController.FetchMMRInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x39b8c60
	void FetchMatchHistory(struct FString QueueID); // Function ShooterGame.MatchHistoryViewController.FetchMatchHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x39b8c80
	void FetchLeaderboard(struct FGuid& SeasonID, struct FString SearchStr, int32_t StartIndex, int32_t EndIndex); // Function ShooterGame.MatchHistoryViewController.FetchLeaderboard // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39b8ad0
};

// Class ShooterGame.MatchPlayerScoreBreakdown
// Size: 0x60 (Inherited: 0x30)
struct UMatchPlayerScoreBreakdown : UObject {
	enum class EAresPlayerRelationship PlayerCategory; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t Score; // 0x34(0x04)
	struct FGuid CharacterID; // 0x38(0x10)
	struct FMulticastInlineDelegate OnContentLoaded; // 0x48(0x10)
	struct UCharacterUIData* CharacterData; // 0x58(0x08)
};

// Class ShooterGame.MatchViewDataContext
// Size: 0x40 (Inherited: 0x30)
struct UMatchViewDataContext : UObject {
	struct FString Subject; // 0x30(0x10)
};

// Class ShooterGame.LeaderboardPlayerModel
// Size: 0x88 (Inherited: 0x30)
struct ULeaderboardPlayerModel : UObject {
	struct FString Subject; // 0x30(0x10)
	struct FString GameName; // 0x40(0x10)
	struct FString TagLine; // 0x50(0x10)
	struct UPlayerCardDataAsset* PlayerCard; // 0x60(0x08)
	struct UPlayerTitleDataAsset* Title; // 0x68(0x08)
	int32_t RankedRating; // 0x70(0x04)
	int32_t CompetitiveTier; // 0x74(0x04)
	int32_t NumberOfWins; // 0x78(0x04)
	int32_t Rank; // 0x7c(0x04)
	bool IsAnonymized; // 0x80(0x01)
	bool IsBanned; // 0x81(0x01)
	bool IsSeparator; // 0x82(0x01)
	char pad_83[0x5]; // 0x83(0x05)
};

// Class ShooterGame.LeaderboardViewModel
// Size: 0x180 (Inherited: 0x30)
struct ULeaderboardViewModel : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct TMap<int32_t, struct ULeaderboardPlayerModel*> Players; // 0x50(0x50)
	struct USeasonDataAsset* season; // 0xa0(0x08)
	struct UCompetitiveSeasonDataAsset* CompetitiveSeason; // 0xa8(0x08)
	struct TMap<int32_t, struct FLeaderboardTierDetails> TierDetails; // 0xb0(0x50)
	int32_t TotalSeparators; // 0x100(0x04)
	int32_t TotalPlayers; // 0x104(0x04)
	char pad_108[0x8]; // 0x108(0x08)
	struct FMulticastInlineDelegate IsOnLeaderboardChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate IsAnonymizedChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate MyPlayerRankChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnLeaderboardPlayersAdded; // 0x140(0x10)
	struct FMulticastInlineDelegate OnLoadingChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnLeaderboardError; // 0x160(0x10)
	struct FMulticastInlineDelegate OnEmptyChanged; // 0x170(0x10)

	bool IsOnLeaderboard(); // Function ShooterGame.LeaderboardViewModel.IsOnLeaderboard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9820
	bool IsLeaderboardLoading(); // Function ShooterGame.LeaderboardViewModel.IsLeaderboardLoading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556b40
	bool IsFirstPlayerBig(); // Function ShooterGame.LeaderboardViewModel.IsFirstPlayerBig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39b97c0
	bool IsEmpty(); // Function ShooterGame.LeaderboardViewModel.IsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556b20
	bool IsAnonymized(); // Function ShooterGame.LeaderboardViewModel.IsAnonymized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3889210
	int32_t GetTotalPageCount(); // Function ShooterGame.LeaderboardViewModel.GetTotalPageCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39b9730
	bool GetPagePlayersByPageNum(int32_t PageNum, int32_t& StartIndex, struct TArray<struct ULeaderboardPlayerModel*>& OutPlayers); // Function ShooterGame.LeaderboardViewModel.GetPagePlayersByPageNum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39b9360
	int32_t GetPageNumberForRank(int32_t RankPosition); // Function ShooterGame.LeaderboardViewModel.GetPageNumberForRank // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39b92c0
	int32_t GetNumSeparatorsBeforeRankPosition(int32_t RankPosition); // Function ShooterGame.LeaderboardViewModel.GetNumSeparatorsBeforeRankPosition // (Final|Native|Public) // @ game+0x39b9220
	int32_t GetMyPlayerRank(); // Function ShooterGame.LeaderboardViewModel.GetMyPlayerRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9200
	struct TMap<int32_t, struct FLeaderboardTierDetails> GetLeaderboardSeparators(); // Function ShooterGame.LeaderboardViewModel.GetLeaderboardSeparators // (Final|Native|Public) // @ game+0x39b9060
	struct FString GetLeaderboardSearchStr(); // Function ShooterGame.LeaderboardViewModel.GetLeaderboardSearchStr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9020
	bool GetLeaderboardPlayers(int32_t StartIndex, int32_t EndIndex, struct TArray<struct ULeaderboardPlayerModel*>& OutPlayers); // Function ShooterGame.LeaderboardViewModel.GetLeaderboardPlayers // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39b8ef0
	bool DidLeaderboardError(); // Function ShooterGame.LeaderboardViewModel.DidLeaderboardError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556b80
};

// Class ShooterGame.MatchViewModel
// Size: 0x170 (Inherited: 0x30)
struct UMatchViewModel : UObject {
	int32_t Kills; // 0x30(0x04)
	int32_t Deaths; // 0x34(0x04)
	int32_t Assists; // 0x38(0x04)
	int32_t RoundsWon; // 0x3c(0x04)
	int32_t RoundsLost; // 0x40(0x04)
	int32_t Points; // 0x44(0x04)
	int32_t HighestEnemyPoints; // 0x48(0x04)
	bool DidPlayerWinMatch; // 0x4c(0x01)
	enum class EMatchOutcome PlayerMatchOutcome; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	int32_t TeamTotalPointsScoredInMatch; // 0x50(0x04)
	int32_t PlayerPointsScoredInMatch; // 0x54(0x04)
	struct FMatchScoreBreakdown Scores; // 0x58(0x38)
	struct FGuid CharacterID; // 0x90(0x10)
	struct FString QueueID; // 0xa0(0x10)
	bool IsRanked; // 0xb0(0x01)
	bool IsPremier; // 0xb1(0x01)
	char pad_B2[0x6]; // 0xb2(0x06)
	struct FString MatchID; // 0xb8(0x10)
	struct FDateTime GameStartTime; // 0xc8(0x08)
	struct FTimespan GameLength; // 0xd0(0x08)
	bool HasData; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FMulticastInlineDelegate OnContentLoaded; // 0xe0(0x10)
	struct UCharacterUIData* CharacterData; // 0xf0(0x08)
	struct UMapDataAsset* MapData; // 0xf8(0x08)
	struct UGameModeDataAsset* GameModeData; // 0x100(0x08)
	struct USeasonDataAsset* SeasonData; // 0x108(0x08)
	struct UCompetitiveSeasonDataAsset* CompetitiveSeasonData; // 0x110(0x08)
	struct FMulticastInlineDelegate OnMMRDataLoaded; // 0x118(0x10)
	struct FMMRMatchInfo MMRMatchInfo; // 0x128(0x30)
	struct TArray<int32_t> SortedPointsAllTeams; // 0x158(0x10)
	struct UMatchViewDataContext* DataContext; // 0x168(0x08)

	void SetData(struct FMatchDetailsDTO& MatchDetailsDTO); // Function ShooterGame.MatchViewModel.SetData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39b98c0
	struct TArray<int32_t> GetSortedPointsAllTeams(); // Function ShooterGame.MatchViewModel.GetSortedPointsAllTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x39b9660
};

// Class ShooterGame.MatchHistoryViewModel
// Size: 0xf0 (Inherited: 0x30)
struct UMatchHistoryViewModel : UObject {
	struct FMulticastInlineDelegate OnMatchHistoryViewModelLoadingStateChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMatchHistoryViewModelErrorStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMMRDataLoaded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMatchHistoryViewModelLoadedMatch; // 0x60(0x10)
	int32_t TotalGamesNeededForRating; // 0x70(0x04)
	int32_t RecentGamesNeededForRating; // 0x74(0x04)
	int32_t CurrentSeasonGamesNeededForRating; // 0x78(0x04)
	int32_t TotalGamesNeededForLeaderboard; // 0x7c(0x04)
	struct TArray<struct UMatchViewModel*> LoadedMatches; // 0x80(0x10)
	struct TMap<struct FGuid, struct FProcessedSeasonInfo> SeasonInfo; // 0x90(0x50)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct UContentIndex* ContentIndex; // 0xe8(0x08)

	bool IsMMRErrorState(); // Function ShooterGame.MatchHistoryViewModel.IsMMRErrorState // (Final|Native|Public|BlueprintCallable) // @ game+0x39b97f0
	bool IsErrorState(); // Function ShooterGame.MatchHistoryViewModel.IsErrorState // (Final|Native|Public|BlueprintCallable) // @ game+0x39b9790
	void GetSeasonInfo(struct FGuid SeasonID, struct FProcessedSeasonInfo& OutSeason); // Function ShooterGame.MatchHistoryViewModel.GetSeasonInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x39b94b0
	struct TArray<struct UMatchViewModel*> GetMatches(); // Function ShooterGame.MatchHistoryViewModel.GetMatches // (Final|Native|Public|BlueprintCallable) // @ game+0x39b91c0
	bool GetIsLoadingData(); // Function ShooterGame.MatchHistoryViewModel.GetIsLoadingData // (Final|Native|Public|BlueprintCallable) // @ game+0x39b8db0
	bool GetHasLoadedMMRData(); // Function ShooterGame.MatchHistoryViewModel.GetHasLoadedMMRData // (Final|Native|Public|BlueprintCallable) // @ game+0x39b8d80
};

// Class ShooterGame.MatchInfoHudElement
// Size: 0x8a0 (Inherited: 0x58)
struct UMatchInfoHudElement : UAresHudElement {
	struct FTeamScore AllyTeamScore; // 0x58(0x178)
	struct FTeamScore EnemyTeamScore; // 0x1d0(0x178)
	struct FTeamIcons TeamIconTuning; // 0x348(0x50)
	struct FTeamMoney AllyTeamMoney; // 0x398(0x148)
	struct FTeamMoney EnemyTeamMoney; // 0x4e0(0x148)
	struct FMatchTimer MatchTimerDisplay; // 0x628(0xb8)
	struct FRoundNumber RoundNumberDisplay; // 0x6e0(0xa0)
	struct FGamePausedText GamePausedTextDisplay; // 0x780(0x120)

	struct FText GetRoundTimerText(float TimeSeconds); // Function ShooterGame.MatchInfoHudElement.GetRoundTimerText // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	struct FString GetRoundTimerString(float TimeSeconds); // Function ShooterGame.MatchInfoHudElement.GetRoundTimerString // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	struct FText GetRoundNotifyText(); // Function ShooterGame.MatchInfoHudElement.GetRoundNotifyText // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	struct FString GetRoundNotifyString(); // Function ShooterGame.MatchInfoHudElement.GetRoundNotifyString // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	struct FLinearColor GetMatchTImerDrawColor(float TimeSeconds); // Function ShooterGame.MatchInfoHudElement.GetMatchTImerDrawColor // (Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x40572e0
};

// Class ShooterGame.MatchmakingManager
// Size: 0xf8 (Inherited: 0x80)
struct UMatchmakingManager : UInitSystem {
	struct FMulticastInlineDelegate OnQueueStatusUpdated; // 0x80(0x10)
	struct UMatchmakingService* MatchmakingService; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct UPartyModel* PartyModel; // 0xa8(0x08)
	struct UPlatformSessionManager* SessionManager; // 0xb0(0x08)
	struct FAresQueueStatus QueueStatus; // 0xb8(0x20)
	char pad_D8[0x18]; // 0xd8(0x18)
	bool bQueueStatusUpdateInProgress; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)

	void SetSelectedQueueID(struct FString QueueID); // Function ShooterGame.MatchmakingManager.SetSelectedQueueID // (Final|Native|Public|BlueprintCallable) // @ game+0x39c5fb0
	bool IsQueueStatusEnabled(); // Function ShooterGame.MatchmakingManager.IsQueueStatusEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39c5cc0
	struct FAresQueueStatus GetQueueStatus(); // Function ShooterGame.MatchmakingManager.GetQueueStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39c5bb0
	struct UMatchmakingManager* GetMatchmakingManager(struct UObject* WorldContextObject); // Function ShooterGame.MatchmakingManager.GetMatchmakingManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39c5890
};

// Class ShooterGame.MatchmakingQueueDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UMatchmakingQueueDataAsset : UAresBasePrimaryDataAsset {
	struct FString QueueID; // 0x50(0x10)
	struct FText DropdownText; // 0x60(0x18)
	struct FText SelectedText; // 0x78(0x18)
	struct TSoftClassPtr<UObject> UIData; // 0x90(0x30)
};

// Class ShooterGame.MatchmakingQueueUIData
// Size: 0xb0 (Inherited: 0x90)
struct UMatchmakingQueueUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	bool IsBeta; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class ShooterGame.MatchmakingService
// Size: 0x38 (Inherited: 0x30)
struct UMatchmakingService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MatchRecoveryGameDataEventSubscriptions
// Size: 0x48 (Inherited: 0x30)
struct UMatchRecoveryGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class ShooterGame.MatchResultEventCollector
// Size: 0xb0 (Inherited: 0x30)
struct UMatchResultEventCollector : UObject {
	struct FMulticastInlineDelegate OnMatchResultsCollected; // 0x30(0x10)
	struct UWorld* TheWorld; // 0x40(0x08)
	struct TMap<struct FString, struct UStruct*> EventTypes; // 0x48(0x50)
	char pad_98[0x18]; // 0x98(0x18)

	void RegisterEventType(struct FString EventType, struct UStruct* StructDefinition); // Function ShooterGame.MatchResultEventCollector.RegisterEventType // (Final|Native|Public|BlueprintCallable) // @ game+0x39c5ec0
	void AddEvent(struct UMatchResultEventCollector* Collector, struct FName EventType, struct TFieldPath<FProperty> anyStruct); // Function ShooterGame.MatchResultEventCollector.AddEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x39c5400
};

// Class ShooterGame.Megamap
// Size: 0x2d8 (Inherited: 0x2c8)
struct UMegamap : UUserWidget {
	struct UAresMegamapViewModel* MegamapViewModel; // 0x2c8(0x08)
	struct UNonVerbalCommsViewModel* NonVerbalCommsViewModel; // 0x2d0(0x08)

	void OnShow(); // Function ShooterGame.Megamap.OnShow // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnNonVerbalCommsViewModelAssigned(); // Function ShooterGame.Megamap.OnNonVerbalCommsViewModelAssigned // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnHide(); // Function ShooterGame.Megamap.OnHide // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnCommWheelInputUp(); // Function ShooterGame.Megamap.OnCommWheelInputUp // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnCommWheelInputDown(); // Function ShooterGame.Megamap.OnCommWheelInputDown // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void InputMegamapCommWheel(bool bIsDown); // Function ShooterGame.Megamap.InputMegamapCommWheel // (Final|Native|Public|BlueprintCallable) // @ game+0x39c5c30
};

// Class ShooterGame.MegamapCoordinator
// Size: 0x80 (Inherited: 0x30)
struct UMegamapCoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnMegamapToggled; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
	struct AAresPlayerController* PlayerController; // 0x50(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x58(0x08)
	struct UMegamap* Megamap; // 0x60(0x08)
	struct UAresMegamapViewModel* MegamapViewModel; // 0x68(0x08)
	struct UNonVerbalCommsViewModel* NonVerbalCommsViewModel; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)

	void HandleClose(); // Function ShooterGame.MegamapCoordinator.HandleClose // (Final|Native|Public) // @ game+0x39c5c10
};

// Class ShooterGame.MegapacketComponent
// Size: 0x400 (Inherited: 0xe8)
struct UMegapacketComponent : UActorComponent {
	char pad_E8[0x318]; // 0xe8(0x318)

	struct FString ProvisionFlowToString(enum class EProvisioningFlowID ProvisioningFlowID); // Function ShooterGame.MegapacketComponent.ProvisionFlowToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39c5df0
	enum class EProvisioningFlowID ProvisionFlowFromString(struct FString ProvisioningFlowID); // Function ShooterGame.MegapacketComponent.ProvisionFlowFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39c5cf0
	enum class EProvisioningFlowID GetProvisioningFlow(); // Function ShooterGame.MegapacketComponent.GetProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39c5b80
	bool GetMegapacket(struct FMegapacket& MegapacketOut); // Function ShooterGame.MegapacketComponent.GetMegapacket // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39c5920
	struct FString GetConfigurationString(struct FName Name, struct FString DefaultValue); // Function ShooterGame.MegapacketComponent.GetConfigurationString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39c5730
	float GetConfigurationFloat(struct FName Name, float DefaultValue); // Function ShooterGame.MegapacketComponent.GetConfigurationFloat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39c5630
	bool GetConfigurationBool(struct FName Name, bool DefaultValue); // Function ShooterGame.MegapacketComponent.GetConfigurationBool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39c5530
};

// Class ShooterGame.MeleeAttackStateComponent
// Size: 0x358 (Inherited: 0x2e0)
struct UMeleeAttackStateComponent : UScriptStateComponent {
	float AttackDistance; // 0x2e0(0x04)
	float BackstabAngleDegrees; // 0x2e4(0x04)
	float OuterHitSphereRadius; // 0x2e8(0x04)
	float InnerHitSphereRadius; // 0x2ec(0x04)
	struct FAresMeleeTuning AttackEffectTuning; // 0x2f0(0x18)
	struct FAresMeleeTuning BackstabAttackEffectTuning; // 0x308(0x18)
	struct FNoiseEventData NoiseEventData; // 0x320(0x38)

	void MulticastHitImpact(struct FHitResult HitResult, bool bWasBackstab); // Function ShooterGame.MeleeAttackStateComponent.MulticastHitImpact // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x39cc520
	void MulticastDrawMeleeDebug(struct FHitResult OutHit, struct FVector CameraLocation, struct FVector CameraAim, bool bWasHit, bool bWasBackstab, bool bWasPreciseHit, struct FReplicatedDebugHitRegSample HitRegSample); // Function ShooterGame.MeleeAttackStateComponent.MulticastDrawMeleeDebug // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults|Const) // @ game+0x39cc200
};

// Class ShooterGame.MemoryPerfStatsReport
// Size: 0x1e8 (Inherited: 0xe8)
struct UMemoryPerfStatsReport : UActorComponent {
	struct FMemoryPerfStatsComponent MemoryPerfStatsComponent; // 0xe8(0x100)

	void SendReport(struct FString Agent, struct FString Map, struct FString GameMode, struct FString TestSuite, struct FString TestCase, struct FString TestScenario, struct FString MatchID, struct UTelemetryManager* TelemetryManager); // Function ShooterGame.MemoryPerfStatsReport.SendReport // (Final|Native|Public) // @ game+0x39cd490
};

// Class ShooterGame.MenuStackEntry
// Size: 0x90 (Inherited: 0x30)
struct UMenuStackEntry : UObject {
	struct UUserWidget* Content; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
	struct FMulticastInlineDelegate OnOpen; // 0x48(0x10)
	struct FMulticastInlineDelegate OnClose; // 0x58(0x10)
	struct FMulticastInlineDelegate OnDismissed; // 0x68(0x10)
	struct FMenuMusic MenuMusic; // 0x78(0x10)
	enum class EMenuStackEntryFlags Flags; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class ShooterGame.MenuStackManager
// Size: 0xe0 (Inherited: 0x30)
struct UMenuStackManager : UObject {
	struct FMulticastInlineDelegate OnMenuOpened; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMenuClosed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnStackEntryClosed; // 0x50(0x10)
	struct FMulticastInlineDelegate OnCurrentMenuMusicChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnTopNavBarCompatibleEntryChanged; // 0x70(0x10)
	struct TArray<struct UMenuStackEntry*> OpenedMenus; // 0x80(0x10)
	struct TArray<struct UMenuStackEntry*> ClosedMenus; // 0x90(0x10)
	struct UUserWidget* DefaultInputOwner; // 0xa0(0x08)
	struct TScriptInterface<INavBarMenu> TopNavBarMenu; // 0xa8(0x10)
	struct TWeakObjectPtr<struct UPanelWidget> MenuContainer; // 0xb8(0x08)
	struct TWeakObjectPtr<struct UPanelWidget> PopupContainer; // 0xc0(0x08)
	struct FMenuMusic CurrentMenuMusic; // 0xc8(0x10)
	bool bBusy; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)

	void UnregisterWidget(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.MenuStackManager.UnregisterWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x39cdf60
	void SetPopupContainer(struct UPanelWidget* Container); // Function ShooterGame.MenuStackManager.SetPopupContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x39cded0
	void SetMenuContainer(struct UPanelWidget* Container); // Function ShooterGame.MenuStackManager.SetMenuContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x39cde40
	void SetDismissable(struct UUserWidget* Widget, bool bDismissable); // Function ShooterGame.MenuStackManager.SetDismissable // (Final|Native|Public|BlueprintCallable) // @ game+0x39cdbd0
	void SetCurrentMenuMusic(struct FMenuMusic NewValue); // Function ShooterGame.MenuStackManager.SetCurrentMenuMusic // (Final|Native|Private) // @ game+0x39cdb40
	void Reset(); // Function ShooterGame.MenuStackManager.Reset // (Final|Native|Private) // @ game+0x39cd470
	bool RequestPop(); // Function ShooterGame.MenuStackManager.RequestPop // (Final|Native|Public|BlueprintCallable) // @ game+0x39cd440
	void RemoveWidgetFromOpenList(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.RemoveWidgetFromOpenList // (Final|Native|Public|BlueprintCallable) // @ game+0x39cd3b0
	struct UMenuStackEntry* RegisterPersistentPopupWidget(struct UUserWidget* Widget, bool bIsModal, bool bIsDismissable, bool bLetterbox, enum class EMenuWidgetState InitialWidgetState); // Function ShooterGame.MenuStackManager.RegisterPersistentPopupWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x39cd120
	struct UMenuStackEntry* RegisterPersistentMenuWidget(struct UUserWidget* Widget, bool bIsDismissable, bool bLetterbox, enum class EMenuWidgetState InitialWidgetState); // Function ShooterGame.MenuStackManager.RegisterPersistentMenuWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x39ccf90
	bool Pop(); // Function ShooterGame.MenuStackManager.Pop // (Final|Native|Public|BlueprintCallable) // @ game+0x39ccf60
	void OpenRegisteredWidget(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.MenuStackManager.OpenRegisteredWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x39cced0
	struct UMenuStackEntry* OpenPopupV2(struct UUserWidget* Widget, struct FMenuMusic MenuMusic, bool bIsModal, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenPopupV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x39ccce0
	struct UMenuStackEntry* OpenPopup(struct UUserWidget* Widget, bool bIsModal, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenPopup // (Final|Native|Public|BlueprintCallable) // @ game+0x39ccb50
	struct UMenuStackEntry* OpenMenuV2(struct UUserWidget* Widget, struct FMenuMusic MenuMusic, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenMenuV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x39cc9c0
	struct UMenuStackEntry* OpenMenu(struct UUserWidget* Widget, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x39cc8a0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.MenuStackManager.OnBugCommand // (Final|Native|Private) // @ game+0x39cc690
	bool IsMenuOpenByType(struct UObject* WidgetType); // Function ShooterGame.MenuStackManager.IsMenuOpenByType // (Final|Native|Public|BlueprintCallable) // @ game+0x39cc160
	void HandleWorldCleanup(struct UWorld* World); // Function ShooterGame.MenuStackManager.HandleWorldCleanup // (Final|Native|Private) // @ game+0x39cc0d0
	void HandleDismissInput(); // Function ShooterGame.MenuStackManager.HandleDismissInput // (Final|Native|Public) // @ game+0x39cc0b0
	struct UMenuStackEntry* GetTopOpenWidgetEntry(); // Function ShooterGame.MenuStackManager.GetTopOpenWidgetEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39cc080
	struct TScriptInterface<INavBarMenu> GetTopNavBarCompatibleMenu(); // Function ShooterGame.MenuStackManager.GetTopNavBarCompatibleMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39cc040
	struct UUserWidget* GetOwnerForInputHandling(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.GetOwnerForInputHandling // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39cbfa0
	int32_t GetNumEntries(); // Function ShooterGame.MenuStackManager.GetNumEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39cbf70
	struct FMenuMusic GetCurrentMenuMusic(); // Function ShooterGame.MenuStackManager.GetCurrentMenuMusic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39cbf40
	struct UMenuStackEntry* FindRegisteredWidgetByClass(struct UObject* WidgetClass); // Function ShooterGame.MenuStackManager.FindRegisteredWidgetByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbea0
	void CloseWidgetOnly(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.CloseWidgetOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbe10
	void CloseRegisteredWidget(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.MenuStackManager.CloseRegisteredWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbd80
	void CloseByType(struct UObject* WidgetType); // Function ShooterGame.MenuStackManager.CloseByType // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbcf0
	void CloseAllAboveByType(struct UObject* WidgetType); // Function ShooterGame.MenuStackManager.CloseAllAboveByType // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbc60
	void CloseAllAbove(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.CloseAllAbove // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbbd0
	void CloseAll(); // Function ShooterGame.MenuStackManager.CloseAll // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbbb0
	void Close(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.Close // (Final|Native|Public|BlueprintCallable) // @ game+0x39cbb20
	void AddWidgetToOpenList(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.AddWidgetToOpenList // (Final|Native|Public|BlueprintCallable) // @ game+0x39cba90
};

// Class ShooterGame.MenuStackWidget
// Size: 0x30 (Inherited: 0x30)
struct UMenuStackWidget : UInterface {

	enum class EMenuStackWidget_RequestCloseMenuResult RequestCloseMenu(); // Function ShooterGame.MenuStackWidget.RequestCloseMenu // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x395fde0
	void OnRegister(struct UMenuStackEntry* RegisteredEntry); // Function ShooterGame.MenuStackWidget.OnRegister // (Native|Event|Public|BlueprintEvent) // @ game+0x39cc810
	void OnOpen(); // Function ShooterGame.MenuStackWidget.OnOpen // (Native|Event|Public|BlueprintEvent) // @ game+0x39cc7e0
	void OnClose(); // Function ShooterGame.MenuStackWidget.OnClose // (Native|Event|Public|BlueprintEvent) // @ game+0x2627c10
};

// Class ShooterGame.MeshMaterialManagerComponent
// Size: 0x158 (Inherited: 0xe8)
struct UMeshMaterialManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct USkeletalMeshComponent* CharacterMesh3P; // 0xf0(0x08)
	struct USkeletalMeshComponent* CharacterMesh1P; // 0xf8(0x08)
	char pad_100[0x58]; // 0x100(0x58)

	struct FAppliedMaterialHandle SetMaterial(enum class EMeshPlayerView MeshPlayerView, int32_t ElementIndex, struct UMaterialInterface* Material, enum class EMaterialPriority Priority); // Function ShooterGame.MeshMaterialManagerComponent.SetMaterial // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x39cdca0
	struct FAppliedMaterialHandle SetAllMaterials(enum class EMeshPlayerView MeshPlayerView, struct UMaterialInterface* Material, enum class EMaterialPriority Priority); // Function ShooterGame.MeshMaterialManagerComponent.SetAllMaterials // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x39cd9f0
	void RemoveMaterial(struct FAppliedMaterialHandle& MaterialHandle); // Function ShooterGame.MeshMaterialManagerComponent.RemoveMaterial // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39cd300
};

// Class ShooterGame.MessageBroadcastingComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UMessageBroadcastingComponent : UActorComponent {
};

// Class ShooterGame.MessageListenerComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UMessageListenerComponent : UActorComponent {
};

// Class ShooterGame.MinimapFloorComponent
// Size: 0x510 (Inherited: 0x500)
struct UMinimapFloorComponent : UAresMinimapComponent {
	char pad_500[0x10]; // 0x500(0x10)
};

// Class ShooterGame.MinimapVisionConesBlockerComponent
// Size: 0x510 (Inherited: 0x500)
struct UMinimapVisionConesBlockerComponent : UAresMinimapComponent {
	bool bShowVisualizationMesh; // 0x4f8(0x01)
	char pad_501[0xf]; // 0x501(0x0f)

	void HandleTransformChanged(struct USceneComponent* InComponent, enum class EUpdateTransformFlags InTransformFlags, enum class ETeleportType InTeleportType); // Function ShooterGame.MinimapVisionConesBlockerComponent.HandleTransformChanged // (Final|Native|Public) // @ game+0x39d7540
};

// Class ShooterGame.MinimapVisionConesBlockerLineComponent
// Size: 0x510 (Inherited: 0x510)
struct UMinimapVisionConesBlockerLineComponent : UMinimapVisionConesBlockerComponent {
};

// Class ShooterGame.MinimapVisionConesBlockerRectComponent
// Size: 0x510 (Inherited: 0x510)
struct UMinimapVisionConesBlockerRectComponent : UMinimapVisionConesBlockerComponent {
};

// Class ShooterGame.MinimapVisionConesBlockerCircleComponent
// Size: 0x510 (Inherited: 0x510)
struct UMinimapVisionConesBlockerCircleComponent : UMinimapVisionConesBlockerComponent {
};

// Class ShooterGame.MinimapVisionConesComponent
// Size: 0x5b0 (Inherited: 0x500)
struct UMinimapVisionConesComponent : UAresMinimapComponent {
	char pad_500[0xb0]; // 0x500(0xb0)

	void UpdateShouldDrawCone(); // Function ShooterGame.MinimapVisionConesComponent.UpdateShouldDrawCone // (Final|Native|Protected) // @ game+0x39d81c0
	void OnBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.MinimapVisionConesComponent.OnBoolSettingChanged // (Final|Native|Public) // @ game+0x39d7850
	bool IsEnabled(); // Function ShooterGame.MinimapVisionConesComponent.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d7760
	void HandleVisionConesGenerated(); // Function ShooterGame.MinimapVisionConesComponent.HandleVisionConesGenerated // (Final|Native|Public) // @ game+0x39d7650
	void HandleBlockerChanged(struct UMinimapVisionConesBlockerComponent* BlockerComponent); // Function ShooterGame.MinimapVisionConesComponent.HandleBlockerChanged // (Final|Native|Public) // @ game+0x39d6ec0
};

// Class ShooterGame.MissingMinimapWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMissingMinimapWidget : UAresMinimapWidget {
	float LastSeen; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)

	void SetState(float bLastSeen); // Function ShooterGame.MissingMinimapWidget.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x39d7de0
};

// Class ShooterGame.Mission
// Size: 0x4c8 (Inherited: 0x3d8)
struct AMission : AActor {
	struct FMulticastInlineDelegate OnMissionReset; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnShowMissionUIChanged; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnObjectiveCompleted; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnObjectiveFailed; // 0x408(0x10)
	struct FMulticastInlineDelegate OnObjectiveStatusChanged; // 0x418(0x10)
	struct FMulticastInlineDelegate OnObjectiveProgressChanged; // 0x428(0x10)
	struct FMulticastInlineDelegate OnMissionStatusChanged; // 0x438(0x10)
	struct FMulticastInlineDelegate OnMissionActivated; // 0x448(0x10)
	struct FMulticastInlineDelegate OnMissionCompleted; // 0x458(0x10)
	struct FMulticastInlineDelegate OnMissionFailed; // 0x468(0x10)
	bool bShowMissionUI; // 0x478(0x01)
	char pad_479[0x7]; // 0x479(0x07)
	struct FText Title; // 0x480(0x18)
	struct FMissionStatusTracker Status; // 0x498(0x08)
	struct AShooterPlayerState* ShooterPlayerOwner; // 0x4a0(0x08)
	bool bInitializedObjectives; // 0x4a8(0x01)
	char pad_4A9[0x17]; // 0x4a9(0x17)
	bool bAutoShowMissionUIWhenAssigned; // 0x4c0(0x01)
	char pad_4C1[0x7]; // 0x4c1(0x07)

	void OnRep_Status(struct FMissionStatusTracker OldStatus); // Function ShooterGame.Mission.OnRep_Status // (Native|Protected) // @ game+0x39d7b00
	void OnRep_ShowMissionUI(); // Function ShooterGame.Mission.OnRep_ShowMissionUI // (Native|Protected) // @ game+0x3730610
	void InitObjectives(); // Function ShooterGame.Mission.InitObjectives // (Native|Protected) // @ game+0x39d7670
	void HandleObjectiveStatusEvent(struct UObjectiveComponent* ChangedObjective, enum class EObjectiveType ObjectiveType, enum class EObjectiveStatus OldStatus, enum class EObjectiveStatus NewStatus, int32_t OldProgress, int32_t NewProgress); // Function ShooterGame.Mission.HandleObjectiveStatusEvent // (Native|Protected) // @ game+0x39d7360
	void HandleMissionStatusChanged(enum class EMissionStatus OldStatus); // Function ShooterGame.Mission.HandleMissionStatusChanged // (Native|Protected) // @ game+0x39d6f50
	struct TArray<struct UObjectiveComponent*> GetVisibleObjectives(); // Function ShooterGame.Mission.GetVisibleObjectives // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6e40
	struct TArray<struct UObjectiveComponent*> GetObjectives(); // Function ShooterGame.Mission.GetObjectives // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39d6800
	enum class EMissionStatus GetMissionStatus(); // Function ShooterGame.Mission.GetMissionStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d67d0
	void ClientUpdateMissionStatus(enum class EMissionStatus OldStatus, struct FMissionStatusTracker NewStatus); // Function ShooterGame.Mission.ClientUpdateMissionStatus // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x39d57f0
	void ClientHandleMissionReset(); // Function ShooterGame.Mission.ClientHandleMissionReset // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x37b46b0
	void AuthSetMissionStatus(enum class EMissionStatus Status); // Function ShooterGame.Mission.AuthSetMissionStatus // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void AuthResetMission(); // Function ShooterGame.Mission.AuthResetMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	struct AShooterPlayerState* AuthGetShooterPlayerOwner(); // Function ShooterGame.Mission.AuthGetShooterPlayerOwner // (Final|Native|Public) // @ game+0x288a7f0
	void AuthAssignToPlayer(struct AShooterPlayerState* PlayerState); // Function ShooterGame.Mission.AuthAssignToPlayer // (Final|Native|Public) // @ game+0x3634e00
};

// Class ShooterGame.MissionGameStateComponent
// Size: 0x1d8 (Inherited: 0x170)
struct UMissionGameStateComponent : UBaseGameStateComponent {
	struct FMulticastInlineDelegate OnMissionActivated; // 0x170(0x10)
	struct FMulticastInlineDelegate OnMissionCompleted; // 0x180(0x10)
	struct FMulticastInlineDelegate OnMissionFailed; // 0x190(0x10)
	struct UBaseGameStateComponent* NextGameStateOnComplete; // 0x1a0(0x08)
	struct UBaseGameStateComponent* NextGameStateOnFailure; // 0x1a8(0x08)
	struct AMission* MissionClass; // 0x1b0(0x08)
	struct TArray<struct AMission*> AdditionallySupportedMissionClasses; // 0x1b8(0x10)
	struct AMission* Mission; // 0x1c8(0x08)
	bool bAutoAssignMission; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)

	struct AMission* TryGetMission(); // Function ShooterGame.MissionGameStateComponent.TryGetMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d7f30
	void TryAttachToMissionActor(struct AMission* MissionInstance); // Function ShooterGame.MissionGameStateComponent.TryAttachToMissionActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void SetNextState(struct UBaseGameStateComponent* MissionCompletedNextState, struct UBaseGameStateComponent* MissionFailedNextState); // Function ShooterGame.MissionGameStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x39d7bc0
	void HandleMissionStatusEvent(struct AMission* ChangedMission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.MissionGameStateComponent.HandleMissionStatusEvent // (Native|Protected) // @ game+0x39d70f0
	struct AShooterPlayerState* GetSoloPlayerState(); // Function ShooterGame.MissionGameStateComponent.GetSoloPlayerState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6e10
	void AuthSetMissionClass(struct AMission* MissionClass); // Function ShooterGame.MissionGameStateComponent.AuthSetMissionClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x39d5570
	void AuthAssignMission(bool bResetMission); // Function ShooterGame.MissionGameStateComponent.AuthAssignMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
};

// Class ShooterGame.MissionManagerComponent
// Size: 0x1a0 (Inherited: 0xe8)
struct UMissionManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnActiveMissionChanged; // 0xe8(0x10)
	char pad_F8[0x40]; // 0xf8(0x40)
	struct AMission* ActiveMission; // 0x138(0x08)
	struct TArray<struct AMission*> Missions; // 0x140(0x10)
	struct TMap<struct TSoftClassPtr<UObject>, struct FMegapacketMission> MegapacketMissionMap; // 0x150(0x50)

	void OnRep_Missions(struct TArray<struct AMission*> OldMissions); // Function ShooterGame.MissionManagerComponent.OnRep_Missions // (Final|Native|Protected) // @ game+0x39d7a00
	void OnRep_ActiveMission(struct AMission* OldMission); // Function ShooterGame.MissionManagerComponent.OnRep_ActiveMission // (Final|Native|Protected) // @ game+0x39d7970
	void HandleObjectiveProgress(struct UObjectiveComponent* ChangedObjective, enum class EObjectiveType Type, enum class EObjectiveStatus OldStatus, enum class EObjectiveStatus NewStatus); // Function ShooterGame.MissionManagerComponent.HandleObjectiveProgress // (Final|Native|Public) // @ game+0x39d7200
	void HandleMissionStatusChanged(struct AMission* Mission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.MissionManagerComponent.HandleMissionStatusChanged // (Final|Native|Public) // @ game+0x39d6fe0
	struct AShooterPlayerState* GetOwningPlayer(); // Function ShooterGame.MissionManagerComponent.GetOwningPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6a10
	struct AMission* GetActiveMission(); // Function ShooterGame.MissionManagerComponent.GetActiveMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d61f0
	void AuthClearMission(); // Function ShooterGame.MissionManagerComponent.AuthClearMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthAssignMission(struct AMission* NewMission); // Function ShooterGame.MissionManagerComponent.AuthAssignMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
};

// Class ShooterGame.MissionSettingsScreen
// Size: 0x2e0 (Inherited: 0x2c8)
struct UMissionSettingsScreen : UUserWidget {
	struct UMissionSettingsScreenCoordinator* MissionSettingsScreenCoordinator; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnScreenVisbilityChanged; // 0x2d0(0x10)
};

// Class ShooterGame.MissionSettingsScreenCoordinator
// Size: 0x50 (Inherited: 0x30)
struct UMissionSettingsScreenCoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x38(0x08)
	struct UMissionSettingsScreen* MissionSettingsScreen; // 0x40(0x08)
	struct AGameStateBase* GameState; // 0x48(0x08)

	void ToggleVisibilityFromInput(); // Function ShooterGame.MissionSettingsScreenCoordinator.ToggleVisibilityFromInput // (Final|Native|Private) // @ game+0x39d7f10
	void ToggleVisibility(); // Function ShooterGame.MissionSettingsScreenCoordinator.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x39d7ef0
	void SetVisibility(bool bVisible); // Function ShooterGame.MissionSettingsScreenCoordinator.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x39d7e60
	struct AGameStateBase* GetGameState(); // Function ShooterGame.MissionSettingsScreenCoordinator.GetGameState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6710
	bool CanToggleVisibilityFromInput(); // Function ShooterGame.MissionSettingsScreenCoordinator.CanToggleVisibilityFromInput // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
};

// Class ShooterGame.MMRManager
// Size: 0x388 (Inherited: 0x80)
struct UMMRManager : UInitSystem {
	struct FMulticastInlineDelegate OnPlayerUpdated; // 0x80(0x10)
	char pad_90[0xe8]; // 0x90(0xe8)
	struct UConfigManager* ConfigManager; // 0x178(0x08)
	struct URMSManager* RMSManager; // 0x180(0x08)
	struct URSOManager* RSOManager; // 0x188(0x08)
	struct UContentIndex* ContentIndex; // 0x190(0x08)
	struct UContentManager* ContentManager; // 0x198(0x08)
	struct UMMRService* MMRService; // 0x1a0(0x08)
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x1b0(0x08)
	char pad_1B8[0x1d0]; // 0x1b8(0x1d0)

	void UpdateHideActRankBadge(bool Hide, struct FDelegate OnError); // Function ShooterGame.MMRManager.UpdateHideActRankBadge // (Final|Native|Public|BlueprintCallable) // @ game+0x39d80c0
	void UpdateAnonymizeLeaderboardPlayer(bool Anonymize, struct FGuid& SeasonID, struct FDelegate OnError); // Function ShooterGame.MMRManager.UpdateAnonymizeLeaderboardPlayer // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39d7f60
	void SetPlayer(struct FMMRPlayer& NewPlayer); // Function ShooterGame.MMRManager.SetPlayer // (Final|Native|Private|HasOutParms) // @ game+0x39d7c90
	void RefreshPlayer(); // Function ShooterGame.MMRManager.RefreshPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x39d7ba0
	bool IsPromotion(struct FMMRMatchInfo& Match); // Function ShooterGame.MMRManager.IsPromotion // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d7790
	bool IsDemotion(struct FMMRMatchInfo& Match); // Function ShooterGame.MMRManager.IsDemotion // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d76a0
	void GetSeasonInfoForQueue(struct FGuid SeasonID, struct FString QueueID, struct FProcessedSeasonInfo& OutSeasonInfo); // Function ShooterGame.MMRManager.GetSeasonInfoForQueue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39d6b90
	bool GetPlayer(struct FMMRPlayer& OutPlayer); // Function ShooterGame.MMRManager.GetPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6a40
	void GetOtherPlayer(struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.MMRManager.GetOtherPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39d6880
	struct UMMRManager* GetMMRManager(struct UObject* WorldContextObject); // Function ShooterGame.MMRManager.GetMMRManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39d6740
	struct FString GetDefaultTournamentQueue(); // Function ShooterGame.MMRManager.GetDefaultTournamentQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39d6690
	struct FString GetDefaultCompetitiveQueue(); // Function ShooterGame.MMRManager.GetDefaultCompetitiveQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39d6610
	bool GetCurrentSeasonInfoForQueue(struct FString QueueID, struct FProcessedSeasonInfo& OutSeasonInfo); // Function ShooterGame.MMRManager.GetCurrentSeasonInfoForQueue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39d63f0
	bool GetCurrentSeasonID(struct FGuid& OutCurrentSeasonID); // Function ShooterGame.MMRManager.GetCurrentSeasonID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x39d6340
	bool GetCompetitiveUpdateForMatch(struct FString MatchID, struct FMMRMatchInfo& OutMatchInfo); // Function ShooterGame.MMRManager.GetCompetitiveUpdateForMatch // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39d6220
	void FetchLeaderboard(struct FGuid& SeasonID, int32_t StartIndex, int32_t Size, struct FString SearchStr, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.MMRManager.FetchLeaderboard // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39d5fa0
	void DebugOverrideSeasonInfo(struct FString QueueID, struct FString SeasonID, int32_t NumWins, int32_t RankIndex, int32_t CapstoneWins, int32_t Rank, struct TMap<int32_t, int32_t> WinsByTier, int32_t LeaderboardPosition); // Function ShooterGame.MMRManager.DebugOverrideSeasonInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x39d5b50
	void DebugOverrideCompetitiveUpdateForMatch(struct FString MatchID, int32_t TierBeforeUpdate, int32_t TierAfterUpdate, int32_t TierProgressBeforeUpdate, int32_t TierProgressAfterUpdate, int32_t RankedRatingDelta, int32_t AFKPenalty, int32_t RankedRatingPerformanceBonus); // Function ShooterGame.MMRManager.DebugOverrideCompetitiveUpdateForMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x39d58d0
	void BP_FetchCompetitiveUpdates(struct FString Subject, int32_t StartIndex, int32_t EndIndex, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.MMRManager.BP_FetchCompetitiveUpdates // (Final|Native|Public|BlueprintCallable) // @ game+0x39d5600
};

// Class ShooterGame.MMRService
// Size: 0x38 (Inherited: 0x30)
struct UMMRService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MobileBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UMobileBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsMobilePlatform(); // Function ShooterGame.MobileBlueprintFunctionLibrary.IsMobilePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x244a2b0
	float GetFOVModifiedDelta(struct UObject* WorldContextObject, float InDelta); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetFOVModifiedDelta // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39e2540
	enum class EDeviceType GetDeviceType(); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetDeviceType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39e2510
	int32_t GetCharacterHUDDesignerPreset(); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetCharacterHUDDesignerPreset // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372eea0
	bool GetCachedDirectConnectSettings(struct FDirectConnectSettings& Settings); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetCachedDirectConnectSettings // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39e23d0
	void CacheDirectConnectSettings(struct FDirectConnectSettings& Settings); // Function ShooterGame.MobileBlueprintFunctionLibrary.CacheDirectConnectSettings // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x39e1d70
};

// Class ShooterGame.MobileDeviceTelemetryComponent
// Size: 0x150 (Inherited: 0xe8)
struct UMobileDeviceTelemetryComponent : UActorComponent {
	char pad_E8[0x68]; // 0xe8(0x68)

	void OnRoundStart(int32_t RoundNumberBeginning); // Function ShooterGame.MobileDeviceTelemetryComponent.OnRoundStart // (Final|Native|Public) // @ game+0x39e2810
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.MobileDeviceTelemetryComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x39e2780
};

// Class ShooterGame.MobileOverlayViewController
// Size: 0x70 (Inherited: 0x30)
struct UMobileOverlayViewController : UObject {
	struct FMulticastInlineDelegate OnCurrentOverlayMenuChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnTextChatPanelRequested; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSocialPanelRequested; // 0x50(0x10)
	struct UTextChatPanelViewController* TextChatPanelViewController; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void RequestOverlayMenu(enum class EMobileOverlayMenuID NewValue); // Function ShooterGame.MobileOverlayViewController.RequestOverlayMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x39e2a00
	void OpenTextChatConversation(struct TScriptInterface<ITextChatConversation> Conversation); // Function ShooterGame.MobileOverlayViewController.OpenTextChatConversation // (Final|Native|Public|BlueprintCallable) // @ game+0x39e28c0
	void OpenSocialPanel(); // Function ShooterGame.MobileOverlayViewController.OpenSocialPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x39e28a0
	enum class EMobileOverlayMenuID GetCurrentOverlayMenu(); // Function ShooterGame.MobileOverlayViewController.GetCurrentOverlayMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e24e0
};

// Class ShooterGame.MockMegapacketSubsytem
// Size: 0x348 (Inherited: 0x38)
struct UMockMegapacketSubsytem : UGameInstanceSubsystem {
	char pad_38[0x310]; // 0x38(0x310)
};

// Class ShooterGame.MockRewinder
// Size: 0x48 (Inherited: 0x30)
struct UMockRewinder : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.ModalManager
// Size: 0x58 (Inherited: 0x30)
struct UModalManager : UObject {
	struct FMulticastInlineDelegate OnNotificationDequeued; // 0x30(0x10)
	struct UQueuedNotification* CurrentNotification; // 0x40(0x08)
	struct TArray<struct UQueuedNotification*> InternalQueue; // 0x48(0x10)

	void RemoveQueuedNotification(struct FGuid& NotificationID); // Function ShooterGame.ModalManager.RemoveQueuedNotification // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x39e2960
	void OnCurrentModalDisposed(struct UQueuedNotification* Notification); // Function ShooterGame.ModalManager.OnCurrentModalDisposed // (Final|Native|Private) // @ game+0x39e26d0
	bool HasCurrentNotification(); // Function ShooterGame.ModalManager.HasCurrentNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e26a0
	struct UQueuedNotification* GetCurrentNotification(); // Function ShooterGame.ModalManager.GetCurrentNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9760
	struct UQueuedNotification* EnqueueGenericNotificationAsModal(struct UGenericNotification* NotificationData); // Function ShooterGame.ModalManager.EnqueueGenericNotificationAsModal // (Final|Native|Public|BlueprintCallable) // @ game+0x39e2330
	struct UQueuedNotification* EnqueueGenericModal(struct FText Title, struct FText Message, enum class EAresNotificationType NotificationType, struct FText PrimaryActionButtonText, bool ShowSecondaryActionButton, struct FText SecondaryActionButtonText, bool ShowDismissActionButton, struct FText DismissActionButtonText); // Function ShooterGame.ModalManager.EnqueueGenericModal // (Final|Native|Public|BlueprintCallable) // @ game+0x39e1e70
};

// Class ShooterGame.ModeComponent
// Size: 0x118 (Inherited: 0xe8)
struct UModeComponent : UActorComponent {
	struct FMulticastInlineDelegate OnModeChanged; // 0xe8(0x10)
	struct FModeVariables AuthModeVariables; // 0xf8(0x08)
	struct FModeVariables ClientPredictedModeVariables; // 0x100(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimerClassOverride; // 0x108(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x110(0x08)

	void SetNumModes(int32_t Num); // Function ShooterGame.ModeComponent.SetNumModes // (Final|Native|Public|BlueprintCallable) // @ game+0x39e2b10
	void SetMode(int32_t ModeNumber); // Function ShooterGame.ModeComponent.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x39e2a80
	void OnRep_ModeVariables(); // Function ShooterGame.ModeComponent.OnRep_ModeVariables // (Final|Native|Private) // @ game+0x39e2760
	int32_t GetNumModes(); // Function ShooterGame.ModeComponent.GetNumModes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e2670
	int32_t GetNextMode(); // Function ShooterGame.ModeComponent.GetNextMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e2640
	int32_t GetMode(); // Function ShooterGame.ModeComponent.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e2610
};

// Class ShooterGame.ModeGameDataEventSubscriptions
// Size: 0x38 (Inherited: 0x30)
struct UModeGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
};

// Class ShooterGame.ModifiedListModelBase
// Size: 0x78 (Inherited: 0x58)
struct UModifiedListModelBase : UWrapperListModel {
	struct TArray<struct FWildcard> ModifiedListItemDataCache; // 0x58(0x10)
	struct TArray<bool> DirtyFlags; // 0x68(0x10)

	struct FWildcard ModifyListItem(struct FWildcard ListItem, struct FWildcard OldModifiedItem); // Function ShooterGame.ModifiedListModelBase.ModifyListItem // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x39e9600
	void BP_NotifyModificationRuleChanged(); // Function ShooterGame.ModifiedListModelBase.BP_NotifyModificationRuleChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x39e9030
};

// Class ShooterGame.ModifiedListModel
// Size: 0x88 (Inherited: 0x78)
struct UModifiedListModel : UModifiedListModelBase {
	char pad_78[0x10]; // 0x78(0x10)

	void SetModificationDelegate(struct FDelegate& Delegate); // Function ShooterGame.ModifiedListModel.SetModificationDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39e9d20
	void NotifyModificationRuleChanged(); // Function ShooterGame.ModifiedListModel.NotifyModificationRuleChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9030
	struct UModifiedListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& ModificationDelegate, struct UObject* Outer); // Function ShooterGame.ModifiedListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x39e9050
};

// Class ShooterGame.MoneyManagementComponent
// Size: 0x120 (Inherited: 0xe8)
struct UMoneyManagementComponent : UActorComponent {
	int32_t EnergyCostInMoney; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate OnMoneyUpdated; // 0xf0(0x10)
	int32_t Money; // 0x100(0x04)
	int32_t TotalMoneyGranted; // 0x104(0x04)
	int32_t MoneyGainedSinceLastRound; // 0x108(0x04)
	int32_t MoneyOverMaxSinceLastRound; // 0x10c(0x04)
	int32_t Energy; // 0x110(0x04)
	int32_t TotalEnergyGranted; // 0x114(0x04)
	int32_t NumRefundableEnergy; // 0x118(0x04)
	int32_t Experience; // 0x11c(0x04)

	void OnRep_Money(int32_t& OldMoney); // Function ShooterGame.MoneyManagementComponent.OnRep_Money // (Final|Native|Protected|HasOutParms) // @ game+0x39e9910
	void OnGamePhaseChanged(enum class EAresGamePhase NewGamePhase, int32_t RoundNumberEnded); // Function ShooterGame.MoneyManagementComponent.OnGamePhaseChanged // (Final|Native|Public) // @ game+0x39e9820
	int32_t GetTotalMoneyGranted(); // Function ShooterGame.MoneyManagementComponent.GetTotalMoneyGranted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e9460
	int32_t GetTotalEnergyGranted(); // Function ShooterGame.MoneyManagementComponent.GetTotalEnergyGranted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2627830
	int32_t GetRefundableEnergy(); // Function ShooterGame.MoneyManagementComponent.GetRefundableEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635e80
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.MoneyManagementComponent.GetPlayerState // (Final|Native|Protected) // @ game+0x39d6a10
	int32_t GetMoneyOverMaxSinceLastRound(); // Function ShooterGame.MoneyManagementComponent.GetMoneyOverMaxSinceLastRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e040
	int32_t GetMoney(); // Function ShooterGame.MoneyManagementComponent.GetMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3635e50
	int32_t GetMaxExperience(); // Function ShooterGame.MoneyManagementComponent.GetMaxExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e9260
	int32_t GetMaxEnergy(); // Function ShooterGame.MoneyManagementComponent.GetMaxEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e9230
	int32_t GetExperience(); // Function ShooterGame.MoneyManagementComponent.GetExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e9200
	int32_t GetEnergy(); // Function ShooterGame.MoneyManagementComponent.GetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2627890
	void AuthSetMoney(int32_t MoneyToSet); // Function ShooterGame.MoneyManagementComponent.AuthSetMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthSetExperience(int32_t Amount); // Function ShooterGame.MoneyManagementComponent.AuthSetExperience // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthSetEnergy(int32_t Amount); // Function ShooterGame.MoneyManagementComponent.AuthSetEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthResetMoney(); // Function ShooterGame.MoneyManagementComponent.AuthResetMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37e5df0
	void AuthResetExperience(); // Function ShooterGame.MoneyManagementComponent.AuthResetExperience // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37e5df0
	void AuthResetEnergy(); // Function ShooterGame.MoneyManagementComponent.AuthResetEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x37e5df0
	void AuthResetCurrencies(); // Function ShooterGame.MoneyManagementComponent.AuthResetCurrencies // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x39e9010
	int32_t AuthRemoveMoneyGainedSinceLastRound(); // Function ShooterGame.MoneyManagementComponent.AuthRemoveMoneyGainedSinceLastRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x393f7b0
	void AuthRemoveEnergy(int32_t EnergyToRemove, enum class EIsRefundable Refundable); // Function ShooterGame.MoneyManagementComponent.AuthRemoveEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x39e8f40
	void AuthRefundCost(struct UAresPurchasable* WhichPurchasable, int32_t RefundValue); // Function ShooterGame.MoneyManagementComponent.AuthRefundCost // (Final|Native|Public) // @ game+0x3636980
	void AuthGiveMoney(int32_t MoneyToGive, struct FName RewardName); // Function ShooterGame.MoneyManagementComponent.AuthGiveMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x39e8e60
	void AuthGiveExperience(int32_t ExperienceToGive, struct FName RewardName, enum class EIsRefundable Refundable); // Function ShooterGame.MoneyManagementComponent.AuthGiveExperience // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x39e8d30
	void AuthGiveEnergy(int32_t EnergyToGive, struct FName RewardName, enum class EIsRefundable Refundable); // Function ShooterGame.MoneyManagementComponent.AuthGiveEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x39e8d30
	void AuthDeductCost(struct UAresPurchasable* WhichPurchasable, int32_t Cost); // Function ShooterGame.MoneyManagementComponent.AuthDeductCost // (Final|Native|Public) // @ game+0x3636980
};

// Class ShooterGame.MovementTimeShiftMonitor
// Size: 0x128 (Inherited: 0x30)
struct UMovementTimeShiftMonitor : UObject {
	char pad_30[0xf8]; // 0x30(0xf8)
};

// Class ShooterGame.MultiItemSlot
// Size: 0x60 (Inherited: 0x48)
struct UMultiItemSlot : UItemSlot {
	int32_t Capacity; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct AAresItem*> MultiContents; // 0x50(0x10)
};

// Class ShooterGame.MultiTransitionStateComponent
// Size: 0x468 (Inherited: 0x408)
struct UMultiTransitionStateComponent : UTimedStateComponent {
	struct TArray<struct FScriptStateEffectInfo> DefaultEffects; // 0x408(0x10)
	struct TMap<enum class EAresItemSlot, struct FScriptStateEffectInfoArray> TransitionEffectsMap; // 0x418(0x50)
};

// Class ShooterGame.MutableEntryTileView
// Size: 0x8e8 (Inherited: 0x3c8)
struct UMutableEntryTileView : UTileView {
	struct FScrollBarStyle WidgetBarStyle; // 0x3c8(0x518)
	float ScrollbarThickness; // 0x8e0(0x04)
	char pad_8E4[0x4]; // 0x8e4(0x04)

	void SetTileAlignment(enum class EListItemAlignment Alignment); // Function ShooterGame.MutableEntryTileView.SetTileAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9e60
	void SetOrientation(enum class EOrientation ViewOrientation); // Function ShooterGame.MutableEntryTileView.SetOrientation // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9de0
	void SetEntryWidgetClass(struct UUserWidget* WidgetClass); // Function ShooterGame.MutableEntryTileView.SetEntryWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9c00
	void SetEntrySpacing(float Spacing); // Function ShooterGame.MutableEntryTileView.SetEntrySpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x2628850
};

// Class ShooterGame.MutedPatternsManager
// Size: 0x2a8 (Inherited: 0x80)
struct UMutedPatternsManager : UInitSystem {
	struct FMulticastInlineDelegate OnMutedPatternsDictionaryUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnFeatureToggleChanged; // 0x90(0x10)
	char pad_A0[0x180]; // 0xa0(0x180)
	struct UAresSettingsManager* AresSettingsManager; // 0x220(0x08)
	struct TScriptInterface<IAresStringListSettingModel> StringListModel; // 0x228(0x10)
	struct UConfigManager* ConfigManager; // 0x238(0x08)
	char pad_240[0x48]; // 0x240(0x48)
	struct URSOManager* RSOManager; // 0x288(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x290(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x298(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x2a0(0x08)

	bool StringContainsAnyPattern(struct FString inString); // Function ShooterGame.MutedPatternsManager.StringContainsAnyPattern // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39e9ee0
	void OnSettingsCommit(); // Function ShooterGame.MutedPatternsManager.OnSettingsCommit // (Final|Native|Private) // @ game+0x39e99a0
	bool MaskPatternsInString(struct FString& InOutString); // Function ShooterGame.MutedPatternsManager.MaskPatternsInString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39e9540
	bool IsFeatureEnabled(); // Function ShooterGame.MutedPatternsManager.IsFeatureEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e9520
	void HandleMutedWordsListChanged(struct UObject* Source); // Function ShooterGame.MutedPatternsManager.HandleMutedWordsListChanged // (Final|Native|Private) // @ game+0x39e9490
	struct UMutedPatternsManager* GetMutedPatternsManager(struct UObject* WorldContextObject); // Function ShooterGame.MutedPatternsManager.GetMutedPatternsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x39e9290
};

// Class ShooterGame.NativePlatformFriendsManager
// Size: 0x1a8 (Inherited: 0x80)
struct UNativePlatformFriendsManager : UInitSystem {
	struct FMulticastInlineDelegate OnFriendsListChanged; // 0x80(0x10)
	char pad_90[0x58]; // 0x90(0x58)
	struct TMap<struct FString, struct TWeakObjectPtr<struct UPlatformPlayer>> PlayerCache; // 0xe8(0x50)
	struct TArray<struct USocialPlayer*> SortedPlayers; // 0x138(0x10)
	struct TMap<struct FString, struct TWeakObjectPtr<struct UPlatformPlayer>> NativePlayerCache; // 0x148(0x50)
	char pad_198[0x10]; // 0x198(0x10)

	void UpdateNativePlatformFriendsList(); // Function ShooterGame.NativePlatformFriendsManager.UpdateNativePlatformFriendsList // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9fa0
	void SetFriendsListPollingForUpdates(bool bShouldPollForUpdates); // Function ShooterGame.NativePlatformFriendsManager.SetFriendsListPollingForUpdates // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9c90
	void SendFriendRequestThroughNativeSubsystem(struct UPlatformPlayer* PlatformPlayer, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.NativePlatformFriendsManager.SendFriendRequestThroughNativeSubsystem // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9ab0
	void OpenNativePlatformPlayerProfile(struct UPlatformPlayer* PlatformPlayer, struct FDelegate OnProfileUIClosed); // Function ShooterGame.NativePlatformFriendsManager.OpenNativePlatformPlayerProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x39e99c0
	struct TArray<struct USocialPlayer*> GetNativePlatformPlayers(); // Function ShooterGame.NativePlatformFriendsManager.GetNativePlatformPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e93e0
	struct UPlatformPlayer* GetNativePlatformPlayerBySubject(struct FString GameName); // Function ShooterGame.NativePlatformFriendsManager.GetNativePlatformPlayerBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x39e9320
};

// Class ShooterGame.NavAreaMeta_SwitchByTeamRole
// Size: 0xa0 (Inherited: 0x50)
struct UNavAreaMeta_SwitchByTeamRole : UNavAreaMeta {
	struct TMap<enum class EAresTeamRole, struct UNavAreaBase*> NavAreaClassesByTeamRole; // 0x50(0x50)
};

// Class ShooterGame.NavFilterMeta_SwitchByTeamRole
// Size: 0xa0 (Inherited: 0x50)
struct UNavFilterMeta_SwitchByTeamRole : UNavigationQueryFilter {
	struct TMap<enum class EAresTeamRole, struct UNavigationQueryFilter*> NavFilterClassesByTeamRole; // 0x50(0x50)
};

// Class ShooterGame.NavPointComponent
// Size: 0x6e0 (Inherited: 0x6c0)
struct UNavPointComponent : UWidgetComponent {
	struct FVector2D SceneScale; // 0x6b8(0x08)
	float MinOnScreenSize; // 0x6c0(0x04)
	float MaxOnScreenSize; // 0x6c4(0x04)
	struct AShooterCharacter* OwningCharacter; // 0x6c8(0x08)
	struct AAresPlayerController* LocalPC; // 0x6d0(0x08)
};

// Class ShooterGame.NavPointWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UNavPointWidget : UUserWidget {
	struct AShooterCharacter* OwningCharacter; // 0x2c8(0x08)
	float LowHealthThreshold; // 0x2d0(0x04)
	bool bIsLowHealth; // 0x2d4(0x01)
	bool bIsUltimateReady; // 0x2d5(0x01)
	char pad_2D6[0x2]; // 0x2d6(0x02)

	void OnUltimateStatusChanged(); // Function ShooterGame.NavPointWidget.OnUltimateStatusChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnHealthStatusChanged(); // Function ShooterGame.NavPointWidget.OnHealthStatusChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.NetworkedRandomNumberGeneratorComponent
// Size: 0x118 (Inherited: 0xe8)
struct UNetworkedRandomNumberGeneratorComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	int32_t AuthInitialRandomSeed; // 0x100(0x04)
	int32_t AuthCurrentRandomSeed; // 0x104(0x04)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimerClassOverride; // 0x108(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x110(0x08)

	void OnRep_InitialRandomSeed(); // Function ShooterGame.NetworkedRandomNumberGeneratorComponent.OnRep_InitialRandomSeed // (Final|Native|Private) // @ game+0x39e98f0
	void OnRep_CurrentRandomSeed(); // Function ShooterGame.NetworkedRandomNumberGeneratorComponent.OnRep_CurrentRandomSeed // (Final|Native|Private) // @ game+0x39e2760
	int32_t GetAndConsumeCurrentSeed(); // Function ShooterGame.NetworkedRandomNumberGeneratorComponent.GetAndConsumeCurrentSeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39e91d0
};

// Class ShooterGame.NetworkStreamableInterface
// Size: 0x30 (Inherited: 0x30)
struct UNetworkStreamableInterface : UInterface {
};

// Class ShooterGame.NetworkStreamComponent
// Size: 0x108 (Inherited: 0xe8)
struct UNetworkStreamComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bIsProcessingStreamData; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct AShooterCharacter* ShooterCharacterOwner; // 0xf8(0x08)
	float LastCaptureTime; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class ShooterGame.NeutralTeamComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UNeutralTeamComponent : UBaseTeamComponent {
};

// Class ShooterGame.NonVerbalCommsViewModel
// Size: 0x48 (Inherited: 0x48)
struct UNonVerbalCommsViewModel : UAresViewModelBase {
};

// Class ShooterGame.NotificationManager
// Size: 0x50 (Inherited: 0x30)
struct UNotificationManager : UObject {
	struct UNotificationsModel* NotificationsModel; // 0x30(0x08)
	struct FMulticastInlineDelegate OnNotificationRequeued; // 0x38(0x10)
	struct UThreadedChatManager* ThreadedChatManager; // 0x48(0x08)

	void PushNotification(struct UNotification* Notification, bool ShouldShowChatMessage, enum class EMessagePartType PartType); // Function ShooterGame.NotificationManager.PushNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x39f0b80
	struct UNotificationsModel* GetNotificationsModel(); // Function ShooterGame.NotificationManager.GetNotificationsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c60
	void EnqueueToastsRelatedToSubject(struct FString Subject); // Function ShooterGame.NotificationManager.EnqueueToastsRelatedToSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x39eff30
	struct UNotificationsViewModel* CreateNotificationsViewModel(); // Function ShooterGame.NotificationManager.CreateNotificationsViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39efe70
};

// Class ShooterGame.NotificationsModel
// Size: 0x60 (Inherited: 0x30)
struct UNotificationsModel : UObject {
	struct FMulticastInlineDelegate OnNotificationAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnNotificationRemoved; // 0x40(0x10)
	struct TArray<struct UNotification*> Notifications; // 0x50(0x10)

	struct TArray<struct UNotification*> GetNotificationsByRelatedSubject(struct FString Subject); // Function ShooterGame.NotificationsModel.GetNotificationsByRelatedSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f0190
	struct TArray<struct UNotification*> GetNotifications(); // Function ShooterGame.NotificationsModel.GetNotifications // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f0110
};

// Class ShooterGame.NotificationsViewModel
// Size: 0x78 (Inherited: 0x30)
struct UNotificationsViewModel : UObject {
	struct FMulticastInlineDelegate OnNotificationAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnNotificationRemoved; // 0x40(0x10)
	struct UNotificationsModel* NotificationsModel; // 0x50(0x08)
	struct TArray<struct UNotification*> ToastViewQueue; // 0x58(0x10)
	struct TArray<struct UNotification*> DisplayedToasts; // 0x68(0x10)

	struct UNotification* PopToast(); // Function ShooterGame.NotificationsViewModel.PopToast // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39f0b50
	void NotificationDisplayFinished(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.NotificationDisplayFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x39f0660
	void HandleNotificationRemoved(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.HandleNotificationRemoved // (Final|Native|Private) // @ game+0x39f0510
	void HandleNotificationAdded(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.HandleNotificationAdded // (Final|Native|Private) // @ game+0x39f0480
	struct TArray<struct UNotification*> GetToastViewQueue(); // Function ShooterGame.NotificationsViewModel.GetToastViewQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x39f0400
	struct TArray<struct UNotification*> GetDisplayedToasts(); // Function ShooterGame.NotificationsViewModel.GetDisplayedToasts // (Final|Native|Public|BlueprintCallable) // @ game+0x39f0090
	void EnqueueToastForViewing(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.EnqueueToastForViewing // (Final|Native|Public|BlueprintCallable) // @ game+0x39efea0
	bool ContainsPendingToasts(); // Function ShooterGame.NotificationsViewModel.ContainsPendingToasts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x39efe40
};

// Class ShooterGame.NPELoader
// Size: 0x90 (Inherited: 0x80)
struct UNPELoader : UInitSystem {
	struct UMMRManager* MMRManager; // 0x80(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x88(0x08)
};

// Class ShooterGame.NumericProgressModel
// Size: 0x30 (Inherited: 0x30)
struct UNumericProgressModel : UInterface {

	void UnbindProgressValueChanged(struct FDelegate& Delegate); // Function ShooterGame.NumericProgressModel.UnbindProgressValueChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x39f0c90
	bool HasProgressValue(); // Function ShooterGame.NumericProgressModel.HasProgressValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3950f90
	struct FNumericProgressValue GetProgressValue(); // Function ShooterGame.NumericProgressModel.GetProgressValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f02c0
	void BindProgressValueChanged(struct FDelegate& Delegate); // Function ShooterGame.NumericProgressModel.BindProgressValueChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x398f450
};

// Class ShooterGame.ObjectiveComponent
// Size: 0x178 (Inherited: 0xe8)
struct UObjectiveComponent : UActorComponent {
	struct FMulticastInlineDelegate OnObjectiveReset; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnObjectiveStatusOrProgressChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnObjectiveActivated; // 0x108(0x10)
	struct FMulticastInlineDelegate OnObjectiveCompleted; // 0x118(0x10)
	struct FMulticastInlineDelegate OnObjectiveFailed; // 0x128(0x10)
	char SortIndex; // 0x138(0x01)
	enum class EObjectiveType ObjectiveType; // 0x139(0x01)
	char pad_13A[0x2]; // 0x13a(0x02)
	int32_t ProgressToComplete; // 0x13c(0x04)
	struct FText DefaultDescription; // 0x140(0x18)
	char PlatformVisibility; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	struct FObjectiveStatusTracker Status; // 0x15c(0x08)
	int32_t Progress; // 0x164(0x04)
	struct AMission* Mission; // 0x168(0x08)
	char pad_170[0x8]; // 0x170(0x08)

	void OnRep_Status(struct FObjectiveStatusTracker OldStatus); // Function ShooterGame.ObjectiveComponent.OnRep_Status // (Native|Protected) // @ game+0x39f0ab0
	void OnRep_Progress(int32_t OldProgress); // Function ShooterGame.ObjectiveComponent.OnRep_Progress // (Native|Protected) // @ game+0x39f0a20
	bool IsVisibleOnPlatform(enum class EAresObjectivePlatformVisibility PlatformsToCheck); // Function ShooterGame.ObjectiveComponent.IsVisibleOnPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f05d0
	bool IsVisible(); // Function ShooterGame.ObjectiveComponent.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f05a0
	enum class EObjectiveStatus GetStatus(); // Function ShooterGame.ObjectiveComponent.GetStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f03d0
	int32_t GetProgress(); // Function ShooterGame.ObjectiveComponent.GetProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f0290
	struct FText GetDescription(); // Function ShooterGame.ObjectiveComponent.GetDescription // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x39effe0
	void ClientUpdateObjectiveStatus(enum class EObjectiveStatus OldStatus, struct FObjectiveStatusTracker NewStatus); // Function ShooterGame.ObjectiveComponent.ClientUpdateObjectiveStatus // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x39efd60
	void ClientHandleObjectiveReset(); // Function ShooterGame.ObjectiveComponent.ClientHandleObjectiveReset // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x3654e70
	void AuthResetObjective(); // Function ShooterGame.ObjectiveComponent.AuthResetObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthFailObjective(); // Function ShooterGame.ObjectiveComponent.AuthFailObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthCompleteObjective(); // Function ShooterGame.ObjectiveComponent.AuthCompleteObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthApplyOverrideProgress(struct FAresMatchResult& MatchResults); // Function ShooterGame.ObjectiveComponent.AuthApplyOverrideProgress // (Final|Native|Protected|HasOutParms) // @ game+0x36d65e0
	void AuthAddProgress(int32_t ProgressAmount); // Function ShooterGame.ObjectiveComponent.AuthAddProgress // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void AuthActivateObjective(); // Function ShooterGame.ObjectiveComponent.AuthActivateObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.ObjectiveOverrideComponent
// Size: 0x140 (Inherited: 0xe8)
struct UObjectiveOverrideComponent : UActorComponent {
	float MaxGameLengthSeconds; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TMap<struct TSoftClassPtr<UObject>, struct FObjectiveOverrideData> Overrides; // 0xf0(0x50)
};

// Class ShooterGame.ObjectWithWorldContext
// Size: 0x38 (Inherited: 0x30)
struct UObjectWithWorldContext : UObject {
	struct UWorld* World; // 0x30(0x08)
};

// Class ShooterGame.ObservableArrayWrapperListModel
// Size: 0x98 (Inherited: 0x48)
struct UObservableArrayWrapperListModel : UOrderedListModelBase {
	struct UObject* BackingArrayOwner; // 0x48(0x08)
	char pad_50[0x48]; // 0x50(0x48)
};

// Class ShooterGame.UnorderedMapModelBase
// Size: 0x48 (Inherited: 0x30)
struct UUnorderedMapModelBase : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.ObservableMapWrapperModel
// Size: 0x88 (Inherited: 0x48)
struct UObservableMapWrapperModel : UUnorderedMapModelBase {
	struct UObject* BackingMapOwner; // 0x48(0x08)
	char pad_50[0x38]; // 0x50(0x38)
};

// Class ShooterGame.ObserverGameDataEventSubscriptions
// Size: 0x38 (Inherited: 0x30)
struct UObserverGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
};

// Class ShooterGame.ObserverPawnMovement
// Size: 0x208 (Inherited: 0x198)
struct UObserverPawnMovement : USpectatorPawnMovement {
	char pad_198[0x70]; // 0x198(0x70)
};

// Class ShooterGame.ObserverPlayerState
// Size: 0x6e0 (Inherited: 0x678)
struct AObserverPlayerState : AAresPlayerStateBase {
	struct FMulticastInlineDelegate OnFollowTargetChanged; // 0x678(0x10)
	char pad_688[0x10]; // 0x688(0x10)
	struct TArray<struct FObfuscatedPlayerInformation> AllPlayersObfuscatedPlayerInformation; // 0x698(0x10)
	struct FTimerHandle UpdateObfuscatedPlayerInformationRetryHandle; // 0x6a8(0x08)
	struct TArray<struct AObserverPlayerState*> ViewTargetFollowers; // 0x6b0(0x10)
	struct AObserverPlayerState* FollowTarget; // 0x6c0(0x08)
	char pad_6C8[0x8]; // 0x6c8(0x08)
	struct UObserverViewOptionsComponent* ReplicatedObserverViewOptionsComponent; // 0x6d0(0x08)
	char pad_6D8[0x8]; // 0x6d8(0x08)

	void OnRep_ObfuscatedPlayerInformation(); // Function ShooterGame.ObserverPlayerState.OnRep_ObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x39f78d0
	void OnRep_FollowTarget(struct AObserverPlayerState* OldFollowTarget); // Function ShooterGame.ObserverPlayerState.OnRep_FollowTarget // (Final|Native|Public) // @ game+0x39f7840
	void HandleControllerObserverViewOptionsChanged(); // Function ShooterGame.ObserverPlayerState.HandleControllerObserverViewOptionsChanged // (Final|Native|Protected) // @ game+0x39f74e0
};

// Class ShooterGame.ObserverTeamComponent
// Size: 0x100 (Inherited: 0xf8)
struct UObserverTeamComponent : UBaseTeamComponent {
	bool bIsModerator; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	bool IsModerator(); // Function ShooterGame.ObserverTeamComponent.IsModerator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37fe940
};

// Class ShooterGame.ObserverViewOptionsComponent
// Size: 0x108 (Inherited: 0xe8)
struct UObserverViewOptionsComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FObserverViewOptionsNetworkedData ObserverViewOptionsNetworkedData; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_ObserverViewOptions(); // Function ShooterGame.ObserverViewOptionsComponent.OnRep_ObserverViewOptions // (Final|Native|Private) // @ game+0x39f78f0
	bool GetSightLinesEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetSightLinesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba610
	bool GetMinimapEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetMinimapEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba650
	bool GetFriendlyOutlinesEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetFriendlyOutlinesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba700
	bool GetEnemyOutlinesEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetEnemyOutlinesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba5f0
};

// Class ShooterGame.OcclusionPathComponent
// Size: 0x208 (Inherited: 0xe8)
struct UOcclusionPathComponent : UActorComponent {
	struct FRuntimeFloatCurve DistanceToOcclusionCurve; // 0xe8(0x88)
	struct TArray<struct FRoomInfo> Rooms; // 0x170(0x10)
	struct TArray<struct FPortalInfo> Portals; // 0x180(0x10)
	char pad_190[0x78]; // 0x190(0x78)

	void OnAudioOcclusionZoneOwnerEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function ShooterGame.OcclusionPathComponent.OnAudioOcclusionZoneOwnerEndPlay // (Final|Native|Public) // @ game+0x39f7650
	float GetOcclusionPathDistance(struct FHitResult& BlockedHit, struct UAresAudioComponent* AudioComponent); // Function ShooterGame.OcclusionPathComponent.GetOcclusionPathDistance // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x39f7140
	void GenerateAudioGraph(); // Function ShooterGame.OcclusionPathComponent.GenerateAudioGraph // (Final|Native|Public) // @ game+0x39f6f00
	bool CanUseOcclusionPathing(); // Function ShooterGame.OcclusionPathComponent.CanUseOcclusionPathing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f6c80
};

// Class ShooterGame.OnGroundEquippableSearchComponent
// Size: 0x130 (Inherited: 0xe8)
struct UOnGroundEquippableSearchComponent : UActorComponent {
	float OnGroundEquippableSearchRadius; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate OnGroundEquippablesUpdated; // 0xf0(0x10)
	struct FVector TeamOnGroundSearchCenter; // 0x100(0x0c)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct TArray<struct AAresOnGroundEquippable*> TeamOnGroundEquippables; // 0x110(0x10)
	struct FName TeamNameToSearch; // 0x120(0x0c)
	char pad_12C[0x4]; // 0x12c(0x04)

	void UpdateOnGroundEquippables(struct AActor* Searcher); // Function ShooterGame.OnGroundEquippableSearchComponent.UpdateOnGroundEquippables // (Final|Native|Private) // @ game+0x39f84e0
	struct TArray<struct AAresOnGroundEquippable*> GetOnGroundEquippables(struct AShooterCharacter* Character); // Function ShooterGame.OnGroundEquippableSearchComponent.GetOnGroundEquippables // (Final|Native|Public|BlueprintCallable) // @ game+0x39f7270
	void DefineOnGroundEquippableSearchPoints(); // Function ShooterGame.OnGroundEquippableSearchComponent.DefineOnGroundEquippableSearchPoints // (Native|Event|Public|BlueprintEvent) // @ game+0x36355e0
};

// Class ShooterGame.OnlineIdentityManager
// Size: 0x50 (Inherited: 0x30)
struct UOnlineIdentityManager : UObject {
	struct URSOManager* RSOManager; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)

	void OnRSOManagerInitialized(); // Function ShooterGame.OnlineIdentityManager.OnRSOManagerInitialized // (Final|Native|Protected) // @ game+0x39f7820
	void OnInitStatusChanged(enum class EAresPlatformInitStatus Status); // Function ShooterGame.OnlineIdentityManager.OnInitStatusChanged // (Final|Native|Protected) // @ game+0x39f7740
};

// Class ShooterGame.OptionsScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct UOptionsScreen : UUserWidget {

	void ReceiveMenuStackEntry(struct UMenuStackEntry* OptionsMenuStackEntry); // Function ShooterGame.OptionsScreen.ReceiveMenuStackEntry // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnOpened(); // Function ShooterGame.OptionsScreen.OnOpened // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnClosed(); // Function ShooterGame.OptionsScreen.OnClosed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.OptionsScreenCoordinator
// Size: 0x90 (Inherited: 0x30)
struct UOptionsScreenCoordinator : UObject {
	char pad_30[0x38]; // 0x30(0x38)
	struct UShooterUICoordinator* ShooterUICoordinator; // 0x68(0x08)
	struct AAresPlayerController* PlayerController; // 0x70(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x78(0x08)
	struct UMenuStackEntry* OptionsMenuStackEntry; // 0x80(0x08)
	bool AllocatedOptionsScreenWidget; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	void OnOpenOptionsScreenTouchInput(); // Function ShooterGame.OptionsScreenCoordinator.OnOpenOptionsScreenTouchInput // (Final|Native|Private) // @ game+0x39f77e0
	void OnOpenOptionsScreenInput(); // Function ShooterGame.OptionsScreenCoordinator.OnOpenOptionsScreenInput // (Final|Native|Private) // @ game+0x39f77c0
	void OnOpenedOptionsScreen(); // Function ShooterGame.OptionsScreenCoordinator.OnOpenedOptionsScreen // (Final|Native|Private) // @ game+0x39f7800
	void OnClosedOptionsScreen(); // Function ShooterGame.OptionsScreenCoordinator.OnClosedOptionsScreen // (Final|Native|Private) // @ game+0x39f7720
	void AllocateOptionsScreenWidget(); // Function ShooterGame.OptionsScreenCoordinator.AllocateOptionsScreenWidget // (Final|Native|Private) // @ game+0x39f6b40
};

// Class ShooterGame.OrderedListModel
// Size: 0x30 (Inherited: 0x30)
struct UOrderedListModel : UInterface {

	void UnbindOnChange(struct FDelegate& Delegate); // Function ShooterGame.OrderedListModel.UnbindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378ca00
	int32_t GetNum(); // Function ShooterGame.OrderedListModel.GetNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f70d0
	void BindOnChange(struct FDelegate& Delegate); // Function ShooterGame.OrderedListModel.BindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378dcb0
};

// Class ShooterGame.OrderedListModelBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UOrderedListModelBlueprintLibrary : UBlueprintFunctionLibrary {

	void TryGetReplacedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Replaced& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetReplacedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39f82b0
	void TryGetReorderedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Reordered& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetReorderedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39f8120
	void TryGetRemovedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Removed& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetRemovedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39f7f90
	void TryGetInsertedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Inserted& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetInsertedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39f7e00
	int32_t IndexOfByKey(struct TScriptInterface<IOrderedListModel> Target, int32_t Key); // Function ShooterGame.OrderedListModelBlueprintLibrary.IndexOfByKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x35b5eb0
	void GetSingleItem(struct FWildcard& Item, struct TScriptInterface<IOrderedListModel> Target, int32_t Index); // Function ShooterGame.OrderedListModelBlueprintLibrary.GetSingleItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39f7350
	void GetItemRange(struct TArray<struct FWildcard>& Items, struct TScriptInterface<IOrderedListModel> Target, struct FIndexRange& Range); // Function ShooterGame.OrderedListModelBlueprintLibrary.GetItemRange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x39f6f40
	void Break_OrderedListModelChangeEventData(struct FOrderedListModelChangeEventData& EventData, enum class EOrderedListModelChangeEventType& EventType); // Function ShooterGame.OrderedListModelBlueprintLibrary.Break_OrderedListModelChangeEventData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x39f6b60
};

// Class ShooterGame.ParallelAnimationConductorNode
// Size: 0xe0 (Inherited: 0xa8)
struct UParallelAnimationConductorNode : UAnimationConductorNodeBase {
	struct FAnimationConductorNodeSignalCondition ItemTerminationCondition; // 0xa8(0x14)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct FParallelAnimationConductorNode_InternalChildData> ChildList; // 0xc0(0x10)
	char pad_D0[0x10]; // 0xd0(0x10)

	void SetChildNodeList(struct TArray<struct TScriptInterface<IAnimationConductorNode>>& NewValue); // Function ShooterGame.ParallelAnimationConductorNode.SetChildNodeList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a06a70
	void RemoveChildNode(struct TScriptInterface<IAnimationConductorNode> Node); // Function ShooterGame.ParallelAnimationConductorNode.RemoveChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a066c0
	void RemoveAllChildNodes(); // Function ShooterGame.ParallelAnimationConductorNode.RemoveAllChildNodes // (Final|Native|Public|BlueprintCallable) // @ game+0x3a066a0
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.ParallelAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x3a043e0
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.ParallelAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x3a04300
	struct UParallelAnimationConductorNode* Create(struct TArray<struct TScriptInterface<IAnimationConductorNode>>& ChildList, struct FAnimationConductorNodeSignalCondition& ItemTerminationCondition, struct UObject* Outer); // Function ShooterGame.ParallelAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3a02840
	void AddChildNode(struct TScriptInterface<IAnimationConductorNode> Node); // Function ShooterGame.ParallelAnimationConductorNode.AddChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a01d50
};

// Class ShooterGame.ParticleModuleTypeDataPatch
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleTypeDataPatch : UParticleModuleTypeDataBase {
	float PatchSpacing; // 0x38(0x04)
	int32_t PatchCellRadius; // 0x3c(0x04)
	float TotalPatchDiameter; // 0x40(0x04)
	float MaterialRadius; // 0x44(0x04)
	float PatchTexturePaddingAmount; // 0x48(0x04)
	float MaskTexelDensityInWorldUnits; // 0x4c(0x04)
	bool bCreateMaskForPartiallyOutsideCells; // 0x50(0x01)
	bool bUseBlueprintSpawning; // 0x51(0x01)
	char pad_52[0x2]; // 0x52(0x02)
	struct FVector PreviewLocation; // 0x54(0x0c)
	struct FName DecalColorName; // 0x60(0x0c)
	struct FName DecalDynamicParameterName; // 0x6c(0x0c)
};

// Class ShooterGame.PartyNotificationNameRequest
// Size: 0x50 (Inherited: 0x30)
struct UPartyNotificationNameRequest : UObject {
	struct UPlatformPlayer* Player; // 0x30(0x08)
	struct UThreadedChatManager* ThreadedChatManager; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)

	void OnPlayerPresenceUpdated(struct FDisplayName& DisplayName); // Function ShooterGame.PartyNotificationNameRequest.OnPlayerPresenceUpdated // (Final|Native|Public|HasOutParms) // @ game+0x3a062b0
};

// Class ShooterGame.PartyChatManager
// Size: 0x60 (Inherited: 0x30)
struct UPartyChatManager : UObject {
	struct UPartyModel* PartyModel; // 0x30(0x08)
	struct UThreadedChatManager* ThreadedChatManager; // 0x38(0x08)
	struct FString LastPartyIDOnAdd; // 0x40(0x10)
	struct TArray<struct UPartyNotificationNameRequest*> CurrentRequests; // 0x50(0x10)

	void OnRequestRemoved(struct UPartyMessageModel* Message); // Function ShooterGame.PartyChatManager.OnRequestRemoved // (Final|Native|Public) // @ game+0x3a06440
	void OnPlayerRemovedFromParty(struct UPartyPlayerModel* Player); // Function ShooterGame.PartyChatManager.OnPlayerRemovedFromParty // (Final|Native|Public) // @ game+0x3a06390
	void OnPlayerAddedToParty(struct UPartyPlayerModel* Player); // Function ShooterGame.PartyChatManager.OnPlayerAddedToParty // (Final|Native|Public) // @ game+0x3a06220
	void OnPartyChanged(struct FString ID); // Function ShooterGame.PartyChatManager.OnPartyChanged // (Final|Native|Public) // @ game+0x3a06170
	void OnPartyAccessibilityChanged(enum class EAresPartyAccessibility Accessibility); // Function ShooterGame.PartyChatManager.OnPartyAccessibilityChanged // (Final|Native|Public) // @ game+0x3a060f0
	void OnOwnerTransferred(struct UPartyPlayerModel* Player); // Function ShooterGame.PartyChatManager.OnOwnerTransferred // (Final|Native|Public) // @ game+0x3a06060
	void OnLeavingMatchmakingChanged(bool IsLeavingMatchmaking); // Function ShooterGame.PartyChatManager.OnLeavingMatchmakingChanged // (Final|Native|Public) // @ game+0x3a05fd0
	void OnInviteRemoved(struct UPartyMessageModel* Message); // Function ShooterGame.PartyChatManager.OnInviteRemoved // (Final|Native|Public) // @ game+0x3a05f40
};

// Class ShooterGame.PartyListingManager
// Size: 0xf8 (Inherited: 0x80)
struct UPartyListingManager : UInitSystem {
	struct FMulticastInlineDelegate OnPartiesListChanged; // 0x80(0x10)
	struct UPresenceManager* PresenceManager; // 0x90(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x98(0x08)
	struct UPlayerListingManager* PlayerListingManager; // 0xa0(0x08)
	struct TMap<struct FString, struct FPartyData> PartiesMap; // 0xa8(0x50)

	void OnPresenceUpdated(); // Function ShooterGame.PartyListingManager.OnPresenceUpdated // (Final|Native|Private) // @ game+0x3a06420
	struct UPartyListingManager* GetPartyListingManager(struct UObject* WorldContextObject); // Function ShooterGame.PartyListingManager.GetPartyListingManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a03e20
	bool GetPartyDataByID(struct FString PartyID, struct FPartyData& OutPartyData); // Function ShooterGame.PartyListingManager.GetPartyDataByID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a03c80
	struct TArray<struct FPartyData> GetPartiesList(); // Function ShooterGame.PartyListingManager.GetPartiesList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03a40
};

// Class ShooterGame.PartyManager
// Size: 0x580 (Inherited: 0x80)
struct UPartyManager : UInitSystem {
	struct FMulticastInlineDelegate OnInviteActionSucceeded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnQueueConfigUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnSendInviteFailed; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSendInviteSucceeded; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnCurrentPartyUpdated; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnCustomGameConfigsUpdated; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnCurrentPlayerUpdated; // 0xe0(0x10)
	char pad_F0[0x370]; // 0xf0(0x370)
	struct UPartyService* PartyService; // 0x460(0x08)
	struct URSOManager* RSOManager; // 0x468(0x08)
	struct URMSManager* RMSManager; // 0x470(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x478(0x08)
	struct UConfigManager* ConfigManager; // 0x480(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x488(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x490(0x08)
	struct UPingManager* PingManager; // 0x498(0x08)
	char pad_4A0[0x10]; // 0x4a0(0x10)
	struct FCustomGameConfigs CustomGameConfigs; // 0x4b0(0x90)
	bool bHasInitialCustomGameConfigs; // 0x540(0x01)
	char pad_541[0x3f]; // 0x541(0x3f)

	void UpdateReadyStatus(bool IsReady); // Function ShooterGame.PartyManager.UpdateReadyStatus // (Final|Native|Public) // @ game+0x3a07530
	bool TransferOwner(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.TransferOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x3a073b0
	enum class EPartyErrorEnum StringToPartyErrorEnum(struct FString errorStr); // Function ShooterGame.PartyManager.StringToPartyErrorEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3a07300
	bool SetPremierEventID(struct FString EventID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.SetPremierEventID // (Final|Native|Public|BlueprintCallable) // @ game+0x3a07180
	bool SetPreferredGamePods(struct TMap<struct FString, bool>& PreferredGamePodsMap, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.SetPreferredGamePods // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a06ff0
	bool SetLookingForMore(bool LookingForMore, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.SetLookingForMore // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06ee0
	void SetForceGameProcessing(bool ForcePostProcessing, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.SetForceGameProcessing // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06ce0
	bool SetAccessibility(enum class EAresPartyAccessibility Accessibility, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.SetAccessibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3a06970
	bool RequestToJoinParty(struct FString PartyID, struct TArray<struct FString>& Subjects, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.RequestToJoinParty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a06760
	void RefreshCurrentPlayer(); // Function ShooterGame.PartyManager.RefreshCurrentPlayer // (Final|Native|Private) // @ game+0x3a06680
	void RefreshCurrentParty(); // Function ShooterGame.PartyManager.RefreshCurrentParty // (Final|Native|Private) // @ game+0x3a06660
	void OverrideGamePod(struct FString GamePodOverride, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.OverrideGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x3a064f0
	void OnSessionLoopStateChanged(); // Function ShooterGame.PartyManager.OnSessionLoopStateChanged // (Final|Native|Private) // @ game+0x3a064d0
	void OnGameFlowUpdated(enum class EGameFlowStateType GameFlowType); // Function ShooterGame.PartyManager.OnGameFlowUpdated // (Final|Native|Private) // @ game+0x3a05ec0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PartyManager.OnBugCommand // (Final|Native|Private) // @ game+0x3a05d70
	bool LeaveMatchmakingQueue(struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.LeaveMatchmakingQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x3a05b90
	bool LeaveCurrentPartyV2(struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.LeaveCurrentPartyV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x3a05ad0
	bool KickFromTournamentParty(struct FString RosterID, struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.KickFromTournamentParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a05950
	bool KickFromParty(struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.KickFromParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a05830
	bool JoinPartySolo(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinPartySolo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a056b0
	bool JoinPartyByInviteCode(struct FString InviteCode, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinPartyByInviteCode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a05530
	bool JoinOrCreateRosterParty(struct FString RosterID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinOrCreateRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a053b0
	bool JoinMatchOnPlayer(struct FString SubjectToJoin, struct FString TeamID, struct TMap<struct FString, struct FString> AgentSelections, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinMatchOnPlayer // (Final|Native|Public) // @ game+0x3a050d0
	bool JoinMatch(struct FString MatchID, struct FString TeamID, struct TMap<struct FString, struct FString> AgentSelections, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinMatch // (Final|Native|Public) // @ game+0x3a04df0
	bool IsPartyInviteCodeEnabled(); // Function ShooterGame.PartyManager.IsPartyInviteCodeEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a04dc0
	bool IsOwner(); // Function ShooterGame.PartyManager.IsOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a04d90
	bool IsInitialized(); // Function ShooterGame.PartyManager.IsInitialized // (Final|Native|Public|BlueprintCallable) // @ game+0x3a04d60
	bool InviteToPartyByDisplayName(struct FString Name, struct FString Tag, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.InviteToPartyByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x3a04b80
	bool InviteToParty(struct TArray<struct FString> Subjects, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.InviteToParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a04960
	bool HasCurrentPlayer(); // Function ShooterGame.PartyManager.HasCurrentPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a04930
	bool HasCurrentParty(); // Function ShooterGame.PartyManager.HasCurrentParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a04900
	void HandleReconcileSuccess(struct FPartyPlayer& Player); // Function ShooterGame.PartyManager.HandleReconcileSuccess // (Final|Native|Private|HasOutParms) // @ game+0x3a04710
	void HandleReconcileError(struct FAmbassadorError& Error); // Function ShooterGame.PartyManager.HandleReconcileError // (Final|Native|Private|HasOutParms) // @ game+0x3a04630
	struct TArray<struct FQueueConfig> GetQueueConfigs(); // Function ShooterGame.PartyManager.GetQueueConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a04250
	bool GetQueueConfig(struct FString QueueID, struct FQueueConfig& Out); // Function ShooterGame.PartyManager.GetQueueConfig // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a040d0
	enum class EAresPartyState GetPreviousPartyState(); // Function ShooterGame.PartyManager.GetPreviousPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a040a0
	struct TArray<struct FQueueConfig> GetPremierQueueConfigs(); // Function ShooterGame.PartyManager.GetPremierQueueConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03ff0
	struct TArray<struct FQueueConfig> GetPlayScreenQueueConfigs(); // Function ShooterGame.PartyManager.GetPlayScreenQueueConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03f40
	struct UPartyManager* GetPartyManager(struct UObject* WorldContextObject); // Function ShooterGame.PartyManager.GetPartyManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a03eb0
	struct FText GetPartyCodeJoinErrorText(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.PartyManager.GetPartyCodeJoinErrorText // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a03b80
	bool GetOwner(struct FAresParty& AresParty, struct FAresPartyMember& OutOwner); // Function ShooterGame.PartyManager.GetOwner // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3a03670
	struct FCustomGameConfigs GetCustomGameConfigs(); // Function ShooterGame.PartyManager.GetCustomGameConfigs // (Final|Native|Public|BlueprintCallable) // @ game+0x3a03570
	bool GetCurrentPlayer(struct FPartyPlayer& Player); // Function ShooterGame.PartyManager.GetCurrentPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03380
	enum class EStateTransitionReason GetCurrentPartyStateTransitionReason(); // Function ShooterGame.PartyManager.GetCurrentPartyStateTransitionReason // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03350
	enum class EAresPartyState GetCurrentPartyState(); // Function ShooterGame.PartyManager.GetCurrentPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03320
	bool GetCurrentParty(struct FAresParty& Party); // Function ShooterGame.PartyManager.GetCurrentParty // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a03250
	bool EnterMatchmakingQueue(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.EnterMatchmakingQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x3a03070
	bool DeletePartyInviteCode(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.DeletePartyInviteCode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a02eb0
	bool DeclineRequest(struct FString RequestID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.DeclineRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3a02d30
	bool DeclineInvite(struct FString PartyID, bool MarkedAsStale, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.DeclineInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x3a02b60
	bool CreatePartyInviteCode(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.CreatePartyInviteCode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a029a0
	bool ConvertRosterPartyToDefault(struct FString RosterID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertRosterPartyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x3a026c0
	bool ConvertCurrentToRosterParty(struct FString RosterID, struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a024e0
	bool ConvertCurrentToPremierParty(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToPremierParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a023b0
	bool ConvertCurrentToDefaultParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToDefaultParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a02230
	bool ConvertCurrentToCustomGame(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToCustomGame // (Final|Native|Public|BlueprintCallable) // @ game+0x3a02100
	bool ChangeQueue(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ChangeQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x3a01f80
	void BalanceTeams(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.BalanceTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x3a01e10
	bool AcceptInvite(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.AcceptInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x3a01bd0
};

// Class ShooterGame.PartyMatchmakingModel
// Size: 0x58 (Inherited: 0x30)
struct UPartyMatchmakingModel : UObject {
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0x40(0x10)
	int32_t PartySize; // 0x50(0x04)
	int32_t MaxPartySize; // 0x54(0x04)

	int32_t GetPartySize(); // Function ShooterGame.PartyMatchmakingModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38154d0
	int32_t GetMaxPartySize(); // Function ShooterGame.PartyMatchmakingModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d400
};

// Class ShooterGame.PartyMessageModel
// Size: 0x90 (Inherited: 0x30)
struct UPartyMessageModel : UObject {
	struct FMulticastInlineDelegate OnMarkedForDeletion; // 0x30(0x10)
	bool bMarkedForDeletion; // 0x40(0x01)
	enum class EPartyMessageStatus LocalStatus; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
	struct FString ID; // 0x48(0x10)
	enum class EPartyMessageType MessageType; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FString PartyID; // 0x60(0x10)
	struct UPlatformPlayer* Sender; // 0x70(0x08)
	struct UPlatformPlayer* Receiver; // 0x78(0x08)
	struct FDateTime CreatedAt; // 0x80(0x08)
	bool bMarkedAsStale; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	void MarkAsStale(); // Function ShooterGame.PartyMessageModel.MarkAsStale // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0e4b0
	bool IsMarkedForDeletion(); // Function ShooterGame.PartyMessageModel.IsMarkedForDeletion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x244a280
	bool IsMarkedAsStale(); // Function ShooterGame.PartyMessageModel.IsMarkedAsStale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e260
	struct UPlatformPlayer* GetSender(); // Function ShooterGame.PartyMessageModel.GetSender // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x289c5a0
	struct UPlatformPlayer* GetReceiver(); // Function ShooterGame.PartyMessageModel.GetReceiver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ac5b80
	struct FString GetPartyID(); // Function ShooterGame.PartyMessageModel.GetPartyID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d570
	enum class EPartyMessageType GetMessageType(); // Function ShooterGame.PartyMessageModel.GetMessageType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d4e0
	enum class EPartyMessageStatus GetLocalStatus(); // Function ShooterGame.PartyMessageModel.GetLocalStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d3d0
	struct FString GetID(); // Function ShooterGame.PartyMessageModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d220
	struct FDateTime GetCreatedAt(); // Function ShooterGame.PartyMessageModel.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e000
};

// Class ShooterGame.PartyErrorNotification
// Size: 0x50 (Inherited: 0x30)
struct UPartyErrorNotification : UObject {
	bool HasBeenSeen; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct UPartyPlayerModel*> ErroredPlayers; // 0x38(0x10)
	enum class EAresPartyErrorNotificationType ErrorNotificationType; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	enum class EAresPartyErrorNotificationType GetErrorNotificationType(); // Function ShooterGame.PartyErrorNotification.GetErrorNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d140
	struct TArray<struct UPartyPlayerModel*> GetErroredPlayers(); // Function ShooterGame.PartyErrorNotification.GetErroredPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d170
};

// Class ShooterGame.PartyModel
// Size: 0x738 (Inherited: 0x30)
struct UPartyModel : UObject {
	struct FMulticastInlineDelegate OnIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnQueueEntryTimeChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnLocalQueueEntryTimeChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnAccessibilityChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnReceivedInviteAdded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnReceivedInviteRemoved; // 0x90(0x10)
	struct FMulticastInlineDelegate OnSentInviteAdded; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSentInviteRemoved; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnRequestAdded; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnRequestRemoved; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnMemberAdded; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMemberRemoved; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnOwnerTransferred; // 0x100(0x10)
	struct FMulticastInlineDelegate OnIsOwnerChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnMatchmakingChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnIsTournamentChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnLeavingMatchmakingChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnIsPartyEligibleForPremierChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnMinPartySizeChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnHighSkillPartySizeChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnHasInvalidPartySizeChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnUseHighSkillPartySizeChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnQueueIDChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnPremierEventIDChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnChatConnectedChanged; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnPartySkillDisparityTooHighChanged; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnIsFullPartyAndBypassSkillRestrictionsChanged; // 0x200(0x10)
	struct FMulticastInlineDelegate OnIsFullPartyAndAndHighSkillDisparity; // 0x210(0x10)
	struct FMulticastInlineDelegate OnSkillDisparityRRPenaltyChanged; // 0x220(0x10)
	struct FMulticastInlineDelegate OnErrorNotificationChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnQueueDelayChanged; // 0x240(0x10)
	struct FMulticastInlineDelegate OnQueueRestrictionsChanged; // 0x250(0x10)
	struct FMulticastInlineDelegate OnIsEntirePartyReadyChanged; // 0x260(0x10)
	struct FMulticastInlineDelegate OnEligibleQueuesChanged; // 0x270(0x10)
	struct FMulticastInlineDelegate OnPreferredGamePodsChanged; // 0x280(0x10)
	struct FMulticastInlineDelegate OnSocialXPStateChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTournamentIdChanged; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnIsRosterPartyChanged; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnTournamentDataChanged; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnInviteCodeChanged; // 0x2d0(0x10)
	struct FString ID; // 0x2e0(0x10)
	enum class EPartyViewState CurrentState; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct FDateTime QueueEntryTime; // 0x2f8(0x08)
	struct FDateTime LocalQueueEntryTime; // 0x300(0x08)
	enum class EAresPartyAccessibility Accessibility; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct TMap<struct FString, struct UPartyMessageModel*> ReceivedInvites_Backing; // 0x310(0x50)
	char pad_360[0x28]; // 0x360(0x28)
	struct TMap<struct FString, struct UPartyMessageModel*> SentInvites; // 0x388(0x50)
	struct TMap<struct FString, struct UPartyMessageModel*> Requests_Backing; // 0x3d8(0x50)
	char pad_428[0x28]; // 0x428(0x28)
	struct TMap<struct FString, struct UPartyPlayerModel*> Members_Backing; // 0x450(0x50)
	char pad_4A0[0x28]; // 0x4a0(0x28)
	struct TMap<struct FString, struct UPartyPlayerModel*> NonReadyMembers; // 0x4c8(0x50)
	struct TSet<struct FString> EligibleQueues; // 0x518(0x50)
	struct UPartyPlayerModel* Owner; // 0x568(0x08)
	bool bOwner; // 0x570(0x01)
	char pad_571[0x7]; // 0x571(0x07)
	struct UCustomGameModel* CustomGameModel; // 0x578(0x08)
	int32_t MaxPartySize; // 0x580(0x04)
	int32_t MinPartySize; // 0x584(0x04)
	int32_t HighSkillPartySize; // 0x588(0x04)
	bool bUseHighSkillPartySize; // 0x58c(0x01)
	char pad_58D[0x3]; // 0x58d(0x03)
	struct FString QueueID; // 0x590(0x10)
	struct FString PremierEventID; // 0x5a0(0x10)
	float SkillDisparityRRPenalty; // 0x5b0(0x04)
	bool bMatchmaking; // 0x5b4(0x01)
	bool bIsTournament; // 0x5b5(0x01)
	bool bIsRosterParty; // 0x5b6(0x01)
	bool bMatchmadeGame; // 0x5b7(0x01)
	bool bLeavingMatchmaking; // 0x5b8(0x01)
	bool bIsChatConnected; // 0x5b9(0x01)
	bool bIsPartyEligibleForPremier; // 0x5ba(0x01)
	bool bIsPartySkillDisparityTooHigh; // 0x5bb(0x01)
	bool bIsFullPartyAndBypassSkillRestrictions; // 0x5bc(0x01)
	bool bIsFullPartyAndHighSkillDisparity; // 0x5bd(0x01)
	char pad_5BE[0x2]; // 0x5be(0x02)
	struct UPartyErrorNotification* ErrorNotification; // 0x5c0(0x08)
	bool bHasQueueDelay; // 0x5c8(0x01)
	char pad_5C9[0x7]; // 0x5c9(0x07)
	struct TMap<struct FString, struct FQueueIneligiblePlayers> QueueIDToRestrictedPlayers; // 0x5d0(0x50)
	struct FDateTime QueueDelayFinishedTime; // 0x620(0x08)
	bool bIsEntirePartyReady; // 0x628(0x01)
	char pad_629[0x7]; // 0x629(0x07)
	struct TMap<struct FString, bool> PreferredGamePods; // 0x630(0x50)
	enum class ESocialXPState SocialXPState; // 0x680(0x01)
	char pad_681[0x7]; // 0x681(0x07)
	struct FString TournamentID; // 0x688(0x10)
	struct FTournamentData TournamentData; // 0x698(0x70)
	bool bHasInvalidPartySize; // 0x708(0x01)
	char pad_709[0x1f]; // 0x709(0x1f)
	struct FString InviteCode; // 0x728(0x10)

	bool UseHighSkillPartySize(); // Function ShooterGame.PartyModel.UseHighSkillPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e7d0
	bool ShouldFakeFullParty(); // Function ShooterGame.PartyModel.ShouldFakeFullParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0e7a0
	void SetState(enum class EPartyViewState NewValue); // Function ShooterGame.PartyModel.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0e720
	void SetQueueEntryTime(struct FDateTime& NewValue); // Function ShooterGame.PartyModel.SetQueueEntryTime // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a0e690
	void SetLocalQueueEntryTime(struct FDateTime& NewValue); // Function ShooterGame.PartyModel.SetLocalQueueEntryTime // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a0e600
	void SetID(struct FString NewValue); // Function ShooterGame.PartyModel.SetID // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0e550
	void SetAccessibility(enum class EAresPartyAccessibility NewValue); // Function ShooterGame.PartyModel.SetAccessibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0e4d0
	bool IsTournament(); // Function ShooterGame.PartyModel.IsTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e480
	bool IsRosterParty(); // Function ShooterGame.PartyModel.IsRosterParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e450
	bool IsQueueRestricted(struct FString InputID); // Function ShooterGame.PartyModel.IsQueueRestricted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e350
	bool IsPartySkillDisparityTooHigh(); // Function ShooterGame.PartyModel.IsPartySkillDisparityTooHigh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e320
	bool IsPartyEligibleForPremier(); // Function ShooterGame.PartyModel.IsPartyEligibleForPremier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e2f0
	bool IsOwner(); // Function ShooterGame.PartyModel.IsOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e2c0
	bool IsMatchmaking(); // Function ShooterGame.PartyModel.IsMatchmaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e290
	bool IsFullPartyAndHighSkillDisparit(); // Function ShooterGame.PartyModel.IsFullPartyAndHighSkillDisparit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e240
	bool IsFullPartyAndBypassSkillRestrictions(); // Function ShooterGame.PartyModel.IsFullPartyAndBypassSkillRestrictions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e220
	bool IsEntirePartyReady(); // Function ShooterGame.PartyModel.IsEntirePartyReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e1f0
	bool IsChatConnected(); // Function ShooterGame.PartyModel.IsChatConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e1c0
	bool HasQueueDelay(); // Function ShooterGame.PartyModel.HasQueueDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e190
	bool HasMember(struct FString Subject); // Function ShooterGame.PartyModel.HasMember // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e0d0
	bool HasInviteCode(); // Function ShooterGame.PartyModel.HasInviteCode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e0a0
	bool HasInvalidPartySize(); // Function ShooterGame.PartyModel.HasInvalidPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0e070
	struct FString GetTournamentId(); // Function ShooterGame.PartyModel.GetTournamentId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0dfa0
	struct FTournamentData GetTournamentData(); // Function ShooterGame.PartyModel.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0df40
	enum class EPartyViewState GetState(); // Function ShooterGame.PartyModel.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3966870
	float GetSkillDisparityRRPenalty(); // Function ShooterGame.PartyModel.GetSkillDisparityRRPenalty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0df20
	struct TMap<struct FString, struct UPartyMessageModel*> GetSentInvites(); // Function ShooterGame.PartyModel.GetSentInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0de30
	struct TArray<struct FString> GetSelectedGamePods(); // Function ShooterGame.PartyModel.GetSelectedGamePods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0ddb0
	enum class ERosterEventIneligiblityType GetRosterEventIneligibilityType(); // Function ShooterGame.PartyModel.GetRosterEventIneligibilityType // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0dd80
	struct TScriptInterface<IUnorderedMapModel> GetRequestsMapModel(); // Function ShooterGame.PartyModel.GetRequestsMapModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0dd40
	struct TMap<struct FString, struct UPartyMessageModel*> GetRequests(); // Function ShooterGame.PartyModel.GetRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0dc50
	struct TScriptInterface<IUnorderedMapModel> GetReceivedInvitesMapModel(); // Function ShooterGame.PartyModel.GetReceivedInvitesMapModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0dc10
	struct TMap<struct FString, struct UPartyMessageModel*> GetReceivedInvites(); // Function ShooterGame.PartyModel.GetReceivedInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0db20
	struct FDateTime GetQueueRestrictionExpiry(struct FString InputID); // Function ShooterGame.PartyModel.GetQueueRestrictionExpiry // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0da10
	struct TArray<struct FString> GetQueueRestrictedPlayers(struct FString InputID); // Function ShooterGame.PartyModel.GetQueueRestrictedPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d8c0
	struct FString GetQueueID(); // Function ShooterGame.PartyModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d840
	struct FDateTime GetQueueEntryTime(); // Function ShooterGame.PartyModel.GetQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d800
	struct FDateTime GetQueueDelayOverTime(); // Function ShooterGame.PartyModel.GetQueueDelayOverTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d7c0
	struct FString GetPremierEventID(); // Function ShooterGame.PartyModel.GetPremierEventID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d740
	struct TMap<struct FString, bool> GetPreferredGamePods(); // Function ShooterGame.PartyModel.GetPreferredGamePods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d620
	int32_t GetPartySize(); // Function ShooterGame.PartyModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d5f0
	struct UPartyPlayerModel* GetOwner(); // Function ShooterGame.PartyModel.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f240
	struct TMap<struct FString, struct UPartyPlayerModel*> GetNonReadyMembers(); // Function ShooterGame.PartyModel.GetNonReadyMembers // (Final|Native|Public|BlueprintCallable) // @ game+0x3a0d530
	int32_t GetMinPartySize(); // Function ShooterGame.PartyModel.GetMinPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d510
	struct TScriptInterface<IUnorderedMapModel> GetMembersModel(); // Function ShooterGame.PartyModel.GetMembersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d4a0
	struct TMap<struct FString, struct UPartyPlayerModel*> GetMembers(); // Function ShooterGame.PartyModel.GetMembers // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x3a0d460
	int32_t GetMaxPartySize(); // Function ShooterGame.PartyModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d430
	struct FDateTime GetLocalQueueEntryTime(); // Function ShooterGame.PartyModel.GetLocalQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d390
	bool GetLeavingMatchmaking(); // Function ShooterGame.PartyModel.GetLeavingMatchmaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d360
	struct FString GetInviteCode(); // Function ShooterGame.PartyModel.GetInviteCode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d2e0
	struct FString GetID(); // Function ShooterGame.PartyModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d260
	int32_t GetHighSkillPartySize(); // Function ShooterGame.PartyModel.GetHighSkillPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0d1f0
	struct UPartyErrorNotification* GetErrorNotification(); // Function ShooterGame.PartyModel.GetErrorNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369fbb0
	struct TSet<struct FString> GetEligibleQueues(); // Function ShooterGame.PartyModel.GetEligibleQueues // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0cfd0
	struct UCustomGameModel* GetCustomGameModel(); // Function ShooterGame.PartyModel.GetCustomGameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369f3a0
	enum class EAresPartyAccessibility GetAccessibility(); // Function ShooterGame.PartyModel.GetAccessibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a0cfa0
};

// Class ShooterGame.AcceptSuccessWrapper
// Size: 0x48 (Inherited: 0x30)
struct UAcceptSuccessWrapper : UObject {
	struct UGenericNotification* Notification; // 0x30(0x08)
	struct UNotificationManager* NotificationManager; // 0x38(0x08)
	struct UPartyNotificationManager* Parent; // 0x40(0x08)

	void OnAcceptSuccess(); // Function ShooterGame.AcceptSuccessWrapper.OnAcceptSuccess // (Final|Native|Public) // @ game+0x3a19670
};

// Class ShooterGame.PartyNotificationManager
// Size: 0xa8 (Inherited: 0x30)
struct UPartyNotificationManager : UObject {
	struct UPartyViewController* PartyViewController; // 0x30(0x08)
	struct UPartyModel* PartyModel; // 0x38(0x08)
	struct USocialViewControllerV3* SocialViewController; // 0x40(0x08)
	struct UNotificationManager* NotificationManager; // 0x48(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x50(0x08)
	struct TMap<struct FString, struct UAcceptSuccessWrapper*> OutgoingNotifications; // 0x58(0x50)

	void RemoveOutgoingNotification(struct FString ID); // Function ShooterGame.PartyNotificationManager.RemoveOutgoingNotification // (Final|Native|Public) // @ game+0x3a19690
	void OnAcceptRequestError(struct FString Reason); // Function ShooterGame.PartyNotificationManager.OnAcceptRequestError // (Final|Native|Private) // @ game+0x3a195c0
	void OnAcceptInviteError(struct FString Reason); // Function ShooterGame.PartyNotificationManager.OnAcceptInviteError // (Final|Native|Public) // @ game+0x3a19510
	void HandleSocialPartyMessageRemoved(struct UPartyMessageModel* Message); // Function ShooterGame.PartyNotificationManager.HandleSocialPartyMessageRemoved // (Final|Native|Private) // @ game+0x3a192c0
	void HandleSocialPartyMessageAdded(struct UPartyMessageModel* Message); // Function ShooterGame.PartyNotificationManager.HandleSocialPartyMessageAdded // (Final|Native|Private) // @ game+0x3a19230
	void HandleSendInviteRequestSuccess(); // Function ShooterGame.PartyNotificationManager.HandleSendInviteRequestSuccess // (Final|Native|Private) // @ game+0x3a19210
	void HandleSendInviteRequestError(); // Function ShooterGame.PartyNotificationManager.HandleSendInviteRequestError // (Final|Native|Private) // @ game+0x3a191f0
	void HandleRequestRemoved(struct UPartyMessageModel* Request); // Function ShooterGame.PartyNotificationManager.HandleRequestRemoved // (Final|Native|Private) // @ game+0x3a190d0
	void HandleRequestAdded(struct UPartyMessageModel* Request); // Function ShooterGame.PartyNotificationManager.HandleRequestAdded // (Final|Native|Private) // @ game+0x3a19160
	void HandleReceivedInviteRemoved(struct UPartyMessageModel* Invite); // Function ShooterGame.PartyNotificationManager.HandleReceivedInviteRemoved // (Final|Native|Private) // @ game+0x3a190d0
	void HandleReceivedInviteAdded(struct UPartyMessageModel* Invite); // Function ShooterGame.PartyNotificationManager.HandleReceivedInviteAdded // (Final|Native|Private) // @ game+0x3a19040
	void HandleDeclineRequestAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleDeclineRequestAction // (Final|Native|Private) // @ game+0x3a18fb0
	void HandleDeclineInviteAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleDeclineInviteAction // (Final|Native|Private) // @ game+0x3a18f20
	void HandleAcceptRequestAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleAcceptRequestAction // (Final|Native|Private) // @ game+0x3a18e90
	void HandleAcceptInviteAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleAcceptInviteAction // (Final|Native|Private) // @ game+0x3a18e00
};

// Class ShooterGame.PartyPlayerModel
// Size: 0x1e8 (Inherited: 0x30)
struct UPartyPlayerModel : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnIsOwnerChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnIsReadyChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSeasonalInfoChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnCompetitiveTierChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnQueueEligibleRemainingAccountLevelsChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnQueueEligibleRemainingGamesChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnQueueEligibleRemainingWinsChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnPingsChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnIneligibleRosterPartyMemberReasonChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnIneligibleToPlayWithSubjectsChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnIsModeratorChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnUsingBroadcastHUDChanged; // 0xe8(0x10)
	int32_t CustomTeamSlotIndex; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct UPlatformPlayer* PlatformPlayer; // 0x100(0x08)
	int32_t CompetitiveTier; // 0x108(0x04)
	char pad_10C[0x6c]; // 0x10c(0x6c)
	int32_t QueueEligibleRemainingAccountLevels; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct TArray<struct FPingInfo> Pings; // 0x180(0x10)
	struct TSet<struct FString> IneligibleToPlayWithSubjects; // 0x190(0x50)
	enum class ERosterPartyMemberEligibility IneligibleRosterPartyMemberReason; // 0x1e0(0x01)
	bool bOwner; // 0x1e1(0x01)
	bool bReady; // 0x1e2(0x01)
	bool bIsModerator; // 0x1e3(0x01)
	bool bUsingBroadcastHUD; // 0x1e4(0x01)
	char pad_1E5[0x3]; // 0x1e5(0x03)

	bool UsingBroadcastHUD(); // Function ShooterGame.PartyPlayerModel.UsingBroadcastHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a19740
	bool IsReady(); // Function ShooterGame.PartyPlayerModel.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26205c0
	bool IsOwner(); // Function ShooterGame.PartyPlayerModel.IsOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a193b0
	bool IsModerator(); // Function ShooterGame.PartyPlayerModel.IsModerator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a19380
	bool IsEligible(); // Function ShooterGame.PartyPlayerModel.IsEligible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a19350
	struct FString GetSubject(); // Function ShooterGame.PartyPlayerModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18dc0
	struct FPartyMemberSeasonalInfo GetSeasonalInfo(); // Function ShooterGame.PartyPlayerModel.GetSeasonalInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18d20
	int32_t GetQueueEligibleRemainingWins(); // Function ShooterGame.PartyPlayerModel.GetQueueEligibleRemainingWins // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2865b00
	int32_t GetQueueEligibleRemainingGames(); // Function ShooterGame.PartyPlayerModel.GetQueueEligibleRemainingGames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2865b00
	int32_t GetQueueEligibleRemainingAccountLevels(); // Function ShooterGame.PartyPlayerModel.GetQueueEligibleRemainingAccountLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18cf0
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.PartyPlayerModel.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38f8f50
	struct TArray<struct FPingInfo> GetPings(); // Function ShooterGame.PartyPlayerModel.GetPings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18c10
	struct FPingInfo GetLowestPing(); // Function ShooterGame.PartyPlayerModel.GetLowestPing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18b80
	struct TSet<struct FString> GetIneligibleToPlayWithSubjects(); // Function ShooterGame.PartyPlayerModel.GetIneligibleToPlayWithSubjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18a90
	enum class ERosterPartyMemberEligibility GetIneligibleRosterPartyMemberReason(); // Function ShooterGame.PartyPlayerModel.GetIneligibleRosterPartyMemberReason // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a18a60
	int32_t GetCompetitiveTier(); // Function ShooterGame.PartyPlayerModel.GetCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26277a0
	void DebugSetSeasonalInfo(struct FPartyMemberSeasonalInfo NewValue); // Function ShooterGame.PartyPlayerModel.DebugSetSeasonalInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a18940
	bool CanPingGamePod(struct FString GamePod); // Function ShooterGame.PartyPlayerModel.CanPingGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x3a18880
};

// Class ShooterGame.PartyService
// Size: 0x38 (Inherited: 0x30)
struct UPartyService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)

	bool IsOwner(struct FAresParty& Party, struct FString Subject); // Function ShooterGame.PartyService.IsOwner // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3a193e0
};

// Class ShooterGame.PartyViewController
// Size: 0x148 (Inherited: 0x80)
struct UPartyViewController : UInitSystem {
	struct FMulticastInlineDelegate OnSendInviteSuccess; // 0x80(0x10)
	struct FMulticastInlineDelegate OnSendInviteFailure; // 0x90(0x10)
	struct UPartyModel* PartyModel; // 0xa0(0x08)
	struct UPartyManager* PartyManager; // 0xa8(0x08)
	struct UFriendsManager* FriendsManager; // 0xb0(0x08)
	struct UConfigManager* ConfigManager; // 0xb8(0x08)
	struct URSOManager* RSOManager; // 0xc0(0x08)
	struct UCoreGameManager* CoreGameManager; // 0xc8(0x08)
	struct UCustomGameManager* CustomGameManager; // 0xd0(0x08)
	struct UContentManager* ContentManager; // 0xd8(0x08)
	struct UPartyChatManager* PartyChatManager; // 0xe0(0x08)
	struct UMatchmakingManager* MatchmakingManager; // 0xe8(0x08)
	struct UContentIndex* ContentIndex; // 0xf0(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0xf8(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x100(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x108(0x08)
	struct UPremierRosterViewController* PremierRosterViewController; // 0x110(0x08)
	char pad_118[0x18]; // 0x118(0x18)
	struct UGameFeatureTogglesComponent* GameFeatureTogglesComponent; // 0x130(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x138(0x08)
	struct UNotificationManager* NotificationManager; // 0x140(0x08)

	bool TransferOwner(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.TransferOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x3a21390
	void StartCustomGame(struct FDelegate OnSuccess, struct FDelegate OnError, struct UObject* WorldContextObject); // Function ShooterGame.PartyViewController.StartCustomGame // (Final|Native|Public|BlueprintCallable) // @ game+0x3a21240
	void SetUseBots(bool UseBots); // Function ShooterGame.PartyViewController.SetUseBots // (Final|Native|Public|BlueprintCallable) // @ game+0x3a211b0
	void SetPremierEventID(struct FString EventID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.SetPremierEventID // (Final|Native|Public|BlueprintCallable) // @ game+0x3a21040
	void SetPreferredGamePod(struct FString GamePod, bool bIsSelected); // Function ShooterGame.PartyViewController.SetPreferredGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20f50
	void SetPlayerModeratorStatus(struct FString Subject, bool ModeratorStatus); // Function ShooterGame.PartyViewController.SetPlayerModeratorStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20e60
	void SetPlayerBroadcastHUDStatus(struct FString Subject, bool BroadcastHUDStatus); // Function ShooterGame.PartyViewController.SetPlayerBroadcastHUDStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20d70
	void SetMode(struct FString Mode); // Function ShooterGame.PartyViewController.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20cc0
	void SetMap(struct FString Map); // Function ShooterGame.PartyViewController.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20c10
	void SetGamePod(struct FString GamePod); // Function ShooterGame.PartyViewController.SetGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20b60
	void SetBooleanGameRule(enum class EGameRuleBoolName GameRuleName, bool GameRuleValue); // Function ShooterGame.PartyViewController.SetBooleanGameRule // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20a90
	void SetAccessibility(enum class EAresPartyAccessibility Accessibility); // Function ShooterGame.PartyViewController.SetAccessibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20a10
	void RequestToJoin(struct FString PartyID, struct TArray<struct FString>& Subjects, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.RequestToJoin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a20800
	void OnGameFlowStateUpdated(enum class EGameFlowStateType NewState); // Function ShooterGame.PartyViewController.OnGameFlowStateUpdated // (Final|Native|Private) // @ game+0x3a20750
	void OnChatSessionUpdated(); // Function ShooterGame.PartyViewController.OnChatSessionUpdated // (Final|Native|Private) // @ game+0x3a20730
	void MakeRosterParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.MakeRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a205c0
	void LeaveParty(); // Function ShooterGame.PartyViewController.LeaveParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a205a0
	void LeaveMatchmaking(); // Function ShooterGame.PartyViewController.LeaveMatchmaking // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20580
	bool KickFromTournamentParty(struct FString RosterID, struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyViewController.KickFromTournamentParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20400
	bool KickFromParty(struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyViewController.KickFromParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a202e0
	void JoinTeam(enum class ETeam Team); // Function ShooterGame.PartyViewController.JoinTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x3a20260
	bool JoinPartySolo(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.JoinPartySolo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a200e0
	void JoinOrCreateRosterParty(struct FString RosterID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.JoinOrCreateRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1ff70
	void JoinMatchmaking(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.JoinMatchmaking // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1fe50
	bool IsServiceSideReadyCheckEnabled(); // Function ShooterGame.PartyViewController.IsServiceSideReadyCheckEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1fe20
	bool HasInviteFromSubject(struct FString Subject); // Function ShooterGame.PartyViewController.HasInviteFromSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1fd30
	void HandleSendInviteSuccess(); // Function ShooterGame.PartyViewController.HandleSendInviteSuccess // (Final|Native|Public) // @ game+0x3a1fd10
	void HandleSendInviteFailure(); // Function ShooterGame.PartyViewController.HandleSendInviteFailure // (Final|Native|Public) // @ game+0x3a1fcf0
	void HandlePlayerUpdated(); // Function ShooterGame.PartyViewController.HandlePlayerUpdated // (Final|Native|Private) // @ game+0x3a1fcd0
	void HandlePartyUpdated(); // Function ShooterGame.PartyViewController.HandlePartyUpdated // (Final|Native|Private) // @ game+0x3a1fcb0
	void HandleInviteActionSuccess(struct FString PartyID, enum class EPartyManagerInviteAction Action); // Function ShooterGame.PartyViewController.HandleInviteActionSuccess // (Final|Native|Private) // @ game+0x3a1fbc0
	void HandleContentUpdated(); // Function ShooterGame.PartyViewController.HandleContentUpdated // (Final|Native|Private) // @ game+0x3a1fba0
	struct TArray<struct FPingInfo> GetGamePodPingsSortedByOwnerLatency(struct FString Subject); // Function ShooterGame.PartyViewController.GetGamePodPingsSortedByOwnerLatency // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1f690
	struct TArray<struct FPingInfo> GetGamePodPings(struct FString Subject); // Function ShooterGame.PartyViewController.GetGamePodPings // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1f590
	void DeclineRequest(struct FString RequestID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.DeclineRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1f420
	void DeclineInvite(struct FString PartyID, bool MarkedAsStale, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.DeclineInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1f260
	void CreateInviteByDisplayName(struct FString DisplayName, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.CreateInviteByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1f0f0
	void CreateInvite(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.CreateInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1ef80
	void ConvertToPremierParty(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToPremierParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1ee60
	void ConvertToMatchmakingParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToMatchmakingParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1ecf0
	void ConvertToDefaultParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToDefaultParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1eb80
	void ConvertToCustomParty(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToCustomParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1ea60
	void ChangeQueue(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ChangeQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1e8f0
	void BalanceTeams(); // Function ShooterGame.PartyViewController.BalanceTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1e8d0
	void AcceptInviteByPlayerSubject(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.AcceptInviteByPlayerSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1e760
	void AcceptInvite(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.AcceptInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x3a1e5f0
};

// Class ShooterGame.PatchAvailabilityManager
// Size: 0xf0 (Inherited: 0x80)
struct UPatchAvailabilityManager : UInitSystem {
	struct FMulticastInlineDelegate OnPatchAvailable; // 0x80(0x10)
	struct FMulticastInlineDelegate OnConsolePatchCheckComplete; // 0x90(0x10)
	struct FMulticastInlineDelegate OnIsHotfixAvailable; // 0xa0(0x10)
	bool bPatchAvailable; // 0xb0(0x01)
	bool bInitialized; // 0xb1(0x01)
	char pad_B2[0x6]; // 0xb2(0x06)
	struct UPatchAvailabilityService* PatchAvailabilityService; // 0xb8(0x08)
	struct UConfigManager* ConfigManager; // 0xc0(0x08)
	struct UAresHotfixManager* AresHotfixManager; // 0xc8(0x08)
	char pad_D0[0x18]; // 0xd0(0x18)
	struct UUpdateManager* UpdateManager; // 0xe8(0x08)

	void StartConsolePatchCheck(); // Function ShooterGame.PatchAvailabilityManager.StartConsolePatchCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void StartConsoleHotfixAvailableCheck(); // Function ShooterGame.PatchAvailabilityManager.StartConsoleHotfixAvailableCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	bool IsPatchAvailable(); // Function ShooterGame.PatchAvailabilityManager.IsPatchAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a1fdf0
	struct UPatchAvailabilityManager* GetPatchAvailabilityManager(struct UObject* WorldContextObject); // Function ShooterGame.PatchAvailabilityManager.GetPatchAvailabilityManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a1f790
	void CheckHotfixAvailability(); // Function ShooterGame.PatchAvailabilityManager.CheckHotfixAvailability // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.PatchAvailabilityService
// Size: 0x40 (Inherited: 0x30)
struct UPatchAvailabilityService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class ShooterGame.PatchManager
// Size: 0x168 (Inherited: 0x80)
struct UPatchManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnPatchPreviewDone; // 0x98(0x10)
	struct UPatchService* PatchService; // 0xa8(0x08)
	struct URiotProductManager* RiotProductManager; // 0xb0(0x08)
	struct URSOManager* RSOManager; // 0xb8(0x08)
	struct URiotClientConfigManager* RiotClientConfigManager; // 0xc0(0x08)
	struct ULocalePreferenceManager* LocalePreferenceManager; // 0xc8(0x08)
	char pad_D0[0x8]; // 0xd0(0x08)
	struct FString PatchUrl; // 0xd8(0x10)
	struct FString PatchState; // 0xe8(0x10)
	float PatchedPercentage; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FString PatchPreviewState; // 0x100(0x10)
	uint64_t PatchPreviewDownloadMB; // 0x110(0x08)
	uint64_t PatchDiskSizeDiff; // 0x118(0x08)
	bool PatchFailed; // 0x120(0x01)
	bool PatchFiles; // 0x121(0x01)
	char pad_122[0x46]; // 0x122(0x46)

	bool PatchPreviewDone(); // Function ShooterGame.PatchManager.PatchPreviewDone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a207d0
	float GetPercetagePatched(); // Function ShooterGame.PatchManager.GetPercetagePatched // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c180
	int32_t GetPatchPReviewDownloadMB(); // Function ShooterGame.PatchManager.GetPatchPReviewDownloadMB // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba750
	struct UPatchManager* GetPatchManager(struct UObject* WorldContextObject); // Function ShooterGame.PatchManager.GetPatchManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a1f840
	int32_t GetPatchDiskSizeDiff(); // Function ShooterGame.PatchManager.GetPatchDiskSizeDiff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a1f820
};

// Class ShooterGame.PatchNotesManager
// Size: 0xa0 (Inherited: 0x30)
struct UPatchNotesManager : UObject {
	struct FPatchNotes CachedPatchNotes; // 0x30(0x40)
	char pad_70[0x18]; // 0x70(0x18)
	struct UPatchNotesService* PatchNotesService; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)

	enum class EAresPatchNoteType GetPatchNoteTypeFromString(struct FString Type); // Function ShooterGame.PatchNotesManager.GetPatchNoteTypeFromString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3a1f8d0
	struct UPatchNotesManager* GetPatchNotesManager(struct UObject* WorldContextObject); // Function ShooterGame.PatchNotesManager.GetPatchNotesManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a1fb10
	void GetPatchNotes(struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PatchNotesManager.GetPatchNotes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a1f9d0
};

// Class ShooterGame.PatchNotesService
// Size: 0x38 (Inherited: 0x30)
struct UPatchNotesService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PatchService
// Size: 0x38 (Inherited: 0x30)
struct UPatchService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.MobileVirtualCurrencyProduct
// Size: 0x78 (Inherited: 0x30)
struct UMobileVirtualCurrencyProduct : UObject {
	struct FString ProductId; // 0x30(0x10)
	struct FString Title; // 0x40(0x10)
	struct FString Description; // 0x50(0x10)
	int32_t Amount; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct FString FormattedPrice; // 0x68(0x10)
};

// Class ShooterGame.PaymentsManager
// Size: 0xd0 (Inherited: 0x80)
struct UPaymentsManager : UInitSystem {
	struct FMulticastInlineDelegate OnGetPurchaseURLSuccess; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGetPurchaseURLError; // 0x90(0x10)
	struct FMulticastInlineDelegate OnMobileProductsChanged; // 0xa0(0x10)
	struct UPaymentsService* PaymentsService; // 0xb0(0x08)
	struct UConfigManager* ConfigManager; // 0xb8(0x08)
	struct TArray<struct UMobileVirtualCurrencyProduct*> VirtualCurrencyProducts; // 0xc0(0x10)

	void RefreshMobileProductList(); // Function ShooterGame.PaymentsManager.RefreshMobileProductList // (Final|Native|Private|BlueprintCallable) // @ game+0x3a290d0
	void InitiateMobilePurchase(struct FString IAPProductId); // Function ShooterGame.PaymentsManager.InitiateMobilePurchase // (Final|Native|Public|BlueprintCallable) // @ game+0x3a28c40
	bool GetVPPurchaseDisabled(); // Function ShooterGame.PaymentsManager.GetVPPurchaseDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a28b00
	struct TArray<struct UMobileVirtualCurrencyProduct*> GetVirtualCurrencyProducts(); // Function ShooterGame.PaymentsManager.GetVirtualCurrencyProducts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a28b30
	void GetPurchaseGameCurrencyURL(); // Function ShooterGame.PaymentsManager.GetPurchaseGameCurrencyURL // (Final|Native|Public|BlueprintCallable) // @ game+0x3a28ae0
};

// Class ShooterGame.PaymentsService
// Size: 0x38 (Inherited: 0x30)
struct UPaymentsService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PendingZoomLevelStateComponent
// Size: 0x440 (Inherited: 0x438)
struct UPendingZoomLevelStateComponent : UZoomLevelStateComponent {
	struct UZoomLevelStateComponent* PendingReturnState; // 0x438(0x08)

	void SetPendingReturnState(struct UZoomLevelStateComponent* ReturnState); // Function ShooterGame.PendingZoomLevelStateComponent.SetPendingReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x37f52b0
};

// Class ShooterGame.PersonalizationComponent
// Size: 0x120 (Inherited: 0xe8)
struct UPersonalizationComponent : UActorComponent {
	struct FMulticastInlineDelegate LoadoutReplicated; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnEquippableDataAssetGunSkinModified; // 0xf8(0x10)
	struct TArray<struct FEquippableMapping> SelectedV2; // 0x108(0x10)
	struct UContentIndex* ContentIndex; // 0x118(0x08)

	void ServerAddForcedAttachmentsToSelection(); // Function ShooterGame.PersonalizationComponent.ServerAddForcedAttachmentsToSelection // (Final|Native|Private) // @ game+0x3a29110
	void OnRep_Loadouts(); // Function ShooterGame.PersonalizationComponent.OnRep_Loadouts // (Final|Native|Public) // @ game+0x3a28f10
	int32_t GetSelectedV2Length(); // Function ShooterGame.PersonalizationComponent.GetSelectedV2Length // (Final|Native|Public|BlueprintCallable) // @ game+0x2627890
	struct FEquippableMapping GetPersonalizations(struct AAresEquippable* EquippableCDO); // Function ShooterGame.PersonalizationComponent.GetPersonalizations // (Final|Native|Public|BlueprintCallable) // @ game+0x3a289c0
	struct AAresItem* AuthSpawnItemFromDataAsset(struct UEquippableDataAsset* ItemDataAsset); // Function ShooterGame.PersonalizationComponent.AuthSpawnItemFromDataAsset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x36f4fa0
	struct AAresItem* AuthSpawnItemFromBase(struct AAresItem* Item); // Function ShooterGame.PersonalizationComponent.AuthSpawnItemFromBase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x36f4fa0
	void AuthSetSlotSkin(struct FString SlotName, struct FString SkinName, int32_t Level, struct FString Chroma); // Function ShooterGame.PersonalizationComponent.AuthSetSlotSkin // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a286a0
};

// Class ShooterGame.PersonalizationManagerV2
// Size: 0x258 (Inherited: 0x80)
struct UPersonalizationManagerV2 : UInitSystem {
	char pad_80[0xb8]; // 0x80(0xb8)
	struct FPlayerMapping PlayerMapping; // 0x138(0x68)
	struct UPersonalizationService* PersonalizationService; // 0x1a0(0x08)
	struct UConfigManager* ConfigManager; // 0x1a8(0x08)
	struct URSOManager* RSOManager; // 0x1b0(0x08)
	struct URMSManager* RMSManager; // 0x1b8(0x08)
	struct UContentIndex* ContentIndex; // 0x1c0(0x08)
	struct UContentManager* ContentManager; // 0x1c8(0x08)
	struct UStoreManager* StoreManager; // 0x1d0(0x08)
	struct UInventoryManager* InventoryManager; // 0x1d8(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x1e0(0x08)
	char pad_1E8[0x30]; // 0x1e8(0x30)
	struct FMulticastInlineDelegate OnDoubleSniperEnabledChanged; // 0x218(0x10)
	struct FMulticastInlineDelegate OnPlayerCardsEnabledChanged; // 0x228(0x10)
	struct FMulticastInlineDelegate OnPlayerTitlesEnabledChanged; // 0x238(0x10)
	struct FMulticastInlineDelegate OnIncognitoChanged; // 0x248(0x10)

	bool UseWidePlayerIdentityV2(); // Function ShooterGame.PersonalizationManagerV2.UseWidePlayerIdentityV2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a29290
	void UpdatePlayerMapping(); // Function ShooterGame.PersonalizationManagerV2.UpdatePlayerMapping // (Final|Native|Private) // @ game+0x3a29270
	void SetIncognito(bool NewValue); // Function ShooterGame.PersonalizationManagerV2.SetIncognito // (Final|Native|Public|BlueprintCallable) // @ game+0x3a291c0
	void SetHideAccountLevel(bool bHideAccountLevel); // Function ShooterGame.PersonalizationManagerV2.SetHideAccountLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3a29130
	bool PreferredLevelBordersIsEnabled(); // Function ShooterGame.PersonalizationManagerV2.PreferredLevelBordersIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a28f30
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PersonalizationManagerV2.OnBugCommand // (Final|Native|Private) // @ game+0x3a28da0
	bool IsIncognito(); // Function ShooterGame.PersonalizationManagerV2.IsIncognito // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a28d70
	bool IsDoubleSniperEnabled(); // Function ShooterGame.PersonalizationManagerV2.IsDoubleSniperEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a28d40
	void HandlePlayerTitlesEnabledChanged(); // Function ShooterGame.PersonalizationManagerV2.HandlePlayerTitlesEnabledChanged // (Final|Native|Private) // @ game+0x3a28c20
	void HandlePlayerCardsEnabledChanged(); // Function ShooterGame.PersonalizationManagerV2.HandlePlayerCardsEnabledChanged // (Final|Native|Private) // @ game+0x3a28c00
	struct UPersonalizationManagerV2* GetPersonalizationManagerV2(struct UObject* WorldContextObject); // Function ShooterGame.PersonalizationManagerV2.GetPersonalizationManagerV2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a28930
};

// Class ShooterGame.PersonalizationService
// Size: 0x38 (Inherited: 0x30)
struct UPersonalizationService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PickupEquippableInterface
// Size: 0x30 (Inherited: 0x30)
struct UPickupEquippableInterface : UInterface {

	void AuthPickup(struct AShooterCharacter* TargetCharacter); // Function ShooterGame.PickupEquippableInterface.AuthPickup // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3a28610
};

// Class ShooterGame.PingRequest
// Size: 0x148 (Inherited: 0x80)
struct UPingRequest : UInitSystem {
	char pad_80[0xb0]; // 0x80(0xb0)
	struct UPingManager* PingManager; // 0x130(0x08)
	char pad_138[0x10]; // 0x138(0x10)
};

// Class ShooterGame.PingService
// Size: 0x38 (Inherited: 0x30)
struct UPingService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PingManager
// Size: 0x1b0 (Inherited: 0x80)
struct UPingManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct UPlatformSessionManager* SessionManager; // 0x98(0x08)
	struct UPartyManager* PartyManager; // 0xa0(0x08)
	struct UPingService* PingService; // 0xa8(0x08)
	struct UConfigManager* ConfigManager; // 0xb0(0x08)
	struct UObject* Outer; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct TMap<struct FString, struct FPingRequestContainer> PingRequestsByEndpointName; // 0xc8(0x50)
	struct TMap<struct FString, struct FPingRequestContainer> InProgressPingRequestsByEndpointName; // 0x118(0x50)
	char pad_168[0x48]; // 0x168(0x48)

	void UpdatePings(); // Function ShooterGame.PingManager.UpdatePings // (Final|Native|Private) // @ game+0x3a29250
	void RequestRefresh(); // Function ShooterGame.PingManager.RequestRefresh // (Final|Native|Private) // @ game+0x3a290f0
	void ProcessPingPacketReceived(struct FString& Destination, struct FString& DestinationAddress, int32_t PingInMillis); // Function ShooterGame.PingManager.ProcessPingPacketReceived // (Final|Native|Public|HasOutParms) // @ game+0x3a28f60
	void OnCustomGameConfigFetched(); // Function ShooterGame.PingManager.OnCustomGameConfigFetched // (Final|Native|Private) // @ game+0x3a28ef0
};

// Class ShooterGame.PingViewModel
// Size: 0x70 (Inherited: 0x48)
struct UPingViewModel : UAresViewModelBase {
	struct UPartyModel* PartyModel; // 0x48(0x08)
	struct UPartyPlayerModel* PartyPlayerModel; // 0x50(0x08)
	struct FString CurrentSubject; // 0x58(0x10)
	int32_t MaxNumberOfGamePods; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)

	void SetPartyModelandPartyPlayerModel(struct UPartyModel* NewPartyModel, struct UPartyPlayerModel* NewPartyPlayerModel); // Function ShooterGame.PingViewModel.SetPartyModelandPartyPlayerModel // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a34770
	void SetCurrentSubject(struct FString NewSubject); // Function ShooterGame.PingViewModel.SetCurrentSubject // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a34670
	void Refresh(); // Function ShooterGame.PingViewModel.Refresh // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x288aab0
	void OnModelPingChanged(int32_t NewPing); // Function ShooterGame.PingViewModel.OnModelPingChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnModelGamePodsChanged(struct FLinearColor NewGamePodQualities); // Function ShooterGame.PingViewModel.OnModelGamePodsChanged // (Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void HandlePingValueChanged(struct TArray<struct FPingInfo>& NewPings); // Function ShooterGame.PingViewModel.HandlePingValueChanged // (Final|Native|Protected|HasOutParms) // @ game+0x3a343d0
	void HandleGamePodsChanged(struct FPreferredGamePodMap NewGamePods); // Function ShooterGame.PingViewModel.HandleGamePodsChanged // (Final|Native|Protected) // @ game+0x3a34290
	struct TArray<struct FPingInfo> GetRelevantGamePodPings(); // Function ShooterGame.PingViewModel.GetRelevantGamePodPings // (Final|Native|Protected) // @ game+0x3a341b0
	int32_t GetPingValueFromModels(); // Function ShooterGame.PingViewModel.GetPingValueFromModels // (Final|Native|Protected) // @ game+0x3a34140
	enum class EPingQuality GetPingQuality(int32_t PingValue); // Function ShooterGame.PingViewModel.GetPingQuality // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	struct FLinearColor GetMaterialGamePodValuesFromModels(); // Function ShooterGame.PingViewModel.GetMaterialGamePodValuesFromModels // (Final|Native|Protected|HasDefaults) // @ game+0x3a340e0
	struct FLinearColor ConvertToLinearColor(struct TArray<enum class EPingQuality> GamePodPings); // Function ShooterGame.PingViewModel.ConvertToLinearColor // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x3a33fe0
	void BindPartyPlayerModelEvents(bool Bind); // Function ShooterGame.PingViewModel.BindPartyPlayerModelEvents // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3a33e00
	void BindPartyModelEvents(bool Bind); // Function ShooterGame.PingViewModel.BindPartyModelEvents // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3a33d60
};

// Class ShooterGame.PipResourceComponent
// Size: 0x140 (Inherited: 0x138)
struct UPipResourceComponent : UResourceComponent {
	int32_t MaxPips; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)

	int32_t GetMaxPips(); // Function ShooterGame.PipResourceComponent.GetMaxPips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a34120
	void AuthResetPips(); // Function ShooterGame.PipResourceComponent.AuthResetPips // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.PlacementTargetingStateComponent
// Size: 0x5d0 (Inherited: 0x3d0)
struct UPlacementTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnValidTargetSelected; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnInvalidTargetSelected; // 0x3e0(0x10)
	float MaxTargetHeightFromFloor; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct FName> IgnoreActorsWithTag; // 0x3f8(0x10)
	struct TArray<struct FName> TagsPreventingPlacement; // 0x408(0x10)
	bool bCanPlaceOnGameObjects; // 0x418(0x01)
	bool bLimitHeightAbovePlayerFloor; // 0x419(0x01)
	char pad_41A[0x2]; // 0x41a(0x02)
	float MaxTargetHeightFromPlayerFloor; // 0x41c(0x04)
	struct FTransform PlacementOffset; // 0x420(0x30)
	float PlacementRadius; // 0x450(0x04)
	float PlacementWallBuffer; // 0x454(0x04)
	bool bPlaceFlat; // 0x458(0x01)
	char pad_459[0x3]; // 0x459(0x03)
	float WallAngle; // 0x45c(0x04)
	bool bWalkableRequired; // 0x460(0x01)
	bool bEncroachCheck; // 0x461(0x01)
	enum class EEncroachCheckFailureMode EncroachCheckFailureMode; // 0x462(0x01)
	bool bEncroachUsesIgnoredActors; // 0x463(0x01)
	float EncroachCheckBuffer; // 0x464(0x04)
	float EncroachCheckHalfHeight; // 0x468(0x04)
	float EncroachCheckRadius; // 0x46c(0x04)
	enum class ECollisionChannel EncroachChannel; // 0x470(0x01)
	enum class ENavmeshProjection NavmeshProjection; // 0x471(0x01)
	char pad_472[0x2]; // 0x472(0x02)
	struct FVector NavmeshSearchExtents; // 0x474(0x0c)
	bool bLineOfSightRequired; // 0x480(0x01)
	char pad_481[0x7]; // 0x481(0x07)
	struct TArray<float> LineOfSightTargetOffsets; // 0x488(0x10)
	bool bLedgePlacement; // 0x498(0x01)
	char pad_499[0x3]; // 0x499(0x03)
	float LedgeSearchDistance; // 0x49c(0x04)
	float TargetingRange; // 0x4a0(0x04)
	float TargetingMaxHeight; // 0x4a4(0x04)
	bool OthersSeeTargeting; // 0x4a8(0x01)
	enum class ECollisionChannel TraceChannel; // 0x4a9(0x01)
	char pad_4AA[0x2]; // 0x4aa(0x02)
	struct FHitResult LastHitResult; // 0x4ac(0x90)
	char pad_53C[0x34]; // 0x53c(0x34)
	bool bDrawDebugTargeting; // 0x570(0x01)
	char pad_571[0x1f]; // 0x571(0x1f)
	struct TArray<struct AActor*> ActorsIgnoredForTraces; // 0x590(0x10)
	float FloorTraceAboveNavmeshHeight; // 0x5a0(0x04)
	float FloorTraceBelowNavmeshHeight; // 0x5a4(0x04)
	bool bIgnoreShooterCharacters; // 0x5a8(0x01)
	char pad_5A9[0x7]; // 0x5a9(0x07)
	struct TArray<struct AShooterCharacter*> CachedShooterCharacters; // 0x5b0(0x10)
	char pad_5C0[0x10]; // 0x5c0(0x10)

	void SetAdjustedPlacement(struct FTransform& NewTransform); // Function ShooterGame.PlacementTargetingStateComponent.SetAdjustedPlacement // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a34590
	void ReportServerPlacementInvalid(struct FString Error); // Function ShooterGame.PlacementTargetingStateComponent.ReportServerPlacementInvalid // (Final|Native|Private|Const) // @ game+0x3a344e0
	bool PlacementIsValid(); // Function ShooterGame.PlacementTargetingStateComponent.PlacementIsValid // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3a344a0
	struct FTransform GetPlacementResult(); // Function ShooterGame.PlacementTargetingStateComponent.GetPlacementResult // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a34170
	void ClientReportServerPlacementInvalid(struct FString Error); // Function ShooterGame.PlacementTargetingStateComponent.ClientReportServerPlacementInvalid // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3a33f30
	void AdjustTargeting(); // Function ShooterGame.PlacementTargetingStateComponent.AdjustTargeting // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.PlacementTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3a33b70
};

// Class ShooterGame.PlatformDelegates
// Size: 0x30 (Inherited: 0x30)
struct UPlatformDelegates : UObject {
};

// Class ShooterGame.PlatformEnvironmentManager
// Size: 0xb0 (Inherited: 0x80)
struct UPlatformEnvironmentManager : UInitSystem {
	struct URiotClientConfigManager* RiotClientConfigManager; // 0x80(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x88(0x08)
	char pad_90[0x20]; // 0x90(0x20)
};

// Class ShooterGame.PlatformFaultedStateV2
// Size: 0x90 (Inherited: 0x90)
struct UPlatformFaultedStateV2 : UStaticGameFlowState {
};

// Class ShooterGame.PlatformInitializerV2
// Size: 0xa0 (Inherited: 0x30)
struct UPlatformInitializerV2 : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TMap<struct UInitSystem*, struct FPlatformInitializerEntry> Systems; // 0x48(0x50)
	enum class EAresPlatformInitStatus Status; // 0x98(0x01)
	bool bAdvancing; // 0x99(0x01)
	bool bPendingAdvance; // 0x9a(0x01)
	bool bMinimumPlatformInit; // 0x9b(0x01)
	enum class EPlatformInitErrorReason FailureReason; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)

	bool CheckTimeouts(float DeltaTime); // Function ShooterGame.PlatformInitializerV2.CheckTimeouts // (Final|Native|Protected) // @ game+0x3a33ea0
};

// Class ShooterGame.PlatformInitSettingsManager
// Size: 0x88 (Inherited: 0x80)
struct UPlatformInitSettingsManager : UInitSystem {
	char pad_80[0x8]; // 0x80(0x08)
};

// Class ShooterGame.PlatformMetricsScaler
// Size: 0x170 (Inherited: 0x160)
struct UPlatformMetricsScaler : UPanelWidget {
	char pad_160[0x10]; // 0x160(0x10)
};

// Class ShooterGame.PlatformMetricsScalerSlot
// Size: 0x50 (Inherited: 0x40)
struct UPlatformMetricsScalerSlot : UPanelSlot {
	char pad_40[0x10]; // 0x40(0x10)
};

// Class ShooterGame.PlatformOffersManager
// Size: 0x88 (Inherited: 0x80)
struct UPlatformOffersManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
};

// Class ShooterGame.PlatformPlayer
// Size: 0x5c8 (Inherited: 0x30)
struct UPlatformPlayer : UObject {
	struct FMulticastInlineDelegate OnTrueDisplayNameChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnAnonymizedDisplayNameChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnAnonymousChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnClientVersionChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnPresenceStateChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnProductChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPlatformTypeChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnIsValidAresPresenceChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSessionLoopStateChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerSessionLoopStateChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerMatchMapChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnProvisioningFlowChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerProvisioningFlowChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerMatchScoreChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnMatchMapChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnPartyIdChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnIsPartyOwnerChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnPartyStateChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnPartyAccessibilityChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnPartyClientVersionChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnIsInvitableChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnIsOwnerTransferrableChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnIsKickableChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnIsInvitedChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnIsFriendChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnIsBlockedChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnQueueIDChanged; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnQueueEntryTimeChanged; // 0x200(0x10)
	struct FMulticastInlineDelegate OnTournamentDataChanged; // 0x210(0x10)
	struct FMulticastInlineDelegate OnPlayerCardChanged; // 0x220(0x10)
	struct FMulticastInlineDelegate OnPlayerTitleChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnLoyaltyStatusChanged; // 0x240(0x10)
	struct FMulticastInlineDelegate OnActiveSubscriptionsChanged; // 0x250(0x10)
	struct FMulticastInlineDelegate OnSeasonBadgeInfoChanged; // 0x260(0x10)
	struct FMulticastInlineDelegate OnAccountLevelChanged; // 0x270(0x10)
	struct FMulticastInlineDelegate OnLevelBorderChanged; // 0x280(0x10)
	struct FMulticastInlineDelegate OnHideAccountLevelChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnCompetitiveTierChanged; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnLeaderboardPositionChanged; // 0x2b0(0x10)
	char pad_2C0[0x1f0]; // 0x2c0(0x1f0)
	bool HideAccountLevel; // 0x4b0(0x01)
	char pad_4B1[0x3]; // 0x4b1(0x03)
	int32_t AccountLevel; // 0x4b4(0x04)
	int32_t CompetitiveTier; // 0x4b8(0x04)
	int32_t LeaderboardPosition; // 0x4bc(0x04)
	char pad_4C0[0xf8]; // 0x4c0(0xf8)
	struct TArray<struct USubscriptionDataAsset*> ActiveSubscriptions; // 0x5b8(0x10)

	bool PlayerHasAccessToAllAgentsFromSubscription(); // Function ShooterGame.PlatformPlayer.PlayerHasAccessToAllAgentsFromSubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a3a380
	bool IsPlayerInRosterParty(struct FString RosterID); // Function ShooterGame.PlatformPlayer.IsPlayerInRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x3a3a170
	bool IsInvited(); // Function ShooterGame.PlatformPlayer.IsInvited // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a3a150
	bool IsFriend(); // Function ShooterGame.PlatformPlayer.IsFriend // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a3a130
	bool IsBlocked(); // Function ShooterGame.PlatformPlayer.IsBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a3a110
	struct FDisplayName GetTrueDisplayName(); // Function ShooterGame.PlatformPlayer.GetTrueDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39ae0
	struct FTournamentData GetTournamentData(); // Function ShooterGame.PlatformPlayer.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39a80
	struct FString GetSubject(); // Function ShooterGame.PlatformPlayer.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39a50
	enum class ESessionLoopState GetSessionLoopState(); // Function ShooterGame.PlatformPlayer.GetSessionLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39a30
	struct FMMRSeasonBadgeInfo GetSeasonBadgeInfo(); // Function ShooterGame.PlatformPlayer.GetSeasonBadgeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39960
	struct FString GetQueueID(); // Function ShooterGame.PlatformPlayer.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39890
	struct FDateTime GetQueueEntryTime(); // Function ShooterGame.PlatformPlayer.GetQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39870
	enum class EProvisioningFlowID GetProvisioningFlow(); // Function ShooterGame.PlatformPlayer.GetProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39850
	enum class EChatPresenceProduct GetProduct(); // Function ShooterGame.PlatformPlayer.GetProduct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39830
	enum class EChatPresenceState GetPresenceState(); // Function ShooterGame.PlatformPlayer.GetPresenceState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39810
	struct UPlayerTitleDataAsset* GetPlayerTitle(); // Function ShooterGame.PlatformPlayer.GetPlayerTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a397f0
	struct UPlayerCardDataAsset* GetPlayerCard(); // Function ShooterGame.PlatformPlayer.GetPlayerCard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a397d0
	enum class EAresPlatformType GetPlatformType(); // Function ShooterGame.PlatformPlayer.GetPlatformType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39390
	enum class EAresPartyState GetPartyState(); // Function ShooterGame.PlatformPlayer.GetPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a392e0
	int32_t GetPartySize(); // Function ShooterGame.PlatformPlayer.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a392c0
	enum class ESessionLoopState GetPartyOwnerSessionLoopState(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerSessionLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a392a0
	enum class EProvisioningFlowID GetPartyOwnerProvisioningFlow(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39280
	int32_t GetPartyOwnerMatchScoreEnemyTeam(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchScoreEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39260
	int32_t GetPartyOwnerMatchScoreAllyTeam(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchScoreAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39240
	struct FString GetPartyOwnerMatchMap(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39210
	struct FString GetPartyOwnerMatchCurrentTeam(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchCurrentTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a391e0
	struct FString GetPartyID(); // Function ShooterGame.PlatformPlayer.GetPartyID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a391b0
	struct FString GetPartyClientVersion(); // Function ShooterGame.PlatformPlayer.GetPartyClientVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39180
	enum class EAresPartyAccessibility GetPartyAccessibility(); // Function ShooterGame.PlatformPlayer.GetPartyAccessibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39160
	int32_t GetMaxPartySize(); // Function ShooterGame.PlatformPlayer.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39140
	struct FString GetMatchMap(); // Function ShooterGame.PlatformPlayer.GetMatchMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39110
	bool GetLoyaltyStatus(); // Function ShooterGame.PlatformPlayer.GetLoyaltyStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a390f0
	struct ULevelBorderDataAsset* GetLevelBorder(); // Function ShooterGame.PlatformPlayer.GetLevelBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a390a0
	int32_t GetLeaderboardPosition(); // Function ShooterGame.PlatformPlayer.GetLeaderboardPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39080
	bool GetIsValidAresPresence(); // Function ShooterGame.PlatformPlayer.GetIsValidAresPresence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39060
	bool GetIsPartyOwner(); // Function ShooterGame.PlatformPlayer.GetIsPartyOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39040
	bool GetIsOwnerTransferrable(); // Function ShooterGame.PlatformPlayer.GetIsOwnerTransferrable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39020
	bool GetIsMe(); // Function ShooterGame.PlatformPlayer.GetIsMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39000
	bool GetIsKickable(); // Function ShooterGame.PlatformPlayer.GetIsKickable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38fe0
	bool GetIsInvitable(); // Function ShooterGame.PlatformPlayer.GetIsInvitable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38fc0
	bool GetIsAnonymous(); // Function ShooterGame.PlatformPlayer.GetIsAnonymous // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38fa0
	int32_t GetHighestXPBoostFromSubscription(); // Function ShooterGame.PlatformPlayer.GetHighestXPBoostFromSubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a38f70
	bool GetHideAccountLevel(); // Function ShooterGame.PlatformPlayer.GetHideAccountLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38f50
	int32_t GetCompetitiveTier(); // Function ShooterGame.PlatformPlayer.GetCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38e30
	struct FString GetClientVersion(); // Function ShooterGame.PlatformPlayer.GetClientVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38e00
	struct FDisplayName GetAnonymizedDisplayName(); // Function ShooterGame.PlatformPlayer.GetAnonymizedDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38da0
	void DebugSetSeasonBadgeInfo(struct FMMRSeasonBadgeInfo NewValue); // Function ShooterGame.PlatformPlayer.DebugSetSeasonBadgeInfo // (Final|Native|Public) // @ game+0x3a389e0
};

// Class ShooterGame.PlatformPlayerManager
// Size: 0x188 (Inherited: 0x80)
struct UPlatformPlayerManager : UInitSystem {
	struct UPresenceManager* PresenceManager; // 0x80(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x88(0x08)
	struct URSOManager* RSOManager; // 0x90(0x08)
	struct UPartyManager* PartyManager; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0xa8(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0xb0(0x08)
	struct UFriendsModel* FriendsModel; // 0xb8(0x08)
	struct UPartyModel* PartyModel; // 0xc0(0x08)
	struct UContentIndex* ContentIndex; // 0xc8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xd0(0x08)
	struct UAccountXPManager* AccountXPManager; // 0xd8(0x08)
	struct UCoreGameManager* CoreGameManager; // 0xe0(0x08)
	struct UStoreManager* StoreManager; // 0xe8(0x08)
	struct UPregameManager* PregameManager; // 0xf0(0x08)
	struct UGameInstance* GameInstance; // 0xf8(0x08)
	struct TMap<struct FString, struct TWeakObjectPtr<struct UPlatformPlayer>> PlayerCache; // 0x100(0x50)
	bool bShouldUpdatePresences; // 0x150(0x01)
	char pad_151[0x37]; // 0x151(0x37)

	void UpdatePlayerWithPresenceInfo(struct UPlatformPlayer* Player, struct FAresPresenceInfo& PresenceInfo); // Function ShooterGame.PlatformPlayerManager.UpdatePlayerWithPresenceInfo // (Final|Native|Private|HasOutParms) // @ game+0x3a3a440
	void SetForceAllowPresencesUpdate(bool bNewValue); // Function ShooterGame.PlatformPlayerManager.SetForceAllowPresencesUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x3a3a3b0
	void OnSentInvitesUpdated(struct UPartyMessageModel* MessageModel); // Function ShooterGame.PlatformPlayerManager.OnSentInvitesUpdated // (Final|Native|Private) // @ game+0x3a3a2f0
	void OnGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.PlatformPlayerManager.OnGameFlowStateChanged // (Final|Native|Private) // @ game+0x3a3a270
	void HandleSubscriptionStateUpdated(); // Function ShooterGame.PlatformPlayerManager.HandleSubscriptionStateUpdated // (Final|Native|Private) // @ game+0x3a3a0f0
	void HandlePresencesUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePresencesUpdated // (Final|Native|Private) // @ game+0x3a3a0d0
	void HandlePregameMatchUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePregameMatchUpdated // (Final|Native|Private) // @ game+0x3a3a0b0
	void HandlePersonalizationUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePersonalizationUpdated // (Final|Native|Private) // @ game+0x3a39b40
	void HandlePartyUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePartyUpdated // (Final|Native|Private) // @ game+0x3a3a090
	void HandlePartyMemberRemoved(struct UPartyPlayerModel* PartyPlayerModel); // Function ShooterGame.PlatformPlayerManager.HandlePartyMemberRemoved // (Final|Native|Private) // @ game+0x3a3a000
	void HandlePartyMemberAdded(struct UPartyPlayerModel* PartyPlayerModel); // Function ShooterGame.PlatformPlayerManager.HandlePartyMemberAdded // (Final|Native|Private) // @ game+0x3a3a000
	void HandleHidePlayerNamesSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.PlatformPlayerManager.HandleHidePlayerNamesSettingChanged // (Final|Native|Private) // @ game+0x3a39ee0
	void HandleFriendsUpdated(struct FRGIFriendsPlayers& Friends); // Function ShooterGame.PlatformPlayerManager.HandleFriendsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3a39dc0
	void HandleFriendRemoved(struct UFriendModel* FriendModel); // Function ShooterGame.PlatformPlayerManager.HandleFriendRemoved // (Final|Native|Private) // @ game+0x3a39d30
	void HandleFriendAdded(struct UFriendModel* FriendModel); // Function ShooterGame.PlatformPlayerManager.HandleFriendAdded // (Final|Native|Private) // @ game+0x3a39ca0
	void HandleCoreGameMatchUpdated(); // Function ShooterGame.PlatformPlayerManager.HandleCoreGameMatchUpdated // (Final|Native|Private) // @ game+0x3a39c80
	void HandleBlockedPlayersUpdated(struct FRGIFriendsPlayers& BlockedPlayers); // Function ShooterGame.PlatformPlayerManager.HandleBlockedPlayersUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3a39b60
	void HandleAccountXPUpdated(); // Function ShooterGame.PlatformPlayerManager.HandleAccountXPUpdated // (Final|Native|Private) // @ game+0x3a39b40
	struct UPlatformPlayer* GetPlayerBySubject(struct FString Subject); // Function ShooterGame.PlatformPlayerManager.GetPlayerBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3a39710
	struct UPlatformPlayer* GetPlayerByGameNameAndTag(struct FString GameName, struct FString Tag); // Function ShooterGame.PlatformPlayerManager.GetPlayerByGameNameAndTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3a395f0
	struct UPlatformPlayer* GetPlayerByDisplayName(struct FString DisplayName); // Function ShooterGame.PlatformPlayerManager.GetPlayerByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x3a39530
	struct UPlatformPlayer* GetPlayerByChatPid(struct FString Pid); // Function ShooterGame.PlatformPlayerManager.GetPlayerByChatPid // (Final|Native|Public|BlueprintCallable) // @ game+0x3a39470
	struct UPlatformPlayer* GetPlayerByChatAddressableName(struct FString DisplayName); // Function ShooterGame.PlatformPlayerManager.GetPlayerByChatAddressableName // (Final|Native|Public|BlueprintCallable) // @ game+0x3a393b0
	struct UPlatformPlayerManager* GetPlatformPlayerManager(struct UObject* WorldContextObject); // Function ShooterGame.PlatformPlayerManager.GetPlatformPlayerManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a39300
	struct UPlatformPlayer* GetLocalPlatformPlayer(); // Function ShooterGame.PlatformPlayerManager.GetLocalPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a390c0
	struct TArray<struct UPlatformPlayer*> GetFriendsByGameName(struct FString GameName); // Function ShooterGame.PlatformPlayerManager.GetFriendsByGameName // (Final|Native|Public|BlueprintCallable) // @ game+0x3a38e50
	void ForcePresencesUpdated(); // Function ShooterGame.PlatformPlayerManager.ForcePresencesUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x3a38d80
	void DebugSetSeasonBadgeInfo(struct FString Subject, struct FMMRSeasonBadgeInfo SeasonBadgeInfo); // Function ShooterGame.PlatformPlayerManager.DebugSetSeasonBadgeInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a38b80
	void AnonymizePregamePlayers(); // Function ShooterGame.PlatformPlayerManager.AnonymizePregamePlayers // (Final|Native|Private) // @ game+0x3a389c0
	void AnonymizeCoreGamePlayers(); // Function ShooterGame.PlatformPlayerManager.AnonymizeCoreGamePlayers // (Final|Native|Private) // @ game+0x3a389a0
};

// Class ShooterGame.PlatformSessionManager
// Size: 0x210 (Inherited: 0x80)
struct UPlatformSessionManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnSessionLoopStateChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnPlaytimeNotification; // 0xa8(0x10)
	char pad_B8[0x50]; // 0xb8(0x50)
	struct FSessionDTO Session; // 0x108(0xc0)
	char pad_1C8[0x8]; // 0x1c8(0x08)
	struct USessionService* SessionService; // 0x1d0(0x08)
	struct URSOManager* RSOManager; // 0x1d8(0x08)
	struct URMSManager* RMSManager; // 0x1e0(0x08)
	struct UConfigManager* ConfigManager; // 0x1e8(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x1f0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x1f8(0x08)
	struct ULoginQueueManager* LoginQueueManager; // 0x200(0x08)
	char pad_208[0x8]; // 0x208(0x08)

	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PlatformSessionManager.OnBugCommand // (Final|Native|Private) // @ game+0x3a46530
	bool IsSessionValid(); // Function ShooterGame.PlatformSessionManager.IsSessionValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a46500
	struct FSessionDTO GetSession(); // Function ShooterGame.PlatformSessionManager.GetSession // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45e60
	enum class ESessionLoopState GetPreviousLoopState(); // Function ShooterGame.PlatformSessionManager.GetPreviousLoopState // (Final|Native|Public|Const) // @ game+0x3a45e30
	struct UPlatformSessionManager* GetPlatformSessionManager(struct UObject* WorldContextObject); // Function ShooterGame.PlatformSessionManager.GetPlatformSessionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a45d10
	struct FDateTime GetLoginRestrictionExpiry(); // Function ShooterGame.PlatformSessionManager.GetLoginRestrictionExpiry // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45970
	enum class ESessionLoopState GetCurrentLoopState(); // Function ShooterGame.PlatformSessionManager.GetCurrentLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45740
};

// Class ShooterGame.PlaybackManager
// Size: 0x58 (Inherited: 0x30)
struct UPlaybackManager : UObject {
	char pad_30[0x28]; // 0x30(0x28)
};

// Class ShooterGame.PlayerAffinityManager
// Size: 0x118 (Inherited: 0x80)
struct UPlayerAffinityManager : UInitSystem {
	struct URiotClientConfigManager* RiotClientConfigManager; // 0x80(0x08)
	char pad_88[0x8]; // 0x88(0x08)
	struct UPlayerAffinityService* PlayerAffinityService; // 0x90(0x08)
	struct FString Affinity; // 0x98(0x10)
	struct FPlayerAffinityToken AffinityToken; // 0xa8(0x10)
	struct FString GameShardZoneOverride; // 0xb8(0x10)
	struct FString PlayerAffinityOverride; // 0xc8(0x10)
	bool bIgnorePlayerAffinity; // 0xd8(0x01)
	char pad_D9[0x3f]; // 0xd9(0x3f)

	struct UPlayerAffinityManager* GetPlayerAffinityManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerAffinityManager.GetPlayerAffinityManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a45da0
	struct FString GetGameShardZone(); // Function ShooterGame.PlayerAffinityManager.GetGameShardZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45880
	struct FString GetAffinityToken(); // Function ShooterGame.PlayerAffinityManager.GetAffinityToken // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45710
	struct FString GetAffinity(); // Function ShooterGame.PlayerAffinityManager.GetAffinity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a456d0
};

// Class ShooterGame.PlayerAffinityService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerAffinityService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerAliasManager
// Size: 0x128 (Inherited: 0x80)
struct UPlayerAliasManager : UInitSystem {
	char pad_80[0x30]; // 0x80(0x30)
	struct FMulticastInlineDelegate OnTagLineCustomizabilityChanged; // 0xb0(0x10)
	struct UPlayerAliasService* PlayerAliasService; // 0xc0(0x08)
	char pad_C8[0x60]; // 0xc8(0x60)

	void UpdateAlias(struct FPlayerAlias& Alias, struct FDelegate OnError); // Function ShooterGame.PlayerAliasManager.UpdateAlias // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a47070
	void CheckValidAlias(struct FPlayerAlias& Alias, struct FDelegate OnValid, struct FDelegate OnInvalidOrError); // Function ShooterGame.PlayerAliasManager.CheckValidAlias // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a45530
	bool CanSetTagLine(); // Function ShooterGame.PlayerAliasManager.CanSetTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45500
	bool AliasTooLong(struct FPlayerAlias& Alias); // Function ShooterGame.PlayerAliasManager.AliasTooLong // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a45300
};

// Class ShooterGame.PlayerAliasService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerAliasService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerCardDataAsset
// Size: 0x1d0 (Inherited: 0x50)
struct UPlayerCardDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> Theme; // 0x80(0x30)
	struct TSoftObjectPtr<UTexture2D> LargeArt; // 0xb0(0x30)
	struct TSoftObjectPtr<UTexture2D> WideArt; // 0xe0(0x30)
	struct TSoftObjectPtr<UTexture2D> SmallArt; // 0x110(0x30)
	struct TSoftObjectPtr<UMaterialInterface> LargeMaterialInterface; // 0x140(0x30)
	struct TSoftObjectPtr<UMaterialInterface> WideMaterialInterface; // 0x170(0x30)
	struct TSoftObjectPtr<UMaterialInterface> SmallMaterialInterface; // 0x1a0(0x30)

	void SetWideMaterialInterface(struct TSoftObjectPtr<UMaterialInterface> NewMaterialInterface); // Function ShooterGame.PlayerCardDataAsset.SetWideMaterialInterface // (Final|Native|Public|BlueprintCallable) // @ game+0x3a46f00
	void SetWideArt(struct TSoftObjectPtr<UTexture2D> NewArt); // Function ShooterGame.PlayerCardDataAsset.SetWideArt // (Final|Native|Public|BlueprintCallable) // @ game+0x3a46d90
	void SetUIData(struct TSoftClassPtr<UObject> NewUIData); // Function ShooterGame.PlayerCardDataAsset.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x38bd790
	void SetSmallMaterialInterface(struct TSoftObjectPtr<UMaterialInterface> NewMaterialInterface); // Function ShooterGame.PlayerCardDataAsset.SetSmallMaterialInterface // (Final|Native|Public|BlueprintCallable) // @ game+0x3a46c20
	void SetSmallArt(struct TSoftObjectPtr<UTexture2D> NewArt); // Function ShooterGame.PlayerCardDataAsset.SetSmallArt // (Final|Native|Public|BlueprintCallable) // @ game+0x3a46ab0
	void SetLargeMaterialInterface(struct TSoftObjectPtr<UMaterialInterface> NewMaterialInterface); // Function ShooterGame.PlayerCardDataAsset.SetLargeMaterialInterface // (Final|Native|Public|BlueprintCallable) // @ game+0x3a46940
	void SetLargeArt(struct TSoftObjectPtr<UTexture2D> NewArt); // Function ShooterGame.PlayerCardDataAsset.SetLargeArt // (Final|Native|Public|BlueprintCallable) // @ game+0x3a467d0
};

// Class ShooterGame.PlayerCardUIData
// Size: 0x90 (Inherited: 0x90)
struct UPlayerCardUIData : UBaseContentUIData {
};

// Class ShooterGame.PlayerControllerStageLoadoutsComponent
// Size: 0x118 (Inherited: 0xe8)
struct UPlayerControllerStageLoadoutsComponent : UActorComponent {
	struct FMulticastInlineDelegate OnPendingWeaponStatusChanged; // 0xe8(0x10)
	float UpgradeEndTime; // 0xf8(0x04)
	char pad_FC[0x1c]; // 0xfc(0x1c)

	void ServerSetLoadoutForStage(int32_t Stage, int32_t LoadoutIndex, bool bIsRandom); // Function ShooterGame.PlayerControllerStageLoadoutsComponent.ServerSetLoadoutForStage // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3a466c0
	void ServerGetPendingWeapon(); // Function ShooterGame.PlayerControllerStageLoadoutsComponent.ServerGetPendingWeapon // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x36355e0
	void OnRep_UpgradeEndTime(); // Function ShooterGame.PlayerControllerStageLoadoutsComponent.OnRep_UpgradeEndTime // (Final|Native|Private) // @ game+0x3a46680
	void AuthOnStageAdvanced(); // Function ShooterGame.PlayerControllerStageLoadoutsComponent.AuthOnStageAdvanced // (Final|Native|Private) // @ game+0x2024060
	void AuthOnCharacterRespawned(struct AShooterCharacter* SpawnedCharacter); // Function ShooterGame.PlayerControllerStageLoadoutsComponent.AuthOnCharacterRespawned // (Final|Native|Private) // @ game+0x3634e00
};

// Class ShooterGame.PlayerDiscrepancyDetectionComponent
// Size: 0x118 (Inherited: 0xe8)
struct UPlayerDiscrepancyDetectionComponent : UActorComponent {
	char pad_E8[0x30]; // 0xe8(0x30)

	void AuthOnTeamChanged(); // Function ShooterGame.PlayerDiscrepancyDetectionComponent.AuthOnTeamChanged // (Final|Native|Protected) // @ game+0x3a454e0
	void AuthHandleConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.PlayerDiscrepancyDetectionComponent.AuthHandleConnectionStatusChanged // (Final|Native|Protected) // @ game+0x3a453d0
};

// Class ShooterGame.PlayerFacingPerfMetric
// Size: 0xa8 (Inherited: 0x30)
struct UPlayerFacingPerfMetric : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnDataUpdated; // 0x38(0x10)
	char pad_48[0x60]; // 0x48(0x60)

	struct FString GetStatValueFormatted(int32_t Index, enum class EPlayerPerfStatField StatField, struct FString Format); // Function ShooterGame.PlayerFacingPerfMetric.GetStatValueFormatted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a46200
	float GetStatValue(int32_t Index, enum class EPlayerPerfStatField StatField); // Function ShooterGame.PlayerFacingPerfMetric.GetStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a46130
	struct FString GetStatTextValueFormatted(int32_t Index, enum class EPlayerPerfStatField StatField, struct FString Format); // Function ShooterGame.PlayerFacingPerfMetric.GetStatTextValueFormatted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45fb0
	void GetMinAndMaxStatValues(enum class EPlayerPerfStatField StatField, int32_t NumValues, float& Min, float& Max); // Function ShooterGame.PlayerFacingPerfMetric.GetMinAndMaxStatValues // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45ba0
};

// Class ShooterGame.PlayerFacingPerfManager
// Size: 0x68 (Inherited: 0x30)
struct UPlayerFacingPerfManager : UObject {
	char pad_30[0x28]; // 0x30(0x28)
	struct TArray<struct UPlayerFacingPerfMetric*> Metrics; // 0x58(0x10)

	bool IsMetricServerInfo(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.IsMetricServerInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a46480
	bool IsMetricReflexOnly(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.IsMetricReflexOnly // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a46400
	bool IsMetricDevOnly(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.IsMetricDevOnly // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a46380
	enum class EAresIntSettingName GetSettingForMetric(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.GetSettingForMetric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a45f30
	struct FString GetMetricName(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.GetMetricName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a45b10
	enum class EPlayerPerfMetricCategory GetMetricFromSetting(enum class EAresIntSettingName Setting); // Function ShooterGame.PlayerFacingPerfManager.GetMetricFromSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a45a90
	struct UPlayerFacingPerfMetric* GetMetric(enum class EPlayerPerfMetricCategory MetricCategory); // Function ShooterGame.PlayerFacingPerfManager.GetMetric // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a45a00
	struct FString GetFormattedMetricString(enum class EPlayerPerfMetricCategory MetricCategory, float CurrentValue); // Function ShooterGame.PlayerFacingPerfManager.GetFormattedMetricString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3a45770
};

// Class ShooterGame.PlayerFacingPerfGraphWidgetBase
// Size: 0x3b0 (Inherited: 0x2c8)
struct UPlayerFacingPerfGraphWidgetBase : UUserWidget {
	float MaxYAxisTop; // 0x2c8(0x04)
	float MinYAxisTop; // 0x2cc(0x04)
	float MaxYAxisBottom; // 0x2d0(0x04)
	float MinYAxisBottom; // 0x2d4(0x04)
	float YAxisMargin; // 0x2d8(0x04)
	int32_t XAxisZoom; // 0x2dc(0x04)
	struct FLinearColor GraphBackgroundColor; // 0x2e0(0x10)
	struct UFont* Font; // 0x2f0(0x08)
	int32_t FontSize; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct FText GraphTitle; // 0x300(0x18)
	enum class EPlayerPerfMetricCategory MetricCategory; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct TArray<struct FGraphMetricEntry> GraphMetrics; // 0x320(0x10)
	enum class EGraphDisplayType DisplayType; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct UPlayerFacingPerfMetric* Metric; // 0x338(0x08)
	char pad_340[0x70]; // 0x340(0x70)

	void Reinitialize(); // Function ShooterGame.PlayerFacingPerfGraphWidgetBase.Reinitialize // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a466a0
	struct FVector2D GetLocalWidgetDimensions(struct FPaintContext& Context); // Function ShooterGame.PlayerFacingPerfGraphWidgetBase.GetLocalWidgetDimensions // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3a458d0
};

// Class ShooterGame.UISurveyResponse
// Size: 0x38 (Inherited: 0x30)
struct UUISurveyResponse : UObject {
	int32_t questionId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class ShooterGame.LikertResponse
// Size: 0x40 (Inherited: 0x38)
struct ULikertResponse : UUISurveyResponse {
	int32_t LikertResponse; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.FreeTextResponse
// Size: 0x48 (Inherited: 0x38)
struct UFreeTextResponse : UUISurveyResponse {
	struct FString ResponseText; // 0x38(0x10)
};

// Class ShooterGame.UISurveyQuestion
// Size: 0x58 (Inherited: 0x30)
struct UUISurveyQuestion : UObject {
	int32_t ID; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FString Type; // 0x38(0x10)
	struct FString Question; // 0x48(0x10)
};

// Class ShooterGame.SurveyQuestionAndAnswer
// Size: 0x40 (Inherited: 0x30)
struct USurveyQuestionAndAnswer : UObject {
	struct UUISurveyQuestion* Question; // 0x30(0x08)
	struct UUISurveyResponse* Response; // 0x38(0x08)
};

// Class ShooterGame.UIPlayerSurvey
// Size: 0x78 (Inherited: 0x30)
struct UUIPlayerSurvey : UObject {
	bool IsSurveyAvailable; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t ID; // 0x34(0x04)
	struct FString Title; // 0x38(0x10)
	struct FString Caption; // 0x48(0x10)
	struct FString Type; // 0x58(0x10)
	struct TArray<struct USurveyQuestionAndAnswer*> SurveyData; // 0x68(0x10)
};

// Class ShooterGame.PlayerFeedbackManager
// Size: 0x78 (Inherited: 0x30)
struct UPlayerFeedbackManager : UObject {
	struct FMulticastInlineDelegate FOnSurveyFound; // 0x30(0x10)
	struct FMulticastInlineDelegate FOnSurveyResponseSent; // 0x40(0x10)
	struct UPlayerFeedbackService* PlayerFeedbackService; // 0x50(0x08)
	struct URSOManager* RSOManager; // 0x58(0x08)
	struct UUIPlayerSurvey* CurrentPlayerSurvey; // 0x60(0x08)
	struct TArray<struct UUISurveyResponse*> ResponsesForCurrentSurvey; // 0x68(0x10)

	void SubmitSurveyResponse(); // Function ShooterGame.PlayerFeedbackManager.SubmitSurveyResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4e150
	void OpenNativeMobileReview(); // Function ShooterGame.PlayerFeedbackManager.OpenNativeMobileReview // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3730540
	void OpenMobileReviewInAppStore(); // Function ShooterGame.PlayerFeedbackManager.OpenMobileReviewInAppStore // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3730540
	struct UUIPlayerSurvey* GetSurvey(); // Function ShooterGame.PlayerFeedbackManager.GetSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4d640
	struct UPlayerFeedbackManager* GetPlayerFeedbackManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerFeedbackManager.GetPlayerFeedbackManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a4d450
	void CheckForSurvey(); // Function ShooterGame.PlayerFeedbackManager.CheckForSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4d000
};

// Class ShooterGame.PlayerFeedbackService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerFeedbackService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PlayerFeedbackToolModel
// Size: 0x48 (Inherited: 0x30)
struct UPlayerFeedbackToolModel : UObject {
	bool LoginSurveyRequested; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FString SurveyEventType; // 0x38(0x10)

	struct FPlayerFeedbackPayload FillOutStorePurchasePayload(struct FString PurchaseSource, struct TArray<struct FString>& PurchasedItems); // Function ShooterGame.PlayerFeedbackToolModel.FillOutStorePurchasePayload // (Final|Native|Public|HasOutParms) // @ game+0x3a4d2e0
	struct FPlayerFeedbackPayload FillOutEOGPayload(struct FName& AgentPlayed, struct TArray<struct FName>& AgentsPlayedAgainst, struct TArray<struct FName>& AgentsPlayedWith, struct FString QueueID, struct FString MapID); // Function ShooterGame.PlayerFeedbackToolModel.FillOutEOGPayload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a4d020
};

// Class ShooterGame.PlayerFeedbackToolPluginManager
// Size: 0xb0 (Inherited: 0x80)
struct UPlayerFeedbackToolPluginManager : UInitSystem {
	char pad_80[0x20]; // 0x80(0x20)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct URSOManager* RSOManager; // 0xa8(0x08)

	struct FString GetShard(); // Function ShooterGame.PlayerFeedbackToolPluginManager.GetShard // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a4d5c0
	struct UPlayerFeedbackToolPluginManager* GetPlayerFeedbackToolPluginManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerFeedbackToolPluginManager.GetPlayerFeedbackToolPluginManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a4d510
	struct UPlayerFeedbackToolManager* GetPlayerFeedbackToolManager(); // Function ShooterGame.PlayerFeedbackToolPluginManager.GetPlayerFeedbackToolManager // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4d4e0
};

// Class ShooterGame.PlayerFeedbackToolQRCodeViewModel
// Size: 0xf8 (Inherited: 0x48)
struct UPlayerFeedbackToolQRCodeViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnTitleChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSubtitleChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnDescriptionChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnLinkChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnQRCodeChanged; // 0x88(0x10)
	struct FText Title; // 0x98(0x18)
	struct FText Subtitle; // 0xb0(0x18)
	struct FText Description; // 0xc8(0x18)
	struct FString Link; // 0xe0(0x10)
	struct UTexture2D* QRCode; // 0xf0(0x08)

	void SetTitle(struct FText NewTitle); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.SetTitle // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a4e060
	void SetSubtitle(struct FText NewSubtitle); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.SetSubtitle // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a4df70
	void SetQRCode(struct UTexture2D* NewQRCode); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.SetQRCode // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a4dee0
	void SetLink(struct FString NewLink); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.SetLink // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a4dcd0
	void SetDescription(struct FText NewDescription); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.SetDescription // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a4dbe0
	void Refresh(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4db90
	void Init(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4d8a0
	struct FText GetTitle(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.GetTitle // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3a4d670
	struct FText GetSubtitle(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.GetSubtitle // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x380c6e0
	struct UTexture2D* GetQRCode(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.GetQRCode // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3a4d5a0
	struct FString GetLink(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.GetLink // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3911c50
	struct FText GetDescription(); // Function ShooterGame.PlayerFeedbackToolQRCodeViewModel.GetDescription // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3986310
};

// Class ShooterGame.PlayerFeedbackToolViewController
// Size: 0xa0 (Inherited: 0x30)
struct UPlayerFeedbackToolViewController : UObject {
	struct UPlayerFeedbackToolModel* Model; // 0x30(0x08)
	bool bFeatureEnabled; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FMulticastInlineDelegate OnSurveyReceived; // 0x40(0x10)
	bool shouldTriggerNPESurvey; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct URSOManager* RSOManager; // 0x58(0x08)
	struct UConfigManager* ConfigManager; // 0x60(0x08)
	struct UContentManager* ContentManager; // 0x68(0x08)
	struct UPlayerFeedbackToolManager* PlayerFeedbackToolManager; // 0x70(0x08)
	struct UPlayerFeedbackToolPluginManager* PlayerFeedbackToolPluginManager; // 0x78(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x80(0x08)
	struct UMMRManager* MMRManager; // 0x88(0x08)
	char pad_90[0x9]; // 0x90(0x09)
	bool bSurveyLimitReached; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)

	void UpdatePlayerSeenSurveyState(bool hasSeen); // Function ShooterGame.PlayerFeedbackToolViewController.UpdatePlayerSeenSurveyState // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4e8f0
	void UpdateNPESurveyState(); // Function ShooterGame.PlayerFeedbackToolViewController.UpdateNPESurveyState // (Final|Native|Public) // @ game+0x3a4e8d0
	bool TryGetSurveyWithPayload(enum class EPlayerFeedbackSurveySource& SurveyEvent, struct FPlayerFeedbackPayload FeedbackPayload); // Function ShooterGame.PlayerFeedbackToolViewController.TryGetSurveyWithPayload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a4e2b0
	bool TryGetSurvey(enum class EPlayerFeedbackSurveySource& SurveyEvent); // Function ShooterGame.PlayerFeedbackToolViewController.TryGetSurvey // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a4e210
	void TestTriggerSurveyEvent(enum class EPlayerFeedbackToolSurveyType SurveyType); // Function ShooterGame.PlayerFeedbackToolViewController.TestTriggerSurveyEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4e190
	void TestTriggerNPESurvey(); // Function ShooterGame.PlayerFeedbackToolViewController.TestTriggerNPESurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4e170
	bool RequestRateAllowsSurvey(); // Function ShooterGame.PlayerFeedbackToolViewController.RequestRateAllowsSurvey // (Final|Native|Private) // @ game+0x3a4dbb0
	void Init(); // Function ShooterGame.PlayerFeedbackToolViewController.Init // (Final|Native|Public) // @ game+0x3a4d8c0
	void HandleSurveyReceived(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolViewController.HandleSurveyReceived // (Final|Native|Private|HasOutParms) // @ game+0x3a4d770
	void HandleShowPFTChanged(); // Function ShooterGame.PlayerFeedbackToolViewController.HandleShowPFTChanged // (Final|Native|Private) // @ game+0x3a4d750
	void CheckForExistingSurveys(); // Function ShooterGame.PlayerFeedbackToolViewController.CheckForExistingSurveys // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4cfe0
};

// Class ShooterGame.PlayerFeedbackToolViewModel
// Size: 0x100 (Inherited: 0x48)
struct UPlayerFeedbackToolViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnConfirmation; // 0x48(0x10)
	struct FMulticastInlineDelegate OnCancel; // 0x58(0x10)
	struct UMatchDetailsViewModel* ProcessedMatchDetailsModel; // 0x68(0x08)
	struct FString MatchID; // 0x70(0x10)
	struct FString Subject; // 0x80(0x10)
	struct FPlayerFeedbackSurvey ActiveSurvey; // 0x90(0x68)
	char pad_F8[0x8]; // 0xf8(0x08)

	void SetMatchInfo(struct FString InMatchId, struct FString InSubject); // Function ShooterGame.PlayerFeedbackToolViewModel.SetMatchInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4ddd0
	void Refresh(); // Function ShooterGame.PlayerFeedbackToolViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void OnPlayerFeedbackSurveyReceived(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolViewModel.OnPlayerFeedbackSurveyReceived // (Final|Native|Protected|HasOutParms) // @ game+0x3a4da60
	void OnPlayerFeedbackSurveyDeclined(struct FGuid& ModalID); // Function ShooterGame.PlayerFeedbackToolViewModel.OnPlayerFeedbackSurveyDeclined // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3a4d9c0
	void OnPlayerFeedbackSurveyAccepted(struct FGuid& ModalID); // Function ShooterGame.PlayerFeedbackToolViewModel.OnPlayerFeedbackSurveyAccepted // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3a4d920
	void OnExitMatchDetails(); // Function ShooterGame.PlayerFeedbackToolViewModel.OnExitMatchDetails // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4d900
	void Init(); // Function ShooterGame.PlayerFeedbackToolViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x3a4d8e0
	void HandleMatchDetailsContentLoaded(); // Function ShooterGame.PlayerFeedbackToolViewModel.HandleMatchDetailsContentLoaded // (Final|Native|Protected) // @ game+0x3a4d730
};

// Class ShooterGame.PlayerFeedbackToolWidget
// Size: 0x2f0 (Inherited: 0x2c8)
struct UPlayerFeedbackToolWidget : UUserWidget {
	bool bAnswersSubmitted; // 0x2c8(0x01)
	bool bFeatureEnabled; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct FString SurveyEventType; // 0x2d0(0x10)
	struct UPlayerFeedbackToolManager* PlayerFeedbackToolManager; // 0x2e0(0x08)
	struct URSOManager* RSOManager; // 0x2e8(0x08)

	bool TryGetSurvey(struct FString SurveyEvent); // Function ShooterGame.PlayerFeedbackToolWidget.TryGetSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x3a567e0
	void SurveyReceivedEvent(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolWidget.SurveyReceivedEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3a566a0
	void SubmitSurvey(bool OptedOutOfSurvey); // Function ShooterGame.PlayerFeedbackToolWidget.SubmitSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x3a56610
	void SubmitAllAnswersEvent(); // Function ShooterGame.PlayerFeedbackToolWidget.SubmitAllAnswersEvent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37c24a0
	void SetAnswer(struct FPlayerFeedbackQuestion& Question, struct FString Key, struct FString Value); // Function ShooterGame.PlayerFeedbackToolWidget.SetAnswer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a56440
	void HandleSurveyReceived(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolWidget.HandleSurveyReceived // (Final|Native|Private|HasOutParms) // @ game+0x3a55d80
};

// Class ShooterGame.PlayerGameDataEventSubscriptions
// Size: 0x48 (Inherited: 0x30)
struct UPlayerGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class ShooterGame.PlayerIdentityUpdater
// Size: 0x48 (Inherited: 0x30)
struct UPlayerIdentityUpdater : UObject {
	struct UPartyManager* PartyManager; // 0x30(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x38(0x08)
	struct UAccountXPManager* AccountXPManager; // 0x40(0x08)

	void HandlePersonalizationUpdated(); // Function ShooterGame.PlayerIdentityUpdater.HandlePersonalizationUpdated // (Final|Native|Private) // @ game+0x3a55d40
	void HandleAccountLevelUpdated(); // Function ShooterGame.PlayerIdentityUpdater.HandleAccountLevelUpdated // (Final|Native|Private) // @ game+0x3a55a80
};

// Class ShooterGame.PlayerListingManager
// Size: 0x110 (Inherited: 0x80)
struct UPlayerListingManager : UInitSystem {
	char pad_80[0x68]; // 0x80(0x68)
	struct UFriendsModel* FriendsModel; // 0xe8(0x08)
	struct UPartyManager* PartyManager; // 0xf0(0x08)
	struct URSOManager* RSOManager; // 0xf8(0x08)
	struct UGameInstance* GameInstance; // 0x100(0x08)
	struct URGIFriendsSubsystem* RGIFriendsSubsystem; // 0x108(0x08)

	void HandleListSourcesUpdated(); // Function ShooterGame.PlayerListingManager.HandleListSourcesUpdated // (Final|Native|Private) // @ game+0x3a55c50
	void HandleFriendsUpdated(struct FRGIFriendsPlayers& Friends); // Function ShooterGame.PlayerListingManager.HandleFriendsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3a55b30
	void HandleFriendsModelChanged(struct UFriendModel* FriendModel); // Function ShooterGame.PlayerListingManager.HandleFriendsModelChanged // (Final|Native|Private) // @ game+0x3a55aa0
};

// Class ShooterGame.PlayerLoginLocationHistoryManager
// Size: 0x180 (Inherited: 0x80)
struct UPlayerLoginLocationHistoryManager : UInitSystem {
	struct FMulticastInlineDelegate OnPlayerLoginLocationHistoryUpdated; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct UPregameManager* PregameManager; // 0xa8(0x08)
	struct UPlayerLoginLocationHistoryService* PlayerLoginLocationHistoryService; // 0xb0(0x08)
	char pad_B8[0xc8]; // 0xb8(0xc8)

	bool IsDisabled(); // Function ShooterGame.PlayerLoginLocationHistoryManager.IsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55f50
	void HandlePregameMatchUpdated(); // Function ShooterGame.PlayerLoginLocationHistoryManager.HandlePregameMatchUpdated // (Final|Native|Private) // @ game+0x3a55d60
	struct UPlayerLoginLocationHistoryManager* GetPlayerLoginLocationHistoryManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerLoginLocationHistoryManager.GetPlayerLoginLocationHistoryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a55610
	struct FPlayerLoginLocationHistory GetPlayerLoginLocationHistory(struct FString Subject); // Function ShooterGame.PlayerLoginLocationHistoryManager.GetPlayerLoginLocationHistory // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a554d0
};

// Class ShooterGame.PlayerLoginLocationHistoryService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerLoginLocationHistoryService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerPurchaseablesComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UPlayerPurchaseablesComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bLoadPersistedItems; // 0xf0(0x01)
	bool bPreventWeaponDropOnDeath; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)

	bool PassesPurchasableFilters(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.PassesPurchasableFilters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a56100
	bool IsValidPurchasable(struct UAresPurchasable* PurchasableClass); // Function ShooterGame.PlayerPurchaseablesComponent.IsValidPurchasable // (Final|Native|Public|Const) // @ game+0x3a55fb0
	bool IsPersistWeaponsEnabled(); // Function ShooterGame.PlayerPurchaseablesComponent.IsPersistWeaponsEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3793680
	bool IsDropWeaponOnDeathEnabled(); // Function ShooterGame.PlayerPurchaseablesComponent.IsDropWeaponOnDeathEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a55f80
	bool HasPurchasable(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.HasPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55eb0
	struct UAresPurchasableEquippable* GetValidPurchasableForItemClass(struct AAresItem* ItemClass); // Function ShooterGame.PlayerPurchaseablesComponent.GetValidPurchasableForItemClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3a559e0
	int32_t GetTotalPurchases(); // Function ShooterGame.PlayerPurchaseablesComponent.GetTotalPurchases // (Final|Native|Public|Const) // @ game+0x3a559b0
	int32_t GetTotalPurchasablesOfType(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetTotalPurchasablesOfType // (Final|Native|Public|Const) // @ game+0x3a55910
	int32_t GetPurchasableSlotTotal(struct AAresEquippableSlot* WhichSlot); // Function ShooterGame.PlayerPurchaseablesComponent.GetPurchasableSlotTotal // (Final|Native|Public|Const) // @ game+0x3a55870
	enum class EAresPurchasableReplaceType GetPurchasableReplaceType(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetPurchasableReplaceType // (Final|Native|Public|Const) // @ game+0x3a557d0
	int32_t GetPurchasableEquippableSlotTotal(struct AAresEquippableSlot* WhichSlot); // Function ShooterGame.PlayerPurchaseablesComponent.GetPurchasableEquippableSlotTotal // (Final|Native|Public|Const) // @ game+0x3a55730
	struct AAresItem* GetItemClassForPurchasable(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetItemClassForPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55440
	int32_t GetEquippableCostFromPurchasable(struct AAresItem* EquippableClass); // Function ShooterGame.PlayerPurchaseablesComponent.GetEquippableCostFromPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a553a0
	int32_t GetCostForPurchasable(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetCostForPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55300
	struct FPurchasableList GetAllValidPurchasables(); // Function ShooterGame.PlayerPurchaseablesComponent.GetAllValidPurchasables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55280
	struct FPurchasableList GetAllOwnedPurchasables(); // Function ShooterGame.PlayerPurchaseablesComponent.GetAllOwnedPurchasables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55200
	bool CanOnlyHavePurchasableByReplacement(struct UAresPurchasable* Purchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.CanOnlyHavePurchasableByReplacement // (Final|Native|Public|Const) // @ game+0x3a54ef0
	bool CanHavePurchasable(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.CanHavePurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a54e50
	bool CanFulfillOtherPlayerGunRequest(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.CanFulfillOtherPlayerGunRequest // (Final|Native|Public) // @ game+0x3a54db0
	bool CanAffordPurchasable(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.CanAffordPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a54d10
	bool AuthTrySell(struct UAresPurchasable* WhichPurchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTrySell // (Final|Native|Public|BlueprintCallable) // @ game+0x36f50d0
	bool AuthTryPurchase(struct UAresPurchasable* WhichPurchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTryPurchase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36f50d0
	bool AuthTryGrantPurchasableEquippable(struct UAresPurchasableEquippable* PurchasableEquippable); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTryGrantPurchasableEquippable // (Final|Native|Public) // @ game+0x3a54c50
	bool AuthTryFulfillMyGunRequest(struct UAresPurchasableEquippable* WhichPurchasable, struct AShooterPlayerState* FulfillerPlayerState); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTryFulfillMyGunRequest // (Final|Native|Public) // @ game+0x37fca20
	void AuthSetEnableWeaponDropOnDeath(bool bDropWeapon); // Function ShooterGame.PlayerPurchaseablesComponent.AuthSetEnableWeaponDropOnDeath // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a54bc0
	void AuthSetEnablePersistWeapons(bool bPersistWeapons); // Function ShooterGame.PlayerPurchaseablesComponent.AuthSetEnablePersistWeapons // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a54b30
	void AuthSellPurchasable(struct UAresPurchasable* WhichPurchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthSellPurchasable // (Final|Native|Public) // @ game+0x36eab40
	void AuthRemovePurchasable(struct UAresPurchasable* WhichPurchasable, enum class EInventoryTransaction TransactionType, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthRemovePurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x363f1c0
	void AuthRemoveAllPurchasableFilters(bool bDestroy); // Function ShooterGame.PlayerPurchaseablesComponent.AuthRemoveAllPurchasableFilters // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthRefundCost(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.AuthRefundCost // (Final|Native|Public) // @ game+0x3634e00
	struct UGrantResult* AuthGrantPurchasableWithResults(struct UAresPurchasable* Purchasable, bool AllowRefund, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot, struct AShooterPlayerState* PurchasingPlayer); // Function ShooterGame.PlayerPurchaseablesComponent.AuthGrantPurchasableWithResults // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a54970
	bool AuthGrantPurchasable(struct UAresPurchasable* Purchasable, bool AllowRefund, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot, struct AShooterPlayerState* PurchasingPlayer); // Function ShooterGame.PlayerPurchaseablesComponent.AuthGrantPurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a547b0
	bool AuthGrantItem(struct AAresItem* ItemToPurchase, enum class EAresPurchasableType Type, bool bAllowRefund); // Function ShooterGame.PlayerPurchaseablesComponent.AuthGrantItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a546a0
	bool AuthForceGivePurchasable(struct UAresPurchasable* PurchasableClass, bool bAllowRefund); // Function ShooterGame.PlayerPurchaseablesComponent.AuthForceGivePurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a545d0
	struct UPurchasableFilterComponent* AuthAddPurchasableFilter(struct TArray<struct UAresPurchasable*> Allowlist, struct TArray<struct UAresPurchasable*> Denylist); // Function ShooterGame.PlayerPurchaseablesComponent.AuthAddPurchasableFilter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a54450
};

// Class ShooterGame.PlayerReportSequence
// Size: 0xb0 (Inherited: 0x30)
struct UPlayerReportSequence : UObject {
	struct FString Offender; // 0x30(0x10)
	struct TArray<enum class EPlayerReportReason> Reasons; // 0x40(0x10)
	enum class EGameFlowStateType Location; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FString Comment; // 0x58(0x10)
	struct FString MatchID; // 0x68(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x78(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x88(0x10)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x98(0x08)
	struct UPlayerReportService* ReportService; // 0xa0(0x08)
	struct URestrictionsService* RestrictionsService; // 0xa8(0x08)

	void Start(); // Function ShooterGame.PlayerReportSequence.Start // (Final|Native|Public) // @ game+0x3a565f0
	void OnTokenFetched(struct FString Token); // Function ShooterGame.PlayerReportSequence.OnTokenFetched // (Final|Native|Public) // @ game+0x3a56050
};

// Class ShooterGame.PlayerReportManager
// Size: 0xd8 (Inherited: 0x80)
struct UPlayerReportManager : UInitSystem {
	char pad_80[0x10]; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URMSManager* RMSManager; // 0x98(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xa0(0x08)
	struct UPlayerReportSequence* ActiveReportSequence; // 0xa8(0x08)
	struct UPlayerReportService* ReportService; // 0xb0(0x08)
	struct URestrictionsService* RestrictionsService; // 0xb8(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0xc0(0x08)
	struct UNotificationManager* NotificationManager; // 0xc8(0x08)
	struct UModalManager* ModalManager; // 0xd0(0x08)

	void ReportPlayer(struct FString Offender, struct FString MatchID, struct TArray<enum class EPlayerReportReason>& Reasons, struct FString Comment, struct FDelegate OnSuccess, struct FDelegate OnFailure); // Function ShooterGame.PlayerReportManager.ReportPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a561a0
	void HandleModalFeedbackMessageAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.PlayerReportManager.HandleModalFeedbackMessageAction // (Final|Native|Private) // @ game+0x3a55c70
	struct UPlayerReportManager* GetPlayerReportManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerReportManager.GetPlayerReportManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a556a0
	void FetchPlayerAgentName(struct UObject* WorldContextObject, struct FString Subject, struct FString MatchID, struct FDelegate OnSuccess, struct FDelegate OnFailure); // Function ShooterGame.PlayerReportManager.FetchPlayerAgentName // (Final|Native|Public|BlueprintCallable) // @ game+0x3a54fe0
	void EndPlayerReportSequence(); // Function ShooterGame.PlayerReportManager.EndPlayerReportSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x3a54fc0
	void BroadcastReportSent(); // Function ShooterGame.PlayerReportManager.BroadcastReportSent // (Final|Native|Private) // @ game+0x3a54cf0
};

// Class ShooterGame.PlayerReportNotificationManager
// Size: 0x38 (Inherited: 0x30)
struct UPlayerReportNotificationManager : UObject {
	struct UNotificationManager* NotificationManager; // 0x30(0x08)

	void HandleReportSent(); // Function ShooterGame.PlayerReportNotificationManager.HandleReportSent // (Final|Native|Private) // @ game+0x3a5d260
	void HandleGenericDismiss(struct UGenericNotification* Notification); // Function ShooterGame.PlayerReportNotificationManager.HandleGenericDismiss // (Final|Native|Private) // @ game+0x3a5d1d0
};

// Class ShooterGame.PlayerReportService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerReportService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerScoreCombatTrackerComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UPlayerScoreCombatTrackerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)

	void ScoredKill(struct FScoreKillData& ScoreKillData); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ScoredKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void ScoredDeath(struct UDamageResponse* Response, struct AOwnerExclusivePlayerInfo* Killer, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ScoredDeath // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void ScoredAssist(struct UDamageResponse* KillingBlow, struct FAresAssist& AssistInfo, struct AOwnerExclusivePlayerInfo* Killer, struct AOwnerExclusivePlayerInfo* Assister); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ScoredAssist // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void ReceivedDamage(struct UDamageResponse* Response); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ReceivedDamage // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.PlayerScoreCombatTrackerComponent.GetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x39d6a10
	void DealtDamage(struct UDamageResponse* Response); // Function ShooterGame.PlayerScoreCombatTrackerComponent.DealtDamage // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.PlayerScoreComponent
// Size: 0x110 (Inherited: 0xe8)
struct UPlayerScoreComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	int32_t Score; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TArray<struct FPlayerScoreDebugEntry> DebugEntries; // 0x100(0x10)

	void OnRep_Score(); // Function ShooterGame.PlayerScoreComponent.OnRep_Score // (Final|Native|Private) // @ game+0x3a5df50
	int32_t GetScore(); // Function ShooterGame.PlayerScoreComponent.GetScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37e5fa0
	void AuthResetScore(); // Function ShooterGame.PlayerScoreComponent.AuthResetScore // (Final|Native|Public) // @ game+0x37e5df0
	void AdjustScore(int32_t Delta, struct FName& Reason); // Function ShooterGame.PlayerScoreComponent.AdjustScore // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a5ca30
};

// Class ShooterGame.PlayerSettingsTelemetry
// Size: 0x100 (Inherited: 0x80)
struct UPlayerSettingsTelemetry : UInitSystem {
	struct FMulticastInlineDelegate OnPlayerSettingsChangesCommitted; // 0x80(0x10)
	char pad_90[0x50]; // 0x90(0x50)
	struct UAresSettingsManager* AresSettingsManager; // 0xe0(0x08)
	struct URSOManager* RSOManager; // 0xe8(0x08)
	struct UTelemetrySampler* TelemetrySampler; // 0xf0(0x08)
	struct UTelemetryManager* TelemetryManager; // 0xf8(0x08)

	void OnAxisBindingSettingChanged(struct FString AxisName, int32_t BindIndex, float Scale, struct FString OldKey, struct FString NewKey); // Function ShooterGame.PlayerSettingsTelemetry.OnAxisBindingSettingChanged // (Final|Native|Public) // @ game+0x3a5db50
	void OnAnyStringSettingChanged(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyStringSettingChanged // (Final|Native|Private) // @ game+0x3a5da00
	void OnAnyIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyIntSettingChanged // (Final|Native|Private) // @ game+0x3a5d8f0
	void OnAnyFloatSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyFloatSettingChanged // (Final|Native|Private) // @ game+0x3a5d7e0
	void OnAnyBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyBoolSettingChanged // (Final|Native|Private) // @ game+0x3a5d6c0
	void OnActionBindingSettingChanged(struct FString ActionName, int32_t BindIndex, struct FActionChord& OldInput, struct FActionChord& NewInput); // Function ShooterGame.PlayerSettingsTelemetry.OnActionBindingSettingChanged // (Final|Native|Public|HasOutParms) // @ game+0x3a5d490
};

// Class ShooterGame.PlayerSprayComponent
// Size: 0x100 (Inherited: 0xe8)
struct UPlayerSprayComponent : UActorComponent {
	int32_t LastRoundSprayed; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct AEffectContainer*> ActiveSprays; // 0xf0(0x10)

	void OnSpraySpawned(struct AEffectContainer* SpawnedSpray); // Function ShooterGame.PlayerSprayComponent.OnSpraySpawned // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x28c8460
	bool AuthPlayerTrySpray(struct AAresSpray* SprayToTrigger, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.PlayerSprayComponent.AuthPlayerTrySpray // (Final|Native|Public) // @ game+0x37fca20
	void AuthOnPlayerSprayed(struct AAresSpray* UsedSpray, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.PlayerSprayComponent.AuthOnPlayerSprayed // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x37fc610
	bool AuthCanPlayerSpray(); // Function ShooterGame.PlayerSprayComponent.AuthCanPlayerSpray // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x37df490
};

// Class ShooterGame.PlayerStateStageLoadoutsComponent
// Size: 0x120 (Inherited: 0xe8)
struct UPlayerStateStageLoadoutsComponent : UActorComponent {
	bool bEnableLoadoutRandomization; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TArray<struct FSelectedLoadout> SelectedLoadouts; // 0xf0(0x10)
	char pad_100[0x20]; // 0x100(0x20)

	bool StageLoadoutIsRandom(int32_t Stage); // Function ShooterGame.PlayerStateStageLoadoutsComponent.StageLoadoutIsRandom // (Final|Native|Public|BlueprintCallable) // @ game+0x3a5e1e0
	int32_t GetSelectedLoadoutAtStage(int32_t Stage); // Function ShooterGame.PlayerStateStageLoadoutsComponent.GetSelectedLoadoutAtStage // (Final|Native|Public|BlueprintCallable) // @ game+0x3a5d080
};

// Class ShooterGame.PlayerTimelineDebugComponent
// Size: 0x160 (Inherited: 0xe8)
struct UPlayerTimelineDebugComponent : UActorComponent {
	char pad_E8[0x78]; // 0xe8(0x78)

	void OnMoveProcessingDelayDebugChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.PlayerTimelineDebugComponent.OnMoveProcessingDelayDebugChanged // (Final|Native|Public) // @ game+0x3a5ddd0
};

// Class ShooterGame.PlayerTitleUIData
// Size: 0x90 (Inherited: 0x90)
struct UPlayerTitleUIData : UBaseContentUIData {
};

// Class ShooterGame.PlayerTitleDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UPlayerTitleDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct FText TitleText; // 0x80(0x18)
	struct FText TitleTextAllCaps; // 0x98(0x18)

	struct FText GetTitleTextAllCaps(); // Function ShooterGame.PlayerTitleDataAsset.GetTitleTextAllCaps // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a5d120
};

// Class ShooterGame.Playspace
// Size: 0x30 (Inherited: 0x30)
struct UPlayspace : UObject {
};

// Class ShooterGame.DefaultPlayspace
// Size: 0x30 (Inherited: 0x30)
struct UDefaultPlayspace : UPlayspace {
};

// Class ShooterGame.PlayspaceComponent
// Size: 0x168 (Inherited: 0xe8)
struct UPlayspaceComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnPlayspaceChanged; // 0xf0(0x10)
	struct UValueDisagreementTimer* DisagreementTimer; // 0x100(0x08)
	struct TArray<struct UPlayspace*> AuthPlayspaces; // 0x108(0x10)
	char pad_118[0x50]; // 0x118(0x50)

	void ProcessExitPlayspaceRPC(struct UPlayspace* PlayspaceToLeave, bool bExecuteOnOwner); // Function ShooterGame.PlayspaceComponent.ProcessExitPlayspaceRPC // (Final|Native|Public) // @ game+0x3a5e080
	void ProcessEnterPlayspaceRPC(struct UPlayspace* NewPlayspace, bool bLeaveCurrentPlayspaces, bool bExecuteOnOwner); // Function ShooterGame.PlayspaceComponent.ProcessEnterPlayspaceRPC // (Final|Native|Public) // @ game+0x3a5df70
	void OnRep_AuthPlayspaces(); // Function ShooterGame.PlayspaceComponent.OnRep_AuthPlayspaces // (Final|Native|Protected) // @ game+0x3a5df30
	bool IsInSamePlayspace(struct UObject* OtherObject); // Function ShooterGame.PlayspaceComponent.IsInSamePlayspace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a5d3f0
	bool IsInPlayspace(struct UPlayspace* PlayspaceToCheck); // Function ShooterGame.PlayspaceComponent.IsInPlayspace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a5d350
	bool IsInExactlyTheSamePlayspaces(struct UObject* OtherObject); // Function ShooterGame.PlayspaceComponent.IsInExactlyTheSamePlayspaces // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a5d2b0
	bool IsInDefaultPlayspace(); // Function ShooterGame.PlayspaceComponent.IsInDefaultPlayspace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a5d280
	struct UPlayspaceComponent* GetPlayspaceComponentForObject(struct UObject* SourceObject); // Function ShooterGame.PlayspaceComponent.GetPlayspaceComponentForObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a5cff0
	struct TSet<struct UPlayspace*> GetCurrentPlayspaces(); // Function ShooterGame.PlayspaceComponent.GetCurrentPlayspaces // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a5cef0
	bool DoPlayspaceListsOverlap(struct TSet<struct UPlayspace*>& PlayspaceListA, struct TSet<struct UPlayspace*>& PlayspaceListB); // Function ShooterGame.PlayspaceComponent.DoPlayspaceListsOverlap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3a5ccb0
	void AuthResetPlayspaces(); // Function ShooterGame.PlayspaceComponent.AuthResetPlayspaces // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthExitPlayspace(struct UPlayspace* PlayspaceToLeave); // Function ShooterGame.PlayspaceComponent.AuthExitPlayspace // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthEnterPlayspace(struct UPlayspace* NewPlayspace, bool bLeaveCurrentPlayspaces); // Function ShooterGame.PlayspaceComponent.AuthEnterPlayspace // (Final|Native|Public|BlueprintCallable) // @ game+0x3743cd0
	bool AreObjectsInSamePlayspace(struct UObject* ObjectA, struct UObject* ObjectB); // Function ShooterGame.PlayspaceComponent.AreObjectsInSamePlayspace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a5cbe0
	bool AreObjectsInExactlyTheSamePlayspaces(struct UObject* ObjectA, struct UObject* ObjectB); // Function ShooterGame.PlayspaceComponent.AreObjectsInExactlyTheSamePlayspaces // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a5cb10
};

// Class ShooterGame.PlayspaceVisibilityComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UPlayspaceVisibilityComponent : UActorComponent {
	bool bStartEnabled; // 0xe8(0x01)
	bool bComponentEnabled; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)

	void SetEnabled(bool bEnabled); // Function ShooterGame.PlayspaceVisibilityComponent.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3a5e150
	void OnViewedPlayspacesChanged(struct APlayerController* ViewingController); // Function ShooterGame.PlayspaceVisibilityComponent.OnViewedPlayspacesChanged // (Final|Native|Protected) // @ game+0x3a5dea0
	void OnOwnerPlayspaceChanged(struct UPlayspaceComponent* PlayspaceComponent); // Function ShooterGame.PlayspaceVisibilityComponent.OnOwnerPlayspaceChanged // (Final|Native|Protected) // @ game+0x3a5dea0
	void OnFreecamPlayspaceChanged(struct UPlayspaceComponent* PlayspaceComponent); // Function ShooterGame.PlayspaceVisibilityComponent.OnFreecamPlayspaceChanged // (Final|Native|Protected) // @ game+0x3a5dd40
};

// Class ShooterGame.PoolingResetInterface
// Size: 0x30 (Inherited: 0x30)
struct UPoolingResetInterface : UInterface {

	void InitializeForUse(); // Function ShooterGame.PoolingResetInterface.InitializeForUse // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2627c10
	void CleanupForPooling(); // Function ShooterGame.PoolingResetInterface.CleanupForPooling // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2627e80
};

// Class ShooterGame.PostProcessTintBlendable
// Size: 0x38 (Inherited: 0x30)
struct UPostProcessTintBlendable : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	void UpdateSettings(struct FPostProcessSettings& CurrentSettings, struct FPostProcessSettings& OutSettings, float Weight); // Function ShooterGame.PostProcessTintBlendable.UpdateSettings // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x40572e0
};

// Class ShooterGame.PrecalcProjectileCollisionComponent
// Size: 0x108 (Inherited: 0xe8)
struct UPrecalcProjectileCollisionComponent : UActorComponent {
	struct TArray<struct AActor*> ActorsToIgnore; // 0xe8(0x10)
	struct TArray<struct UPrimitiveComponent*> OverlapDetectionComponents; // 0xf8(0x10)

	void RegisterOverlapDetectionTrigger(struct UPrimitiveComponent* PrimitiveComponent); // Function ShooterGame.PrecalcProjectileCollisionComponent.RegisterOverlapDetectionTrigger // (Final|Native|Private|BlueprintCallable) // @ game+0x3634e00
	void OnComponentOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function ShooterGame.PrecalcProjectileCollisionComponent.OnComponentOverlap // (Final|Native|Private|HasOutParms) // @ game+0x3a64e40
	void OnActorOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function ShooterGame.PrecalcProjectileCollisionComponent.OnActorOverlap // (Final|Native|Private) // @ game+0x3669300
};

// Class ShooterGame.PrecalculatedProjectileMovementComponent
// Size: 0x300 (Inherited: 0x2d0)
struct UPrecalculatedProjectileMovementComponent : UFiniteSpeedMovementComponent {
	float PrecalculatedMovementTime; // 0x2d0(0x04)
	float PrecalculatedTimestep; // 0x2d4(0x04)
	struct TArray<struct FCalculatedProjectileStep> ProjectilePath; // 0x2d8(0x10)
	struct USyncedTimerComponent* MovementSyncedTimer; // 0x2e8(0x08)
	char pad_2F0[0x10]; // 0x2f0(0x10)

	void SetSyncedTimer(struct USyncedTimerComponent* SyncedTimer); // Function ShooterGame.PrecalculatedProjectileMovementComponent.SetSyncedTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x381f130
	void MulticastSetPath(struct TArray<struct FCalculatedProjectileStep> NetworkedProjectilePath); // Function ShooterGame.PrecalculatedProjectileMovementComponent.MulticastSetPath // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3a64c40
	void AuthPrecalculateMovement(); // Function ShooterGame.PrecalculatedProjectileMovementComponent.AuthPrecalculateMovement // (Final|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.PreconstructedWidgetListModelMediator
// Size: 0xb0 (Inherited: 0x30)
struct UPreconstructedWidgetListModelMediator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnItemActivated; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
	struct TArray<struct TScriptInterface<IListItemDisplayEntry>> EntryList; // 0x50(0x10)
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x60(0x10)
	struct FWildcard SharedListItemData; // 0x70(0x40)

	void SetOffset(int32_t NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.SetOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x3a65360
	void SetListModel(struct TScriptInterface<IOrderedListModel> NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.SetListModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3a652c0
	void SetEntryList(struct TArray<struct TScriptInterface<IListItemDisplayEntry>> NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.SetEntryList // (Final|Native|Public|BlueprintCallable) // @ game+0x3a651a0
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.PreconstructedWidgetListModelMediator.HandleListModelChange // (Final|Native|Private|HasOutParms) // @ game+0x3a646c0
	int32_t GetOffset(); // Function ShooterGame.PreconstructedWidgetListModelMediator.GetOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556800
	struct TScriptInterface<IOrderedListModel> GetListModel(); // Function ShooterGame.PreconstructedWidgetListModelMediator.GetListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a64690
	struct TArray<struct TScriptInterface<IListItemDisplayEntry>> GetEntryList(); // Function ShooterGame.PreconstructedWidgetListModelMediator.GetEntryList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a645d0
	void EntryActivatedMulticastDelegate__DelegateSignature(struct UPreconstructedWidgetListModelMediator* Source, struct FListItemDisplayEntryActivatedEventData EventData); // DelegateFunction ShooterGame.PreconstructedWidgetListModelMediator.EntryActivatedMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
	struct UPreconstructedWidgetListModelMediator* Create(struct TArray<struct TScriptInterface<IListItemDisplayEntry>> EntryList, struct TScriptInterface<IOrderedListModel> ListModel, struct UObject* Outer); // Function ShooterGame.PreconstructedWidgetListModelMediator.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3a64420
	void BP_SetSharedListItemData(int32_t NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.BP_SetSharedListItemData // (Final|Native|Public|BlueprintCallable) // @ game+0x358b560
	void BP_GetSharedListItemDataPure(int32_t& SharedData, bool& Succeeded); // Function ShooterGame.PreconstructedWidgetListModelMediator.BP_GetSharedListItemDataPure // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x358b1f0
};

// Class ShooterGame.PregameCharacterSelectSpawner
// Size: 0x490 (Inherited: 0x3d8)
struct APregameCharacterSelectSpawner : AActor {
	struct AEffectContainer* NoCharacterSelectedFXC; // 0x3d8(0x08)
	struct AEffectContainer* WaitingForLoadFXC; // 0x3e0(0x08)
	struct UPregameViewController* PregameViewController; // 0x3e8(0x08)
	struct UPregameViewModel* PregameViewModel; // 0x3f0(0x08)
	struct UCharacterDataAsset* CurrentCharacter; // 0x3f8(0x08)
	bool bCharacterLockedIn; // 0x400(0x01)
	char pad_401[0x17]; // 0x401(0x17)
	struct FEffectID CurrentEffectID; // 0x418(0x20)
	struct FEffectData EffectData; // 0x438(0x58)

	void UpdateModel(); // Function ShooterGame.PregameCharacterSelectSpawner.UpdateModel // (Final|Native|Protected) // @ game+0x3a65410
	void SetCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.PregameCharacterSelectSpawner.SetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3a65110
	void OverrideCharacter(struct FString CharacterPath); // Function ShooterGame.PregameCharacterSelectSpawner.OverrideCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2024240
	void MatchStateChanged(enum class EPregameMatchState MatchState); // Function ShooterGame.PregameCharacterSelectSpawner.MatchStateChanged // (Final|Native|Protected) // @ game+0x3a64bc0
	void LockedIn(bool bLockedIn); // Function ShooterGame.PregameCharacterSelectSpawner.LockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0x3a64b30
	bool LoadAssets(); // Function ShooterGame.PregameCharacterSelectSpawner.LoadAssets // (Final|Native|Protected) // @ game+0x3a64b00
	void Initialize(struct UPregameViewController* PregameViewController); // Function ShooterGame.PregameCharacterSelectSpawner.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x3a64a70
	void ClearModel(); // Function ShooterGame.PregameCharacterSelectSpawner.ClearModel // (Final|Native|Protected) // @ game+0x3a64400
};

// Class ShooterGame.PregamePlayerController
// Size: 0xa08 (Inherited: 0xa00)
struct APregamePlayerController : AAresPlayerController {
	struct UPregameViewController* PregameViewController; // 0xa00(0x08)

	void UpdateMatchID(); // Function ShooterGame.PregamePlayerController.UpdateMatchID // (Final|Native|Private) // @ game+0x3a653f0
	void OnMapUpdated(struct UMapDataAsset* MapAsset); // Function ShooterGame.PregamePlayerController.OnMapUpdated // (Final|Native|Private) // @ game+0x3a65060
	void CheatUnlockAllCharacters(); // Function ShooterGame.PregamePlayerController.CheatUnlockAllCharacters // (Final|Native|Public) // @ game+0x2024060
};

// Class ShooterGame.PregameCheatManager
// Size: 0x90 (Inherited: 0x90)
struct UPregameCheatManager : UAresCheatManagerBase {

	void UnlockAllCharacters(); // Function ShooterGame.PregameCheatManager.UnlockAllCharacters // (Final|Exec|Native|Private) // @ game+0x2024060
	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.PregameCheatManager.SetConfigurationValue // (Final|Exec|Native|Private) // @ game+0x3967950
	void PregameStart(); // Function ShooterGame.PregameCheatManager.PregameStart // (Final|Exec|Native|Private) // @ game+0x2024060
	void PregameExit(); // Function ShooterGame.PregameCheatManager.PregameExit // (Final|Exec|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.PregameManager
// Size: 0x438 (Inherited: 0x80)
struct UPregameManager : UInitSystem {
	char pad_80[0x48]; // 0x80(0x48)
	bool bWasSessionAndPregameConsistent; // 0xc8(0x01)
	char pad_C9[0xf]; // 0xc9(0x0f)
	struct UPregameService* PregameService; // 0xd8(0x08)
	struct UConfigManager* ConfigManager; // 0xe0(0x08)
	struct URSOManager* RSOManager; // 0xe8(0x08)
	struct URMSManager* RMSManager; // 0xf0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xf8(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x100(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x108(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x110(0x08)
	char pad_118[0x320]; // 0x118(0x320)

	void RefreshCurrentMatch(); // Function ShooterGame.PregameManager.RefreshCurrentMatch // (Final|Native|Private) // @ game+0x3a650f0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PregameManager.OnBugCommand // (Final|Native|Private) // @ game+0x3a64cf0
	void HandleSessionLoopStateChange(); // Function ShooterGame.PregameManager.HandleSessionLoopStateChange // (Final|Native|Private) // @ game+0x3a64a50
	void HandlePlayerRequestSuccess(struct FPregamePlayer& Player); // Function ShooterGame.PregameManager.HandlePlayerRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0x3a64990
	void HandleMatchRequestSuccess(struct FPregameMatch& Match); // Function ShooterGame.PregameManager.HandleMatchRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0x3a648c0
	void HandleMatchRequestError(struct FAmbassadorError& Error); // Function ShooterGame.PregameManager.HandleMatchRequestError // (Final|Native|Private|HasOutParms) // @ game+0x3a647e0
	void BackgroundPoll(); // Function ShooterGame.PregameManager.BackgroundPoll // (Final|Native|Private) // @ game+0x3a643e0
};

// Class ShooterGame.PregameParentWidget
// Size: 0x428 (Inherited: 0x428)
struct UPregameParentWidget : UAresScreenBase {
};

// Class ShooterGame.PregamePlayerActor
// Size: 0x3d8 (Inherited: 0x3d8)
struct APregamePlayerActor : AActor {
};

// Class ShooterGame.PregameGameMode
// Size: 0x4c8 (Inherited: 0x4c8)
struct APregameGameMode : AGameMode {
};

// Class ShooterGame.PregameService
// Size: 0x38 (Inherited: 0x30)
struct UPregameService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PregameStateV2
// Size: 0xa8 (Inherited: 0x90)
struct UPregameStateV2 : UStaticGameFlowState {
	struct FMulticastInlineDelegate OnMatchCancelled; // 0x90(0x10)
	struct UPregameManager* PregameManager; // 0xa0(0x08)
};

// Class ShooterGame.PregameViewController
// Size: 0x88 (Inherited: 0x30)
struct UPregameViewController : UObject {
	struct UPregameViewModel* ViewModel; // 0x30(0x08)
	struct UPregameViewModel* EditorViewModel; // 0x38(0x08)
	struct UConfigManager* ConfigManager; // 0x40(0x08)
	struct UPregameManager* PregameManager; // 0x48(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x50(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x58(0x08)
	struct UContentIndex* ContentIndex; // 0x60(0x08)
	struct UPartyManager* PartyManager; // 0x68(0x08)
	struct UCharacterDataAsset* CharacterPrediction; // 0x70(0x08)
	char pad_78[0x10]; // 0x78(0x10)

	bool UseEditorViewModel(); // Function ShooterGame.PregameViewController.UseEditorViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	void SetUseDelayedFinalization(bool NewValue); // Function ShooterGame.PregameViewController.SetUseDelayedFinalization // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6d9c0
	void SelectCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.PregameViewController.SelectCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c320
	void RefreshPregameTimer(); // Function ShooterGame.PregameViewController.RefreshPregameTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c300
	void ReadyPlayer(); // Function ShooterGame.PregameViewController.ReadyPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c2e0
	void PickSide(struct FName& Side); // Function ShooterGame.PregameViewController.PickSide // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a6c240
	void PickMap(struct UMapDataAsset* Map); // Function ShooterGame.PregameViewController.PickMap // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c1b0
	void LockCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.PregameViewController.LockCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c090
	bool IsCharacterDisabledForQueue(struct FGuid& CharacterID); // Function ShooterGame.PregameViewController.IsCharacterDisabledForQueue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bee0
	struct UPregameViewModel* GetViewModel(); // Function ShooterGame.PregameViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6beb0
	void DelayedFinalizationComplete(); // Function ShooterGame.PregameViewController.DelayedFinalizationComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6b280
	void CastVote(struct FPregameCastVote& Vote); // Function ShooterGame.PregameViewController.CastVote // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a6b1c0
	void BanMap(struct UMapDataAsset* Map); // Function ShooterGame.PregameViewController.BanMap // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6b130
};

// Class ShooterGame.PregamePlayerModel
// Size: 0xe0 (Inherited: 0x30)
struct UPregamePlayerModel : UObject {
	struct FMulticastInlineDelegate OnTeamIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCharacterChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnCompetitiveTierChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsCaptainChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnLockedInChanged; // 0x80(0x10)
	struct FString Subject; // 0x90(0x10)
	struct FName TeamID; // 0xa0(0x0c)
	char pad_AC[0x4]; // 0xac(0x04)
	struct UPlatformPlayer* PlatformPlayer; // 0xb0(0x08)
	struct FString DisplayName; // 0xb8(0x10)
	int32_t CompetitiveTier; // 0xc8(0x04)
	bool bIsCaptain; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct UCharacterDataAsset* Character; // 0xd0(0x08)
	bool bIsLockedIn; // 0xd8(0x01)
	bool bIsLocalPlayer; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)

	void SetTeamID(struct FName NewTeamID); // Function ShooterGame.PregamePlayerModel.SetTeamID // (Final|Native|Public) // @ game+0x3a6d3f0
	void SetIsLockedIn(bool NewValue); // Function ShooterGame.PregamePlayerModel.SetIsLockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6cbc0
	void SetIsLocalPlayer(bool NewValue); // Function ShooterGame.PregamePlayerModel.SetIsLocalPlayer // (Final|Native|Public) // @ game+0x3a6c8f0
	void SetIsCaptain(bool NewValue); // Function ShooterGame.PregamePlayerModel.SetIsCaptain // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c860
	void SetCompetitiveTier(int32_t NewCompetitiveTier); // Function ShooterGame.PregamePlayerModel.SetCompetitiveTier // (Final|Native|Public) // @ game+0x3a6c600
	void SetCharacter(struct UCharacterDataAsset* NewCharacter); // Function ShooterGame.PregamePlayerModel.SetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c4a0
	bool IsLockedIn(); // Function ShooterGame.PregamePlayerModel.IsLockedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6c050
	bool IsLocalPlayer(); // Function ShooterGame.PregamePlayerModel.IsLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bfb0
	enum class EPregameTeamID GetTeamIDBP(); // Function ShooterGame.PregamePlayerModel.GetTeamIDBP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bc80
	struct FString GetSubject(); // Function ShooterGame.PregamePlayerModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6ba50
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.PregamePlayerModel.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949a70
	bool GetIsCaptain(); // Function ShooterGame.PregamePlayerModel.GetIsCaptain // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b630
	int32_t GetCompetitiveTier(); // Function ShooterGame.PregamePlayerModel.GetCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b560
	struct UCharacterDataAsset* GetCharacter(); // Function ShooterGame.PregamePlayerModel.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38dc780
};

// Class ShooterGame.PregameTeamModel
// Size: 0xb8 (Inherited: 0x30)
struct UPregameTeamModel : UObject {
	struct FMulticastInlineDelegate OnRoleChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPlayerAdded; // 0x40(0x10)
	struct FMulticastInlineDelegate OnPlayerRemoved; // 0x50(0x10)
	struct FMulticastInlineDelegate OnNumPlayersLockedInChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMajorityVoteWinnerChanged; // 0x70(0x10)
	struct FName ID; // 0x80(0x0c)
	struct FName Role; // 0x8c(0x0c)
	struct TArray<struct UPregamePlayerModel*> Players; // 0x98(0x10)
	int32_t NumPlayersLockedIn; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct UCharacterDataAsset* MajorityVoteWinner; // 0xb0(0x08)

	enum class EPregameTeamID TeamIDFromName(struct FName& ID); // Function ShooterGame.PregameTeamModel.TeamIDFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3a6da50
	void SetNumPlayersLockedIn(int32_t NewNumPlayersLockedIn); // Function ShooterGame.PregameTeamModel.SetNumPlayersLockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6d0a0
	struct FName NameFromTeamID(enum class EPregameTeamID ID); // Function ShooterGame.PregameTeamModel.NameFromTeamID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3a6c120
	struct FName GetRole(); // Function ShooterGame.PregameTeamModel.GetRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6ba00
	struct TArray<struct UPregamePlayerModel*> GetPlayers(); // Function ShooterGame.PregameTeamModel.GetPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b860
	struct UCharacterDataAsset* GetMajorityVoteWinner(); // Function ShooterGame.PregameTeamModel.GetMajorityVoteWinner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x392de60
	enum class EPregameTeamID GetID(); // Function ShooterGame.PregameTeamModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b600
};

// Class ShooterGame.PregameViewModel
// Size: 0x500 (Inherited: 0x30)
struct UPregameViewModel : UObject {
	struct FMulticastInlineDelegate OnMatchIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTimeRemainingInPhaseChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTimeRemainingInStepChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsPregameFinishedChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnMapChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnMapSelectPoolChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnBannedMapsChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCastVotesChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnMapSelectStepsChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMapSelectStepChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnTeam1Changed; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnGameModeChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnQueueIDChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLocalCharacterChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerLockedInChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerLockingInChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerSpectatorChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerCoachChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnCoachAdded; // 0x170(0x10)
	struct FMulticastInlineDelegate OnEnemyLockinCountChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnEnemyTeamSizeChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnTimeElapsedChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnPregameLockInStateChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnCharacterStateChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnShowRankedIconsChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnInitialized; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnTournamentMetadataChanged; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnTournamentRosterMetadataChanged; // 0x200(0x10)
	struct FMulticastInlineDelegate OnPregameDelayedFinalization; // 0x210(0x10)
	bool bInitialized; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)
	struct UConfigManager* ConfigManager; // 0x228(0x08)
	struct FString MatchID; // 0x230(0x10)
	enum class EPregameMatchState State; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float TimeRemainingInPhase; // 0x244(0x04)
	struct FDateTime PhaseEndTime; // 0x248(0x08)
	float TimeRemainingInStep; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct FDateTime StepEndTime; // 0x258(0x08)
	bool bIsPregameFinished; // 0x260(0x01)
	char pad_261[0x17]; // 0x261(0x17)
	struct TArray<struct FGuid> MapSelectPoolGuids; // 0x278(0x10)
	struct TArray<struct FGuid> BannedMapGuids; // 0x288(0x10)
	struct TArray<struct FPregameCastVote> CastedVotes; // 0x298(0x10)
	struct TArray<struct FPregameStep> MapSelectSteps; // 0x2a8(0x10)
	int32_t MapSelectStep; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct FString Team1; // 0x2c0(0x10)
	struct UGameModeDataAsset* GameMode; // 0x2d0(0x08)
	struct FString QueueID; // 0x2d8(0x10)
	struct TMap<struct FName, struct UPregameTeamModel*> Teams; // 0x2e8(0x50)
	struct TMap<struct FName, struct UPregamePlayerModel*> Coaches; // 0x338(0x50)
	struct UPregamePlayerModel* LocalPlayer; // 0x388(0x08)
	bool bIsLocalPlayerLockedIn; // 0x390(0x01)
	bool bIsLocalPlayerLockingIn; // 0x391(0x01)
	bool bIsLocalPlayerSpectator; // 0x392(0x01)
	bool bIsLocalPlayerCoach; // 0x393(0x01)
	char pad_394[0x4]; // 0x394(0x04)
	struct UCharacterDataAsset* LocalCharacter; // 0x398(0x08)
	struct TMap<struct UCharacterDataAsset*, enum class EPregameCharacterState> CharacterStates; // 0x3a0(0x50)
	int32_t EnemyLockinCount; // 0x3f0(0x04)
	int32_t EnemyTeamSize; // 0x3f4(0x04)
	int32_t TimeElapsed; // 0x3f8(0x04)
	enum class EPregameLockInState LockInState; // 0x3fc(0x01)
	bool bShowRankedIcons; // 0x3fd(0x01)
	bool bAllowDuplicateAgents; // 0x3fe(0x01)
	char pad_3FF[0x1]; // 0x3ff(0x01)
	struct FTournamentMetadata TournamentMetadata; // 0x400(0x80)
	struct FTournamentRosterMetadata RosterMetadata; // 0x480(0x70)
	bool bUseDelayedFinalization; // 0x4f0(0x01)
	bool bIsDelayedFinalizationTriggered; // 0x4f1(0x01)
	char pad_4F2[0x6]; // 0x4f2(0x06)
	struct UContentIndex* ContentIndex; // 0x4f8(0x08)

	bool ShowRankedIcons(); // Function ShooterGame.PregameViewModel.ShowRankedIcons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a3a110
	void SetTournamentRosterMetadata(struct FTournamentRosterMetadata NewValue); // Function ShooterGame.PregameViewModel.SetTournamentRosterMetadata // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6d7a0
	void SetTournamentMetadata(struct FTournamentMetadata NewValue); // Function ShooterGame.PregameViewModel.SetTournamentMetadata // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6d520
	void SetTimeElapsed(int32_t NewTime); // Function ShooterGame.PregameViewModel.SetTimeElapsed // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6d490
	void SetTeam1(struct FString NewTeam); // Function ShooterGame.PregameViewModel.SetTeam1 // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6d2f0
	void SetState(enum class EPregameMatchState NewState); // Function ShooterGame.PregameViewModel.SetState // (Final|Native|Public) // @ game+0x3a6d270
	void SetShowRankedIcons(bool NewValue); // Function ShooterGame.PregameViewModel.SetShowRankedIcons // (Final|Native|Public) // @ game+0x3a6d1e0
	void SetQueueID(struct FString NewQueueID); // Function ShooterGame.PregameViewModel.SetQueueID // (Final|Native|Public) // @ game+0x3a6d130
	void SetMapSelectSteps(struct TArray<struct FPregameStep> NewSteps); // Function ShooterGame.PregameViewModel.SetMapSelectSteps // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6cfa0
	void SetMapSelectStep(int32_t NewStep); // Function ShooterGame.PregameViewModel.SetMapSelectStep // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6cf10
	void SetMap(struct UMapDataAsset* NewMap); // Function ShooterGame.PregameViewModel.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6ce80
	void SetLockInState(enum class EPregameLockInState NewLockInState); // Function ShooterGame.PregameViewModel.SetLockInState // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6ce00
	void SetLocalPlayer(struct UPregamePlayerModel* NewLocalPlayer); // Function ShooterGame.PregameViewModel.SetLocalPlayer // (Final|Native|Public) // @ game+0x3a6cd70
	void SetLocalCharacter(struct UCharacterDataAsset* NewCharacter); // Function ShooterGame.PregameViewModel.SetLocalCharacter // (Final|Native|Public) // @ game+0x3a6cce0
	void SetIsPregameFinished(bool bNewIsFinished); // Function ShooterGame.PregameViewModel.SetIsPregameFinished // (Final|Native|Public) // @ game+0x3a6cc50
	void SetIsLocalPlayerSpectator(bool NewSpectator); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerSpectator // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6cb30
	void SetIsLocalPlayerLockingIn(bool NewState); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerLockingIn // (Final|Native|Public) // @ game+0x3a6caa0
	void SetIsLocalPlayerLockedIn(bool NewState); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerLockedIn // (Final|Native|Public) // @ game+0x3a6ca10
	void SetIsLocalPlayerCoach(bool NewIsCoach); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerCoach // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c980
	void SetInitialized(); // Function ShooterGame.PregameViewModel.SetInitialized // (Final|Native|Public) // @ game+0x3a6c840
	void SetGameMode(struct UGameModeDataAsset* NewGameMode); // Function ShooterGame.PregameViewModel.SetGameMode // (Final|Native|Public) // @ game+0x3a6c7b0
	void SetEnemyTeamSize(int32_t NewCount); // Function ShooterGame.PregameViewModel.SetEnemyTeamSize // (Final|Native|Public) // @ game+0x3a6c720
	void SetEnemyLockinCount(int32_t NewCount); // Function ShooterGame.PregameViewModel.SetEnemyLockinCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c690
	void SetCharacterState(struct UCharacterDataAsset* CharacterDataAsset, enum class EPregameCharacterState NewState); // Function ShooterGame.PregameViewModel.SetCharacterState // (Final|Native|Public) // @ game+0x3a6c530
	void SetCastedVotes(struct TArray<struct FPregameCastVote> NewVotes); // Function ShooterGame.PregameViewModel.SetCastedVotes // (Final|Native|Public|BlueprintCallable) // @ game+0x3a6c3b0
	bool IsPregameFinished(); // Function ShooterGame.PregameViewModel.IsPregameFinished // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6c070
	bool IsLocalPlayerSpectator(); // Function ShooterGame.PregameViewModel.IsLocalPlayerSpectator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6c030
	bool IsLocalPlayerLockingIn(); // Function ShooterGame.PregameViewModel.IsLocalPlayerLockingIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6c010
	bool IsLocalPlayerLockedIn(); // Function ShooterGame.PregameViewModel.IsLocalPlayerLockedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bff0
	bool IsLocalPlayerCoach(); // Function ShooterGame.PregameViewModel.IsLocalPlayerCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bfd0
	bool IsInitialized(); // Function ShooterGame.PregameViewModel.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bf90
	bool GetUseDelayedFinalization(); // Function ShooterGame.PregameViewModel.GetUseDelayedFinalization // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6be90
	struct FTournamentRosterMetadata GetTournamentRosterMetadata(); // Function ShooterGame.PregameViewModel.GetTournamentRosterMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6be30
	struct FTournamentMetadata GetTournamentMetadata(); // Function ShooterGame.PregameViewModel.GetTournamentMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bdc0
	float GetTimerErrorMargin(); // Function ShooterGame.PregameViewModel.GetTimerErrorMargin // (Final|Native|Protected|Const) // @ game+0x3a6bd90
	float GetTimeRemainingInStep(); // Function ShooterGame.PregameViewModel.GetTimeRemainingInStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bd30
	float GetTimeRemainingInPhase(); // Function ShooterGame.PregameViewModel.GetTimeRemainingInPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bcd0
	int32_t GetTimeElapsed(); // Function ShooterGame.PregameViewModel.GetTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bcb0
	struct FString GetTeam1(); // Function ShooterGame.PregameViewModel.GetTeam1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bb20
	struct UPregameTeamModel* GetTeam(enum class EPregameTeamID ID); // Function ShooterGame.PregameViewModel.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6bbf0
	enum class EPregameMatchState GetState(); // Function ShooterGame.PregameViewModel.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6ba30
	struct FString GetQueueID(); // Function ShooterGame.PregameViewModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b930
	struct FString GetMatchID(); // Function ShooterGame.PregameViewModel.GetMatchID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b790
	struct TArray<struct FPregameStep> GetMapSelectSteps(); // Function ShooterGame.PregameViewModel.GetMapSelectSteps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b760
	int32_t GetMapSelectStep(); // Function ShooterGame.PregameViewModel.GetMapSelectStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b740
	struct TArray<struct UMapDataAsset*> GetMapSelectPool(); // Function ShooterGame.PregameViewModel.GetMapSelectPool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b6c0
	struct UMapDataAsset* GetMap(); // Function ShooterGame.PregameViewModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b690
	enum class EPregameLockInState GetLockInState(); // Function ShooterGame.PregameViewModel.GetLockInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a38fe0
	struct UPregamePlayerModel* GetLocalPlayer(); // Function ShooterGame.PregameViewModel.GetLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b670
	struct UCharacterDataAsset* GetLocalCharacter(); // Function ShooterGame.PregameViewModel.GetLocalCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b650
	struct UGameModeDataAsset* GetGameMode(); // Function ShooterGame.PregameViewModel.GetGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612a0
	int32_t GetEnemyTeamSize(); // Function ShooterGame.PregameViewModel.GetEnemyTeamSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b5e0
	struct UPregameTeamModel* GetEnemyTeam(); // Function ShooterGame.PregameViewModel.GetEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b5b0
	int32_t GetEnemyLockinCount(); // Function ShooterGame.PregameViewModel.GetEnemyLockinCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b590
	struct UPregamePlayerModel* GetCoach(enum class EPregameTeamID ID); // Function ShooterGame.PregameViewModel.GetCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b4d0
	enum class EPregameCharacterState GetCharacterState(struct UCharacterDataAsset* CharacterDataAsset); // Function ShooterGame.PregameViewModel.GetCharacterState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b430
	struct TArray<struct FPregameCastVote> GetCastedVotes(); // Function ShooterGame.PregameViewModel.GetCastedVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b350
	struct TArray<struct UMapDataAsset*> GetBannedMaps(); // Function ShooterGame.PregameViewModel.GetBannedMaps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b2d0
	struct UPregameTeamModel* GetAlliedTeam(); // Function ShooterGame.PregameViewModel.GetAlliedTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b2a0
	bool AllowDuplicateAgents(); // Function ShooterGame.PregameViewModel.AllowDuplicateAgents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a390f0
};

// Class ShooterGame.PreloadManager
// Size: 0x710 (Inherited: 0x80)
struct UPreloadManager : UInitSystem {
	char pad_80[0x30]; // 0x80(0x30)
	struct FSoftObjectPath DevOnlyAssistDefinitionDataTable; // 0xb0(0x20)
	struct TSet<struct FSoftObjectPath> RequestedPersonalizationAssets; // 0xd0(0x50)
	bool bAssetPreloadEnabled; // 0x120(0x01)
	char pad_121[0x4c7]; // 0x121(0x4c7)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x5e8(0x08)
	struct UPregameManager* PregameManager; // 0x5f0(0x08)
	struct UContentIndex* ContentIndex; // 0x5f8(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x600(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x608(0x08)
	struct UConfigManager* ConfigManager; // 0x610(0x08)
	struct UTravelManager* TravelManager; // 0x618(0x08)
	char pad_620[0xf0]; // 0x620(0xf0)

	void PreloadSplashScreens(); // Function ShooterGame.PreloadManager.PreloadSplashScreens // (Final|Native|Private) // @ game+0x3a75b70
	void OnTravelStalledByAsyncLoading(float DeltaSeconds); // Function ShooterGame.PreloadManager.OnTravelStalledByAsyncLoading // (Final|Native|Private) // @ game+0x3a75af0
	void OnTransitionToPregameExited(); // Function ShooterGame.PreloadManager.OnTransitionToPregameExited // (Final|Native|Private) // @ game+0x3a75ad0
	void OnTransitionToMainMenuExited(); // Function ShooterGame.PreloadManager.OnTransitionToMainMenuExited // (Final|Native|Private) // @ game+0x3a75ab0
	void OnTransitionToInGameExited(); // Function ShooterGame.PreloadManager.OnTransitionToInGameExited // (Final|Native|Private) // @ game+0x3a75a90
	void OnRoundEnd(int32_t RoundNumberEnded); // Function ShooterGame.PreloadManager.OnRoundEnd // (Final|Native|Private) // @ game+0x3a75a00
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.PreloadManager.OnRoundBegin // (Final|Native|Private) // @ game+0x3a75970
	void OnPregameMatchUpdated(); // Function ShooterGame.PreloadManager.OnPregameMatchUpdated // (Final|Native|Private) // @ game+0x3a75950
	void OnPregameMatchLoadoutsUpdated(); // Function ShooterGame.PreloadManager.OnPregameMatchLoadoutsUpdated // (Final|Native|Private) // @ game+0x3a75930
	void OnPregameEntered(); // Function ShooterGame.PreloadManager.OnPregameEntered // (Final|Native|Private) // @ game+0x3a75910
	void OnPlayerResurrect(struct AShooterPlayerState* ResurrectorPlayerState, struct AShooterPlayerState* ResurrectedPlayerState, int32_t KillNumberInRoundForResurrector, int32_t KillNumberInRoundForResurrected); // Function ShooterGame.PreloadManager.OnPlayerResurrect // (Final|Native|Private) // @ game+0x3a757b0
	void OnPlayerKill(struct AShooterPlayerState* KillerPlayerState, struct AShooterPlayerState* KilledPlayerState, int32_t KillNumberInRoundForKiller, int32_t KillNumberInRoundForKilled, struct UDamageResponse* Response, struct AAresEquippable* EquippableUsed, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.PreloadManager.OnPlayerKill // (Final|Native|Private|HasOutParms) // @ game+0x3a75580
	void OnMatchCancelled(); // Function ShooterGame.PreloadManager.OnMatchCancelled // (Final|Native|Private) // @ game+0x3a75560
	void OnMainMenuMatchmakingMatchFoundChanged(bool bNewValue); // Function ShooterGame.PreloadManager.OnMainMenuMatchmakingMatchFoundChanged // (Final|Native|Private) // @ game+0x3635160
	void OnMainMenuEntered(); // Function ShooterGame.PreloadManager.OnMainMenuEntered // (Final|Native|Private) // @ game+0x3a75540
	void OnLocalPlayerViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.PreloadManager.OnLocalPlayerViewTargetModeChanged // (Final|Native|Private|HasOutParms) // @ game+0x3a754b0
	void OnInitializationExited(); // Function ShooterGame.PreloadManager.OnInitializationExited // (Final|Native|Private) // @ game+0x3a75490
	void OnInGameStateEntered(); // Function ShooterGame.PreloadManager.OnInGameStateEntered // (Final|Native|Private) // @ game+0x3a75470
	void OnCoreGameMatchLoadoutsUpdated(); // Function ShooterGame.PreloadManager.OnCoreGameMatchLoadoutsUpdated // (Final|Native|Private) // @ game+0x3a75450
	void ClearSplashScreenPreloads(); // Function ShooterGame.PreloadManager.ClearSplashScreenPreloads // (Final|Native|Private) // @ game+0x3a74390
	void ClearMatchPreloads(); // Function ShooterGame.PreloadManager.ClearMatchPreloads // (Final|Native|Private) // @ game+0x3a74370
};

// Class ShooterGame.PremierConferenceDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UPremierConferenceDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct FString Key; // 0x80(0x10)
	struct FText Name; // 0x90(0x18)
	struct UTexture2D* Icon; // 0xa8(0x08)
};

// Class ShooterGame.PremierConferenceUIData
// Size: 0x90 (Inherited: 0x90)
struct UPremierConferenceUIData : UBaseContentUIData {
};

// Class ShooterGame.PremierGameDataEventSubscriptions
// Size: 0x48 (Inherited: 0x30)
struct UPremierGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class ShooterGame.PremierRosterModel
// Size: 0x188 (Inherited: 0x30)
struct UPremierRosterModel : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct FString Name; // 0x48(0x10)
	struct FString Tag; // 0x58(0x10)
	int32_t LeaguePoints; // 0x68(0x04)
	int32_t MaxLeaguePoints; // 0x6c(0x04)
	struct FString Conference; // 0x70(0x10)
	int32_t Division; // 0x80(0x04)
	bool IsProvisionalDivision; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
	int32_t BonusMatchesRemaining; // 0x88(0x04)
	int32_t BonusMatchesTotal; // 0x8c(0x04)
	int32_t LeagueMatchesPlayed; // 0x90(0x04)
	int32_t TournamentsPlayed; // 0x94(0x04)
	bool IsEnrolled; // 0x98(0x01)
	bool IsLoaded; // 0x99(0x01)
	char pad_9A[0x2]; // 0x9a(0x02)
	int32_t MinimumRequiredMembersForEnrollment; // 0x9c(0x04)
	bool DidError; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	int32_t Wins; // 0xa4(0x04)
	int32_t GamesPlayed; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FPremierRosterCustomization CustomizationData; // 0xb0(0x40)
	struct FPremierRosterV2SeasonData SeasonData; // 0xf0(0x98)
};

// Class ShooterGame.PremierConferenceModel
// Size: 0x78 (Inherited: 0x30)
struct UPremierConferenceModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct FString Key; // 0x40(0x10)
	struct TArray<struct FString> gamePods; // 0x50(0x10)
	struct FString Timezone; // 0x60(0x10)
	struct UPremierConferenceDataAsset* DataAsset; // 0x70(0x08)

	struct FString GetTimezone(); // Function ShooterGame.PremierConferenceModel.GetTimezone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ce60
	struct UPremierConferenceDataAsset* GetPremierConferenceDataAsset(); // Function ShooterGame.PremierConferenceModel.GetPremierConferenceDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74b40
	struct TArray<int32_t> GetPings(struct TArray<struct FPingInfo>& PingInfo); // Function ShooterGame.PremierConferenceModel.GetPings // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74a20
	struct FString GetKey(); // Function ShooterGame.PremierConferenceModel.GetKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cd90
	struct FGuid GetID(); // Function ShooterGame.PremierConferenceModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856ad0
	struct TArray<struct FString> GetGamePods(); // Function ShooterGame.PremierConferenceModel.GetGamePods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74750
};

// Class ShooterGame.PremierConferencesModel
// Size: 0xa0 (Inherited: 0x30)
struct UPremierConferencesModel : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct TMap<struct FString, struct UPremierConferenceModel*> Conferences; // 0x50(0x50)

	void RemoveConference(struct FString Key); // Function ShooterGame.PremierConferencesModel.RemoveConference // (Final|Native|Public) // @ game+0x3a75b90
	struct TArray<struct UPremierConferenceModel*> GetSortedConferencesByPing(struct TArray<struct FPingInfo>& PingInfo); // Function ShooterGame.PremierConferencesModel.GetSortedConferencesByPing // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a75330
	struct UPremierConferenceModel* GetPremierConferenceModelByKey(struct FString Key); // Function ShooterGame.PremierConferencesModel.GetPremierConferenceModelByKey // (Final|Native|Public|BlueprintCallable) // @ game+0x3a74b60
	struct TMap<struct FString, struct UPremierConferenceModel*> GetConferences(); // Function ShooterGame.PremierConferencesModel.GetConferences // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74640
	void AddConference(struct UPremierConferenceModel* Conference); // Function ShooterGame.PremierConferencesModel.AddConference // (Final|Native|Public) // @ game+0x3a742e0
};

// Class ShooterGame.PremierPlayerSeasonModel
// Size: 0xe0 (Inherited: 0x30)
struct UPremierPlayerSeasonModel : UObject {
	struct FString SeasonID; // 0x30(0x10)
	struct FString RosterID; // 0x40(0x10)
	struct FString RosterName; // 0x50(0x10)
	struct FString RosterTag; // 0x60(0x10)
	int32_t Division; // 0x70(0x04)
	bool IsProvisionalDivision; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	int64_t Points; // 0x78(0x08)
	struct TMap<enum class EPremierEventType, int64_t> GamesPlayedByEventType; // 0x80(0x50)
	enum class EPremierCrestType CrestType; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	int64_t ChampionshipPointRequirement; // 0xd8(0x08)

	struct FString GetSeasonID(); // Function ShooterGame.PremierPlayerSeasonModel.GetSeasonID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bd10
	struct FString GetRosterTag(); // Function ShooterGame.PremierPlayerSeasonModel.GetRosterTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ce60
	struct FString GetRosterName(); // Function ShooterGame.PremierPlayerSeasonModel.GetRosterName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bbb0
	struct FString GetRosterID(); // Function ShooterGame.PremierPlayerSeasonModel.GetRosterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cd90
	int64_t GetPoints(); // Function ShooterGame.PremierPlayerSeasonModel.GetPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384dff0
	bool GetIsProvisionalDivision(); // Function ShooterGame.PremierPlayerSeasonModel.GetIsProvisionalDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386a3d0
	struct TMap<enum class EPremierEventType, int64_t> GetGamesPlayedByEventType(); // Function ShooterGame.PremierPlayerSeasonModel.GetGamesPlayedByEventType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a748d0
	int32_t GetDivision(); // Function ShooterGame.PremierPlayerSeasonModel.GetDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3869fd0
	enum class EPremierCrestType GetCrestType(); // Function ShooterGame.PremierPlayerSeasonModel.GetCrestType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38d0610
	int64_t GetChampionshipPointRequirement(); // Function ShooterGame.PremierPlayerSeasonModel.GetChampionshipPointRequirement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74620
};

// Class ShooterGame.PremierPlayerCrestsModel
// Size: 0x90 (Inherited: 0x30)
struct UPremierPlayerCrestsModel : UObject {
	struct FString Puuid; // 0x30(0x10)
	struct TMap<struct FGuid, struct UPremierPlayerSeasonModel*> Seasons; // 0x40(0x50)

	struct TMap<struct FGuid, struct UPremierPlayerSeasonModel*> GetSeasons(); // Function ShooterGame.PremierPlayerCrestsModel.GetSeasons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a751f0
	struct UPremierPlayerSeasonModel* GetSeason(struct FGuid& SeasonID); // Function ShooterGame.PremierPlayerCrestsModel.GetSeason // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a75140
	struct FString GetPuuid(); // Function ShooterGame.PremierPlayerCrestsModel.GetPuuid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bd10
};

// Class ShooterGame.PremierManager
// Size: 0x368 (Inherited: 0x80)
struct UPremierManager : UInitSystem {
	struct FMulticastInlineDelegate OnPremierSeasonsPopulated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPremierMatchInfoFetched; // 0x90(0x10)
	struct FMulticastInlineDelegate OnActiveSeasonChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnPremierConferencesPopulated; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPremierPlayerCrestUpdated; // 0xc0(0x10)
	char pad_D0[0x30]; // 0xd0(0x30)
	struct UConfigManager* ConfigManager; // 0x100(0x08)
	struct URSOManager* RSOManager; // 0x108(0x08)
	struct URMSManager* RMSManager; // 0x110(0x08)
	struct UContentManager* ContentManager; // 0x118(0x08)
	struct UContentIndex* ContentIndex; // 0x120(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x128(0x08)
	struct UModalManager* ModalManager; // 0x130(0x08)
	struct UPremierService* PremierService; // 0x138(0x08)
	struct UPremierSeasonsModel* PremierSeasonsModel; // 0x140(0x08)
	struct UPremierSeasonModel* ActiveSeason; // 0x148(0x08)
	struct UPremierConferencesModel* PremierConferencesModel; // 0x150(0x08)
	struct TMap<struct FString, struct UPremierRosterModel*> CurrentPremierRosterModels; // 0x158(0x50)
	struct TMap<struct FString, struct UPremierRosterMatchHistoryModel*> CurrentPremierRosterMatchHistoryModels; // 0x1a8(0x50)
	struct TMap<struct FString, struct UPremierPlayerCrestsModel*> CurrentPremierPlayerCrestsModels; // 0x1f8(0x50)
	struct TMap<struct FString, int64_t> CurrentPremierRosterModelVersions; // 0x248(0x50)
	char pad_298[0xb8]; // 0x298(0xb8)
	struct FPremierMatchLimitInfo PremierMatchLimitInfo; // 0x350(0x10)
	char pad_360[0x8]; // 0x360(0x08)

	void SubscribeToPlayerCrests(struct FGuid& Subject); // Function ShooterGame.PremierManager.SubscribeToPlayerCrests // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a75c40
	void HandlePremierRestrictionsWarningDialogAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.PremierManager.HandlePremierRestrictionsWarningDialogAction // (Final|Native|Public) // @ game+0x3a55c70
	struct UPremierSeasonsModel* GetPremierSeasonsModel(); // Function ShooterGame.PremierManager.GetPremierSeasonsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a75120
	enum class EPremierRestrictionsState GetPremierRestrictionsState(struct FPlayerRestrictions& PlayerRestrictions); // Function ShooterGame.PremierManager.GetPremierRestrictionsState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a75030
	struct FText GetPremierRestrictionsEligibilityText(struct FPlayerRestrictions& PlayerRestrictions); // Function ShooterGame.PremierManager.GetPremierRestrictionsEligibilityText // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74ed0
	struct UPremierPlayerCrestsModel* GetPremierPlayerCrestsModel(struct FString Subject); // Function ShooterGame.PremierManager.GetPremierPlayerCrestsModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3a74e10
	struct FPremierMatchLimitInfo GetPremierMatchLimitInfo(); // Function ShooterGame.PremierManager.GetPremierMatchLimitInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a74dc0
	struct UPremierManager* GetPremierManager(struct UObject* WorldContextObject); // Function ShooterGame.PremierManager.GetPremierManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a74d30
	enum class EPremierEligibilityState GetPremierEligibilityState(struct FPremierEligibility& PremierEligibility); // Function ShooterGame.PremierManager.GetPremierEligibilityState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a74c20
	struct UPremierConferencesModel* GetPremierConferencesModel(); // Function ShooterGame.PremierManager.GetPremierConferencesModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x38fe770
	struct UPremierSeasonModel* GetActiveSeason(); // Function ShooterGame.PremierManager.GetActiveSeason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a74600
	void FetchPremierSeasons(); // Function ShooterGame.PremierManager.FetchPremierSeasons // (Final|Native|Public|BlueprintCallable) // @ game+0x3a745e0
	void FetchPremierPlayerCrests(struct FString Subject); // Function ShooterGame.PremierManager.FetchPremierPlayerCrests // (Final|Native|Public|BlueprintCallable) // @ game+0x3a74530
	void FetchPremierMatchLimitInfo(); // Function ShooterGame.PremierManager.FetchPremierMatchLimitInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3a74510
	void FetchPremierConferences(); // Function ShooterGame.PremierManager.FetchPremierConferences // (Final|Native|Public|BlueprintCallable) // @ game+0x3a744f0
	void CreatePremierWarningModal(struct FPlayerRestrictions& PlayerRestrictions, bool SkipCheck); // Function ShooterGame.PremierManager.CreatePremierWarningModal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a743b0
};

// Class ShooterGame.PremierRosterManager
// Size: 0x1b8 (Inherited: 0x80)
struct UPremierRosterManager : UInitSystem {
	struct FMulticastInlineDelegate OnPlayerUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnMyRosterInvitesChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnMyRosterInviteAdded; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnMyRosterInviteRemoved; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnJoinOrLeaveMyCurrentRoster; // 0xc0(0x10)
	struct UConfigManager* ConfigManager; // 0xd0(0x08)
	struct URSOManager* RSOManager; // 0xd8(0x08)
	struct URMSManager* RMSManager; // 0xe0(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0xe8(0x08)
	struct UPremierManager* PremierManager; // 0xf0(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0xf8(0x08)
	struct UPartyManager* PartyManager; // 0x100(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x108(0x08)
	struct UPremierService* Service; // 0x110(0x08)
	char pad_118[0x8]; // 0x118(0x08)
	struct TMap<struct FString, struct UPremierRosterInviteModelV2*> MyRosterInvitesBacking; // 0x120(0x50)
	char pad_170[0x38]; // 0x170(0x38)
	struct UPremierRosterModelV2* CurrentRoster; // 0x1a8(0x08)
	struct UPremierRosterTextChatHandle* CurrentRosterTextChatHandle; // 0x1b0(0x08)

	void UnenrollRosterV1(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.UnenrollRosterV1 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7e9b0
	void TransferRosterOwnerProxy(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.TransferRosterOwnerProxy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7e7c0
	void SetRosterCustomizationV1(struct FString RosterID, struct FGuid& IconGuid, struct FString PrimaryColor, struct FString SecondaryColor, struct FString TertiaryColor, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.SetRosterCustomizationV1 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a7e4b0
	void RemovePlayerFromRoster(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.RemovePlayerFromRoster // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7e2c0
	void OnSeasonsPopulated(); // Function ShooterGame.PremierRosterManager.OnSeasonsPopulated // (Final|Native|Private) // @ game+0x3a7e2a0
	void OnConvertPartyToDefaultIfApplicableError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.PremierRosterManager.OnConvertPartyToDefaultIfApplicableError // (Final|Native|Private) // @ game+0x3a7e220
	void OnConferencesPopulated(); // Function ShooterGame.PremierRosterManager.OnConferencesPopulated // (Final|Native|Private) // @ game+0x3a7e200
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PremierRosterManager.OnBugCommand // (Final|Native|Private) // @ game+0x3a7e0b0
	struct TScriptInterface<IUnorderedMapModel> GetMyRosterInvitesModel(); // Function ShooterGame.PremierRosterManager.GetMyRosterInvitesModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7ddf0
	struct TMap<struct FString, struct UPremierRosterInviteModelV2*> GetMyRosterInvites(); // Function ShooterGame.PremierRosterManager.GetMyRosterInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7ddb0
	struct UPremierRosterInviteModelV2* GetMyRosterInvite(struct FString InvitedSubject); // Function ShooterGame.PremierRosterManager.GetMyRosterInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dcf0
	struct UPremierRosterModelV2* GetMyRoster(); // Function ShooterGame.PremierRosterManager.GetMyRoster // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dcd0
	void EnrollRosterV1(struct FString RosterID, struct FString Conference, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.EnrollRosterV1 // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7d3c0
	void DeleteRoster(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.DeleteRoster // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7d230
	void DeclineRosterInvite(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.DeclineRosterInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7d0a0
	void CreateRosterInvite(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.CreateRosterInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7ceb0
	void CreateRoster(struct FString RosterName, struct FString RosterTag, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.CreateRoster // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7ccc0
	void CancelRosterInvite(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.CancelRosterInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7cad0
	void AcceptRosterInvite(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterManager.AcceptRosterInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a7c940
};

// Class ShooterGame.PremierRosterMatchHistoryTournamentMatchDataModel
// Size: 0x50 (Inherited: 0x30)
struct UPremierRosterMatchHistoryTournamentMatchDataModel : UObject {
	int64_t Points; // 0x30(0x08)
	int32_t RoundNumber; // 0x38(0x04)
	int32_t TotalRounds; // 0x3c(0x04)
	struct FString BracketType; // 0x40(0x10)
};

// Class ShooterGame.PremierRosterMatchHistoryMatchEntryModel
// Size: 0x58 (Inherited: 0x30)
struct UPremierRosterMatchHistoryMatchEntryModel : UObject {
	struct FString MatchID; // 0x30(0x10)
	int64_t LeaguePointsBefore; // 0x40(0x08)
	int64_t LeaguePointsAfter; // 0x48(0x08)
	int64_t LeaguePointsEarned; // 0x50(0x08)
};

// Class ShooterGame.PremierRosterMatchHistoryTournamentEntryModel
// Size: 0x108 (Inherited: 0x30)
struct UPremierRosterMatchHistoryTournamentEntryModel : UObject {
	struct FString TournamentID; // 0x30(0x10)
	uint32_t FinalPlacement; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	int64_t FinalPlacementLeaguePointsBonus; // 0x48(0x08)
	int64_t LeaguePointsBefore; // 0x50(0x08)
	int64_t LeaguePointsAfter; // 0x58(0x08)
	int64_t LeaguePointsEarned; // 0x60(0x08)
	struct TMap<struct FString, int64_t> MatchEntries; // 0x68(0x50)
	struct TMap<struct FString, struct UPremierRosterMatchHistoryTournamentMatchDataModel*> TournamentMatchData; // 0xb8(0x50)
};

// Class ShooterGame.PremierRosterMatchHistoryScrimEntryModel
// Size: 0x40 (Inherited: 0x30)
struct UPremierRosterMatchHistoryScrimEntryModel : UObject {
	struct FString MatchID; // 0x30(0x10)
};

// Class ShooterGame.PremierRosterMatchHistoryModel
// Size: 0x80 (Inherited: 0x30)
struct UPremierRosterMatchHistoryModel : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct UPremierRosterMatchHistoryMatchEntryModel*> LeagueMatchHistory; // 0x48(0x10)
	struct TArray<struct UPremierRosterMatchHistoryTournamentEntryModel*> TournamentHistory; // 0x58(0x10)
	struct TArray<struct UPremierRosterMatchHistoryScrimEntryModel*> ScrimMatchHistory; // 0x68(0x10)
	bool IsLoaded; // 0x78(0x01)
	bool DidError; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
};

// Class ShooterGame.PremierRosterCustomizationModel
// Size: 0xc0 (Inherited: 0x30)
struct UPremierRosterCustomizationModel : UObject {
	struct FMulticastInlineDelegate OnChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIconChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnPrimaryColorChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnSecondaryColorChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnTertiaryColorChanged; // 0x70(0x10)
	char pad_80[0x40]; // 0x80(0x40)

	struct FString GetTertiaryColor(); // Function ShooterGame.PremierRosterCustomizationModel.GetTertiaryColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7e010
	struct FString GetSecondaryColor(); // Function ShooterGame.PremierRosterCustomizationModel.GetSecondaryColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7df70
	struct FString GetPrimaryColor(); // Function ShooterGame.PremierRosterCustomizationModel.GetPrimaryColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398ebb0
	struct FString GetIcon(); // Function ShooterGame.PremierRosterCustomizationModel.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398e250
};

// Class ShooterGame.PremierRosterMemberModelV2
// Size: 0x68 (Inherited: 0x30)
struct UPremierRosterMemberModelV2 : UObject {
	struct FMulticastInlineDelegate OnRoleChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMemberRoleChanged; // 0x40(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x50(0x08)
	enum class ERosterMemberRole Role; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FDateTime DateJoined; // 0x60(0x08)

	struct FString GetSubject(); // Function ShooterGame.PremierRosterMemberModelV2.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dfa0
	enum class ERosterMemberRole GetRole(); // Function ShooterGame.PremierRosterMemberModelV2.GetRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37933b0
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.PremierRosterMemberModelV2.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d660
	struct FDateTime GetDateJoined(); // Function ShooterGame.PremierRosterMemberModelV2.GetDateJoined // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d6e0
};

// Class ShooterGame.PremierRosterInviteModelV2
// Size: 0xb8 (Inherited: 0x30)
struct UPremierRosterInviteModelV2 : UObject {
	struct FMulticastInlineDelegate OnRosterNameChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInviteRosterNameChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnRosterTagChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnInviteRosterTagChanged; // 0x60(0x10)
	struct FString RosterID; // 0x70(0x10)
	struct FString RosterName; // 0x80(0x10)
	struct FString RosterTag; // 0x90(0x10)
	struct UPlatformPlayer* InvitedPlatformPlayer; // 0xa0(0x08)
	struct UPlatformPlayer* InvitingPlatformPlayer; // 0xa8(0x08)
	struct FDateTime DateInvited; // 0xb0(0x08)

	struct FString GetRosterTag(); // Function ShooterGame.PremierRosterInviteModelV2.GetRosterTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398ebb0
	struct FString GetRosterName(); // Function ShooterGame.PremierRosterInviteModelV2.GetRosterName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x398e250
	struct FString GetRosterID(); // Function ShooterGame.PremierRosterInviteModelV2.GetRosterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dec0
	struct FString GetInvitingSubject(); // Function ShooterGame.PremierRosterInviteModelV2.GetInvitingSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d8d0
	struct UPlatformPlayer* GetInvitingPlatformPlayer(); // Function ShooterGame.PremierRosterInviteModelV2.GetInvitingPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x380c2b0
	struct FString GetInvitedSubject(); // Function ShooterGame.PremierRosterInviteModelV2.GetInvitedSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d810
	struct UPlatformPlayer* GetInvitedPlatformPlayer(); // Function ShooterGame.PremierRosterInviteModelV2.GetInvitedPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3743720
	struct FDateTime GetDateInvited(); // Function ShooterGame.PremierRosterInviteModelV2.GetDateInvited // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949a70
};

// Class ShooterGame.PremierRosterLockModelV2
// Size: 0x60 (Inherited: 0x30)
struct UPremierRosterLockModelV2 : UObject {
	struct FString Name; // 0x30(0x10)
	struct FString ClientName; // 0x40(0x10)
	struct FDateTime CreatedAt; // 0x50(0x08)
	struct FDateTime ExpiresAt; // 0x58(0x08)

	struct FString GetName(); // Function ShooterGame.PremierRosterLockModelV2.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882500
	struct FDateTime GetExpiresAt(); // Function ShooterGame.PremierRosterLockModelV2.GetExpiresAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac50
	struct FDateTime GetCreatedAt(); // Function ShooterGame.PremierRosterLockModelV2.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d660
	struct FString GetClientName(); // Function ShooterGame.PremierRosterLockModelV2.GetClientName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d5e0
};

// Class ShooterGame.PremierDivisionModel
// Size: 0x80 (Inherited: 0x30)
struct UPremierDivisionModel : UObject {
	char pad_30[0x50]; // 0x30(0x50)

	struct FLinearColor GetSecondaryColor(); // Function ShooterGame.PremierDivisionModel.GetSecondaryColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7df50
	struct FLinearColor GetPrimaryColor(); // Function ShooterGame.PremierDivisionModel.GetPrimaryColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dea0
	struct UTexture* GetIconTextureSmall(); // Function ShooterGame.PremierDivisionModel.GetIconTextureSmall // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a74b40
	struct UTexture* GetIconTextureLarge(); // Function ShooterGame.PremierDivisionModel.GetIconTextureLarge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x384dff0
	struct FText GetDivisionName(); // Function ShooterGame.PremierDivisionModel.GetDivisionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d720
	int32_t GetDivision(); // Function ShooterGame.PremierDivisionModel.GetDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856c00
};

// Class ShooterGame.PremierRosterModelV2
// Size: 0x440 (Inherited: 0x30)
struct UPremierRosterModelV2 : UObject {
	struct FMulticastInlineDelegate OnUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnSeasonIDChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnNameChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTagChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMembersChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnMemberAdded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnMemberRemoved; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInvitesChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnInviteAdded; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnInviteRemoved; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnLocksChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnLockAdded; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnLockRemoved; // 0xf0(0x10)
	struct FMulticastInlineDelegate IsLockedChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnIsEnrolledChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnConferenceChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnConferenceModelChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnDivisionChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnIsProvisionalDivisionChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnDivisionModelChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnPointsChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnCrestTypeChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnWinsChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnGamesPlayedChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnMinimumRequiredMembersForEnrollmentChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnMatchesSinceResetChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnTournamentsSinceResetChanged; // 0x1d0(0x10)
	char pad_1E0[0x80]; // 0x1e0(0x80)
	struct UPremierRosterCustomizationModel* Customization; // 0x260(0x08)
	struct TMap<struct FString, struct UPremierRosterMemberModelV2*> MembersBacking; // 0x268(0x50)
	char pad_2B8[0x28]; // 0x2b8(0x28)
	struct TMap<struct FString, struct UPremierRosterInviteModelV2*> InvitesBacking; // 0x2e0(0x50)
	char pad_330[0x28]; // 0x330(0x28)
	struct TMap<struct FString, struct UPremierRosterLockModelV2*> LocksBacking; // 0x358(0x50)
	char pad_3A8[0x40]; // 0x3a8(0x40)
	struct UPremierConferenceModel* ConferenceModel; // 0x3e8(0x08)
	char pad_3F0[0x8]; // 0x3f0(0x08)
	struct UPremierDivisionModel* DivisionModel; // 0x3f8(0x08)
	char pad_400[0x40]; // 0x400(0x40)

	bool IsLocked(); // Function ShooterGame.PremierRosterModelV2.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7e080
	int32_t GetWins(); // Function ShooterGame.PremierRosterModelV2.GetWins // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39140
	struct FDateTime GetUpdatedAt(); // Function ShooterGame.PremierRosterModelV2.GetUpdatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7e060
	int32_t GetTournamentsSinceReset(); // Function ShooterGame.PremierRosterModelV2.GetTournamentsSinceReset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7e040
	struct FString GetTag(); // Function ShooterGame.PremierRosterModelV2.GetTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dfe0
	int64_t GetSocialVersion(); // Function ShooterGame.PremierRosterModelV2.GetSocialVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a39870
	struct FGuid GetSeasonID(); // Function ShooterGame.PremierRosterModelV2.GetSeasonID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7df20
	struct FString GetRosterID(); // Function ShooterGame.PremierRosterModelV2.GetRosterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7def0
	int64_t GetPremierVersion(); // Function ShooterGame.PremierRosterModelV2.GetPremierVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7de80
	int32_t GetPoints(); // Function ShooterGame.PremierRosterModelV2.GetPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7de60
	struct FString GetName(); // Function ShooterGame.PremierRosterModelV2.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7de30
	int32_t GetMinimumRequiredMembersForEnrollment(); // Function ShooterGame.PremierRosterModelV2.GetMinimumRequiredMembersForEnrollment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dcb0
	struct TScriptInterface<IUnorderedMapModel> GetMembersModel(); // Function ShooterGame.PremierRosterModelV2.GetMembersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dc70
	struct TMap<struct FString, struct UPremierRosterMemberModelV2*> GetMembers(); // Function ShooterGame.PremierRosterModelV2.GetMembers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dbd0
	struct UPremierRosterMemberModelV2* GetMember(struct FString Subject); // Function ShooterGame.PremierRosterModelV2.GetMember // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7db10
	int32_t GetMatchesSinceReset(); // Function ShooterGame.PremierRosterModelV2.GetMatchesSinceReset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7daf0
	struct TScriptInterface<IUnorderedMapModel> GetLocksModel(); // Function ShooterGame.PremierRosterModelV2.GetLocksModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7dab0
	struct TMap<struct FString, struct UPremierRosterLockModelV2*> GetLocks(); // Function ShooterGame.PremierRosterModelV2.GetLocks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7da10
	struct UPremierRosterLockModelV2* GetLock(struct FString LockName); // Function ShooterGame.PremierRosterModelV2.GetLock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d950
	bool GetIsProvisionalDivision(); // Function ShooterGame.PremierRosterModelV2.GetIsProvisionalDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d930
	bool GetIsEnrolled(); // Function ShooterGame.PremierRosterModelV2.GetIsEnrolled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d910
	struct TScriptInterface<IUnorderedMapModel> GetInvitesModel(); // Function ShooterGame.PremierRosterModelV2.GetInvitesModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d890
	struct TMap<struct FString, struct UPremierRosterInviteModelV2*> GetInvites(); // Function ShooterGame.PremierRosterModelV2.GetInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d850
	struct UPremierRosterInviteModelV2* GetInvite(struct FString InvitedSubject); // Function ShooterGame.PremierRosterModelV2.GetInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d750
	int32_t GetGamesPlayed(); // Function ShooterGame.PremierRosterModelV2.GetGamesPlayed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a392c0
	struct UPremierDivisionModel* GetDivisionModel(); // Function ShooterGame.PremierRosterModelV2.GetDivisionModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d700
	int32_t GetDivision(); // Function ShooterGame.PremierRosterModelV2.GetDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a6b590
	struct UPremierRosterCustomizationModel* GetCustomization(); // Function ShooterGame.PremierRosterModelV2.GetCustomization // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d6c0
	enum class EPremierCrestType GetCrestType(); // Function ShooterGame.PremierRosterModelV2.GetCrestType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d6a0
	struct FDateTime GetCreatedAt(); // Function ShooterGame.PremierRosterModelV2.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d680
	struct UPremierConferenceModel* GetConferenceModel(); // Function ShooterGame.PremierRosterModelV2.GetConferenceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d640
	struct FString GetConference(); // Function ShooterGame.PremierRosterModelV2.GetConference // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d610
	struct FString GetAffinity(); // Function ShooterGame.PremierRosterModelV2.GetAffinity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d5b0
};

// Class ShooterGame.PremierRosterTextChatHandle
// Size: 0xb8 (Inherited: 0x30)
struct UPremierRosterTextChatHandle : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
	struct URSOManager* RSOManager; // 0x38(0x08)
	struct UPremierService* PremierService; // 0x40(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x48(0x08)
	char pad_50[0x68]; // 0x50(0x68)
};

// Class ShooterGame.PremierRosterViewController
// Size: 0xc0 (Inherited: 0x80)
struct UPremierRosterViewController : UInitSystem {
	struct FMulticastInlineDelegate OnPremierRosterViewModelUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnRosterPlayerModelUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnRosterModelsUpdated; // 0xa0(0x10)
	struct URosterPlayerModel* RosterPlayerModel; // 0xb0(0x08)
	struct UPremierManager* PremierManager; // 0xb8(0x08)

	void UpdatePremierRosterCustomization(struct FString RosterID, struct FGuid& IconGuid, struct FString PrimaryColor, struct FString SecondaryColor, struct FString TertiaryColor, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.UpdatePremierRosterCustomization // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a874e0
	void TransferOwnership(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.TransferOwnership // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a872e0
	void RemovePlayerFromRoster(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.RemovePlayerFromRoster // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a870e0
	void RefreshCurrentPremierRosters(); // Function ShooterGame.PremierRosterViewController.RefreshCurrentPremierRosters // (Native|Public|BlueprintCallable) // @ game+0x288aab0
	void PremierRosterUnenroll(struct FString PremierRosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.PremierRosterUnenroll // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a86f40
	void PremierRosterEnroll(struct FString PremierRosterID, struct FString PremierRosterConference, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.PremierRosterEnroll // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a86d40
	struct UPremierRosterViewModel* GetPremierRosterModel(struct FString RosterID); // Function ShooterGame.PremierRosterViewController.GetPremierRosterModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85b60
	void GetPremierPlayerEligibility(struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.GetPremierPlayerEligibility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a85a20
	enum class ERosterMemberRole GetPlayerMemberRoleForRoster(struct FString RosterID, struct FString Subject); // Function ShooterGame.PremierRosterViewController.GetPlayerMemberRoleForRoster // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a85830
	struct URosterModel* GetMyRoster(); // Function ShooterGame.PremierRosterViewController.GetMyRoster // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a85770
	struct UPremierRosterViewModel* GetMyPremierRosterViewModel(); // Function ShooterGame.PremierRosterViewController.GetMyPremierRosterViewModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2aaa190
	void DeleteRoster(struct FString RosterID); // Function ShooterGame.PremierRosterViewController.DeleteRoster // (Native|Public|BlueprintCallable) // @ game+0x3a85430
	void DeclineInvite(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.DeclineInvite // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a85290
	void CreateRoster(struct FString Name, struct FString Tag, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.CreateRoster // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a85090
	void CreateInvite(struct FString RosterID, struct FString Puuid, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.CreateInvite // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a84e90
	void ChangeRole(struct FString RosterID, struct FString Subject, enum class ERosterMemberRole& Role, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.ChangeRole // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a84c40
	void CancelInvite(struct FString RosterID, struct FString Puuid, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.CancelInvite // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a84a40
	void AcceptInvite(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.AcceptInvite // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a848a0
};

// Class ShooterGame.PremierRosterViewControllerOld
// Size: 0x178 (Inherited: 0xc0)
struct UPremierRosterViewControllerOld : UPremierRosterViewController {
	struct URosterManager* RosterManager; // 0xc0(0x08)
	struct TMap<struct FString, struct UPremierRosterViewModel*> PremierRosterViewModels; // 0xc8(0x50)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x118(0x08)
	struct UPartyManager* PartyManager; // 0x120(0x08)
	struct TMap<struct FString, struct URosterModel*> RosterModels; // 0x128(0x50)

	void UpdateRosterMembers(struct URosterModel* RosterModel, struct TArray<struct FRosterMember>& NewMembers); // Function ShooterGame.PremierRosterViewControllerOld.UpdateRosterMembers // (Final|Native|Private|HasOutParms) // @ game+0x3a87800
	void HandleRostersUpdated(struct FString RosterID); // Function ShooterGame.PremierRosterViewControllerOld.HandleRostersUpdated // (Final|Native|Private) // @ game+0x3a85e90
	void HandleRosterRemoved(struct FString PremierRosterID); // Function ShooterGame.PremierRosterViewControllerOld.HandleRosterRemoved // (Final|Native|Private) // @ game+0x3a85de0
	void HandleRosterPlayerUpdated(); // Function ShooterGame.PremierRosterViewControllerOld.HandleRosterPlayerUpdated // (Final|Native|Private) // @ game+0x3a85dc0
	void HandleRosterAdded(struct FString PremierRosterID); // Function ShooterGame.PremierRosterViewControllerOld.HandleRosterAdded // (Final|Native|Private) // @ game+0x3a85d10
	void HandlePremierConferencesUpdated(); // Function ShooterGame.PremierRosterViewControllerOld.HandlePremierConferencesUpdated // (Final|Native|Private) // @ game+0x3a85cf0
};

// Class ShooterGame.PremierRosterViewControllerShim
// Size: 0xf8 (Inherited: 0xc0)
struct UPremierRosterViewControllerShim : UPremierRosterViewController {
	struct UPremierRosterManager* PremierRosterManager; // 0xc0(0x08)
	struct UConfigManager* ConfigManager; // 0xc8(0x08)
	struct URSOManager* RSOManager; // 0xd0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xd8(0x08)
	struct UPremierRosterModelV2* CurrentCombinedRoster; // 0xe0(0x08)
	struct URosterModel* CurrentSocialRoster; // 0xe8(0x08)
	struct UPremierRosterViewModel* CurrentPremierRoster; // 0xf0(0x08)

	void OnPlayerUpdated(); // Function ShooterGame.PremierRosterViewControllerShim.OnPlayerUpdated // (Final|Native|Private) // @ game+0x3a1fcf0
	void OnMyRosterInviteRosterTagChanged(struct UPremierRosterInviteModelV2* CombinedInvite, struct FString NewRosterTag); // Function ShooterGame.PremierRosterViewControllerShim.OnMyRosterInviteRosterTagChanged // (Final|Native|Private) // @ game+0x3a86c50
	void OnMyRosterInviteRosterNameChanged(struct UPremierRosterInviteModelV2* CombinedInvite, struct FString NewRosterName); // Function ShooterGame.PremierRosterViewControllerShim.OnMyRosterInviteRosterNameChanged // (Final|Native|Private) // @ game+0x3a86b60
	void OnMyRosterInviteRemoved(struct UPremierRosterInviteModelV2* CombinedInvite); // Function ShooterGame.PremierRosterViewControllerShim.OnMyRosterInviteRemoved // (Final|Native|Private) // @ game+0x3a86ad0
	void OnMyRosterInviteAdded(struct UPremierRosterInviteModelV2* CombinedInvite); // Function ShooterGame.PremierRosterViewControllerShim.OnMyRosterInviteAdded // (Final|Native|Private) // @ game+0x3a86a40
	void OnJoinOrLeaveMyCurrentRoster(struct UPremierRosterModelV2* JoinedOrLeftCombinedRoster); // Function ShooterGame.PremierRosterViewControllerShim.OnJoinOrLeaveMyCurrentRoster // (Final|Native|Private) // @ game+0x3a869b0
	void OnCurrentRosterUpdated(struct UPremierRosterModelV2* CombinedRoster); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterUpdated // (Final|Native|Private) // @ game+0x3a86920
	void OnCurrentRosterTagChanged(struct FString NewRosterTag); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterTagChanged // (Final|Native|Private) // @ game+0x3a86870
	void OnCurrentRosterSocialVersionChanged(int64_t NewSocialVersion); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterSocialVersionChanged // (Final|Native|Private) // @ game+0x3a867e0
	void OnCurrentRosterNameChanged(struct FString NewRosterName); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterNameChanged // (Final|Native|Private) // @ game+0x3a86730
	void OnCurrentRosterMemberRoleChanged(struct UPremierRosterMemberModelV2* CombinedMember, enum class ERosterMemberRole NewRole); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterMemberRoleChanged // (Final|Native|Private) // @ game+0x3a86660
	void OnCurrentRosterMemberRemoved(struct UPremierRosterMemberModelV2* CombinedMember); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterMemberRemoved // (Final|Native|Private) // @ game+0x3a865d0
	void OnCurrentRosterMemberAdded(struct UPremierRosterMemberModelV2* CombinedMember); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterMemberAdded // (Final|Native|Private) // @ game+0x3a86540
	void OnCurrentRosterLockRemoved(struct UPremierRosterLockModelV2* CombinedLock); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterLockRemoved // (Final|Native|Private) // @ game+0x3a864b0
	void OnCurrentRosterLockAdded(struct UPremierRosterLockModelV2* CombinedLock); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterLockAdded // (Final|Native|Private) // @ game+0x3a86420
	void OnCurrentRosterInviteRosterTagChanged(struct UPremierRosterInviteModelV2* CombinedInvite, struct FString NewRosterTag); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterInviteRosterTagChanged // (Final|Native|Private) // @ game+0x3a86330
	void OnCurrentRosterInviteRosterNameChanged(struct UPremierRosterInviteModelV2* CombinedInvite, struct FString NewRosterName); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterInviteRosterNameChanged // (Final|Native|Private) // @ game+0x3a86240
	void OnCurrentRosterInviteRemoved(struct UPremierRosterInviteModelV2* CombinedInvite); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterInviteRemoved // (Final|Native|Private) // @ game+0x3a861b0
	void OnCurrentRosterInviteAdded(struct UPremierRosterInviteModelV2* CombinedInvite); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterInviteAdded // (Final|Native|Private) // @ game+0x3a86120
	void OnCurrentRosterCustomizationTertiaryColorChanged(struct FString NewTertiaryColor); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterCustomizationTertiaryColorChanged // (Final|Native|Private) // @ game+0x3a86070
	void OnCurrentRosterCustomizationSecondaryColorChanged(struct FString NewSecondaryColor); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterCustomizationSecondaryColorChanged // (Final|Native|Private) // @ game+0x3a86070
	void OnCurrentRosterCustomizationPrimaryColorChanged(struct FString NewPrimaryColor); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterCustomizationPrimaryColorChanged // (Final|Native|Private) // @ game+0x3a86070
	void OnCurrentRosterCustomizationIconChanged(struct FString NewIcon); // Function ShooterGame.PremierRosterViewControllerShim.OnCurrentRosterCustomizationIconChanged // (Final|Native|Private) // @ game+0x3a86070
};

// Class ShooterGame.PremierRosterCustomizationViewModel
// Size: 0x70 (Inherited: 0x30)
struct UPremierRosterCustomizationViewModel : UObject {
	struct FString Icon; // 0x30(0x10)
	struct FString PrimaryColor; // 0x40(0x10)
	struct FString SecondaryColor; // 0x50(0x10)
	struct FString TertiaryColor; // 0x60(0x10)

	struct FString GetTertiaryColor(); // Function ShooterGame.PremierRosterCustomizationViewModel.GetTertiaryColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85c80
	struct FString GetSecondaryColor(); // Function ShooterGame.PremierRosterCustomizationViewModel.GetSecondaryColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85c20
	struct FString GetPrimaryColor(); // Function ShooterGame.PremierRosterCustomizationViewModel.GetPrimaryColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d5e0
	struct FString GetIcon(); // Function ShooterGame.PremierRosterCustomizationViewModel.GetIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882500
};

// Class ShooterGame.PremierMatchModel
// Size: 0x88 (Inherited: 0x30)
struct UPremierMatchModel : UObject {
	struct FString MatchID; // 0x30(0x10)
	struct FString EventID; // 0x40(0x10)
	int64_t StartTime; // 0x50(0x08)
	int64_t PointsBefore; // 0x58(0x08)
	int64_t PointsAfter; // 0x60(0x08)
	int64_t PointsEarned; // 0x68(0x08)
	enum class EMatchOutcome Outcome; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FString OpponentRosterID; // 0x78(0x10)

	int64_t GetStartTime(); // Function ShooterGame.PremierMatchModel.GetStartTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d660
	int64_t GetPointsEarned(); // Function ShooterGame.PremierMatchModel.GetPointsEarned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac30
	int64_t GetPointsBefore(); // Function ShooterGame.PremierMatchModel.GetPointsBefore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac50
	int64_t GetPointsAfter(); // Function ShooterGame.PremierMatchModel.GetPointsAfter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d6e0
	enum class EMatchOutcome GetOutcome(); // Function ShooterGame.PremierMatchModel.GetOutcome // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85810
	struct FString GetOpponentRosterID(); // Function ShooterGame.PremierMatchModel.GetOpponentRosterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a857e0
	struct FString GetMatchID(); // Function ShooterGame.PremierMatchModel.GetMatchID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3882500
	struct FString GetEventID(); // Function ShooterGame.PremierMatchModel.GetEventID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d5e0
};

// Class ShooterGame.PremierRosterViewModel
// Size: 0x228 (Inherited: 0x30)
struct UPremierRosterViewModel : UObject {
	struct FMulticastInlineDelegate OnPointsChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMaxPointsChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnConferenceChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnDivisionChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsProvisionalDivisionChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnBonusMatchesRemainingChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnBonusMatchesTotalChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnLeagueMatchesPlayedChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTournamentsPlayedChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnIsEnrolledChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMinimumRequiredMembersForEnrollmentChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnCustomizationChanged; // 0xe0(0x10)
	struct FString ID; // 0xf0(0x10)
	struct FString Name; // 0x100(0x10)
	struct FString Tag; // 0x110(0x10)
	struct UPremierRosterCustomizationViewModel* CustomizationModel; // 0x120(0x08)
	int32_t LeaguePoints; // 0x128(0x04)
	int32_t MaxLeaguePoints; // 0x12c(0x04)
	int32_t BonusMatchesRemaining; // 0x130(0x04)
	int32_t BonusMatchesTotal; // 0x134(0x04)
	int32_t LeagueMatchesPlayed; // 0x138(0x04)
	int32_t TournamentsPlayed; // 0x13c(0x04)
	struct FString Conference; // 0x140(0x10)
	struct UPremierConferenceModel* ConferenceModel; // 0x150(0x08)
	int32_t Division; // 0x158(0x04)
	bool IsProvisionalDivision; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)
	struct FPremierDivisionData DivisionData; // 0x160(0x60)
	bool IsEnrolled; // 0x1c0(0x01)
	char pad_1C1[0x3]; // 0x1c1(0x03)
	int32_t MinimumRequiredMembersForEnrollment; // 0x1c4(0x04)
	int32_t Wins; // 0x1c8(0x04)
	int32_t GamesPlayed; // 0x1cc(0x04)
	enum class EPremierCrestType CrestType; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct TMap<struct FString, struct UPremierMatchModel*> PremierMatches; // 0x1d8(0x50)

	struct UPremierRosterCustomizationViewModel* MakeCustomizationFromDTO(struct FPremierRosterCustomization& CustomizationDTO); // Function ShooterGame.PremierRosterViewModel.MakeCustomizationFromDTO // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a85f70
	bool IsDivisionHidden(); // Function ShooterGame.PremierRosterViewModel.IsDivisionHidden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85f40
	int32_t GetWins(); // Function ShooterGame.PremierRosterViewModel.GetWins // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85cd0
	int32_t GetTournamentsPlayed(); // Function ShooterGame.PremierRosterViewModel.GetTournamentsPlayed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85cb0
	struct FString GetTag(); // Function ShooterGame.PremierRosterViewModel.GetTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85c50
	struct UPremierRosterCustomizationViewModel* GetPremierRosterCustomization(); // Function ShooterGame.PremierRosterViewModel.GetPremierRosterCustomization // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c40
	struct UPremierMatchModel* GetPremierMatch(struct FString MatchID); // Function ShooterGame.PremierRosterViewModel.GetPremierMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x3a85960
	struct FString GetName(); // Function ShooterGame.PremierRosterViewModel.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a857b0
	int32_t GetMinimumRequiredMembersForEnrollment(); // Function ShooterGame.PremierRosterViewModel.GetMinimumRequiredMembersForEnrollment // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85750
	int32_t GetMaxLeaguePoints(); // Function ShooterGame.PremierRosterViewModel.GetMaxLeaguePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39403b0
	int32_t GetLeaguePoints(); // Function ShooterGame.PremierRosterViewModel.GetLeaguePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85730
	int32_t GetLeagueMatchesPlayed(); // Function ShooterGame.PremierRosterViewModel.GetLeagueMatchesPlayed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a34120
	bool GetIsProvisionalDivision(); // Function ShooterGame.PremierRosterViewModel.GetIsProvisionalDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85710
	bool GetIsEnrolled(); // Function ShooterGame.PremierRosterViewModel.GetIsEnrolled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a856f0
	struct FString GetID(); // Function ShooterGame.PremierRosterViewModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a856c0
	int32_t GetGamesPlayed(); // Function ShooterGame.PremierRosterViewModel.GetGamesPlayed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a856a0
	struct FPremierDivisionData GetDivisionData(); // Function ShooterGame.PremierRosterViewModel.GetDivisionData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85560
	int32_t GetDivision(); // Function ShooterGame.PremierRosterViewModel.GetDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85540
	enum class EPremierCrestType GetCrestType(); // Function ShooterGame.PremierRosterViewModel.GetCrestType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85520
	struct UPremierConferenceModel* GetConferenceModel(); // Function ShooterGame.PremierRosterViewModel.GetConferenceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe770
	struct FString GetConference(); // Function ShooterGame.PremierRosterViewModel.GetConference // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911f50
	int32_t GetBonusMatchesTotal(); // Function ShooterGame.PremierRosterViewModel.GetBonusMatchesTotal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85500
	int32_t GetBonusMatchesRemaining(); // Function ShooterGame.PremierRosterViewModel.GetBonusMatchesRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a854e0
};

// Class ShooterGame.PremierEventScheduleDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UPremierEventScheduleDataAsset : UDataAsset {
	struct TArray<struct FPremierEventDivisionSchedule> SchedulePerDivision; // 0x38(0x10)
};

// Class ShooterGame.PremierEventMapPoolDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UPremierEventMapPoolDataAsset : UDataAsset {
	struct TArray<struct TSoftClassPtr<UObject>> Maps; // 0x38(0x10)
};

// Class ShooterGame.PremierSeasonDataAsset
// Size: 0x110 (Inherited: 0x50)
struct UPremierSeasonDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> CompetitiveSeason; // 0x80(0x30)
	struct FDateTime StartTime; // 0xb0(0x08)
	struct FDateTime EndTime; // 0xb8(0x08)
	struct UDataTable* DivisionDataTable; // 0xc0(0x08)
	struct UDataTable* Events; // 0xc8(0x08)
	struct TArray<struct TSoftClassPtr<UObject>> ParticipationRewardsActs; // 0xd0(0x10)
	struct TArray<struct UEditableReward*> ParticipationRewards; // 0xe0(0x10)
	struct TArray<struct UEditableReward*> TournamentWinnerRewards; // 0xf0(0x10)
	struct TArray<struct FDivisionWinnerReward> DivisionWinnerRewards; // 0x100(0x10)

	void GetAllEvents(struct TArray<struct FPremierEventDisplay>& OutEvents); // Function ShooterGame.PremierSeasonDataAsset.GetAllEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a94160
};

// Class ShooterGame.PremierSeasonUIData
// Size: 0x90 (Inherited: 0x90)
struct UPremierSeasonUIData : UBaseContentUIData {
};

// Class ShooterGame.PremierSeasonModel
// Size: 0xe8 (Inherited: 0x30)
struct UPremierSeasonModel : UObject {
	struct UPremierSeasonDataAsset* DataAsset; // 0x30(0x08)
	struct FMulticastInlineDelegate OnScheduledEventsChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnEventAdded; // 0x48(0x10)
	struct FMulticastInlineDelegate OnEventRemoved; // 0x58(0x10)
	struct FGuid PremierSeasonID; // 0x68(0x10)
	struct FGuid CompetitiveSeasonID; // 0x78(0x10)
	bool IsActive; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct TArray<struct UPremierEventModel*> Events; // 0x90(0x10)
	struct TArray<struct UPremierScheduledEventModel*> ScheduledEvents; // 0xa0(0x10)
	struct FDateTime StartTime; // 0xb0(0x08)
	struct FDateTime EndTime; // 0xb8(0x08)
	struct FDateTime EnrollmentPhaseStartTime; // 0xc0(0x08)
	struct FDateTime EnrollmentPhaseEndTime; // 0xc8(0x08)
	int32_t ChampionshipPointRequirement; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct FString ChampionshipEventID; // 0xd8(0x10)

	void SetScheduledEvents(struct TArray<struct UPremierScheduledEventModel*> NewScheduledEventModels); // Function ShooterGame.PremierSeasonModel.SetScheduledEvents // (Final|Native|Public) // @ game+0x3a94d50
	void RemoveEvent(struct FGuid& EventID); // Function ShooterGame.PremierSeasonModel.RemoveEvent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3a94b80
	bool IsEnrollmentPhaseActive(); // Function ShooterGame.PremierSeasonModel.IsEnrollmentPhaseActive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a94b50
	void GetSortedEvents(struct TArray<struct UPremierEventModel*>& OutEvents); // Function ShooterGame.PremierSeasonModel.GetSortedEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a94aa0
	struct FDateTime GetSeasonStartTime(); // Function ShooterGame.PremierSeasonModel.GetSeasonStartTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949a70
	struct FDateTime GetSeasonEnrollmentPhaseStartTime(); // Function ShooterGame.PremierSeasonModel.GetSeasonEnrollmentPhaseStartTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949e00
	struct FDateTime GetSeasonEnrollmentPhaseEndTime(); // Function ShooterGame.PremierSeasonModel.GetSeasonEnrollmentPhaseEndTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x380c7a0
	struct FDateTime GetSeasonEndTime(); // Function ShooterGame.PremierSeasonModel.GetSeasonEndTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x363ed50
	void GetScheduledEventsForConference(struct FString Conference, struct TArray<struct UPremierScheduledEventModel*>& OutScheduledEvents); // Function ShooterGame.PremierSeasonModel.GetScheduledEventsForConference // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a94990
	struct TArray<struct UPremierScheduledEventModel*> GetScheduledEvents(); // Function ShooterGame.PremierSeasonModel.GetScheduledEvents // (Final|Native|Public|Const) // @ game+0x386a280
	struct FGuid GetPremierSeasonID(); // Function ShooterGame.PremierSeasonModel.GetPremierSeasonID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a948c0
	bool GetIsActive(); // Function ShooterGame.PremierSeasonModel.GetIsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a948a0
	struct UPremierEventModel* GetFinalEvent(); // Function ShooterGame.PremierSeasonModel.GetFinalEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3a94870
	struct TArray<struct UPremierEventModel*> GetEvents(); // Function ShooterGame.PremierSeasonModel.GetEvents // (Final|Native|Public|Const) // @ game+0x3a947a0
	struct UPremierEventModel* GetEventModelByID(struct FGuid& EventID); // Function ShooterGame.PremierSeasonModel.GetEventModelByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a946f0
	struct UPremierScheduledEventModel* GetCurrentOrNextScheduledEventForConference(struct FString Conference); // Function ShooterGame.PremierSeasonModel.GetCurrentOrNextScheduledEventForConference // (Final|Native|Public|BlueprintCallable) // @ game+0x3a94600
	struct UPremierScheduledEventModel* GetCurrentOrNextScheduledEventByEventID(struct FString Conference, struct FGuid& EventID); // Function ShooterGame.PremierSeasonModel.GetCurrentOrNextScheduledEventByEventID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a944f0
	struct UPremierEventModel* GetCurrentOrNextEventForConference(struct FString Conference); // Function ShooterGame.PremierSeasonModel.GetCurrentOrNextEventForConference // (Final|Native|Public|BlueprintCallable) // @ game+0x3a94430
	struct UPremierEventModel* GetCurrentOrNextEventByDivision(int32_t& Division); // Function ShooterGame.PremierSeasonModel.GetCurrentOrNextEventByDivision // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a94390
	struct UPremierEventModel* GetCurrentOrNextEvent(); // Function ShooterGame.PremierSeasonModel.GetCurrentOrNextEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3a94360
	struct FGuid GetCompetitiveSeasonID(); // Function ShooterGame.PremierSeasonModel.GetCompetitiveSeasonID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860d30
	int32_t GetChampionshipPointRequirement(); // Function ShooterGame.PremierSeasonModel.GetChampionshipPointRequirement // (Final|Native|Public|BlueprintCallable) // @ game+0x3a94330
	void AddEvent(struct UPremierEventModel* NewEvent); // Function ShooterGame.PremierSeasonModel.AddEvent // (Final|Native|Public) // @ game+0x3a94040
};

// Class ShooterGame.PremierScheduledEventModel
// Size: 0x58 (Inherited: 0x30)
struct UPremierScheduledEventModel : UObject {
	struct UPremierEventModel* EventModel; // 0x30(0x08)
	struct FString Conference; // 0x38(0x10)
	struct FDateTime StartDateTime; // 0x48(0x08)
	struct FDateTime EndDateTime; // 0x50(0x08)
};

// Class ShooterGame.PremierEventScheduleModel
// Size: 0xd0 (Inherited: 0x30)
struct UPremierEventScheduleModel : UObject {
	int32_t Division; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FPremierDivisionData DivisionData; // 0x38(0x60)
	struct FString Conference; // 0x98(0x10)
	struct FDateTime StartDateTime; // 0xa8(0x08)
	struct FDateTime EndDateTime; // 0xb0(0x08)
	struct FString QueueID; // 0xb8(0x10)
	int32_t RequiredMaxLeaguePoints; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class ShooterGame.PremierEventModel
// Size: 0x150 (Inherited: 0x30)
struct UPremierEventModel : UObject {
	enum class EPremierEventType EventType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FText Name; // 0x38(0x18)
	struct FText Description; // 0x50(0x18)
	struct TMap<int32_t, struct UPremierEventScheduleModel*> SchedulePerDivisionModel; // 0x68(0x50)
	struct TMap<struct FString, struct UPremierEventScheduleModel*> SchedulePerConferenceModel; // 0xb8(0x50)
	struct FDateTime EarliestStartTime; // 0x108(0x08)
	struct FDateTime LatestEndTime; // 0x110(0x08)
	enum class EPremierEventMapSelectionStrategy MapSelectionStrategy; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct TArray<struct UMapDataAsset*> MapPool; // 0x120(0x10)
	struct FMulticastInlineDelegate OnEventModelChanged; // 0x130(0x10)
	struct FGuid EventID; // 0x140(0x10)

	struct FGuid GetEventID(); // Function ShooterGame.PremierEventModel.GetEventID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a946c0
};

// Class ShooterGame.PremierSeasonsModel
// Size: 0xb8 (Inherited: 0x30)
struct UPremierSeasonsModel : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct TMap<struct FGuid, struct UPremierSeasonModel*> Seasons; // 0x60(0x50)
	struct UPremierSeasonModel* ActiveSeason; // 0xb0(0x08)

	void SetActiveSeason(struct UPremierSeasonModel* season); // Function ShooterGame.PremierSeasonsModel.SetActiveSeason // (Final|Native|Public) // @ game+0x3a94cc0
	void RemoveSeason(struct FGuid& SeasonID); // Function ShooterGame.PremierSeasonsModel.RemoveSeason // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3a94c20
	struct TMap<struct FGuid, struct UPremierSeasonModel*> GetSeasons(); // Function ShooterGame.PremierSeasonsModel.GetSeasons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3888d50
	struct UPremierSeasonModel* GetPremierSeasonModelByID(struct FGuid& PremierSeasonID); // Function ShooterGame.PremierSeasonsModel.GetPremierSeasonModelByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3a948e0
	struct UPremierSeasonModel* GetActiveSeason(); // Function ShooterGame.PremierSeasonsModel.GetActiveSeason // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949a70
	void AddSeason(struct UPremierSeasonModel* season); // Function ShooterGame.PremierSeasonsModel.AddSeason // (Final|Native|Public) // @ game+0x3a940d0
};

// Class ShooterGame.PremierService
// Size: 0x38 (Inherited: 0x30)
struct UPremierService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PresenceManager
// Size: 0x128 (Inherited: 0x80)
struct UPresenceManager : UInitSystem {
	struct FMulticastInlineDelegate OnPresencesUpdated; // 0x80(0x10)
	bool bInitialized; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct TMap<struct FString, struct FPresenceResourceMap> Presences; // 0x98(0x50)
	struct UPresenceService* PresenceService; // 0xe8(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0xf0(0x08)
	char pad_F8[0x30]; // 0xf8(0x30)

	void HandleChatSessionDisconnected(); // Function ShooterGame.PresenceManager.HandleChatSessionDisconnected // (Final|Native|Private) // @ game+0x3a9f4f0
	void HandleChatSessionConnected(); // Function ShooterGame.PresenceManager.HandleChatSessionConnected // (Final|Native|Private) // @ game+0x3a9f4b0
	struct UPresenceManager* GetPresenceManager(struct UObject* WorldContextObject); // Function ShooterGame.PresenceManager.GetPresenceManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a9f3b0
	struct FAresPresenceInfo GetPresenceInfoBySubject(struct FString Subject); // Function ShooterGame.PresenceManager.GetPresenceInfoBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9f2d0
	struct FAresPresenceInfo GetPresenceInfoByPid(struct FString Pid); // Function ShooterGame.PresenceManager.GetPresenceInfoByPid // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9f1f0
};

// Class ShooterGame.PresenceService
// Size: 0x38 (Inherited: 0x30)
struct UPresenceService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PresenceUpdater
// Size: 0x2b8 (Inherited: 0x80)
struct UPresenceUpdater : UInitSystem {
	char pad_80[0x8]; // 0x80(0x08)
	bool bInitialized; // 0x88(0x01)
	bool bIsShutdown; // 0x89(0x01)
	char pad_8A[0x6]; // 0x8a(0x06)
	struct FAresPresenceData TargetPresenceData; // 0x90(0x170)
	struct UPresenceService* PresenceService; // 0x200(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x208(0x08)
	struct UPartyManager* PartyManager; // 0x210(0x08)
	struct UCustomGameManager* CustomGameManager; // 0x218(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x220(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x228(0x08)
	struct UPresenceManager* PresenceManager; // 0x230(0x08)
	struct URSOManager* RSOManager; // 0x238(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x240(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x248(0x08)
	struct UPregameManager* PregameManager; // 0x250(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x258(0x08)
	struct UMatchmakingManager* MatchmakingManager; // 0x260(0x08)
	struct UInventoryManager* InventoryManager; // 0x268(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x270(0x08)
	struct UConfigManager* ConfigManager; // 0x278(0x08)
	struct UAccountXPManager* AccountXPManager; // 0x280(0x08)
	struct UMMRManager* MMRManager; // 0x288(0x08)
	char pad_290[0x28]; // 0x290(0x28)

	void SetGameState(struct AShooterGameState* NewGameState); // Function ShooterGame.PresenceUpdater.SetGameState // (Final|Native|Private) // @ game+0x3a9fd60
	void RefreshPresenceInfo(); // Function ShooterGame.PresenceUpdater.RefreshPresenceInfo // (Final|Native|Private) // @ game+0x3a9f9c0
	void PerformPresenceUpdate(); // Function ShooterGame.PresenceUpdater.PerformPresenceUpdate // (Final|Native|Private) // @ game+0x3a9f960
	void HandlePointsUpdated(); // Function ShooterGame.PresenceUpdater.HandlePointsUpdated // (Final|Native|Private) // @ game+0x3a9f600
	void HandlePlatformFault(enum class EPlatformFaultReason& Reason); // Function ShooterGame.PresenceUpdater.HandlePlatformFault // (Final|Native|Private|HasOutParms) // @ game+0x3a9f570
	void HandleInGameStateExited(); // Function ShooterGame.PresenceUpdater.HandleInGameStateExited // (Final|Native|Private) // @ game+0x3a9f550
	void HandleInGameStateEntered(); // Function ShooterGame.PresenceUpdater.HandleInGameStateEntered // (Final|Native|Private) // @ game+0x3a9f530
	void HandleChatSessionDisconnected(); // Function ShooterGame.PresenceUpdater.HandleChatSessionDisconnected // (Final|Native|Private) // @ game+0x3a9f510
	void HandleChatSessionConnected(); // Function ShooterGame.PresenceUpdater.HandleChatSessionConnected // (Final|Native|Private) // @ game+0x3a9f4d0
};

// Class ShooterGame.ProfilePresetsViewModel
// Size: 0x70 (Inherited: 0x48)
struct UProfilePresetsViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnPresetIndexChanged; // 0x48(0x10)
	int32_t PresetIndex; // 0x58(0x04)
	char pad_5C[0x14]; // 0x5c(0x14)

	void SetPresetIndex(int32_t NewPresetIndex); // Function ShooterGame.ProfilePresetsViewModel.SetPresetIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9fdf0
	void RequestNavigationToPresetScreen(struct FString PresetScreenURL); // Function ShooterGame.ProfilePresetsViewModel.RequestNavigationToPresetScreen // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9fbd0
	void RequestGamepadPresetUpdate(struct UGamepadPresetDataAsset* Data, struct FName CharacterName, int32_t RequestPresetIndex); // Function ShooterGame.ProfilePresetsViewModel.RequestGamepadPresetUpdate // (Final|Native|Protected|BlueprintCallable) // @ game+0x3a9faa0
	void Refresh(); // Function ShooterGame.ProfilePresetsViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9f9a0
	void Init(); // Function ShooterGame.ProfilePresetsViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9f7d0
	int32_t GetPresetIndex(); // Function ShooterGame.ProfilePresetsViewModel.GetPresetIndex // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x25567a0
};

// Class ShooterGame.ProgressModelSet
// Size: 0xc8 (Inherited: 0x88)
struct UProgressModelSet : UManualNumericProgressModelBase {
	struct TArray<struct FProgressModelSet_ChildData> ChildObjects; // 0x88(0x10)
	char pad_98[0x30]; // 0x98(0x30)

	void SetReady(bool NewValue); // Function ShooterGame.ProgressModelSet.SetReady // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9ff00
	void SetProgressCalculationMode(enum class ENumericProgressCalculationMode NewValue); // Function ShooterGame.ProgressModelSet.SetProgressCalculationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9fe80
	void RemoveProgressObject(struct TScriptInterface<IProgressModel> ProgressObject); // Function ShooterGame.ProgressModelSet.RemoveProgressObject // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9fa00
	void RemoveAllProgressObjects(); // Function ShooterGame.ProgressModelSet.RemoveAllProgressObjects // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9f9e0
	bool IsReady(); // Function ShooterGame.ProgressModelSet.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a1fdf0
	void HandleProgressValueChanged(struct UObject* Source); // Function ShooterGame.ProgressModelSet.HandleProgressValueChanged // (Final|Native|Private) // @ game+0x3a9f740
	void HandleProgressStateChanged(struct UObject* Source); // Function ShooterGame.ProgressModelSet.HandleProgressStateChanged // (Final|Native|Private) // @ game+0x3a9f6b0
	void HandleProgressCompleted(struct UObject* Source); // Function ShooterGame.ProgressModelSet.HandleProgressCompleted // (Final|Native|Private) // @ game+0x3a9f620
	enum class ENumericProgressCalculationMode GetProgressCalculationMode(); // Function ShooterGame.ProgressModelSet.GetProgressCalculationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a9f440
	struct UProgressModelSet* Create(enum class ENumericProgressCalculationMode ProgressCalculationMode, struct TArray<struct TScriptInterface<IProgressModel>>& ProgressObjects, bool bStartReady, struct UObject* Outer); // Function ShooterGame.ProgressModelSet.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3a9e040
	void AddProgressObjects(struct TArray<struct TScriptInterface<IProgressModel>>& ProgressObjects); // Function ShooterGame.ProgressModelSet.AddProgressObjects // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3a9df50
	void AddProgressObject(struct TScriptInterface<IProgressModel> ProgressObject); // Function ShooterGame.ProgressModelSet.AddProgressObject // (Final|Native|Public|BlueprintCallable) // @ game+0x3a9deb0
};

// Class ShooterGame.ProjectileBounceComponent
// Size: 0x1a8 (Inherited: 0xf8)
struct UProjectileBounceComponent : UProjectileCollisionResponseComponent {
	struct FMulticastInlineDelegate OnProjectileBounce; // 0xf8(0x10)
	char bBounceAngleAffectsFriction : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	float Bounciness; // 0x10c(0x04)
	float Friction; // 0x110(0x04)
	float BounceVelocityProjectileStopThreshold; // 0x114(0x04)
	struct FClassInclusionExclusionFilter StopTypeFilter; // 0x118(0x50)
	struct FName CannotStopTag; // 0x168(0x0c)
	float ShortBounceDistance; // 0x174(0x04)
	int32_t MaxShortBounces; // 0x178(0x04)
	float BounceStopSurfaceAngle; // 0x17c(0x04)
	float MinBounceWhenCannotStop; // 0x180(0x04)
	float MinLateralWhenCannotStop; // 0x184(0x04)
	char pad_188[0x10]; // 0x188(0x10)
	char DefaultBounceAngleAffectsFriction : 1; // 0x198(0x01)
	char pad_198_1 : 7; // 0x198(0x01)
	char pad_199[0x3]; // 0x199(0x03)
	float DefaultBounciness; // 0x19c(0x04)
	float DefaultFriction; // 0x1a0(0x04)
	float DefaultBounceVelocityProjectileStopThreshold; // 0x1a4(0x04)
};

// Class ShooterGame.ProjectileThrowStateComponent
// Size: 0x380 (Inherited: 0x2e0)
struct UProjectileThrowStateComponent : UScriptStateComponent {
	struct FMulticastInlineDelegate OnThrow; // 0x2e0(0x10)
	struct FProjectileThrowTuning ProjectileTuning; // 0x2f0(0x40)
	bool bAddToContext; // 0x330(0x01)
	bool bWantsToReportNoiseEvent; // 0x331(0x01)
	char pad_332[0x6]; // 0x332(0x06)
	struct FNoiseEventData NoiseEventData; // 0x338(0x38)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)

	void TryReportNoiseEvent(struct UProjectileThrowStateComponent* ThrowState); // Function ShooterGame.ProjectileThrowStateComponent.TryReportNoiseEvent // (Final|Native|Private) // @ game+0x3634e00
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.ProjectileThrowStateComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x3aa7ac0
	bool IsOnCooldown(); // Function ShooterGame.ProjectileThrowStateComponent.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa79e0
	void GetThrowingLocationAndDirection(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileThrowStateComponent.GetThrowingLocationAndDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa77e0
	bool CanThrow(); // Function ShooterGame.ProjectileThrowStateComponent.CanThrow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa6ef0
};

// Class ShooterGame.ProjectileDownStateComponent
// Size: 0x380 (Inherited: 0x380)
struct UProjectileDownStateComponent : UProjectileThrowStateComponent {

	void GetThrowingLocation(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileDownStateComponent.GetThrowingLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa7540
};

// Class ShooterGame.ProjectileEstimationComponent
// Size: 0x5f0 (Inherited: 0x570)
struct UProjectileEstimationComponent : USphereComponent {
	struct FProjectileThrowTuning ThrowInfo; // 0x570(0x40)
	bool bManualProjectileInfo; // 0x5b0(0x01)
	char pad_5B1[0x3]; // 0x5b1(0x03)
	struct FProjectileEstimationInfo ProjectileInfo; // 0x5b4(0x34)
	char pad_5E8[0x8]; // 0x5e8(0x08)

	struct TArray<struct FVector> EstimateProjectileTrajectory(struct AShooterCharacter* Thrower, struct FVector& FiringLocation, struct FVector& FiringDirection, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, float TimeStep, float MaxEstimatedDistance, int32_t MaxEstimatedBounces, float MaxEstimatedTime); // Function ShooterGame.ProjectileEstimationComponent.EstimateProjectileTrajectory // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3aa6fe0
};

// Class ShooterGame.ProjectileFollowComponent
// Size: 0x128 (Inherited: 0x108)
struct UProjectileFollowComponent : USpectateActionComponent {
	bool bShouldFollowProjectile; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct UFreeCamComponent* CachedFreeCamComponent; // 0x110(0x08)
	char pad_118[0x10]; // 0x118(0x10)

	void ServerSetFollowProjectiles(bool bFollowProjectiles); // Function ShooterGame.ProjectileFollowComponent.ServerSetFollowProjectiles // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3aa82b0
	void RequestSetProjectileFollowEnabled(); // Function ShooterGame.ProjectileFollowComponent.RequestSetProjectileFollowEnabled // (Final|Native|Private) // @ game+0x3aa8290
	void RequestSetProjectileFollow(bool bShouldBeEnabled); // Function ShooterGame.ProjectileFollowComponent.RequestSetProjectileFollow // (Final|Native|Private) // @ game+0x3aa8200
	void OnViewTargetChanged(struct AActor* OldViewTarget, struct AActor* NewViewTarget, struct FViewTargetTransitionParams& TransitionParams); // Function ShooterGame.ProjectileFollowComponent.OnViewTargetChanged // (Final|Native|Private|HasOutParms) // @ game+0x3aa8020
	void OnOwnerSubobjectReplicated(struct UObject* Subobject); // Function ShooterGame.ProjectileFollowComponent.OnOwnerSubobjectReplicated // (Final|Native|Private) // @ game+0x3aa7a30
	void OnAuthBeforePendingViewTargetIsApplied(); // Function ShooterGame.ProjectileFollowComponent.OnAuthBeforePendingViewTargetIsApplied // (Final|Native|Private) // @ game+0x3aa7a10
	void HandleViewTargetDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.ProjectileFollowComponent.HandleViewTargetDestroyed // (Final|Native|Private) // @ game+0x3aa7950
	void AuthHandleFocusProjectileInvalidated(struct AShooterCharacter* OwningCharacter, struct AActor* Projectile); // Function ShooterGame.ProjectileFollowComponent.AuthHandleFocusProjectileInvalidated // (Final|Native|Private) // @ game+0x3aa6d40
	void AuthHandleFocusProjectileChanged(struct AShooterCharacter* OwningCharacter, struct AActor* Projectile); // Function ShooterGame.ProjectileFollowComponent.AuthHandleFocusProjectileChanged // (Final|Native|Private) // @ game+0x3aa6c70
};

// Class ShooterGame.ProjectileLeftStateComponent
// Size: 0x380 (Inherited: 0x380)
struct UProjectileLeftStateComponent : UProjectileThrowStateComponent {

	void GetThrowingLocation(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileLeftStateComponent.GetThrowingLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa7620
};

// Class ShooterGame.ProjectileRightStateComponent
// Size: 0x380 (Inherited: 0x380)
struct UProjectileRightStateComponent : UProjectileThrowStateComponent {

	void GetThrowingLocation(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileRightStateComponent.GetThrowingLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa7700
};

// Class ShooterGame.ProjectileStickComponent
// Size: 0x168 (Inherited: 0xf8)
struct UProjectileStickComponent : UProjectileCollisionResponseComponent {
	struct FMulticastInlineDelegate OnProjectileStick; // 0xf8(0x10)
	struct FClassInclusionExclusionFilter StuckToFilter; // 0x108(0x50)
	bool bShouldAlignToStickPoint; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	struct FRotator AlignmentOffset; // 0x15c(0x0c)
};

// Class ShooterGame.ProjectileStopOnFloorComponent
// Size: 0x160 (Inherited: 0xf8)
struct UProjectileStopOnFloorComponent : UProjectileCollisionResponseComponent {
	float StopSurfaceAngle; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FClassInclusionExclusionFilter FloorTypeFilter; // 0x100(0x50)
	struct FName InvalidFloorTag; // 0x150(0x0c)
	char pad_15C[0x4]; // 0x15c(0x04)
};

// Class ShooterGame.PropMovementComponent
// Size: 0x138 (Inherited: 0x128)
struct UPropMovementComponent : UMovementComponent {
	float Bounciness; // 0x128(0x04)
	float Friction; // 0x12c(0x04)
	float BounceVelocityProjectileStopThreshold; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class ShooterGame.ProvisioningErrorNotificationManager
// Size: 0x90 (Inherited: 0x80)
struct UProvisioningErrorNotificationManager : UInitSystem {
	struct URMSManager* RMSManager; // 0x80(0x08)
	struct UNotificationManager* NotificationManager; // 0x88(0x08)

	void HandleVersionProvisioningError(); // Function ShooterGame.ProvisioningErrorNotificationManager.HandleVersionProvisioningError // (Final|Native|Private) // @ game+0x2024060
	void HandleGenericDismiss(struct UGenericNotification* Notification); // Function ShooterGame.ProvisioningErrorNotificationManager.HandleGenericDismiss // (Final|Native|Private) // @ game+0x3634e00
	void HandleGeneralProvisioningError(); // Function ShooterGame.ProvisioningErrorNotificationManager.HandleGeneralProvisioningError // (Final|Native|Private) // @ game+0x2024060
};

// Class ShooterGame.PurchasableFilterComponent
// Size: 0x108 (Inherited: 0xe8)
struct UPurchasableFilterComponent : UActorComponent {
	struct TArray<struct UAresPurchasable*> Allowlist; // 0xe8(0x10)
	struct TArray<struct UAresPurchasable*> Denylist; // 0xf8(0x10)

	bool PassesFilter(struct UAresPurchasable* Purchasable); // Function ShooterGame.PurchasableFilterComponent.PassesFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa8160
	bool ClassPassesFilter(struct UAresPurchasable*& Purchasable); // Function ShooterGame.PurchasableFilterComponent.ClassPassesFilter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aa6f20
	void AuthSetDenylist(struct TArray<struct UAresPurchasable*>& NewDenylist); // Function ShooterGame.PurchasableFilterComponent.AuthSetDenylist // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x393f840
	void AuthSetAllowlist(struct TArray<struct UAresPurchasable*>& NewAllowlist); // Function ShooterGame.PurchasableFilterComponent.AuthSetAllowlist // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x393f840
	void AuthClearDenylist(); // Function ShooterGame.PurchasableFilterComponent.AuthClearDenylist // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthClearAllowlist(); // Function ShooterGame.PurchasableFilterComponent.AuthClearAllowlist // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.PurchasedItemComponent
// Size: 0x108 (Inherited: 0xe8)
struct UPurchasedItemComponent : UActorComponent {
	struct UAresPurchasableEquippable* Purchaseable; // 0xe8(0x08)
	bool bIsCurrentSessionPurchase; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct AShooterPlayerState* PurchasingPlayerState; // 0xf8(0x08)
	enum class EInventoryTransaction PurchasableTransactionSource; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)

	bool IsCurrentSessionPurchase(); // Function ShooterGame.PurchasedItemComponent.IsCurrentSessionPurchase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39734b0
	void HandleDropped(struct AAresEquippable* Equippable); // Function ShooterGame.PurchasedItemComponent.HandleDropped // (Final|Native|Private) // @ game+0x3aa78c0
};

// Class ShooterGame.PurchaseManager
// Size: 0x130 (Inherited: 0x30)
struct UPurchaseManager : UObject {
	struct FMulticastInlineDelegate OnOrderSubmitted; // 0x30(0x10)
	struct FMulticastInlineDelegate OnOrderProcessed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOrderFailed; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOrderStateChanged; // 0x60(0x10)
	struct FDelegate OnStoreManagerSubmitOrderSuccess; // 0x70(0x14)
	struct FDelegate OnStoreManagerSubmitOrderError; // 0x84(0x14)
	struct FDelegate OnContractsManagerSubmitOrderSuccess; // 0x98(0x14)
	struct FDelegate OnContractsManagerSubmitOrderError; // 0xac(0x14)
	struct UConfigManager* ConfigManager; // 0xc0(0x08)
	struct UStoreManager* StoreManager; // 0xc8(0x08)
	struct UContractsManager* ContractsManager; // 0xd0(0x08)
	struct UStoreUITelemetryManager* UITelemetryManager; // 0xd8(0x08)
	struct UPlayerFeedbackToolViewController* PlayerFeedbackToolViewController; // 0xe0(0x08)
	struct UPlatformOffersManager* PlatformOffersManager; // 0xe8(0x08)
	struct FGuid OrderXID; // 0xf0(0x10)
	struct FGuid OrderID; // 0x100(0x10)
	enum class EPurchaseSource PurchaseSource; // 0x110(0x01)
	enum class EPurchaseType PurchaseType; // 0x111(0x01)
	enum class EJuiceOrderRequestType JuiceCraftType; // 0x112(0x01)
	enum class EPurchaseState PurchaseState; // 0x113(0x01)
	char pad_114[0x4]; // 0x114(0x04)
	struct UOfferDTO* OfferDTO; // 0x118(0x08)
	struct TArray<struct FStoreOfferReward> ExpectedRewards; // 0x120(0x10)

	void UpdatePurchaseState(enum class EPurchaseState NewState); // Function ShooterGame.PurchaseManager.UpdatePurchaseState // (Final|Native|Private) // @ game+0x3aa8b60
	void UpdateLocalInventory(); // Function ShooterGame.PurchaseManager.UpdateLocalInventory // (Final|Native|Public) // @ game+0x3aa8b40
	bool TrySubmitOrderSetup(struct FGuid XID, enum class EPurchaseType NewPurchaseType, enum class EPurchaseSource NewPurchaseSource); // Function ShooterGame.PurchaseManager.TrySubmitOrderSetup // (Final|Native|Private|HasDefaults) // @ game+0x3aa8a20
	void SubmitStoreOfferOrder(enum class EPurchaseSource NewPurchaseSource, struct FGuid XID, struct UStoreOffer* StoreOffer); // Function ShooterGame.PurchaseManager.SubmitStoreOfferOrder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3aa8900
	void SubmitOrder(enum class EPurchaseType NewPurchaseType, enum class EPurchaseSource NewPurchaseSource, struct FGuid XID, struct UOfferDTO* Offer); // Function ShooterGame.PurchaseManager.SubmitOrder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3aa8780
	void SubmitJuiceCraftOrder(enum class EPurchaseSource JuicePurchaseSource, struct FGuid XID, enum class EJuiceOrderRequestType JuiceOrderType, struct TMap<struct FGuid, int32_t> ExpectedCosts, struct TArray<struct FEntitlementReward> ExpectedEntitlementRewards, struct TArray<struct FWalletReward> ExpectedWalletRewards, struct FItemProgressionDTO ExpectedProgression); // Function ShooterGame.PurchaseManager.SubmitJuiceCraftOrder // (Final|Native|Public|HasDefaults) // @ game+0x3aa8350
	void OnSubmitOrderSuccess(struct FOrderResponse& OrderResponse); // Function ShooterGame.PurchaseManager.OnSubmitOrderSuccess // (Final|Native|Private|HasOutParms) // @ game+0x3aa7e70
	void OnSubmitOrderError(); // Function ShooterGame.PurchaseManager.OnSubmitOrderError // (Final|Native|Private) // @ game+0x3aa7e50
	void OnSubmitContractOrderSuccess(struct FPurchaseResponse& OrderResponse); // Function ShooterGame.PurchaseManager.OnSubmitContractOrderSuccess // (Final|Native|Private|HasOutParms) // @ game+0x3aa7db0
	void OnSubmitContractOrderError(struct FAmbassadorError& ErrorCode); // Function ShooterGame.PurchaseManager.OnSubmitContractOrderError // (Final|Native|Private|HasOutParms) // @ game+0x3aa7cd0
	void OnProcessOrderSuccess(struct FGuid& CompletedOrderID); // Function ShooterGame.PurchaseManager.OnProcessOrderSuccess // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x3aa7c30
	void OnProcessOrderError(struct FGuid& FailedOrderID); // Function ShooterGame.PurchaseManager.OnProcessOrderError // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x3aa7b90
	struct UCostDTO* GetOfferCost(); // Function ShooterGame.PurchaseManager.GetOfferCost // (Final|Native|Private) // @ game+0x3aa7510
	struct TArray<struct FStoreOfferReward> GetExpectedRewards(); // Function ShooterGame.PurchaseManager.GetExpectedRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x3aa7440
	struct TSet<enum class EAresContentType> GetExpectedContentTypes(); // Function ShooterGame.PurchaseManager.GetExpectedContentTypes // (Final|Native|Public) // @ game+0x3aa7370
	struct FName GetConfigBlockingOrderOrNone(); // Function ShooterGame.PurchaseManager.GetConfigBlockingOrderOrNone // (Final|Native|Public|BlueprintCallable) // @ game+0x3aa7330
	void CleanupOrder(); // Function ShooterGame.PurchaseManager.CleanupOrder // (Final|Native|Private) // @ game+0x3aa6fc0
	struct TArray<struct FStoreOfferReward> CalculateBundleExpectedRewards(struct UBundleViewModel* Bundle); // Function ShooterGame.PurchaseManager.CalculateBundleExpectedRewards // (Final|Native|Private) // @ game+0x3aa6e10
};

// Class ShooterGame.PurchaseModal
// Size: 0x2d8 (Inherited: 0x2c8)
struct UPurchaseModal : UUserWidget {
	struct UPurchaseModalViewModel* ViewModel; // 0x2c8(0x08)
	struct UPurchaseModalViewController* ViewController; // 0x2d0(0x08)

	void UpgradeContract(struct FGuid ContractDefinitionID, struct UCurrencyDataAsset* PurchaseCurrency, int32_t PurchasePrice); // Function ShooterGame.PurchaseModal.UpgradeContract // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3aaf5c0
	void SetUpgradeCurrencyOffer(struct UUpgradeCurrencyOffer* Offer); // Function ShooterGame.PurchaseModal.SetUpgradeCurrencyOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaf490
	void SetSidegradeUnlock(struct FGuid ItemProgressionDefinitionID, struct USidegradeModel* SidegradeModel); // Function ShooterGame.PurchaseModal.SetSidegradeUnlock // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3aaf3b0
	void SetOfferInBundle(struct UStoreOffer* Offer, struct UBundleViewModel* Bundle); // Function ShooterGame.PurchaseModal.SetOfferInBundle // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaf2e0
	void SetOffer(struct UStoreOffer* Offer); // Function ShooterGame.PurchaseModal.SetOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaf250
	void SetItemUnlockV2(struct FGuid ItemProgressionDefinitionID, struct UCurrencyDataAsset* PurchaseCurrency, int32_t PurchasePrice, int32_t CurrentLevel, int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.PurchaseModal.SetItemUnlockV2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3aaf070
	void SetContractUnlock(struct FGuid ContractDefinitionID, struct UCurrencyDataAsset* PurchaseCurrency, int32_t PurchasePrice, int32_t FromLevel, int32_t ToLevel, int32_t DoughAmountClaimed); // Function ShooterGame.PurchaseModal.SetContractUnlock // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3aaee90
	void SetBundle(struct UBundleViewModel* Bundle); // Function ShooterGame.PurchaseModal.SetBundle // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaee00
	void SetBonusOffer(struct UBonusStoreOfferViewModel* BonusOffer); // Function ShooterGame.PurchaseModal.SetBonusOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaed70
	struct UPurchaseModalViewModel* GetViewModel(); // Function ShooterGame.PurchaseModal.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612c0
	struct UPurchaseModalViewController* GetViewController(); // Function ShooterGame.PurchaseModal.GetViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38612a0
};

// Class ShooterGame.PurchaseModalViewController
// Size: 0xc8 (Inherited: 0x30)
struct UPurchaseModalViewController : UObject {
	struct FMulticastInlineDelegate OnOrderSubmitted; // 0x30(0x10)
	struct FMulticastInlineDelegate OnOrderComplete; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOrderError; // 0x50(0x10)
	enum class EPurchaseSource ModalPurchaseSource; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct UStoreManager* StoreManager; // 0x68(0x08)
	struct UConfigManager* ConfigManager; // 0x70(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x78(0x08)
	struct UContractsManager* ContractsManager; // 0x80(0x08)
	struct UPurchaseModalViewModel* ViewModel; // 0x88(0x08)
	struct UStoreUITelemetryManager* UITelemetryManager; // 0x90(0x08)
	struct UPlayerFeedbackToolViewController* PlayerFeedbackToolViewController; // 0x98(0x08)
	struct UInventoryManager* InventoryManager; // 0xa0(0x08)
	struct FGuid TransactionXID; // 0xa8(0x10)
	struct FGuid OrderID; // 0xb8(0x10)

	void UpdateLocalInventory(); // Function ShooterGame.PurchaseModalViewController.UpdateLocalInventory // (Final|Native|Protected) // @ game+0x3aaf5a0
	void UnlockItemProgress(); // Function ShooterGame.PurchaseModalViewController.UnlockItemProgress // (Final|Native|Protected) // @ game+0x3aaf580
	void TryGetSurveyOnStorePurchaseEvent(); // Function ShooterGame.PurchaseModalViewController.TryGetSurveyOnStorePurchaseEvent // (Final|Native|Protected) // @ game+0x3aaf560
	void SubmitOrderInternal(); // Function ShooterGame.PurchaseModalViewController.SubmitOrderInternal // (Final|Native|Protected) // @ game+0x3aaf540
	void SubmitOrder(); // Function ShooterGame.PurchaseModalViewController.SubmitOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaf520
	void SendTelemetryForPurchaseEvent(bool PurchaseCancelled); // Function ShooterGame.PurchaseModalViewController.SendTelemetryForPurchaseEvent // (Final|Native|Protected) // @ game+0x3aaece0
	void SendPurchaseCompleteEvent(); // Function ShooterGame.PurchaseModalViewController.SendPurchaseCompleteEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaecc0
	void SendPurchaseCancelEvent(); // Function ShooterGame.PurchaseModalViewController.SendPurchaseCancelEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaeca0
	void OnWalletUpdated(); // Function ShooterGame.PurchaseModalViewController.OnWalletUpdated // (Final|Native|Protected) // @ game+0x3aaec10
	void OnUnlockSubmittedInternal(struct FPurchaseResponse& OrderResponse); // Function ShooterGame.PurchaseModalViewController.OnUnlockSubmittedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3aaeb70
	void OnUnlockSubmitErrorInternal(struct FAmbassadorError& ErrorResponse); // Function ShooterGame.PurchaseModalViewController.OnUnlockSubmitErrorInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3aaea90
	void OnPurchaseStateChanged(); // Function ShooterGame.PurchaseModalViewController.OnPurchaseStateChanged // (Final|Native|Protected) // @ game+0x3aaea70
	void OnOrderSubmittedInternal(struct FOrderResponse& OrderResponse); // Function ShooterGame.PurchaseModalViewController.OnOrderSubmittedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3aae8c0
	void OnOrderSubmitErrorInternal(); // Function ShooterGame.PurchaseModalViewController.OnOrderSubmitErrorInternal // (Final|Native|Protected) // @ game+0x3aae8a0
	void OnOrderErrorInternal(struct FGuid& FailedOrderID); // Function ShooterGame.PurchaseModalViewController.OnOrderErrorInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3aae800
	void OnOrderCompleteInternal(struct FGuid& CompletedOrderID); // Function ShooterGame.PurchaseModalViewController.OnOrderCompleteInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3aae760
	bool IsOrderBlockedByConfig(); // Function ShooterGame.PurchaseModalViewController.IsOrderBlockedByConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x3aae730
	enum class EOfferType GetOfferType(); // Function ShooterGame.PurchaseModalViewController.GetOfferType // (Final|Native|Protected) // @ game+0x3aae390
	struct TArray<struct FString> GetExpectedRewardIDsForStorePurchase(); // Function ShooterGame.PurchaseModalViewController.GetExpectedRewardIDsForStorePurchase // (Final|Native|Protected) // @ game+0x3aae250
	struct TSet<enum class EAresContentType> GetExpectedContentTypes(); // Function ShooterGame.PurchaseModalViewController.GetExpectedContentTypes // (Final|Native|Protected) // @ game+0x3aae180
	void EquipRewards(struct FDelegate& OnComplete); // Function ShooterGame.PurchaseModalViewController.EquipRewards // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aae0c0
};

// Class ShooterGame.PurchaseModalViewModel
// Size: 0x1a0 (Inherited: 0x30)
struct UPurchaseModalViewModel : UObject {
	int32_t PurchasePrice; // 0x30(0x04)
	struct FGuid PurchaseCurrency; // 0x34(0x10)
	bool IsDiscountApplied; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	int32_t DiscountAmount; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FMulticastInlineDelegate OnWalletBalanceUpdated; // 0x50(0x10)
	struct FGuid OfferId; // 0x60(0x10)
	enum class EPurchaseType PurchaseType; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	int32_t CurrentLevel; // 0x74(0x04)
	int32_t FromLevel; // 0x78(0x04)
	int32_t ToLevel; // 0x7c(0x04)
	struct FGuid ContractDefinitionID; // 0x80(0x10)
	struct FGuid ItemProgressionDefinitionID; // 0x90(0x10)
	struct FGuid SidegradeID; // 0xa0(0x10)
	struct FGuid SidegradeOptionID; // 0xb0(0x10)
	struct TArray<struct FWalletCost> SidegradeCosts; // 0xc0(0x10)
	struct TArray<struct FEntitlementReward> BundlePurchaseExpectedEntitlementRewards; // 0xd0(0x10)
	struct TArray<struct FWalletReward> BundlePurchaseExpectedWalletRewards; // 0xe0(0x10)
	struct TMap<struct FGuid, int32_t> BundlePurchaseExpectedCosts; // 0xf0(0x50)
	char pad_140[0x18]; // 0x140(0x18)
	enum class EPurchaseState State; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	int32_t WalletBalance; // 0x15c(0x04)
	int32_t AmountClaimed; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	struct UStoreOffer* Offer; // 0x168(0x08)
	struct TArray<struct FStoreOfferReward> Rewards; // 0x170(0x10)
	struct TArray<struct UEntitlementRewardModel*> SidegradeRewards; // 0x180(0x10)
	struct UBundleViewModel* Bundle; // 0x190(0x08)
	struct UUpgradeCurrencyOffer* UpgradeCurrencyOffer; // 0x198(0x08)

	bool WouldClaimingRewardExceedDoughLimit(int32_t DoughLimit); // Function ShooterGame.PurchaseModalViewModel.WouldClaimingRewardExceedDoughLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3aaf6e0
	bool PlayerHasSufficientFunds(); // Function ShooterGame.PurchaseModalViewModel.PlayerHasSufficientFunds // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3aaec50
	int32_t GetWalletBalance(); // Function ShooterGame.PurchaseModalViewModel.GetWalletBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae630
	struct UUpgradeCurrencyOffer* GetUpgradeCurrencyOffer(); // Function ShooterGame.PurchaseModalViewModel.GetUpgradeCurrencyOffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae610
	struct UEntitlementRewardModel* GetSidegradeVariantReward(); // Function ShooterGame.PurchaseModalViewModel.GetSidegradeVariantReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae5e0
	struct TArray<struct UEntitlementRewardModel*> GetSidegradeRewards(); // Function ShooterGame.PurchaseModalViewModel.GetSidegradeRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae510
	struct TArray<struct FStoreOfferReward> GetRewards(); // Function ShooterGame.PurchaseModalViewModel.GetRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae480
	int32_t GetPriceToPay(); // Function ShooterGame.PurchaseModalViewModel.GetPriceToPay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae3c0
	int32_t GetFinalBalance(); // Function ShooterGame.PurchaseModalViewModel.GetFinalBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3aae330
	struct UBundleViewModel* GetBundle(); // Function ShooterGame.PurchaseModalViewModel.GetBundle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38572e0
};

// Class ShooterGame.PushNotificationsListener
// Size: 0x48 (Inherited: 0x30)
struct UPushNotificationsListener : UObject {
	struct UPushNotificationsManager* PushNotificationsManager; // 0x30(0x08)
	struct UPartyViewController* PartyViewController; // 0x38(0x08)
	struct UPartyNotificationManager* PartyNotificationManager; // 0x40(0x08)
};

// Class ShooterGame.PushNotificationsManager
// Size: 0xa0 (Inherited: 0x80)
struct UPushNotificationsManager : UInitSystem {
	struct UPushNotificationsService* PushNotificationsService; // 0x80(0x08)
	struct UPushNotificationsListener* PushNotificationsListener; // 0x88(0x08)
	struct URSOManager* RSOManager; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)

	struct UPushNotificationsManager* GetPushNotificationsManager(struct UObject* WorldContextObject); // Function ShooterGame.PushNotificationsManager.GetPushNotificationsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3aae3f0
};

// Class ShooterGame.PushNotificationsService
// Size: 0x38 (Inherited: 0x30)
struct UPushNotificationsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.QueuedNotification
// Size: 0x80 (Inherited: 0x30)
struct UQueuedNotification : UObject {
	struct FMulticastInlineDelegate OnDisplay; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDispose; // 0x40(0x10)
	struct FMulticastInlineDelegate OnResponse; // 0x50(0x10)
	struct UGenericNotification* NotificationData; // 0x60(0x08)
	char pad_68[0x18]; // 0x68(0x18)

	void HandleGenericNotificationResponse(struct UGenericNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.QueuedNotification.HandleGenericNotificationResponse // (Final|Native|Public) // @ game+0x3aae660
	struct UGenericNotification* GetNotificationData(); // Function ShooterGame.QueuedNotification.GetNotificationData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a4d640
	bool GetIsDisposed(); // Function ShooterGame.QueuedNotification.GetIsDisposed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae360
	void Dispose(); // Function ShooterGame.QueuedNotification.Dispose // (Final|Native|Public|BlueprintCallable) // @ game+0x3aae0a0
};

// Class ShooterGame.QueuedNotificationConsumerComponent
// Size: 0x100 (Inherited: 0xe8)
struct UQueuedNotificationConsumerComponent : UActorComponent {
	struct UQueuedNotification* CurrentNotification; // 0xe8(0x08)
	char pad_F0[0x8]; // 0xf0(0x08)
	struct UQueuedNotification* PendingNotification; // 0xf8(0x08)

	void Resume(); // Function ShooterGame.QueuedNotificationConsumerComponent.Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaec80
	void Pause(); // Function ShooterGame.QueuedNotificationConsumerComponent.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x3aaec30
	void OnCanRemoveNotification(struct UQueuedNotification* Notification); // Function ShooterGame.QueuedNotificationConsumerComponent.OnCanRemoveNotification // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnCanDisplayNotification(struct UQueuedNotification* Notification); // Function ShooterGame.QueuedNotificationConsumerComponent.OnCanDisplayNotification // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool HasPendingNotification(); // Function ShooterGame.QueuedNotificationConsumerComponent.HasPendingNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3973740
	void ConsumeNotification(struct UQueuedNotification* Notification); // Function ShooterGame.QueuedNotificationConsumerComponent.ConsumeNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x3aae010
};

// Class ShooterGame.RadialBuffProjectileEffectComponent
// Size: 0x140 (Inherited: 0xf8)
struct URadialBuffProjectileEffectComponent : UBaseProjectileEffectComponent {
	float ExplosionBuffLevel; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct UAresGameplayBuff* ExplosionBuffClass; // 0x100(0x08)
	float ExplosionMinimumBuffLevel; // 0x108(0x04)
	float ExplosionBuffLevelFalloff; // 0x10c(0x04)
	float ExplosionRadius; // 0x110(0x04)
	float ExplosionInnerRadius; // 0x114(0x04)
	float AxialSearchRadius; // 0x118(0x04)
	enum class ECollisionChannel ExplosionSearchTraceChannel; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct UDamageType* DamageType; // 0x120(0x08)
	bool bIgnoreVictimsThatShareInstigator; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct FMulticastInlineDelegate OnAppliedRadialBuff; // 0x130(0x10)
};

// Class ShooterGame.RadialCommScreen
// Size: 0x458 (Inherited: 0x428)
struct URadialCommScreen : UAresScreenBase {
	struct UNonVerbalCommsViewModel* NonVerbalCommsViewModel; // 0x428(0x08)
	struct FMulticastInlineDelegate OnRadialCommToggledDynamic; // 0x430(0x10)
	char pad_440[0x18]; // 0x440(0x18)

	void ToggleRadialComm(bool bIsVisible); // Function ShooterGame.RadialCommScreen.ToggleRadialComm // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab61d0
	void OnCommWheelInputUp(); // Function ShooterGame.RadialCommScreen.OnCommWheelInputUp // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnCommWheelInputDown(); // Function ShooterGame.RadialCommScreen.OnCommWheelInputDown // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void EarlySetup(); // Function ShooterGame.RadialCommScreen.EarlySetup // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BP_OnShow(); // Function ShooterGame.RadialCommScreen.BP_OnShow // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void BP_OnHide(); // Function ShooterGame.RadialCommScreen.BP_OnHide // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.RadialCommCoordinator
// Size: 0x70 (Inherited: 0x30)
struct URadialCommCoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnRadialCommToggledDynamic; // 0x38(0x10)
	struct AAresPlayerController* PlayerController; // 0x48(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x50(0x08)
	struct URadialCommScreen* RadialCommScreen; // 0x58(0x08)
	struct UNonVerbalCommsViewModel* NonVerbalCommsViewModel; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void HandleClose(); // Function ShooterGame.RadialCommCoordinator.HandleClose // (Final|Native|Public) // @ game+0x3ab5b80
};

// Class ShooterGame.RadialDamageProjectileEffectComponent
// Size: 0x138 (Inherited: 0xf8)
struct URadialDamageProjectileEffectComponent : UBaseProjectileEffectComponent {
	float ExplosionDamage; // 0xf8(0x04)
	float ExplosionMinimumDamage; // 0xfc(0x04)
	float ExplosionDamageFalloff; // 0x100(0x04)
	float ExplosionRadius; // 0x104(0x04)
	float ExplosionInnerRadius; // 0x108(0x04)
	float AxialSearchRadius; // 0x10c(0x04)
	enum class ECollisionChannel ExplosionSearchTraceChannel; // 0x110(0x01)
	bool UseComplexCollisionForEndpoints; // 0x111(0x01)
	bool AxialSearchBackwards; // 0x112(0x01)
	char pad_113[0x5]; // 0x113(0x05)
	struct UDamageType* DamageType; // 0x118(0x08)
	bool bIgnoreVictimsThatShareInstigator; // 0x120(0x01)
	bool bDealMaxDamageToTouchedObjects; // 0x121(0x01)
	char pad_122[0x2]; // 0x122(0x02)
	float TouchingDistance; // 0x124(0x04)
	struct FMulticastInlineDelegate OnDealtRadialDamage; // 0x128(0x10)
};

// Class ShooterGame.RadialForceModuleProjectileEffectComponent
// Size: 0x118 (Inherited: 0xf8)
struct URadialForceModuleProjectileEffectComponent : UBaseProjectileEffectComponent {
	enum class EAresTeamTargeting TeamFilter; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	float Radius; // 0xfc(0x04)
	float AxialSearchRadius; // 0x100(0x04)
	enum class ECollisionChannel RadiusSearchTraceChannel; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
	struct UForceModule* ForceModule; // 0x108(0x08)
	float Duration; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
};

// Class ShooterGame.RadialItemBase
// Size: 0x328 (Inherited: 0x300)
struct URadialItemBase : UAresCommonUserWidget {
	float PositionAngle; // 0x300(0x04)
	float SectorSize; // 0x304(0x04)
	float InnerRadius; // 0x308(0x04)
	float OuterRadius; // 0x30c(0x04)
	bool bIsHighlighted; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct FMulticastInlineDelegate OnRadialItemHighlightChangedDynamic; // 0x318(0x10)

	void SetHighlight(bool bShouldHighlight); // Function ShooterGame.RadialItemBase.SetHighlight // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37a3550
	bool IsSelected(float Angle, float Magnitude); // Function ShooterGame.RadialItemBase.IsSelected // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3ab5e10
};

// Class ShooterGame.RadialMenuBase
// Size: 0x328 (Inherited: 0x300)
struct URadialMenuBase : UAresCommonUserWidget {
	struct TArray<struct UUserWidget*> RadialItems; // 0x300(0x10)
	int32_t LastSelected; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct FMulticastInlineDelegate OnSelectedItemChangedDynamic; // 0x318(0x10)

	int32_t UpdateSelectedItem(float Angle, float Magnitude); // Function ShooterGame.RadialMenuBase.UpdateSelectedItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3ab6260
	void ResetRadialMenu(); // Function ShooterGame.RadialMenuBase.ResetRadialMenu // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37c24d0
	struct UUserWidget* GetItem(int32_t Index); // Function ShooterGame.RadialMenuBase.GetItem // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ab59b0
};

// Class ShooterGame.RadialTargetingStateComponent
// Size: 0x3a0 (Inherited: 0x2e0)
struct URadialTargetingStateComponent : UScriptStateComponent {
	enum class ERadialTargetSourcePoint SourcePoint; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct FClassInclusionExclusionFilter TargetFilter; // 0x2e8(0x50)
	float Radius; // 0x338(0x04)
	enum class ECollisionChannel SearchCollision; // 0x33c(0x01)
	char pad_33D[0x3]; // 0x33d(0x03)
	float ConeAngle; // 0x340(0x04)
	float ConePullBack; // 0x344(0x04)
	bool bTwoDimensionalCone; // 0x348(0x01)
	bool bCheckLineOfSight; // 0x349(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x34a(0x01)
	enum class EAresTeamTargeting TeamFilter; // 0x34b(0x01)
	char pad_34C[0x48]; // 0x34c(0x48)
	bool bDrawDebugTargeting; // 0x394(0x01)
	char pad_395[0xb]; // 0x395(0x0b)
};

// Class ShooterGame.RankedAbilityChargeComponent
// Size: 0x1c8 (Inherited: 0x1a0)
struct URankedAbilityChargeComponent : UEquipmentChargeComponent {
	struct TArray<struct FRankChargeInfo> RankInfo; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnRankChanged; // 0x1b0(0x10)
	int32_t CurrentRank; // 0x1c0(0x04)
	int32_t RankBoughtThisRound; // 0x1c4(0x04)

	void OnRep_CurrentRank(); // Function ShooterGame.RankedAbilityChargeComponent.OnRep_CurrentRank // (Final|Native|Protected) // @ game+0x3ab5f20
	int32_t GetRankBoughtThisRound(); // Function ShooterGame.RankedAbilityChargeComponent.GetRankBoughtThisRound // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5ab0
	int32_t GetMaxRank(); // Function ShooterGame.RankedAbilityChargeComponent.GetMaxRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5a80
	int32_t GetCurrentRank(); // Function ShooterGame.RankedAbilityChargeComponent.GetCurrentRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5740
};

// Class ShooterGame.RateLimiterComponent
// Size: 0x118 (Inherited: 0xe8)
struct URateLimiterComponent : UActorComponent {
	struct FRateLimiter RateLimiter; // 0xe8(0x30)

	bool IsOnExtendedCooldown(struct UObject* WorldContextObject); // Function ShooterGame.RateLimiterComponent.IsOnExtendedCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5d70
	float GetExtendedCooldownTimeRemaining(struct UObject* WorldContextObject); // Function ShooterGame.RateLimiterComponent.GetExtendedCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5770
	bool AttemptAction(struct UObject* WorldContextObject); // Function ShooterGame.RateLimiterComponent.AttemptAction // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab56a0
};

// Class ShooterGame.ReadyingStateComponent
// Size: 0x4c8 (Inherited: 0x408)
struct UReadyingStateComponent : UTimedStateComponent {
	char pad_408[0x8]; // 0x408(0x08)
	struct FScriptStateEffectInfo ReadyingEffects[0x3]; // 0x410(0xa8)
	float ReadyingTimes[0x3]; // 0x4b8(0x0c)
	enum class EEquipSpeed AuthEquipSpeed; // 0x4c4(0x01)
	enum class EEquipSpeed LocallyPredictedEquipSpeed; // 0x4c5(0x01)
	bool bAlwaysFastEquipNormalSpeed; // 0x4c6(0x01)
	enum class EEquipSpeed EquipSpeedOverride; // 0x4c7(0x01)

	void SetAlwaysFastEquipOnNormalEquip(bool bShouldAlwaysFastEquipNormalSpeed); // Function ShooterGame.ReadyingStateComponent.SetAlwaysFastEquipOnNormalEquip // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab60b0
	void OverrideReadyingTimeForEquipSpeed(enum class EEquipSpeed EquipSpeedToOverride, float NewReadyingTime); // Function ShooterGame.ReadyingStateComponent.OverrideReadyingTimeForEquipSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab5fc0
	void OverrideNextEquipSpeed(enum class EEquipSpeed EquipSpeed); // Function ShooterGame.ReadyingStateComponent.OverrideNextEquipSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab5f40
	float GetUnmodifiedReadyingTime(enum class EEquipSpeed EquipSpeed); // Function ShooterGame.ReadyingStateComponent.GetUnmodifiedReadyingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ab5af0
	enum class EEquipSpeed GetLocallyPredictedEquipSpeed(); // Function ShooterGame.ReadyingStateComponent.GetLocallyPredictedEquipSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5a50
};

// Class ShooterGame.RecoilRecoveryComponent
// Size: 0x108 (Inherited: 0xe8)
struct URecoilRecoveryComponent : UActorComponent {
	float MaximumADSRecoveryPercentage; // 0xe8(0x04)
	char pad_EC[0x1c]; // 0xec(0x1c)

	void InitializeEventHandlers(struct UFiringStateComponent* FiringStateComponent); // Function ShooterGame.RecoilRecoveryComponent.InitializeEventHandlers // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab5ce0
	void HandleStopShooting(struct UFiringStateComponent* FiringStateComponent); // Function ShooterGame.RecoilRecoveryComponent.HandleStopShooting // (Final|Native|Protected) // @ game+0x3ab5c30
	void HandleStartedShooting(struct UFiringStateComponent* FiringStateComponent); // Function ShooterGame.RecoilRecoveryComponent.HandleStartedShooting // (Final|Native|Protected) // @ game+0x3ab5ba0
};

// Class ShooterGame.RecruitmentEventViewModel
// Size: 0x60 (Inherited: 0x48)
struct URecruitmentEventViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnRecruitmentEventChanged; // 0x48(0x10)
	struct URecruitmentEventModel* RecruitmentEvent; // 0x58(0x08)

	void SetRecruitmentEvent(struct URecruitmentEventModel* NewRecruitmentEvent); // Function ShooterGame.RecruitmentEventViewModel.SetRecruitmentEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x3ab6140
	void Refresh(); // Function ShooterGame.RecruitmentEventViewModel.Refresh // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab6090
	void OnRecruitmentEventUpdated(); // Function ShooterGame.RecruitmentEventViewModel.OnRecruitmentEventUpdated // (Final|Native|Private) // @ game+0x3ab5f00
	void Init(); // Function ShooterGame.RecruitmentEventViewModel.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x3ab5cc0
	struct URecruitmentEventModel* GetRecruitmentEvent(); // Function ShooterGame.RecruitmentEventViewModel.GetRecruitmentEvent // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x386ac50
};

// Class ShooterGame.ReflectedPlayerSettingsManager
// Size: 0x80 (Inherited: 0x30)
struct UReflectedPlayerSettingsManager : UObject {
	char pad_30[0x50]; // 0x30(0x50)

	void RemoveIntSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.RemoveIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ab5560
	void RemoveFloatSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.RemoveFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ab5560
	void RemoveBoolSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.RemoveBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ab5560
	int32_t GetIntSetting(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingEnum); // Function ShooterGame.ReflectedPlayerSettingsManager.GetIntSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab58e0
	float GetFloatSetting(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.ReflectedPlayerSettingsManager.GetFloatSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ab5810
	bool GetBoolSetting(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.ReflectedPlayerSettingsManager.GetBoolSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36f50d0
	void AddIntSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.AddIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ab5560
	void AddFloatSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.AddFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ab5560
	void AddBoolSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.AddBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ab5560
};

// Class ShooterGame.RelevantFogOfWarComponent
// Size: 0x320 (Inherited: 0x320)
struct URelevantFogOfWarComponent : UFogOfWarComponent {
};

// Class ShooterGame.ReloadStateComponent
// Size: 0x498 (Inherited: 0x3d0)
struct UReloadStateComponent : URespondToEventStateComponent {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct FMulticastInlineDelegate OnAmmoLoaded; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnReloadAnimationComplete; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnReloadSubstateEntered; // 0x3f8(0x10)
	enum class EMagazineEjectableBehavior MagazineEjectableBehavior; // 0x408(0x01)
	bool bReloadFullClip; // 0x409(0x01)
	char pad_40A[0x2]; // 0x40a(0x02)
	float IntroTime; // 0x40c(0x04)
	float LoadTime; // 0x410(0x04)
	float AnimationTime; // 0x414(0x04)
	struct FNoiseEventData NoiseEventData; // 0x418(0x38)
	struct TArray<struct FTriggerInput> ReloadTriggerInputs; // 0x450(0x10)
	int32_t ReloadAmountPerCycle; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UAmmoComponent* RegisteredAmmoComponent; // 0x468(0x08)
	struct UStateComponent* ReturnState; // 0x470(0x08)
	struct FReloadStateVariables ReloadStateVariables; // 0x478(0x18)
	struct AShooterCharacter* ReloadingCharacter; // 0x490(0x08)

	void UpdateLoadTime(float NewLoadTime); // Function ShooterGame.ReloadStateComponent.UpdateLoadTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3abd330
	void UpdateIntroTime(float NewIntroTime); // Function ShooterGame.ReloadStateComponent.UpdateIntroTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3abd2b0
	void UpdateAnimationTime(float NewAnimationTime); // Function ShooterGame.ReloadStateComponent.UpdateAnimationTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3abd230
	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.ReloadStateComponent.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x3abd050
	void SetResourceComponent(struct UAmmoComponent* AmmoComponent); // Function ShooterGame.ReloadStateComponent.SetResourceComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x39a8e00
	void PreventReloadChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ReloadStateComponent.PreventReloadChanged // (Final|Native|Private|HasOutParms) // @ game+0x3abccf0
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.ReloadStateComponent.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abc8b0
	bool IsSetToCycleReload(); // Function ShooterGame.ReloadStateComponent.IsSetToCycleReload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abc7f0
	bool IsAnyTriggerInputHeld(); // Function ShooterGame.ReloadStateComponent.IsAnyTriggerInputHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abc460
	void InterruptReloadWithNewState(struct UStateComponent* NewState, struct UStateTransitionContext* TransitionContext); // Function ShooterGame.ReloadStateComponent.InterruptReloadWithNewState // (Final|Native|Public|BlueprintCallable) // @ game+0x3abc390
	float GetReloadTimeModifier(); // Function ShooterGame.ReloadStateComponent.GetReloadTimeModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abbf50
	int32_t GetNumReloadCycles(); // Function ShooterGame.ReloadStateComponent.GetNumReloadCycles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abbf20
	struct UAmmoComponent* GetAmmoComponent(); // Function ShooterGame.ReloadStateComponent.GetAmmoComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abbdb0
	bool CanReload(enum class ECanReloadAmmoCheckOption AmmoCheckOption); // Function ShooterGame.ReloadStateComponent.CanReload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abba30
	bool AmmoCheck(); // Function ShooterGame.ReloadStateComponent.AmmoCheck // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3abba00
};

// Class ShooterGame.RemoteClientMovementComponent
// Size: 0x1e8 (Inherited: 0xe8)
struct URemoteClientMovementComponent : UActorComponent {
	struct UMovementTimeShiftMonitor* SharedRemoteTimeShiftMonitor; // 0xe8(0x08)
	int32_t NumRebases; // 0xf0(0x04)
	int32_t NumRebasesFromOverqueue; // 0xf4(0x04)
	bool DebugForceRebase; // 0xf8(0x01)
	char pad_F9[0x37]; // 0xf9(0x37)
	struct TSet<struct UShooterCharacterMovement*> RemoteCharacterMovementComponents; // 0x130(0x50)
	struct TArray<struct AShooterCharacter*> ShooterCharacterTickOrdering; // 0x180(0x10)
	struct UShooterCharacterMovement* MovementComponentWithMostUnprocessedQueuedMoves; // 0x190(0x08)
	char pad_198[0x50]; // 0x198(0x50)

	void OnRoundEnded(int32_t RoundNumberEnded); // Function ShooterGame.RemoteClientMovementComponent.OnRoundEnded // (Final|Native|Private) // @ game+0x3abcac0
	bool HasAnyRemoteClientTickedThisFrame(); // Function ShooterGame.RemoteClientMovementComponent.HasAnyRemoteClientTickedThisFrame // (Final|Native|Private|Const) // @ game+0x3abc360
};

// Class ShooterGame.RemoteNetworkedGameStateComponent
// Size: 0x158 (Inherited: 0xe8)
struct URemoteNetworkedGameStateComponent : UActorComponent {
	char pad_E8[0x50]; // 0xe8(0x50)
	struct TArray<struct AShooterCharacter*> RegisteredShooterCharacters; // 0x138(0x10)
	char pad_148[0x4]; // 0x148(0x04)
	float AllySendRatePerSecond; // 0x14c(0x04)
	char pad_150[0x8]; // 0x150(0x08)

	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.RemoteNetworkedGameStateComponent.OnRoundBegin // (Final|Native|Private) // @ game+0x3635550
	void AuthSuppressEnemyDataTransmission(bool bSuppress); // Function ShooterGame.RemoteNetworkedGameStateComponent.AuthSuppressEnemyDataTransmission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
};

// Class ShooterGame.TestFlowManager
// Size: 0x138 (Inherited: 0x30)
struct UTestFlowManager : UObject {
	char pad_30[0xf8]; // 0x30(0xf8)
	struct TArray<struct UAresPerformanceTest*> BlueprintCodeList; // 0x128(0x10)

	void StartCustomGame(); // Function ShooterGame.TestFlowManager.StartCustomGame // (Final|Native|Public) // @ game+0x3abd170
	void SetGameMode(); // Function ShooterGame.TestFlowManager.SetGameMode // (Final|Native|Public) // @ game+0x3abceb0
	void OnStartCustomGameError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.TestFlowManager.OnStartCustomGameError // (Final|Native|Public) // @ game+0x3abcb50
	void OnGameStateChanged(enum class EGameFlowStateType NewGameStateType); // Function ShooterGame.TestFlowManager.OnGameStateChanged // (Final|Native|Public) // @ game+0x3abca40
	void OnCustomGameDisassociateSuccess(); // Function ShooterGame.TestFlowManager.OnCustomGameDisassociateSuccess // (Final|Native|Public) // @ game+0x3abca20
	void OnConvertCustomGameSuccess(); // Function ShooterGame.TestFlowManager.OnConvertCustomGameSuccess // (Final|Native|Public) // @ game+0x3abca00
	void OnConvertCustomGameError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.TestFlowManager.OnConvertCustomGameError // (Final|Native|Public) // @ game+0x3abc980
};

// Class ShooterGame.AresPerformanceTest
// Size: 0x40 (Inherited: 0x38)
struct UAresPerformanceTest : UObjectWithWorldContext {
	char pad_38[0x8]; // 0x38(0x08)

	void TriggerCapture(); // Function ShooterGame.AresPerformanceTest.TriggerCapture // (Final|Native|Public|BlueprintCallable) // @ game+0x3abd210
	void OnStartTest(struct AShooterPlayerController* ShooterPlayerController); // Function ShooterGame.AresPerformanceTest.OnStartTest // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnPreCapture(struct AShooterPlayerController* ShooterPlayerController, int32_t CaptureIndex, struct FVector Location, struct FRotator Rotation); // Function ShooterGame.AresPerformanceTest.OnPreCapture // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.PerformanceCaptureLocationActor
// Size: 0x410 (Inherited: 0x3d8)
struct APerformanceCaptureLocationActor : AActor {
	struct FString TestName; // 0x3d8(0x10)
	struct TArray<struct FString> CharacterNames; // 0x3e8(0x10)
	struct TArray<struct FTransform> Transforms; // 0x3f8(0x10)
	struct UAresPerformanceTest* TestType; // 0x408(0x08)
};

// Class ShooterGame.ReplayBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UReplayBlueprintLibrary : UBlueprintFunctionLibrary {

	void ToggleReplayPause(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.ToggleReplayPause // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3abd190
	bool ShouldRecordMatch(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.ShouldRecordMatch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abd0e0
	void SetReplaySpeed(struct UObject* WorldContextObject, float Speed); // Function ShooterGame.ReplayBlueprintLibrary.SetReplaySpeed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3abcf90
	void SetReplayPaused(struct UObject* WorldContextObject, bool bShouldPause); // Function ShooterGame.ReplayBlueprintLibrary.SetReplayPaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3abced0
	void PlayJanusByMatchID(struct UObject* WorldContextObject, struct FString MatchID, enum class EJanusStreamerUsed StreamerToUse); // Function ShooterGame.ReplayBlueprintLibrary.PlayJanusByMatchID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3abcbd0
	bool IsTimeScrubbingEnabled(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsTimeScrubbingEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc820
	bool IsReplaySystemEnabled(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplaySystemEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc760
	bool IsReplayRecording(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayRecording // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc6d0
	bool IsReplayPlaying(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayPlaying // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc640
	bool IsReplayPaused(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc5b0
	bool IsReplayLive(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayLive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc520
	bool IsJanusPlaybackEnabled(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsJanusPlaybackEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc490
	bool GotoTimeInReplay(struct UObject* WorldContextObject, float TimeInSeconds); // Function ShooterGame.ReplayBlueprintLibrary.GotoTimeInReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3abc290
	bool GotoRound(struct UObject* WorldContextObject, int32_t Round); // Function ShooterGame.ReplayBlueprintLibrary.GotoRound // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc1c0
	float GetReplayTotalTime(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.GetReplayTotalTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc130
	float GetReplaySpeed(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.GetReplaySpeed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc0a0
	float GetReplayCurrentTime(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.GetReplayCurrentTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abbf80
	float GetBestMatchedCheckpointForRoundJump(struct TArray<struct FJanusEventResponse>& EventList, int32_t Round); // Function ShooterGame.ReplayBlueprintLibrary.GetBestMatchedCheckpointForRoundJump // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3abbde0
	struct TArray<struct FJanusEventResponse> FilterJanusEventList(struct TArray<struct FJanusEventResponse>& FullEventList, struct TArray<struct FString>& Filters); // Function ShooterGame.ReplayBlueprintLibrary.FilterJanusEventList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3abbb50
	bool CanShowRecordMatchOption(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.CanShowRecordMatchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abbac0
};

// Class ShooterGame.ReplayCatalogManager
// Size: 0x98 (Inherited: 0x80)
struct UReplayCatalogManager : UInitSystem {
	struct URSOManager* RSOManager; // 0x80(0x08)
	struct UReplayCatalogService* ReplayCatalogService; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)

	struct UReplayCatalogManager* GetReplayManager(struct UObject* WorldContextObject); // Function ShooterGame.ReplayCatalogManager.GetReplayManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3abc010
};

// Class ShooterGame.ReplayCatalogService
// Size: 0x38 (Inherited: 0x30)
struct UReplayCatalogService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ReplayEffectComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UReplayEffectComponent : UActorComponent {

	void ReplayStopContinuousEffectAtLocation(struct FEffectID EffectID, float StopMovementTime); // Function ShooterGame.ReplayEffectComponent.ReplayStopContinuousEffectAtLocation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3ac4fd0
	void ReplayPlayOneShotEffectAtLocation(struct AEffectContainer* EffectContainer, struct UObject* EffectContext, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, enum class EAresAlliance AllianceFilter, float StartMovementTime); // Function ShooterGame.ReplayEffectComponent.ReplayPlayOneShotEffectAtLocation // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x3ac4700
	void ReplayPlayContinuousEffectAtLocation(struct AEffectContainer* EffectContainer, struct FEffectID CurrentEffectID, struct UObject* EffectContext, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, enum class EAresAlliance AllianceFilter, float StartMovementTime); // Function ShooterGame.ReplayEffectComponent.ReplayPlayContinuousEffectAtLocation // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x3ac4180
};

// Class ShooterGame.ReplayGameEventReceiver
// Size: 0x30 (Inherited: 0x30)
struct UReplayGameEventReceiver : UObject {

	void HandleRoundStarted(int32_t RoundNumber); // Function ShooterGame.ReplayGameEventReceiver.HandleRoundStarted // (Final|Native|Private) // @ game+0x3ac3d10
};

// Class ShooterGame.ReplayPlayerController
// Size: 0xb70 (Inherited: 0xab8)
struct AReplayPlayerController : AObserverPlayerController {
	char pad_AB8[0x8]; // 0xab8(0x08)
	struct APlayerState* JanusPlayerStateClass; // 0xac0(0x08)
	struct FMulticastInlineDelegate OnScrubComplete; // 0xac8(0x10)
	struct FMulticastInlineDelegate OnTimeScrubEnabledStatusChanged; // 0xad8(0x10)
	struct FMulticastInlineDelegate OnOptionsScreenToggled; // 0xae8(0x10)
	struct UBaseInputToolingComponent* BaseInputToolingComponent; // 0xaf8(0x08)
	struct ASpectatorPawn* JanusPawn; // 0xb00(0x08)
	struct AShooterHUD* ShooterHUDAsset; // 0xb08(0x08)
	char pad_B10[0x60]; // 0xb10(0x60)

	void ShowUI(int32_t Show); // Function ShooterGame.ReplayPlayerController.ShowUI // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetSlowSpeed(float Value); // Function ShooterGame.ReplayPlayerController.SetSlowSpeed // (Final|Exec|Native|Public) // @ game+0x36a0b30
	void SetFastSpeed(float Value); // Function ShooterGame.ReplayPlayerController.SetFastSpeed // (Final|Exec|Native|Public) // @ game+0x36a0b30
	void ReplayReceiveRemoteCharacterUpdatesSingleArrayNoAutonomous(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates); // Function ShooterGame.ReplayPlayerController.ReplayReceiveRemoteCharacterUpdatesSingleArrayNoAutonomous // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3ac4f00
	void ReplayReceiveRemoteCharacterUpdatesSingleArray(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates, struct FComponentDataStream AutonomousComponentDataStream); // Function ShooterGame.ReplayPlayerController.ReplayReceiveRemoteCharacterUpdatesSingleArray // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3ac4dd0
	void ReplayReceiveRemoteCharacterUpdates(struct TArray<struct FRemoteCharacterUpdate> AllyRemoteCharacterUpdates, struct TArray<struct FRemoteCharacterUpdate> EnemyAndNeutralRemoteCharacterUpdates, struct FComponentDataStream AutonomousComponentDataStream); // Function ShooterGame.ReplayPlayerController.ReplayReceiveRemoteCharacterUpdates // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3ac4c10
	void OnTargetStateReplicated(struct AShooterCharacter* PossessedCharacter); // Function ShooterGame.ReplayPlayerController.OnTargetStateReplicated // (Final|Native|Private) // @ game+0x3ac40f0
	void OnReplayJumpComplete(struct UWorld* World); // Function ShooterGame.ReplayPlayerController.OnReplayJumpComplete // (Final|Native|Private) // @ game+0x3ac4040
	void OnOptionsVisibilityChanged(bool bIsVisible); // Function ShooterGame.ReplayPlayerController.OnOptionsVisibilityChanged // (Final|Native|Private) // @ game+0x3ac3f50
	void OnFreeCamToggled(bool bFreeCamEnabled); // Function ShooterGame.ReplayPlayerController.OnFreeCamToggled // (Final|Native|Private) // @ game+0x3ac3ec0
	bool IsTimeScrubbingEnabled(); // Function ShooterGame.ReplayPlayerController.IsTimeScrubbingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ac3dd0
	void ExitPlayback(); // Function ShooterGame.ReplayPlayerController.ExitPlayback // (Final|Native|Private|BlueprintCallable) // @ game+0x3ac3960
	void ClearStateOnSpectateSpecific(); // Function ShooterGame.ReplayPlayerController.ClearStateOnSpectateSpecific // (Final|Native|Private) // @ game+0x3ac38a0
};

// Class ShooterGame.ReplayPlayerState
// Size: 0x6e0 (Inherited: 0x6e0)
struct AReplayPlayerState : AObserverPlayerState {
};

// Class ShooterGame.ReplicationSleepComponent
// Size: 0x118 (Inherited: 0xe8)
struct UReplicationSleepComponent : UActorComponent {
	enum class EReplicationSleepWhen SleepWhen; // 0xe8(0x01)
	bool bIgnoreSleepingChanges; // 0xe9(0x01)
	char pad_EA[0x2]; // 0xea(0x02)
	float SleepingUpdateRate; // 0xec(0x04)
	float TimeToSleep; // 0xf0(0x04)
	char pad_F4[0xc]; // 0xf4(0x0c)
	struct FTimerHandle BeginSleepTimerHandle; // 0x100(0x08)
	struct FTimerHandle ChangesTimerHandle; // 0x108(0x08)
	enum class EReplicationSleepState SleepState; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float LastValidChangeTime; // 0x114(0x04)

	void RequestSleep(); // Function ShooterGame.ReplicationSleepComponent.RequestSleep // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3ac5190
	void RequestAwake(); // Function ShooterGame.ReplicationSleepComponent.RequestAwake // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3ac5170
	void NetUpdateForced(struct AActor* Actor); // Function ShooterGame.ReplicationSleepComponent.NetUpdateForced // (Final|Native|Private) // @ game+0x3ac3e00
	enum class EReplicationSleepState GetSleepState(); // Function ShooterGame.ReplicationSleepComponent.GetSleepState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x399fe00
};

// Class ShooterGame.ReporterFeedbackManager
// Size: 0x1b8 (Inherited: 0x80)
struct UReporterFeedbackManager : UInitSystem {
	char pad_80[0x120]; // 0x80(0x120)
	struct UReporterFeedbackService* ReporterFeedbackService; // 0x1a0(0x08)
	struct UModalManager* ModalManager; // 0x1a8(0x08)
	struct UConfigManager* ConfigManager; // 0x1b0(0x08)

	void HandleReporterFeedbackDialogAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.ReporterFeedbackManager.HandleReporterFeedbackDialogAction // (Final|Native|Public) // @ game+0x3ac3c40
	struct UReporterFeedbackManager* GetReporterFeedbackManager(struct UObject* WorldContextObject); // Function ShooterGame.ReporterFeedbackManager.GetReporterFeedbackManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ac3af0
};

// Class ShooterGame.ReporterFeedbackService
// Size: 0x38 (Inherited: 0x30)
struct UReporterFeedbackService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ResetForRespawnInterface
// Size: 0x30 (Inherited: 0x30)
struct UResetForRespawnInterface : UInterface {

	void OneTimeInitialization(); // Function ShooterGame.ResetForRespawnInterface.OneTimeInitialization // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x39cc7e0
	void InitializeForRespawn(); // Function ShooterGame.ResetForRespawnInterface.InitializeForRespawn // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2627c10
	void CleanupForRespawn(); // Function ShooterGame.ResetForRespawnInterface.CleanupForRespawn // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2627e80
};

// Class ShooterGame.ResourceVisualizationComponent
// Size: 0x108 (Inherited: 0xe8)
struct UResourceVisualizationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnVisualizationChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnIconChanged; // 0xf8(0x10)

	struct UTexture2D* GetIcon(); // Function ShooterGame.ResourceVisualizationComponent.GetIcon // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ac3ab0
	struct FAmmoHudInfo GetAmmoHudInfo(bool& bOutIsValid); // Function ShooterGame.ResourceVisualizationComponent.GetAmmoHudInfo // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3ac39b0
};

// Class ShooterGame.AmmoResourceVisualizationComponent
// Size: 0x110 (Inherited: 0x108)
struct UAmmoResourceVisualizationComponent : UResourceVisualizationComponent {
	struct UAmmoComponent* AmmoComponent; // 0x108(0x08)

	void SetAmmoComponent(struct UAmmoComponent* ResourceComponent); // Function ShooterGame.AmmoResourceVisualizationComponent.SetAmmoComponent // (Final|Native|Private|BlueprintCallable) // @ game+0x3ac51b0
	void HandleAmmoChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.AmmoResourceVisualizationComponent.HandleAmmoChanged // (Final|Native|Private) // @ game+0x3ac3bb0
	struct UAmmoComponent* GetAmmoComponent(); // Function ShooterGame.AmmoResourceVisualizationComponent.GetAmmoComponent // (Final|Native|Private|BlueprintCallable|BlueprintPure) // @ game+0x3ac3980
};

// Class ShooterGame.BlueprintResourceVisualizationComponent
// Size: 0x138 (Inherited: 0x108)
struct UBlueprintResourceVisualizationComponent : UResourceVisualizationComponent {
	struct FAmmoHudInfo PredictedAmmoHudInfo; // 0x108(0x10)
	struct FAmmoHudInfo AuthAmmoHudInfo; // 0x118(0x10)
	struct UTexture2D* Icon; // 0x128(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x130(0x08)

	void SyncToAuthValues(); // Function ShooterGame.BlueprintResourceVisualizationComponent.SyncToAuthValues // (Final|Native|Protected) // @ game+0x3ac40d0
	void SetIcon(struct UTexture2D* NewIcon); // Function ShooterGame.BlueprintResourceVisualizationComponent.SetIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x3ac52d0
	void SetAmmoHudInfo(struct FAmmoHudInfo NewAmmoHudInfo); // Function ShooterGame.BlueprintResourceVisualizationComponent.SetAmmoHudInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3ac5240
	void OnStableValueDisagreement(); // Function ShooterGame.BlueprintResourceVisualizationComponent.OnStableValueDisagreement // (Final|Native|Protected) // @ game+0x3ac40d0
	void OnRep_Icon(); // Function ShooterGame.BlueprintResourceVisualizationComponent.OnRep_Icon // (Final|Native|Protected) // @ game+0x3ac4020
	void OnRep_AuthAmmoHudInfo(); // Function ShooterGame.BlueprintResourceVisualizationComponent.OnRep_AuthAmmoHudInfo // (Final|Native|Protected) // @ game+0x3ac3fe0
	bool IsAboveValueDisagreementThreshold(); // Function ShooterGame.BlueprintResourceVisualizationComponent.IsAboveValueDisagreementThreshold // (Final|Native|Protected|Const) // @ game+0x3ac3da0
};

// Class ShooterGame.RestrictionsManager
// Size: 0x308 (Inherited: 0x80)
struct URestrictionsManager : UInitSystem {
	struct FMulticastInlineDelegate OnQueueRestrictionChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPremierRestrictionChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnPenalizedPlayersChanged; // 0xa0(0x10)
	char pad_B0[0x228]; // 0xb0(0x228)
	struct URestrictionsService* RestrictionsService; // 0x2d8(0x08)
	struct URSOManager* RSOManager; // 0x2e0(0x08)
	struct URMSManager* RMSManager; // 0x2e8(0x08)
	struct UConfigManager* ConfigManager; // 0x2f0(0x08)
	struct UModalManager* ModalManager; // 0x2f8(0x08)
	char pad_300[0x8]; // 0x300(0x08)

	void RemoveAvoidListEntry(struct FString EntrySubject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.RestrictionsManager.RemoveAvoidListEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x3ace7e0
	bool IsOnAvoidList(struct FString Subject); // Function ShooterGame.RestrictionsManager.IsOnAvoidList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ace470
	bool HasQueueRestriction(struct FString QueueID); // Function ShooterGame.RestrictionsManager.HasQueueRestriction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ace370
	bool HasActivePremierRestriction(); // Function ShooterGame.RestrictionsManager.HasActivePremierRestriction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ace340
	void HandleRestrictionsWarningDialogAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.RestrictionsManager.HandleRestrictionsWarningDialogAction // (Final|Native|Private) // @ game+0x3ace270
	struct URestrictionsManager* GetRestrictionsManager(struct UObject* WorldContextObject); // Function ShooterGame.RestrictionsManager.GetRestrictionsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ace010
	struct FDateTime GetQueueRestrictionExpiry(struct FString QueueID); // Function ShooterGame.RestrictionsManager.GetQueueRestrictionExpiry // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3acdf00
	struct FString GetPenalizedMatchID(); // Function ShooterGame.RestrictionsManager.GetPenalizedMatchID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3acde80
	struct TArray<enum class EInfractionType> GetInfractionsForSubject(struct FString Puuid); // Function ShooterGame.RestrictionsManager.GetInfractionsForSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3acdd10
	void AddAvoidListEntry(struct FString EntrySubject, struct FString MatchID, struct FString QueueID, bool OverrideEnabled, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.RestrictionsManager.AddAvoidListEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x3acce50
};

// Class ShooterGame.RestrictionsService
// Size: 0x40 (Inherited: 0x30)
struct URestrictionsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
	struct URSOManager* RSOManager; // 0x38(0x08)
};

// Class ShooterGame.ResurrectPlayerSpawner
// Size: 0x50 (Inherited: 0x48)
struct UResurrectPlayerSpawner : UDynamicLocationPlayerSpawner {
	char pad_48[0x8]; // 0x48(0x08)

	void SetResurrector(struct AOwnerExclusivePlayerInfo* ResurrectorPlayerInfo); // Function ShooterGame.ResurrectPlayerSpawner.SetResurrector // (Final|Native|Public|BlueprintCallable) // @ game+0x3ad84e0
	struct AOwnerExclusivePlayerInfo* GetResurrector(); // Function ShooterGame.ResurrectPlayerSpawner.GetResurrector // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6710
	struct UResurrectPlayerSpawner* CreateResurrectSpawner(); // Function ShooterGame.ResurrectPlayerSpawner.CreateResurrectSpawner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3ad7650
};

// Class ShooterGame.ReusableHitScanProjectileComponent
// Size: 0x138 (Inherited: 0xe8)
struct UReusableHitScanProjectileComponent : UActorComponent {
	struct FProjectileTuning ProjectileTuning; // 0xe8(0x28)
	float ErrorPower; // 0x110(0x04)
	int32_t ErrorRetries; // 0x114(0x04)
	int32_t RoundsBetweenTracers; // 0x118(0x04)
	int32_t RoundsBetweenImpacts; // 0x11c(0x04)
	int32_t RoundsUntilNextTracer; // 0x120(0x04)
	int32_t RoundsUntilNextImpact; // 0x124(0x04)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x128(0x08)
	struct AProjectile* ReusableHitScanProjectile; // 0x130(0x08)

	void FireProjectiles(struct UStabilityComponent* StabilityComponent, struct FVector& FiringLocation, struct FVector FiringDirection, struct AShooterPlayerState* FiringPlayerState); // Function ShooterGame.ReusableHitScanProjectileComponent.FireProjectiles // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3ad7680
};

// Class ShooterGame.RewardGrantModelFactory
// Size: 0x38 (Inherited: 0x30)
struct URewardGrantModelFactory : UObject {
	struct UContentIndex* ContentIndex; // 0x30(0x08)
};

// Class ShooterGame.RewardModel
// Size: 0x30 (Inherited: 0x30)
struct URewardModel : UObject {
};

// Class ShooterGame.EntitlementRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UEntitlementRewardModel : URewardModel {
	int32_t Amount; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UAresBasePrimaryDataAsset* DataAssetAsBaseType; // 0x38(0x08)

	enum class EAresContentType GetContentType(); // Function ShooterGame.EntitlementRewardModel.GetContentType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7890
	struct UAresBasePrimaryDataAsset* GetBaseDataAsset(); // Function ShooterGame.EntitlementRewardModel.GetBaseDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3890b30
	int32_t GetAmount(); // Function ShooterGame.EntitlementRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856c00
};

// Class ShooterGame.EquippableSkinRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableSkinRewardModel : UEntitlementRewardModel {

	struct UEquippableSkinDataAsset* GetDataAsset(); // Function ShooterGame.EquippableSkinRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad79b0
};

// Class ShooterGame.CharacterRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UCharacterRewardModel : UEntitlementRewardModel {

	struct UCharacterDataAsset* GetDataAsset(); // Function ShooterGame.CharacterRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad78c0
};

// Class ShooterGame.EquippableCharmLevelRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableCharmLevelRewardModel : UEntitlementRewardModel {

	struct UEquippableCharmLevelDataAsset* GetDataAsset(); // Function ShooterGame.EquippableCharmLevelRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7920
};

// Class ShooterGame.EquippableSkinLevelRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableSkinLevelRewardModel : UEntitlementRewardModel {

	struct UEquippableSkinLevelDataAsset* GetDataAsset(); // Function ShooterGame.EquippableSkinLevelRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7980
};

// Class ShooterGame.EquippableSkinChromaRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableSkinChromaRewardModel : UEntitlementRewardModel {

	struct UEquippableSkinChromaDataAsset* GetDataAsset(); // Function ShooterGame.EquippableSkinChromaRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7950
};

// Class ShooterGame.EquippableAttachmentRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableAttachmentRewardModel : UEntitlementRewardModel {

	struct UEquippableAttachmentDataAsset* GetDataAsset(); // Function ShooterGame.EquippableAttachmentRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad78f0
};

// Class ShooterGame.SprayRewardModel
// Size: 0x40 (Inherited: 0x40)
struct USprayRewardModel : UEntitlementRewardModel {

	struct USprayDataAsset* GetDataAsset(); // Function ShooterGame.SprayRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7a40
};

// Class ShooterGame.PlayerCardRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UPlayerCardRewardModel : UEntitlementRewardModel {

	struct UPlayerCardDataAsset* GetDataAsset(); // Function ShooterGame.PlayerCardRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad79e0
};

// Class ShooterGame.PlayerTitleRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UPlayerTitleRewardModel : UEntitlementRewardModel {

	struct UPlayerTitleDataAsset* GetDataAsset(); // Function ShooterGame.PlayerTitleRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7a10
};

// Class ShooterGame.WalletRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UWalletRewardModel : URewardModel {
	struct UCurrencyDataAsset* CurrencyDataAsset; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct UCurrencyDataAsset* GetCurrency(); // Function ShooterGame.WalletRewardModel.GetCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c60
	int32_t GetAmount(); // Function ShooterGame.WalletRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9200
};

// Class ShooterGame.JuiceBoxRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UJuiceBoxRewardModel : URewardModel {
	struct UJuiceBoxDataAsset* JuiceBoxDataAsset; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct UJuiceBoxDataAsset* GetJuiceBox(); // Function ShooterGame.JuiceBoxRewardModel.GetJuiceBox // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c60
	int32_t GetAmount(); // Function ShooterGame.JuiceBoxRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9200
};

// Class ShooterGame.JuiceContentRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UJuiceContentRewardModel : URewardModel {
	struct UEquippableSkinDataAsset* EquippableSkinDataAsset; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct UEquippableSkinDataAsset* GetDataAsset(); // Function ShooterGame.JuiceContentRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c60
	int32_t GetAmount(); // Function ShooterGame.JuiceContentRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39b9200
};

// Class ShooterGame.RewardGrantModel
// Size: 0x50 (Inherited: 0x30)
struct URewardGrantModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct TArray<struct URewardModel*> RewardModels; // 0x40(0x10)

	struct TArray<struct UWalletRewardModel*> GetWalletRewardModels(); // Function ShooterGame.RewardGrantModel.GetWalletRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7f60
	struct TArray<struct USprayRewardModel*> GetSprayRewardModels(); // Function ShooterGame.RewardGrantModel.GetSprayRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7ee0
	struct TArray<struct URewardModel*> GetRewardModels(); // Function ShooterGame.RewardGrantModel.GetRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7df0
	struct TArray<struct UPlayerTitleRewardModel*> GetPlayerTitleRewardModels(); // Function ShooterGame.RewardGrantModel.GetPlayerTitleRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7d70
	struct TArray<struct UPlayerCardRewardModel*> GetPlayerCardRewardModels(); // Function ShooterGame.RewardGrantModel.GetPlayerCardRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7cf0
	struct TArray<struct UEquippableSkinRewardModel*> GetEquippableSkinRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableSkinRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7c70
	struct TArray<struct UEquippableSkinLevelRewardModel*> GetEquippableSkinLevelRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableSkinLevelRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7bf0
	struct TArray<struct UEquippableSkinChromaRewardModel*> GetEquippableSkinChromaRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableSkinChromaRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7b70
	struct TArray<struct UEquippableAttachmentRewardModel*> GetEquippableAttachmentRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableAttachmentRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7af0
	struct TArray<struct UEntitlementRewardModel*> GetEntitlementRewardModels(); // Function ShooterGame.RewardGrantModel.GetEntitlementRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7a70
	struct TArray<struct UCharacterRewardModel*> GetCharacterRewardModels(); // Function ShooterGame.RewardGrantModel.GetCharacterRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ad7810
};

// Class ShooterGame.WalletCostModel
// Size: 0x40 (Inherited: 0x30)
struct UWalletCostModel : UObject {
	int32_t AmountToDeduct; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UCurrencyDataAsset* CurrencyDataAsset; // 0x38(0x08)

	struct UCurrencyDataAsset* GetCurrency(); // Function ShooterGame.WalletCostModel.GetCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3861260
};

// Class ShooterGame.CostModel
// Size: 0x40 (Inherited: 0x30)
struct UCostModel : UObject {
	struct TArray<struct UWalletCostModel*> WalletCosts; // 0x30(0x10)
};

// Class ShooterGame.InventoryChangeModel
// Size: 0x40 (Inherited: 0x30)
struct UInventoryChangeModel : UObject {
	struct URewardGrantModel* Rewards; // 0x30(0x08)
	struct UCostModel* Costs; // 0x38(0x08)
};

// Class ShooterGame.RewindableGameObject
// Size: 0x418 (Inherited: 0x410)
struct ARewindableGameObject : AGameObject {
	struct UServerRewindComponent* ServerRewindComponent; // 0x410(0x08)
};

// Class ShooterGame.RewindableInterface
// Size: 0x30 (Inherited: 0x30)
struct URewindableInterface : UInterface {
};

// Class ShooterGame.RewindComponent
// Size: 0x110 (Inherited: 0xe8)
struct URewindComponent : UActorComponent {
	float MaxAllowableRewindTime; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FIdempotentRewindable> SimpleRewindables; // 0xf0(0x10)
	struct TArray<struct FIdempotentRewindable> ComplexRewindables; // 0x100(0x10)
};

// Class ShooterGame.RGICommonNavBarEntry
// Size: 0x30 (Inherited: 0x30)
struct URGICommonNavBarEntry : UInterface {

	void SetEntryData(struct FWildcard Data); // Function ShooterGame.RGICommonNavBarEntry.SetEntryData // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.RGICommonNavBar
// Size: 0x448 (Inherited: 0x398)
struct URGICommonNavBar : UAresCommonActivatableWidget {
	bool bRequiresSelection; // 0x398(0x01)
	bool bRequiresManualInitialization; // 0x399(0x01)
	char pad_39A[0x2]; // 0x39a(0x02)
	int32_t DefaultSelectedIndex; // 0x39c(0x04)
	struct TArray<struct FRGICommonNavBarDetails> DefaultNavBarDetails; // 0x3a0(0x10)
	struct FMargin NavButtonPadding; // 0x3b0(0x10)
	bool bShouldSelectNavButtonsOnFocus; // 0x3c0(0x01)
	bool bShouldFocusNavButtonsOnSelect; // 0x3c1(0x01)
	bool bOnlyChangeFocusOnSelectWhenGroupHasFocus; // 0x3c2(0x01)
	bool bShouldLoopDirectionalNavigation; // 0x3c3(0x01)
	bool bShouldLoopManualNavigation; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)
	struct FMulticastInlineDelegate OnNavButtonSelected; // 0x3c8(0x10)
	struct FDataTableRowHandle ForwardsInputAction; // 0x3d8(0x18)
	struct FDataTableRowHandle BackwardsInputAction; // 0x3f0(0x18)
	struct TArray<struct UAresCommonButton*> NavButtons; // 0x408(0x10)
	int32_t SelectedIndex; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct UAresCommonButtonGroup* ButtonGroup; // 0x420(0x08)
	struct UPanelWidget* NavButtonContainer; // 0x428(0x08)
	struct UAresCommonActionWidget* ForwardsInputActionWidget; // 0x430(0x08)
	struct UAresCommonActionWidget* BackwardsInputActionWidget; // 0x438(0x08)
	char pad_440[0x8]; // 0x440(0x08)

	void SetSelectedIndex(int32_t Index); // Function ShooterGame.RGICommonNavBar.SetSelectedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3ad8570
	void SetNavButtonFocus(int32_t NavButtonIndex); // Function ShooterGame.RGICommonNavBar.SetNavButtonFocus // (Final|Native|Public|BlueprintCallable) // @ game+0x3ad8450
	void OnNavButtonSelectionChanged(struct UAresCommonButton* Button, int32_t Index); // Function ShooterGame.RGICommonNavBar.OnNavButtonSelectionChanged // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnNavButtonClicked(struct UAresCommonButton* Button, int32_t Index); // Function ShooterGame.RGICommonNavBar.OnNavButtonClicked // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnInputMethodChanged(enum class ECommonInputType CurrentInputType); // Function ShooterGame.RGICommonNavBar.OnInputMethodChanged // (Native|Protected) // @ game+0x3ad83c0
	void NavigateToPreviousNavButton(); // Function ShooterGame.RGICommonNavBar.NavigateToPreviousNavButton // (Final|Native|Public|BlueprintCallable) // @ game+0x3ad83a0
	void NavigateToNextNavButton(); // Function ShooterGame.RGICommonNavBar.NavigateToNextNavButton // (Final|Native|Public|BlueprintCallable) // @ game+0x3ad8380
	void InternalOnNavButtonSelectionChanged(struct UCommonButtonBase* Button, int32_t Index); // Function ShooterGame.RGICommonNavBar.InternalOnNavButtonSelectionChanged // (Native|Protected) // @ game+0x3ad82a0
	void InternalOnNavButtonClicked(struct UCommonButtonBase* Button, int32_t Index); // Function ShooterGame.RGICommonNavBar.InternalOnNavButtonClicked // (Native|Protected) // @ game+0x3ad81c0
	void InitializeNavButtons(struct TArray<struct FRGICommonNavBarDetails>& Details, int32_t InitialIndex, bool bActivateWidget); // Function ShooterGame.RGICommonNavBar.InitializeNavButtons // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3ad8000
	void InitializeDefaultNavButtons(); // Function ShooterGame.RGICommonNavBar.InitializeDefaultNavButtons // (Final|Native|Public|BlueprintCallable) // @ game+0x3ad7fe0
	struct UAresCommonButton* GetSelectedButton(); // Function ShooterGame.RGICommonNavBar.GetSelectedButton // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ad7eb0
	struct UAresCommonButton* CreateNavButton(int32_t NavButtonIndex, struct FRGICommonNavBarDetails Details); // Function ShooterGame.RGICommonNavBar.CreateNavButton // (Native|Event|Public|BlueprintEvent) // @ game+0x3ad7460
	void ConstructWithDesignTimePreview(); // Function ShooterGame.RGICommonNavBar.ConstructWithDesignTimePreview // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AddNavButtonToScreen(int32_t NavButtonIndex, struct UAresCommonButton* NavButton, struct FRGICommonNavBarDetails Details); // Function ShooterGame.RGICommonNavBar.AddNavButtonToScreen // (Native|Event|Public|BlueprintEvent) // @ game+0x3ad7230
};

// Class ShooterGame.RightGripUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URightGripUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RiotClientConfigManager
// Size: 0x128 (Inherited: 0x80)
struct URiotClientConfigManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URiotClientConfigService* RiotClientConfigService; // 0x88(0x08)
	char pad_90[0x98]; // 0x90(0x98)

	struct URiotClientConfigManager* GetRiotClientConfigManager(struct UObject* WorldContextObject); // Function ShooterGame.RiotClientConfigManager.GetRiotClientConfigManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ae4430
};

// Class ShooterGame.RiotClientConfigService
// Size: 0x38 (Inherited: 0x30)
struct URiotClientConfigService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RiotClientHeartbeatManager
// Size: 0xc0 (Inherited: 0x80)
struct URiotClientHeartbeatManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x88(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x90(0x08)
	struct URiotClientSessionService* RiotClientSessionService; // 0x98(0x08)
	char pad_A0[0x10]; // 0xa0(0x10)
	struct FString AuthToken; // 0xb0(0x10)

	void HeartbeatInGame(); // Function ShooterGame.RiotClientHeartbeatManager.HeartbeatInGame // (Final|Native|Private) // @ game+0x3ae4960
	void HeartbeatIdle(); // Function ShooterGame.RiotClientHeartbeatManager.HeartbeatIdle // (Final|Native|Private) // @ game+0x3ae4940
	void HandleGameState(enum class EGameFlowStateType StateType); // Function ShooterGame.RiotClientHeartbeatManager.HandleGameState // (Final|Native|Private) // @ game+0x3ae4830
};

// Class ShooterGame.MonitoredRiotClient
// Size: 0x170 (Inherited: 0x30)
struct UMonitoredRiotClient : UObject {
	struct URNetClient* Client; // 0x30(0x08)
	char pad_38[0x138]; // 0x38(0x138)
};

// Class ShooterGame.RiotClientStartupMonitor
// Size: 0x68 (Inherited: 0x30)
struct URiotClientStartupMonitor : UObject {
	struct TArray<struct UMonitoredRiotClient*> WatchedClients; // 0x30(0x10)
	char pad_40[0x28]; // 0x40(0x28)
};

// Class ShooterGame.RiotClientManager
// Size: 0x50 (Inherited: 0x30)
struct URiotClientManager : UObject {
	struct UTestAccountsManager* TestAccountsManager; // 0x30(0x08)
	struct TArray<struct URNetClient*> ConnectedClients; // 0x38(0x10)
	struct URiotClientStartupMonitor* StartupMonitor; // 0x48(0x08)
};

// Class ShooterGame.RiotClientManagerProvider
// Size: 0x30 (Inherited: 0x30)
struct URiotClientManagerProvider : UInterface {
};

// Class ShooterGame.RiotClientSessionService
// Size: 0x38 (Inherited: 0x30)
struct URiotClientSessionService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RiotGamesApiClient
// Size: 0x198 (Inherited: 0x80)
struct URiotGamesApiClient : UInitSystem {
	char pad_80[0x88]; // 0x80(0x88)
	struct URiotGamesApiLogin* RiotLoginHelper; // 0x108(0x08)
	struct URNetStub* RNetStub; // 0x110(0x08)
	struct URiotProductManager* RiotProductManager; // 0x118(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x120(0x08)
	char pad_128[0x40]; // 0x128(0x40)
	struct URNetQueryClient* QueryClient; // 0x168(0x08)
	struct URNetEventingClient* EventingClient; // 0x170(0x08)
	char pad_178[0x20]; // 0x178(0x20)
};

// Class ShooterGame.RNetEventingClient
// Size: 0x48 (Inherited: 0x30)
struct URNetEventingClient : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.RiotGamesApiEventingClient
// Size: 0xa0 (Inherited: 0x48)
struct URiotGamesApiEventingClient : URNetEventingClient {
	char pad_48[0x50]; // 0x48(0x50)
	struct URiotGamesApiClient* Client; // 0x98(0x08)
};

// Class ShooterGame.RiotGamesApiLogin
// Size: 0x68 (Inherited: 0x30)
struct URiotGamesApiLogin : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct URiotGamesApiClient* Client; // 0x50(0x08)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class ShooterGame.RiotGamesApiQueryHelper
// Size: 0x40 (Inherited: 0x30)
struct URiotGamesApiQueryHelper : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct URiotGamesApiClient* Client; // 0x38(0x08)
};

// Class ShooterGame.RiotProductManager
// Size: 0xe8 (Inherited: 0x80)
struct URiotProductManager : UInitSystem {
	struct FString ProductId; // 0x80(0x10)
	struct FString PatchlineId; // 0x90(0x10)
	struct FString RiotGamesApiSettingsToken; // 0xa0(0x10)
	struct FString RiotGamesApiSettingsTokenLite; // 0xb0(0x10)
	struct FString RiotConfigEndpoint; // 0xc0(0x10)
	struct FString RiotConfigRegion; // 0xd0(0x10)
	bool UseDevRiotClient; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class ShooterGame.RiotStatusService
// Size: 0x38 (Inherited: 0x30)
struct URiotStatusService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RiotWarningManager
// Size: 0x1b8 (Inherited: 0x80)
struct URiotWarningManager : UInitSystem {
	char pad_80[0xc8]; // 0x80(0xc8)
	struct URiotWarningService* RiotWarningService; // 0x148(0x08)
	struct UModalManager* ModalManager; // 0x150(0x08)
	struct UConfigManager* ConfigManager; // 0x158(0x08)
	char pad_160[0x58]; // 0x160(0x58)

	void HandleSeeMoreButtonAction(struct UGenericNotification* Notification); // Function ShooterGame.RiotWarningManager.HandleSeeMoreButtonAction // (Final|Native|Public) // @ game+0x3ae48b0
	void HandleAcknowledgeButtonAction(struct UGenericNotification* Notification); // Function ShooterGame.RiotWarningManager.HandleAcknowledgeButtonAction // (Final|Native|Public) // @ game+0x3ae4720
	struct URiotWarningManager* GetRiotWarningManager(struct UObject* WorldContextObject); // Function ShooterGame.RiotWarningManager.GetRiotWarningManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ae44c0
};

// Class ShooterGame.RiotWarningService
// Size: 0x38 (Inherited: 0x30)
struct URiotWarningService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RMSManager
// Size: 0x148 (Inherited: 0x80)
struct URMSManager : UInitSystem {
	char pad_80[0xc0]; // 0x80(0xc0)
	struct URMSService* RMSService; // 0x140(0x08)
};

// Class ShooterGame.RMSService
// Size: 0x38 (Inherited: 0x30)
struct URMSService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RNetClient
// Size: 0x60 (Inherited: 0x30)
struct URNetClient : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	enum class ERNetConnectionStatus ConnectionStatus; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct URNetQueryClient* QueryClient; // 0x50(0x08)
	struct URNetEventingClient* EventingClient; // 0x58(0x08)
};

// Class ShooterGame.RNetRequestSender
// Size: 0x30 (Inherited: 0x30)
struct URNetRequestSender : UInterface {
};

// Class ShooterGame.RNetQueryClient
// Size: 0x88 (Inherited: 0x30)
struct URNetQueryClient : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct TScriptInterface<IRNetRequestSender> RequestSender; // 0x78(0x10)
};

// Class ShooterGame.RNetStub
// Size: 0x58 (Inherited: 0x30)
struct URNetStub : UObject {
	char pad_30[0x28]; // 0x30(0x28)
};

// Class ShooterGame.RNetVoiceManager
// Size: 0x4f8 (Inherited: 0x80)
struct URNetVoiceManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnVoiceSessionParticipantUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnVoiceSessionParticipantRemoved; // 0xa8(0x10)
	char pad_B8[0x18]; // 0xb8(0x18)
	struct FMulticastInlineDelegate OnCaptureDevicesUpdated; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnRenderDevicesUpdated; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnAudioPropertiesUpdated; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnLoopbackEnabledChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnSettingsSaved; // 0x110(0x10)
	struct FMulticastInlineDelegate OnChannelMuteChanged; // 0x120(0x10)
	char pad_130[0x1a0]; // 0x130(0x1a0)
	struct URNetVoiceService* VoiceService; // 0x2d0(0x08)
	struct FVoiceDevices CaptureDevices; // 0x2d8(0x10)
	struct FVoiceDevices RenderDevices; // 0x2e8(0x10)
	char pad_2F8[0x48]; // 0x2f8(0x48)
	struct FAudioProperties AudioProperties; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct UConfigManager* ConfigManager; // 0x348(0x08)
	struct URSOManager* RSOManager; // 0x350(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
	struct UAresSettingsManager* SettingsManager; // 0x368(0x08)
	struct UPartyManager* PartyManager; // 0x370(0x08)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x378(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x380(0x08)
	char pad_388[0x170]; // 0x388(0x170)

	struct FString TransmitBlockersForSessionTypeAsDebugString(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.TransmitBlockersForSessionTypeAsDebugString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae5990
	void SetSessionChannelMute(enum class EVoiceSessionType SessionType, bool bMuted); // Function ShooterGame.RNetVoiceManager.SetSessionChannelMute // (Final|Native|Public|BlueprintCallable) // @ game+0x3ae58c0
	void SetClutchMuteKeybindsEnabled(bool bEnabled); // Function ShooterGame.RNetVoiceManager.SetClutchMuteKeybindsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3ae5830
	void RefreshSessions(); // Function ShooterGame.RNetVoiceManager.RefreshSessions // (Final|Native|Private) // @ game+0x3ae5810
	void OnVoiceSelfMuteEnabledChanged(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.RNetVoiceManager.OnVoiceSelfMuteEnabledChanged // (Final|Native|Private) // @ game+0x3ae56f0
	void OnVoiceIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.RNetVoiceManager.OnVoiceIntSettingChanged // (Final|Native|Private) // @ game+0x3ae55e0
	void OnVoiceEnabledChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnVoiceEnabledChanged // (Final|Native|Private) // @ game+0x3ae54c0
	void OnTeamVoiceChatMuteByRestrictionStateChanged(bool bIsMuted); // Function ShooterGame.RNetVoiceManager.OnTeamVoiceChatMuteByRestrictionStateChanged // (Final|Native|Private) // @ game+0x3ae5430
	void OnPTTEnabledChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnPTTEnabledChanged // (Final|Native|Private) // @ game+0x3ae5310
	void OnLoopbackSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnLoopbackSettingChanged // (Final|Native|Private) // @ game+0x3ae51f0
	void OnIntAkAudioSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.RNetVoiceManager.OnIntAkAudioSettingChanged // (Final|Native|Private) // @ game+0x3ae50e0
	void OnGamePhaseChanged(enum class EAresGamePhase GamePhase, int32_t RoundNum); // Function ShooterGame.RNetVoiceManager.OnGamePhaseChanged // (Final|Native|Private) // @ game+0x3ae5010
	void OnGameFlowStateChanged(enum class EGameFlowStateType GameFlowState); // Function ShooterGame.RNetVoiceManager.OnGameFlowStateChanged // (Final|Native|Private) // @ game+0x3ae4f90
	void OnFloatAkAudioSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.RNetVoiceManager.OnFloatAkAudioSettingChanged // (Final|Native|Private) // @ game+0x3ae4e80
	void OnDeviceHandleSettingChanged(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.RNetVoiceManager.OnDeviceHandleSettingChanged // (Final|Native|Private) // @ game+0x3ae4d30
	void OnDeviceHandleChanged(); // Function ShooterGame.RNetVoiceManager.OnDeviceHandleChanged // (Final|Native|Private) // @ game+0x3ae4d10
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.RNetVoiceManager.OnBugCommand // (Final|Native|Private) // @ game+0x3ae4bc0
	void OnBoolAkAudioSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnBoolAkAudioSettingChanged // (Final|Native|Private) // @ game+0x3ae4aa0
	bool IsSessionChannelMuted(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.IsSessionChannelMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4a10
	bool IsRoomConnectionAvailable(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.IsRoomConnectionAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4980
	void HandlePartyVoiceChatEnabledSettingChanged(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.RNetVoiceManager.HandlePartyVoiceChatEnabledSettingChanged // (Final|Native|Private) // @ game+0x36f4dc0
	void HandleCurrentPartyUpdated(); // Function ShooterGame.RNetVoiceManager.HandleCurrentPartyUpdated // (Final|Native|Private) // @ game+0x2024060
	void HandleClutchMuteInput(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.HandleClutchMuteInput // (Final|Native|Private) // @ game+0x3ae47b0
	struct TArray<struct FName> GetVoiceTransmitBlockerNamesForSessionType(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.GetVoiceTransmitBlockerNamesForSessionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4640
	struct URNetVoiceManager* GetVoiceManager(struct UObject* WorldContextObject); // Function ShooterGame.RNetVoiceManager.GetVoiceManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ae45b0
	bool GetVoiceEnabled(); // Function ShooterGame.RNetVoiceManager.GetVoiceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4580
	bool GetTeamVoiceEnabled(); // Function ShooterGame.RNetVoiceManager.GetTeamVoiceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4550
	struct TArray<struct FVoiceDevice> GetRenderDevices(); // Function ShooterGame.RNetVoiceManager.GetRenderDevices // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae43a0
	bool GetRecordAudioPermissionEnabled(); // Function ShooterGame.RNetVoiceManager.GetRecordAudioPermissionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4370
	bool GetPartyVoiceEnabled(); // Function ShooterGame.RNetVoiceManager.GetPartyVoiceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4340
	bool GetDualVoiceEnabled(); // Function ShooterGame.RNetVoiceManager.GetDualVoiceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4310
	bool GetCurrentVoiceSettings(struct FRNetVoiceSettings& Out); // Function ShooterGame.RNetVoiceManager.GetCurrentVoiceSettings // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4240
	bool GetClutchMuteConfigEnabled(); // Function ShooterGame.RNetVoiceManager.GetClutchMuteConfigEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4210
	struct TArray<struct FVoiceDevice> GetCaptureDevices(); // Function ShooterGame.RNetVoiceManager.GetCaptureDevices // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4180
	struct FAudioProperties GetAudioProperties(); // Function ShooterGame.RNetVoiceManager.GetAudioProperties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae4140
	bool FindParticipantRoomBySubject(struct FString Subject, struct FVoiceSessionParticipant& Out, bool& OutIsPartySession); // Function ShooterGame.RNetVoiceManager.FindParticipantRoomBySubject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae3fc0
	bool FindParticipantBySubject(struct FString Subject, struct FVoiceSessionParticipant& Out); // Function ShooterGame.RNetVoiceManager.FindParticipantBySubject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ae3e80
	void ChannelToggleProcessRoomSettings(); // Function ShooterGame.RNetVoiceManager.ChannelToggleProcessRoomSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x3ae3e60
};

// Class ShooterGame.RNetVoiceService
// Size: 0x38 (Inherited: 0x30)
struct URNetVoiceService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RoamingSettingsManager
// Size: 0xc8 (Inherited: 0x80)
struct URoamingSettingsManager : UInitSystem {
	struct FMulticastInlineDelegate SettingChanged; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x98(0x08)
	struct URoamingSettingsService* RoamingSettingsService; // 0xa0(0x08)
	struct UNotificationManager* NotificationManager; // 0xa8(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0xb0(0x08)
	struct UActionBindingsManager* ActionBindingsManager; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)

	bool TryGetDefaultAxisMapping(struct FName ActionName, bool bPositive, struct FInputChord& OutFoundValue, float& OutFoundScale, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetDefaultAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aeed50
	bool TryGetDefaultActionMapping(struct FName ActionName, struct FInputChord& OutFoundValue, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetDefaultActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aeeb90
	bool TryGetAxisMapping(struct FName ActionName, bool bPositive, struct FInputChord& OutFoundValue, float& OutFoundScale, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aee930
	bool TryGetActionMapping(struct FName ActionName, struct FInputChord& OutFoundValue, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aee770
	void SetAxisMapping(struct FName ActionName, struct FInputChord& Value, float Scale, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.SetAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aee570
	void SetActionMapping(struct FName ActionName, struct FInputChord& KeyBinding, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.SetActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3aee3c0
	void ResetMappings(); // Function ShooterGame.RoamingSettingsManager.ResetMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x3aee3a0
	void RebroadcastBindChangedAsSettingChanged(struct UActionBindSet* ActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.RoamingSettingsManager.RebroadcastBindChangedAsSettingChanged // (Final|Native|Private) // @ game+0x3aee200
	bool IsInitialized(); // Function ShooterGame.RoamingSettingsManager.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aee1d0
	bool HaveSuccessfullyRetrievedSettings(); // Function ShooterGame.RoamingSettingsManager.HaveSuccessfullyRetrievedSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aee1a0
	struct URoamingSettingsManager* GetRoamingSettingsManager(struct UObject* WorldContextObject); // Function ShooterGame.RoamingSettingsManager.GetRoamingSettingsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3aee110
};

// Class ShooterGame.RoamingSettingsService
// Size: 0x38 (Inherited: 0x30)
struct URoamingSettingsService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RopeIdleAdditiveLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleAdditiveLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeIdleAdditiveUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleAdditiveUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeIdleLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeIdleUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeLookLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeLookLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeLookUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeLookUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeNavLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeNavHorizontalAdditiveLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavHorizontalAdditiveLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavHorizontalLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavHorizontalLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavHorizontalUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavHorizontalUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeNavVerticalAdditiveLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavVerticalAdditiveLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavVerticalLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavVerticalLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavVerticalUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavVerticalUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeStopDownLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopDownLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeStopDownUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopDownUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeStopUpLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopUpLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeStopUpUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopUpUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeTurnLeftLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnLeftLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeTurnLeftUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnLeftUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeTurnRightLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnRightLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeTurnRightUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnRightUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RosterManager
// Size: 0x188 (Inherited: 0x80)
struct URosterManager : UInitSystem {
	char pad_80[0x30]; // 0x80(0x30)
	struct UConfigManager* ConfigManager; // 0xb0(0x08)
	struct URSOManager* RSOManager; // 0xb8(0x08)
	struct UContentIndex* ContentIndex; // 0xc0(0x08)
	struct URMSManager* RMSManager; // 0xc8(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0xd0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xd8(0x08)
	struct URosterService* RosterService; // 0xe0(0x08)
	char pad_E8[0xa0]; // 0xe8(0xa0)

	void RefreshRosters(); // Function ShooterGame.RosterManager.RefreshRosters // (Final|Native|Private) // @ game+0x3aee380
	struct URosterManager* GET(struct UWorld* FromWorld); // Function ShooterGame.RosterManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3aee080
	void DisconnectFromChat(struct FString RosterID); // Function ShooterGame.RosterManager.DisconnectFromChat // (Final|Native|Private) // @ game+0x3aedfd0
	void ConnectToChat(struct FString RosterID); // Function ShooterGame.RosterManager.ConnectToChat // (Final|Native|Private) // @ game+0x3aedf20
};

// Class ShooterGame.RosterMatchModel
// Size: 0x130 (Inherited: 0x30)
struct URosterMatchModel : UObject {
	struct UMapDataAsset* MapData; // 0x30(0x08)
	int32_t RoundsWon; // 0x38(0x04)
	int32_t RoundsLost; // 0x3c(0x04)
	bool bDidWin; // 0x40(0x01)
	bool bIsTournamentMatch; // 0x41(0x01)
	enum class ETournamentRound RoundType; // 0x42(0x01)
	char pad_43[0x1]; // 0x43(0x01)
	int32_t RoundNum; // 0x44(0x04)
	int32_t TotalRounds; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FString BracketType; // 0x50(0x10)
	int64_t LeaguePointsAfter; // 0x60(0x08)
	int64_t LeaguePointsEarned; // 0x68(0x08)
	struct FTournamentRosterInfo EnemyInfo; // 0x70(0x80)
	struct FString TournamentID; // 0xf0(0x10)
	struct FString RosterID; // 0x100(0x10)
	struct FString MatchID; // 0x110(0x10)
	struct UPremierSeasonModel* PremierSeasonModel; // 0x120(0x08)
	struct UPremierEventModel* PremierEventModel; // 0x128(0x08)
};

// Class ShooterGame.RosterTournamentModel
// Size: 0x80 (Inherited: 0x30)
struct URosterTournamentModel : UObject {
	int32_t TotalTeams; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FString TournamentID; // 0x38(0x10)
	int32_t MatchesWon; // 0x48(0x04)
	int32_t MatchesLost; // 0x4c(0x04)
	int32_t FinalPlacement; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	int64_t FinalPlacementLeaguePointsBonus; // 0x58(0x08)
	int64_t LeaguePointsAfter; // 0x60(0x08)
	int64_t LeaguePointsEarned; // 0x68(0x08)
	struct TArray<struct URosterMatchModel*> Matches; // 0x70(0x10)
};

// Class ShooterGame.RosterMatchHistoryModel
// Size: 0x88 (Inherited: 0x30)
struct URosterMatchHistoryModel : UObject {
	struct FMulticastInlineDelegate OnDidErrorChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLoadingChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEntriesAdded; // 0x50(0x10)
	struct TArray<struct UObject*> Entries; // 0x60(0x10)
	char pad_70[0x18]; // 0x70(0x18)

	struct FString GetRosterID(); // Function ShooterGame.RosterMatchHistoryModel.GetRosterID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a857e0
	bool GetIsLoading(); // Function ShooterGame.RosterMatchHistoryModel.GetIsLoading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5750
	struct TArray<struct UObject*> GetEntries(); // Function ShooterGame.RosterMatchHistoryModel.GetEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5240
	bool GetDidError(); // Function ShooterGame.RosterMatchHistoryModel.GetDidError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85810
};

// Class ShooterGame.RosterMatchHistoryViewController
// Size: 0x98 (Inherited: 0x30)
struct URosterMatchHistoryViewController : UObject {
	struct UMatchHistoryManager* MatchHistoryManager; // 0x30(0x08)
	struct UPremierManager* PremierManager; // 0x38(0x08)
	struct UContentIndex* ContentIndex; // 0x40(0x08)
	struct TMap<struct FString, struct URosterMatchHistoryModel*> Models; // 0x48(0x50)

	struct URosterMatchHistoryModel* FetchMatchHistory(struct FString RosterID); // Function ShooterGame.RosterMatchHistoryViewController.FetchMatchHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x3af5160
};

// Class ShooterGame.RosterMatchHistoryScreen
// Size: 0x2d0 (Inherited: 0x2c8)
struct URosterMatchHistoryScreen : UUserWidget {
	struct URosterMatchHistoryViewController* ViewController; // 0x2c8(0x08)
};

// Class ShooterGame.RosterMemberModel
// Size: 0x78 (Inherited: 0x30)
struct URosterMemberModel : UObject {
	struct FString Puuid; // 0x30(0x10)
	struct FString RosterID; // 0x40(0x10)
	struct FDateTime DateJoined; // 0x50(0x08)
	struct FMulticastInlineDelegate OnRosterMemberRoleUpdated; // 0x58(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x68(0x08)
	enum class ERosterMemberRole RoleEnum; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)

	enum class ERosterMemberRole GetRole(); // Function ShooterGame.RosterMemberModel.GetRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85810
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.RosterMemberModel.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac30
	struct FDateTime GetDateJoined(); // Function ShooterGame.RosterMemberModel.GetDateJoined // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d660
};

// Class ShooterGame.RosterModel
// Size: 0x200 (Inherited: 0x30)
struct URosterModel : UObject {
	struct FMulticastInlineDelegate OnRosterModelMembersUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnRosterModelInvitesUpdated; // 0x40(0x10)
	struct FMulticastInlineDelegate OnRosterModelLocksUpdated; // 0x50(0x10)
	struct FMulticastInlineDelegate OnRosterModelMetadataUpdated; // 0x60(0x10)
	struct FString ID; // 0x70(0x10)
	int64_t Version; // 0x80(0x08)
	struct FString Realm; // 0x88(0x10)
	struct FRosterAffinity AffinityInfo; // 0x98(0x20)
	struct FString Name; // 0xb8(0x10)
	struct FString Tag; // 0xc8(0x10)
	struct TMap<struct FString, struct FRosterLock> Locks; // 0xd8(0x50)
	struct TMap<struct FString, struct URosterMemberModel*> Members; // 0x128(0x50)
	struct TArray<struct FRosterInvite> Invites; // 0x178(0x10)
	struct FRosterMetadata MetaData; // 0x188(0x70)
	struct FDateTime CreatedDate; // 0x1f8(0x08)

	bool IsLocked(); // Function ShooterGame.RosterModel.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5e60
	struct FString GetTag(); // Function ShooterGame.RosterModel.GetTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5d90
	enum class ERosterMemberRole GetRoleForMember(struct FString Subject); // Function ShooterGame.RosterModel.GetRoleForMember // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5bc0
	struct FString GetName(); // Function ShooterGame.RosterModel.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5af0
	struct FRosterMetadata GetMetadata(); // Function ShooterGame.RosterModel.GetMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5a30
	struct TMap<struct FString, struct URosterMemberModel*> GetMembers(); // Function ShooterGame.RosterModel.GetMembers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5910
	struct URosterMemberModel* GetMember(struct FString Puuid); // Function ShooterGame.RosterModel.GetMember // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5810
	struct TMap<struct FString, struct FRosterLock> GetLocks(); // Function ShooterGame.RosterModel.GetLocks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5770
	struct TArray<struct FRosterInvite> GetInvites(); // Function ShooterGame.RosterModel.GetInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af56f0
	bool GetInvite(struct FString Puuid, struct FRosterInvite& Invite); // Function ShooterGame.RosterModel.GetInvite // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5370
	struct FString GetID(); // Function ShooterGame.RosterModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c550
	struct URosterMemberModel* GetFirstMemberForRole(enum class ERosterMemberRole& Role); // Function ShooterGame.RosterModel.GetFirstMemberForRole // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af52d0
	struct FDateTime GetCreatedDate(); // Function ShooterGame.RosterModel.GetCreatedDate // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5220
};

// Class ShooterGame.RosterPlayerModel
// Size: 0xc8 (Inherited: 0x30)
struct URosterPlayerModel : UObject {
	struct FMulticastInlineDelegate OnInvitesReceived; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInvitesRemoved; // 0x40(0x10)
	struct FString Puuid; // 0x50(0x10)
	int64_t Version; // 0x60(0x08)
	struct TMap<struct FString, struct FRosterInfo> Rosters; // 0x68(0x50)
	struct TArray<struct FRosterInvite> Invites; // 0xb8(0x10)

	struct TMap<struct FString, struct FRosterInfo> GetRosters(); // Function ShooterGame.RosterPlayerModel.GetRosters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5c80
	struct FString GetPuuid(); // Function ShooterGame.RosterPlayerModel.GetPuuid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bbb0
	struct TArray<struct FRosterInvite> GetInvites(); // Function ShooterGame.RosterPlayerModel.GetInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5720
	bool GetInvite(struct FString InvitePuuid, struct FRosterInvite& Invite); // Function ShooterGame.RosterPlayerModel.GetInvite // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3af5530
};

// Class ShooterGame.RosterService
// Size: 0x40 (Inherited: 0x30)
struct URosterService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x38(0x08)
};

// Class ShooterGame.RoundPersistenceComponent
// Size: 0x110 (Inherited: 0xe8)
struct URoundPersistenceComponent : UActorComponent {
	enum class ERoundPersistenceBehavior PersistBehavior; // 0xe8(0x01)
	enum class EGameplayPersistenceBehavior GameplayPersistenceBehavior; // 0xe9(0x01)
	bool bPersistedThisRound; // 0xea(0x01)
	char pad_EB[0x5]; // 0xeb(0x05)
	struct FMulticastInlineDelegate AuthOnPreDestroy; // 0xf0(0x10)
	struct FMulticastInlineDelegate AuthOnCosmeticAwareDestroy; // 0x100(0x10)
};

// Class ShooterGame.RoundRestoreManagerComponent
// Size: 0x180 (Inherited: 0xe8)
struct URoundRestoreManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRoundRestoreComplete; // 0xe8(0x10)
	char pad_F8[0x70]; // 0xf8(0x70)
	struct TArray<int32_t> SavedSnapshotIDs; // 0x168(0x10)
	char pad_178[0x8]; // 0x178(0x08)

	void OnRoundStarted(int32_t RoundNumber); // Function ShooterGame.RoundRestoreManagerComponent.OnRoundStarted // (Final|Native|Protected) // @ game+0x3635550
	void MulticastOnRoundRestoreComplete(int32_t NewRound); // Function ShooterGame.RoundRestoreManagerComponent.MulticastOnRoundRestoreComplete // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3afe7a0
	struct TArray<int32_t> GetSavedRoundIDs(); // Function ShooterGame.RoundRestoreManagerComponent.GetSavedRoundIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3afe430
	void EnableForAutomation(); // Function ShooterGame.RoundRestoreManagerComponent.EnableForAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void DebugPrintRestoreDataFunc(struct UWorld* World); // Function ShooterGame.RoundRestoreManagerComponent.DebugPrintRestoreDataFunc // (Final|Native|Static|Private) // @ game+0x372eb00
	void DebugActivateRestoreFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.RoundRestoreManagerComponent.DebugActivateRestoreFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x372e9f0
	bool AuthBeginRoundRestore(int32_t RoundNumberToRestore); // Function ShooterGame.RoundRestoreManagerComponent.AuthBeginRoundRestore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3647c20
};

// Class ShooterGame.RoundStartRewardSpawnPoint
// Size: 0x3e8 (Inherited: 0x3d8)
struct ARoundStartRewardSpawnPoint : AActor {
	struct UBombTeamComponent* TeamComponent; // 0x3d8(0x08)
	struct UTeamRoleComponent* RoleComponent; // 0x3e0(0x08)
};

// Class ShooterGame.RoundStateLogComponent
// Size: 0xf0 (Inherited: 0xe8)
struct URoundStateLogComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)

	void AuthLogCurrentRound(); // Function ShooterGame.RoundStateLogComponent.AuthLogCurrentRound // (Final|Native|Protected|BlueprintCallable) // @ game+0x2024060
	struct FString AuthGetTeamLogName(struct FName RawTeamName); // Function ShooterGame.RoundStateLogComponent.AuthGetTeamLogName // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	void AuthAreSidesSwapped(bool& bOutSidesAreSwapped); // Function ShooterGame.RoundStateLogComponent.AuthAreSidesSwapped // (BlueprintAuthorityOnly|Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3afe070
};

// Class ShooterGame.RPCManager
// Size: 0x140 (Inherited: 0xe8)
struct URPCManager : UActorComponent {
	char pad_E8[0x58]; // 0xe8(0x58)
};

// Class ShooterGame.RSOManager
// Size: 0x370 (Inherited: 0x80)
struct URSOManager : UInitSystem {
	char pad_80[0x20]; // 0x80(0x20)
	struct FMulticastInlineDelegate OnFriendNoteRestrictedChanged; // 0xa0(0x10)
	char pad_B0[0x88]; // 0xb0(0x88)
	struct URSOService* RSOService; // 0x138(0x08)
	struct FRSOToken RSOToken; // 0x140(0x18)
	struct FRSOUserInfo RSOUserInfo; // 0x158(0x48)
	struct FRSOToken RSOClientToken; // 0x1a0(0x18)
	struct FString RSOUserInfoToken; // 0x1b8(0x10)
	struct FUserInfoToken ParsedUserInfoToken; // 0x1c8(0x70)
	struct FRSOParsedIdToken ParsedIdToken; // 0x238(0x48)
	struct FAccessToken ParsedAccessToken; // 0x280(0x20)
	struct FEntitlementsToken RSOEntitlementsToken; // 0x2a0(0x20)
	char pad_2C0[0xb0]; // 0x2c0(0xb0)

	void Logout(); // Function ShooterGame.RSOManager.Logout // (Final|Native|Public|BlueprintCallable) // @ game+0x3afe780
	bool IsVoiceChatMuted(); // Function ShooterGame.RSOManager.IsVoiceChatMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe750
	bool IsTextChatMuted(); // Function ShooterGame.RSOManager.IsTextChatMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe720
	bool IsReady(); // Function ShooterGame.RSOManager.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe6f0
	bool IsFriendNoteRestricted(); // Function ShooterGame.RSOManager.IsFriendNoteRestricted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe6c0
	bool IsAnticheatBanned(); // Function ShooterGame.RSOManager.IsAnticheatBanned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe690
	bool HasVoiceChatExpiration(); // Function ShooterGame.RSOManager.HasVoiceChatExpiration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe660
	bool HasTextChatExpiration(); // Function ShooterGame.RSOManager.HasTextChatExpiration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe630
	bool HasFriendNoteRestrictionExpiration(); // Function ShooterGame.RSOManager.HasFriendNoteRestrictionExpiration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe600
	struct FDateTime GetVoiceChatExpiration(); // Function ShooterGame.RSOManager.GetVoiceChatExpiration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe5c0
	struct FString GetUserHomeBaseCountry(); // Function ShooterGame.RSOManager.GetUserHomeBaseCountry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe540
	struct FDateTime GetTextChatExpiration(); // Function ShooterGame.RSOManager.GetTextChatExpiration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe500
	struct FRSOUserInfo GetRSOUserInfo(); // Function ShooterGame.RSOManager.GetRSOUserInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3afe2c0
	struct URSOManager* GetRSOManager(struct UObject* WorldContextObject); // Function ShooterGame.RSOManager.GetRSOManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3afe230
	void GetIsSignoutAllowed(struct FDelegate OnSignoutAllowed, struct FDelegate OnSignoutNotAllowed); // Function ShooterGame.RSOManager.GetIsSignoutAllowed // (Final|Native|Public|BlueprintCallable) // @ game+0x3afe110
};

// Class ShooterGame.RSOService
// Size: 0x38 (Inherited: 0x30)
struct URSOService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RunAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct URunAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.RunAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct URunAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.RunLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URunLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RunUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URunUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.ScalingScreenWidgetComponent
// Size: 0x6e0 (Inherited: 0x6c0)
struct UScalingScreenWidgetComponent : UWidgetComponent {
	float MinDistance; // 0x6b8(0x04)
	float MaxDistance; // 0x6bc(0x04)
	float ScaleAtMinDistance; // 0x6c0(0x04)
	float ScaleAtMaxDistance; // 0x6c4(0x04)
	char pad_6D0[0x10]; // 0x6d0(0x10)
};

// Class ShooterGame.SceneCaptureComponentPortal
// Size: 0xa10 (Inherited: 0xa00)
struct USceneCaptureComponentPortal : USceneCaptureComponent2D {
	char pad_A00[0x10]; // 0xa00(0x10)

	void SetPortalExit(struct FVector Center, float Width, float Height, struct FRotator Orientation); // Function ShooterGame.SceneCaptureComponentPortal.SetPortalExit // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3b048c0
};

// Class ShooterGame.ScopedAnimationCueSource
// Size: 0x30 (Inherited: 0x30)
struct UScopedAnimationCueSource : UInterface {

	void UnbindOnScopedCueEvent(struct FDelegate& Delegate); // Function ShooterGame.ScopedAnimationCueSource.UnbindOnScopedCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x365eb00
	void BindOnScopedCueEvent(struct FDelegate& Delegate); // Function ShooterGame.ScopedAnimationCueSource.BindOnScopedCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x365da90
};

// Class ShooterGame.ScoreAndHistoryOverlay
// Size: 0x2c8 (Inherited: 0x2c8)
struct UScoreAndHistoryOverlay : UUserWidget {

	void UpdateRoundResults(int32_t AllyScore, int32_t EnemyScore); // Function ShooterGame.ScoreAndHistoryOverlay.UpdateRoundResults // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void MakeScore(int32_t AllyScore, int32_t EnemyScore); // Function ShooterGame.ScoreAndHistoryOverlay.MakeScore // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ScoreboardContentWidget
// Size: 0x3b8 (Inherited: 0x398)
struct UScoreboardContentWidget : UAresCommonActivatableWidget {
	struct UTextBlock* ToggleCursorBindingText; // 0x398(0x08)
	struct UGridPanel* AllyGrid; // 0x3a0(0x08)
	struct UGridPanel* EnemyGrid; // 0x3a8(0x08)
	struct UScoreAndHistoryOverlay* ScoreAndHistoryOverlay; // 0x3b0(0x08)
};

// Class ShooterGame.ScoreboardPlayerCardWidget
// Size: 0x10d0 (Inherited: 0x1028)
struct UScoreboardPlayerCardWidget : UAresCommonButton {
	struct UBorder* AllyCardContainer; // 0x1028(0x08)
	struct UImage* ArmorImage; // 0x1030(0x08)
	struct UTextBlock* AssistsText; // 0x1038(0x08)
	struct UImage* BestGunImage; // 0x1040(0x08)
	struct UMenuAnchor* CharacterInfoAnchor; // 0x1048(0x08)
	struct UButton* CharacterInfoButton; // 0x1050(0x08)
	struct UTextBlock* CharacterName; // 0x1058(0x08)
	struct UImage* CharacterPortrait; // 0x1060(0x08)
	struct UUserWidget* CompetitiveTierIconSmall; // 0x1068(0x08)
	struct UImage* CoreBGImage; // 0x1070(0x08)
	struct UTextBlock* CurrentMoneyText; // 0x1078(0x08)
	struct UTextBlock* DeathsText; // 0x1080(0x08)
	struct UWidget* HasBomb; // 0x1088(0x08)
	struct UProgressBar* HealthBar; // 0x1090(0x08)
	struct UTextBlock* KillsText; // 0x1098(0x08)
	struct UImage* MIAWidget; // 0x10a0(0x08)
	struct UWidget* MicContainer; // 0x10a8(0x08)
	struct UTextBlock* PingText; // 0x10b0(0x08)
	struct UWidget* PlayerNameWidget; // 0x10b8(0x08)
	struct UImage* SetDeadOverlay; // 0x10c0(0x08)
	struct UTextBlock* UltPointCount; // 0x10c8(0x08)
};

// Class ShooterGame.ScreenMessageElement
// Size: 0xe0 (Inherited: 0x58)
struct UScreenMessageElement : UAresHudElement {
	struct FVector2D MessageDrawOffset; // 0x58(0x08)
	enum class EAresDrawOrigin MessageDrawOrigin; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FAresHudFontParams MessageFontParams; // 0x68(0x70)
	enum class EAresHudTextExtentsMode MessageTextExtentsMode; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)

	bool ShouldDraw(); // Function ShooterGame.ScreenMessageElement.ShouldDraw // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	struct FText GetMessageText(); // Function ShooterGame.ScreenMessageElement.GetMessageText // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
};

// Class ShooterGame.ScreenTransitionComponent
// Size: 0x128 (Inherited: 0xe8)
struct UScreenTransitionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnScreenTransitionUpdated; // 0xe8(0x10)
	char pad_F8[0x18]; // 0xf8(0x18)
	struct TArray<struct FName> ActiveTransitions; // 0x110(0x10)
	char pad_120[0x4]; // 0x120(0x04)
	int32_t AuthSpectateRequestAck; // 0x124(0x04)

	void StartScreenTransition(struct FName TransitionReason, float MaxDuration); // Function ShooterGame.ScreenTransitionComponent.StartScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b04ae0
	void OnRep_AuthSpectateRequestAck(); // Function ShooterGame.ScreenTransitionComponent.OnRep_AuthSpectateRequestAck // (Final|Native|Private) // @ game+0x3b04650
	bool IsAnyTransitionActive(); // Function ShooterGame.ScreenTransitionComponent.IsAnyTransitionActive // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b04590
	void CompleteScreenTransition(struct FName TransitionReason); // Function ShooterGame.ScreenTransitionComponent.CompleteScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b04090
};

// Class ShooterGame.ScriptedSequenceState
// Size: 0x130 (Inherited: 0xf8)
struct UScriptedSequenceState : UStateComponent {
	struct FString SequenceMark; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnStateEnter; // 0x108(0x10)
	struct FMulticastInlineDelegate OnStateExit; // 0x118(0x10)
	struct UStateComponent* DefaultNextState; // 0x128(0x08)

	void SetDefaultNextState(struct UStateComponent* State); // Function ShooterGame.ScriptedSequenceState.SetDefaultNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04700
	void GoToState(struct UStateComponent* ToState); // Function ShooterGame.ScriptedSequenceState.GoToState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04380
	void GoToNextState(); // Function ShooterGame.ScriptedSequenceState.GoToNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04290
	struct UScriptedSequenceStateMachineComponent* GetOwningScriptedSequenceStateMachineComponent(); // Function ShooterGame.ScriptedSequenceState.GetOwningScriptedSequenceStateMachineComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b041b0
	struct UStateComponent* GetDefaultNextState(); // Function ShooterGame.ScriptedSequenceState.GetDefaultNextState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b04180
};

// Class ShooterGame.ScriptedSequenceStateMachineComponent
// Size: 0x1f8 (Inherited: 0x1e0)
struct UScriptedSequenceStateMachineComponent : UStateMachineComponent {
	struct ULevelSequence* Sequence; // 0x1e0(0x08)
	struct ULevelSequencePlayer* SequencePlayer; // 0x1e8(0x08)
	struct ALevelSequenceActor* SequenceActor; // 0x1f0(0x08)

	void JumpToState(struct UStateComponent* State); // Function ShooterGame.ScriptedSequenceStateMachineComponent.JumpToState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b045c0
};

// Class ShooterGame.SeasonUIData
// Size: 0x90 (Inherited: 0x90)
struct USeasonUIData : UBaseContentUIData {
};

// Class ShooterGame.SeasonDataAsset
// Size: 0xc8 (Inherited: 0x50)
struct USeasonDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> ParentSeason; // 0x50(0x30)
	enum class EAresSeasonType Type; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FDateTime StartTime; // 0x88(0x08)
	struct FDateTime EndTime; // 0x90(0x08)
	struct TSoftClassPtr<UObject> UIData; // 0x98(0x30)
};

// Class ShooterGame.SensitivityModifierComponent
// Size: 0x138 (Inherited: 0xe8)
struct USensitivityModifierComponent : UActorComponent {
	struct TArray<struct UScriptStateComponent*> ActiveStates; // 0xe8(0x10)
	bool bInActiveState; // 0xf8(0x01)
	bool bIsButtonPressed; // 0xf9(0x01)
	bool bIsInputRequired; // 0xfa(0x01)
	char pad_FB[0x1]; // 0xfb(0x01)
	struct FName ActionName; // 0xfc(0x0c)
	float SensitivityModifier; // 0x108(0x04)
	struct FAimAccelerationSensitivityModifiers AimAccelerationSensitivityModifiers; // 0x10c(0x10)
	char pad_11C[0x1c]; // 0x11c(0x1c)

	void DeactivateSensitivity(); // Function ShooterGame.SensitivityModifierComponent.DeactivateSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04130
	void BindInputActions(struct AAresPlayerController* PlayerController); // Function ShooterGame.SensitivityModifierComponent.BindInputActions // (Final|Native|Public|BlueprintCallable) // @ game+0x3b04000
	void ActivateSensitivity(); // Function ShooterGame.SensitivityModifierComponent.ActivateSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x3b03fe0
};

// Class ShooterGame.SerialSequenceAnimationConductorNode
// Size: 0xf8 (Inherited: 0xa0)
struct USerialSequenceAnimationConductorNode : UIndexedSequenceAnimationConductorNodeBase {
	struct TArray<struct TScriptInterface<IAnimationConductorNode>> ChildList; // 0xa0(0x10)
	struct FAnimationConductorNodeSignalCondition ItemTerminationCondition; // 0xb0(0x14)
	struct FAnimationConductorNodeSignalCondition LastItemTerminationCondition; // 0xc4(0x14)
	struct TScriptInterface<IAnimationConductorNode> CurrentChild; // 0xd8(0x10)
	char pad_E8[0x10]; // 0xe8(0x10)

	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.SerialSequenceAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x3b100b0
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.SerialSequenceAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x3b0ffd0
	struct USerialSequenceAnimationConductorNode* Create(struct TArray<struct TScriptInterface<IAnimationConductorNode>>& ChildList, struct FAnimationConductorNodeSignalCondition& ItemTerminationCondition, struct FAnimationConductorNodeSignalCondition& LastItemTerminationCondition, struct UObject* Outer); // Function ShooterGame.SerialSequenceAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b0fd00
};

// Class ShooterGame.ServerMovementTimingComponent
// Size: 0x120 (Inherited: 0xe8)
struct UServerMovementTimingComponent : UActorComponent {
	struct FMulticastInlineDelegate OnFixedMoveTimeStepChange; // 0xe8(0x10)
	char pad_F8[0x20]; // 0xf8(0x20)
	struct UFixedMoveTimeStepManagerComponent* FixedMoveTimeStepManager; // 0x118(0x08)

	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ServerMovementTimingComponent.OnRoundBegin // (Final|Native|Public) // @ game+0x3b105a0
	float GetStartOfFrameMovementTimestamp(); // Function ShooterGame.ServerMovementTimingComponent.GetStartOfFrameMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b0ff00
	float GetEndOfFrameMovementTimestamp(); // Function ShooterGame.ServerMovementTimingComponent.GetEndOfFrameMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b0ff00
	float GetCurrentMovementTimestamp(); // Function ShooterGame.ServerMovementTimingComponent.GetCurrentMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b0fed0
};

// Class ShooterGame.ServerPerformanceMonitoringComponent
// Size: 0x118 (Inherited: 0x118)
struct UServerPerformanceMonitoringComponent : UBasePerformanceMonitoringComponent {
};

// Class ShooterGame.ServerPerRoundTelemetryComponent
// Size: 0x1f8 (Inherited: 0xe8)
struct UServerPerRoundTelemetryComponent : UActorComponent {
	char pad_E8[0x110]; // 0xe8(0x110)

	void SendSinglePlayerExperienceMissionData(struct UMissionGameStateComponent* MissionStateComponent, struct AMission* Mission); // Function ShooterGame.ServerPerRoundTelemetryComponent.SendSinglePlayerExperienceMissionData // (Final|Native|Public) // @ game+0x3b10750
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x3b106c0
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnRoundBegin // (Final|Native|Public) // @ game+0x3b10630
	void OnPhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnPhaseChanged // (Final|Native|Public) // @ game+0x3b10520
	void OnNetworkDDoSEscalation(struct UWorld* World, struct UNetDriver* NetDrive, struct FString SeverityCategory); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnNetworkDDoSEscalation // (Final|Native|Public) // @ game+0x3b103b0
	void OnMatchEnd(); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnMatchEnd // (Final|Native|Public) // @ game+0x3b10390
	void OnMatchBegin(); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnMatchBegin // (Final|Native|Public) // @ game+0x3b10370
	void HandleNewMissionStateAdded(struct UStateComponent* AddedState); // Function ShooterGame.ServerPerRoundTelemetryComponent.HandleNewMissionStateAdded // (Final|Native|Public) // @ game+0x3b10140
};

// Class ShooterGame.ServerPlayerStateTelemetryComponent
// Size: 0x440 (Inherited: 0x100)
struct UServerPlayerStateTelemetryComponent : UBasePlayerStateTelemetryComponent {
	struct FMulticastInlineDelegate OnAuthPreFlushBatchedEvents; // 0x100(0x10)
	int64_t GameId; // 0x110(0x08)
	char pad_118[0x38]; // 0x118(0x38)
	struct FGameEventInventory TelemetryInventoryCache; // 0x150(0x148)
	struct AShooterCharacter* CachedInventoryOwningCharacter; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	bool bIsInventoryCacheInitialized; // 0x2a8(0x01)
	char pad_2A9[0xf]; // 0x2a9(0x0f)
	struct TArray<struct FInventoryChangeEvent> PendingInventoryChangeEvents; // 0x2b8(0x10)
	char pad_2C8[0x178]; // 0x2c8(0x178)

	void UpdateInventoryCache(struct UAresInventory* Inventory, struct AAresItem* Item, enum class EInventoryTransaction Transaction); // Function ShooterGame.ServerPlayerStateTelemetryComponent.UpdateInventoryCache // (Final|Native|Private) // @ game+0x3b10850
	bool ShouldSampleByMatch(); // Function ShooterGame.ServerPlayerStateTelemetryComponent.ShouldSampleByMatch // (Final|Native|Public|Const) // @ game+0x3b10820
	void RecordInventoryTransactionEvent(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* Item); // Function ShooterGame.ServerPlayerStateTelemetryComponent.RecordInventoryTransactionEvent // (Final|Native|Public) // @ game+0x36f7a70
	void OnConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ServerPlayerStateTelemetryComponent.OnConnectionStatusChanged // (Final|Native|Private) // @ game+0x3b10260
	void HandleOnRoundEnd(int32_t RoundNumberEnded); // Function ShooterGame.ServerPlayerStateTelemetryComponent.HandleOnRoundEnd // (Final|Native|Private) // @ game+0x3b101d0
	struct FGameEventInventory GetOrCreateInventoryCache(struct UAresInventory* Inventory); // Function ShooterGame.ServerPlayerStateTelemetryComponent.GetOrCreateInventoryCache // (Final|Native|Public) // @ game+0x3b0ff30
	void FlushBatchedEvents(); // Function ShooterGame.ServerPlayerStateTelemetryComponent.FlushBatchedEvents // (Final|Native|Private) // @ game+0x3b0feb0
	void AuthUpdateReclaimableReclaimTime(struct FInWorldReclaimableEventHandle& InEventHandle); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthUpdateReclaimableReclaimTime // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b0fc60
	void AuthRegisterCharacterCallBacks(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRegisterCharacterCallBacks // (Final|Native|Public) // @ game+0x3634e00
	void AuthRecordRoundSnapshot(struct AShooterCharacter* ShooterCharacter, enum class EAresGamePhase OverwriteGamePhase); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordRoundSnapshot // (Final|Native|Public) // @ game+0x36eab40
	bool AuthRecordReclaimableSpawned(struct AAresEquippable* Ability, struct FVector& InLocation, struct FInWorldReclaimableEventHandle& OutEventHandle); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordReclaimableSpawned // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b0fb30
	void AuthRecordPlayerSpawnedEvent(struct AShooterPlayerState* PlayerState, struct FSpawnPointData& WinnerSpawnPoint, struct FSpawnPointDataAdditionalStats SpawnPointDataAdditionalStats); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordPlayerSpawnedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b0f7d0
	void AuthRecordPlayerExitSpawnAreaEvent(struct AShooterPlayerState* PlayerState); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordPlayerExitSpawnAreaEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthRecordNPEJourneyEvent(struct AShooterPlayerState* PlayerState, struct FString ModuleDescription, enum class ENPECheckpointStatus ModuleStatus); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordNPEJourneyEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3b0f660
	void AuthRecordClashEventStruct(struct FClashOrbContestEvent& Event); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordClashEventStruct // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b0f410
	bool AuthRecordClashEvent(struct AAresEquippable* Ability, struct TArray<struct FClashOrbInfo> ClashOrbInfo, struct TArray<struct FShieldInfo> ShieldInfo, float StartTime, float Duration, int32_t CombatReportID, int32_t AltActivateCombatReportID); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordClashEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3b0f110
	struct FAbilityUsageEvent AuthRecordAbilityUsage(struct AAresEquippable* Equippable, enum class EAbilityUsageEventType Type); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordAbilityUsage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b0efa0
	void AuthPostPendingInventoryTransactionEvents(enum class EAresGamePhase NewPhase); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthPostPendingInventoryTransactionEvents // (Final|Native|Public) // @ game+0x36908e0
	void AuthOnGamePhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthOnGamePhaseChanged // (Final|Native|Public) // @ game+0x36908e0
	void AuthOnAutonomousForwardPredictEvent(float TimeSpentInPrediction); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthOnAutonomousForwardPredictEvent // (Final|Native|Public) // @ game+0x36a0b30
	void AuthInitializeInventoryCache(struct UAresInventory* Inventory); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthInitializeInventoryCache // (Final|Native|Public) // @ game+0x3634e00
	void AuthIncrementReclaimableAttemptCount(struct FInWorldReclaimableEventHandle& InEventHandle); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthIncrementReclaimableAttemptCount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b0ef00
	void AuthHandleUltimateReadyStatusChanged(struct AShooterPlayerState* ShooterPlayerState, bool bIsUltReady); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthHandleUltimateReadyStatusChanged // (Final|Native|Public) // @ game+0x3743cd0
	void AuthHandleEquippableChargeReplenish(struct AAresItem* ReplenishedItem, int32_t TotalCharges); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthHandleEquippableChargeReplenish // (Final|Native|Public) // @ game+0x3636980
	void AuthCommitAbilityUsageEvents(struct FAbilityUsageEvent& AbilityUsageEvent, struct TArray<struct FVector> Locations, enum class EAbilityUsageLocationType LocationType, struct TArray<struct FAbilityEffectInfo> AbilityEffects, int32_t DestroyedCount, int32_t CastID); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthCommitAbilityUsageEvents // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b0eb70
	void AuthCommitAbilityUsage(struct FAbilityUsageEvent& AbilityUsageEvent, struct FVector& EffectLocation, struct TArray<struct FAbilityEffectInfo> AbilityEffects, int32_t DestroyedCount, int32_t CastID); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthCommitAbilityUsage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b0e880
};

// Class ShooterGame.ServerRewindComponent
// Size: 0x130 (Inherited: 0x110)
struct UServerRewindComponent : URewindComponent {
	char pad_110[0xc]; // 0x110(0x0c)
	float CurrentRewindTime; // 0x11c(0x04)
	float CurrentJitterTime; // 0x120(0x04)
	float DebugCurrentRewindTargetTimestamp; // 0x124(0x04)
	bool PauseRewinding; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
};

// Class ShooterGame.ServerTeamVisibilityComponent
// Size: 0x138 (Inherited: 0xe8)
struct UServerTeamVisibilityComponent : UActorComponent {
	char pad_E8[0x50]; // 0xe8(0x50)
};

// Class ShooterGame.ServerVoteTelemetryComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UServerVoteTelemetryComponent : UActorComponent {
};

// Class ShooterGame.ServiceTickerManager
// Size: 0x148 (Inherited: 0x80)
struct UServiceTickerManager : UInitSystem {
	struct FMulticastInlineDelegate OnTickerChanged; // 0x80(0x10)
	char pad_90[0x18]; // 0x90(0x18)
	struct UConfigManager* ConfigManager; // 0xa8(0x08)
	struct URiotProductManager* RiotProductManager; // 0xb0(0x08)
	struct URiotStatusService* RiotStatusService; // 0xb8(0x08)
	struct UPlatformSessionManager* SessionManager; // 0xc0(0x08)
	struct UContentManager* ContentManager; // 0xc8(0x08)
	struct UContentIndex* ContentIndex; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)
	struct FRiotStatus RiotStatus; // 0xe0(0x50)
	struct TArray<struct FTickerStatus> TickerStatuses; // 0x130(0x10)
	char pad_140[0x8]; // 0x140(0x08)

	void UpdateTickerStatus(); // Function ShooterGame.ServiceTickerManager.UpdateTickerStatus // (Final|Native|Private) // @ game+0x3b17b40
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.ServiceTickerManager.HandleGameFlowStateChanged // (Final|Native|Public) // @ game+0x3b16ed0
	struct TArray<struct FTickerStatus> GetTickerStatuses(); // Function ShooterGame.ServiceTickerManager.GetTickerStatuses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16e90
	bool GetTicker(struct FTickerObject& Out); // Function ShooterGame.ServiceTickerManager.GetTicker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16dd0
	struct UServiceTickerManager* GetServiceTickerManager(struct UObject* WorldContextObject); // Function ShooterGame.ServiceTickerManager.GetServiceTickerManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16a80
};

// Class ShooterGame.SessionService
// Size: 0x38 (Inherited: 0x30)
struct USessionService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.SettingBoolUIData
// Size: 0x128 (Inherited: 0xf0)
struct USettingBoolUIData : UAresSettingUIData {
	enum class EAresBoolSettingName BackingSetting; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct FText OnText; // 0xf8(0x18)
	struct FText OffText; // 0x110(0x18)
};

// Class ShooterGame.SettingMatureContentBoolUIData
// Size: 0x148 (Inherited: 0x128)
struct USettingMatureContentBoolUIData : USettingBoolUIData {
	struct USettingBoolUIData* ShowCorpseVisualBoolDataAsset; // 0x128(0x08)
	struct USettingBoolUIData* ShowCorpseInternalBoolDataAsset; // 0x130(0x08)
	struct USettingBoolUIData* ShowBloodVisualBoolDataAsset; // 0x138(0x08)
	struct USettingBoolUIData* ShowBloodInternalBoolDataAsset; // 0x140(0x08)
};

// Class ShooterGame.SettingFloatUIData
// Size: 0xf8 (Inherited: 0xf0)
struct USettingFloatUIData : UAresSettingUIData {
	enum class EAresFloatSettingName BackingSetting; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class ShooterGame.SettingIntUIData
// Size: 0xf8 (Inherited: 0xf0)
struct USettingIntUIData : UAresSettingUIData {
	enum class EAresIntSettingName BackingSetting; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class ShooterGame.SettingsFloatViewModel
// Size: 0x130 (Inherited: 0xf8)
struct USettingsFloatViewModel : USettingsOptionViewModel {
	struct FMulticastInlineDelegate OnSettingValueChanged; // 0xf8(0x10)
	float SettingValue; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct USettingFloatUIData* FloatSettingDataAsset; // 0x110(0x08)
	char pad_118[0x18]; // 0x118(0x18)

	void SetSettingValue(float Value); // Function ShooterGame.SettingsFloatViewModel.SetSettingValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3b178f0
	void InternalOnSettingChangedFromManager(enum class EAresFloatSettingName FloatSettingName, float OldValue, float NewValue); // Function ShooterGame.SettingsFloatViewModel.InternalOnSettingChangedFromManager // (Native|Protected) // @ game+0x3b17070
	float GetSettingValue(); // Function ShooterGame.SettingsFloatViewModel.GetSettingValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x36b01e0
	enum class EAresFloatSettingName GetSettingName(); // Function ShooterGame.SettingsFloatViewModel.GetSettingName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16c00
	struct USettingFloatUIData* GetSettingDataAssetAsFloatSetting(); // Function ShooterGame.SettingsFloatViewModel.GetSettingDataAssetAsFloatSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16ba0
};

// Class ShooterGame.SettingsIntViewModel
// Size: 0x130 (Inherited: 0xf8)
struct USettingsIntViewModel : USettingsOptionViewModel {
	struct FMulticastInlineDelegate OnSettingValueChanged; // 0xf8(0x10)
	float SettingValue; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct USettingIntUIData* IntSettingDataAsset; // 0x110(0x08)
	char pad_118[0x18]; // 0x118(0x18)

	void SetSettingValue(int32_t Value); // Function ShooterGame.SettingsIntViewModel.SetSettingValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3b17970
	void InternalOnSettingChangedFromManager(enum class EAresIntSettingName FloatSettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.SettingsIntViewModel.InternalOnSettingChangedFromManager // (Native|Protected) // @ game+0x3b17190
	int32_t GetSettingValue(); // Function ShooterGame.SettingsIntViewModel.GetSettingValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16d50
	enum class EAresIntSettingName GetSettingName(); // Function ShooterGame.SettingsIntViewModel.GetSettingName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16c00
	struct USettingIntUIData* GetSettingDataAssetAsIntSetting(); // Function ShooterGame.SettingsIntViewModel.GetSettingDataAssetAsIntSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b16bd0
};

// Class ShooterGame.SettingsStringViewModel
// Size: 0x138 (Inherited: 0xf8)
struct USettingsStringViewModel : USettingsOptionViewModel {
	struct FMulticastInlineDelegate OnSettingValueChanged; // 0xf8(0x10)
	struct FString SettingValue; // 0x108(0x10)
	char pad_118[0x20]; // 0x118(0x20)

	void SetSettingValue(struct FString Value); // Function ShooterGame.SettingsStringViewModel.SetSettingValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3b17a00
	void InternalOnSettingChangedFromManager(enum class EAresStringSettingName StringSettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.SettingsStringViewModel.InternalOnSettingChangedFromManager // (Native|Protected) // @ game+0x3b172a0
	struct FString GetSettingsValue(); // Function ShooterGame.SettingsStringViewModel.GetSettingsValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b16da0
};

// Class ShooterGame.SettingsScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct USettingsScreen : UUserWidget {

	void OnMenuStackEntryCreated(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.SettingsScreen.OnMenuStackEntryCreated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.TeamSocialSettingsContentBase
// Size: 0x318 (Inherited: 0x2c8)
struct UTeamSocialSettingsContentBase : UUserWidget {
	struct UVerticalBox* AllyContainer; // 0x2c8(0x08)
	struct UVerticalBox* EnemyContainer; // 0x2d0(0x08)
	struct UWidget* TeamVoiceHeader; // 0x2d8(0x08)
	struct UButton* MuteEnemyChatButton; // 0x2e0(0x08)
	struct UWidget* MuteEnemyChatCheckbox; // 0x2e8(0x08)
	struct UButton* MuteObserverChatButton; // 0x2f0(0x08)
	struct UWidget* MuteObserverChatCheckbox; // 0x2f8(0x08)
	struct UWidget* RemakeButton; // 0x300(0x08)
	struct UWidget* SurrenderButton; // 0x308(0x08)
	struct UWidget* TimeoutButton; // 0x310(0x08)
};

// Class ShooterGame.IndividualSocialSettingsContentBase
// Size: 0x330 (Inherited: 0x2c8)
struct UIndividualSocialSettingsContentBase : UUserWidget {
	struct UWidget* AcceptInviteButton; // 0x2c8(0x08)
	struct UWidget* AddFriendButton; // 0x2d0(0x08)
	struct UWidget* AddToPartyButton; // 0x2d8(0x08)
	struct UBorder* WidgetBorder; // 0x2e0(0x08)
	struct UImage* CharacterIcon; // 0x2e8(0x08)
	struct UTextBlock* CharacterName; // 0x2f0(0x08)
	struct UCheckBox* PingsMuteCheck; // 0x2f8(0x08)
	struct UWidget* PlayerNameWidget; // 0x300(0x08)
	struct UWidget* ReportButton; // 0x308(0x08)
	struct UCheckBox* TextMuteCheck; // 0x310(0x08)
	struct UCheckBox* VoiceMuteCheck; // 0x318(0x08)
	struct USlider* VolumeSetSlider; // 0x320(0x08)
	struct UTextBlock* VolumeText; // 0x328(0x08)
};

// Class ShooterGame.SettingsSliderWidget
// Size: 0x10c0 (Inherited: 0x1088)
struct USettingsSliderWidget : UAresSliderWidget {
	enum class EAresFloatSettingName SettingName; // 0x1088(0x01)
	char pad_1089[0x7]; // 0x1089(0x07)
	struct UAresButtonImageComponent* MuteIcon; // 0x1090(0x08)
	struct UTexture2D* UnmutedIconTexture; // 0x1098(0x08)
	struct UTexture2D* MutedIconTexture; // 0x10a0(0x08)
	struct UAresButtonTextComponent* ValueText; // 0x10a8(0x08)
	bool bDisplaysPercent; // 0x10b0(0x01)
	char pad_10B1[0x7]; // 0x10b1(0x07)
	struct USettingsFloatViewModel* SettingVM; // 0x10b8(0x08)
};

// Class ShooterGame.SettingStringUIData
// Size: 0xf8 (Inherited: 0xf0)
struct USettingStringUIData : UAresSettingUIData {
	enum class EAresStringSettingName BackingSetting; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class ShooterGame.SettingsVoidIncognitoViewModel
// Size: 0x1a0 (Inherited: 0x198)
struct USettingsVoidIncognitoViewModel : USettingsBoolViewModel {
	char pad_198[0x8]; // 0x198(0x08)
};

// Class ShooterGame.SettingVoidUIData
// Size: 0xf8 (Inherited: 0xf0)
struct USettingVoidUIData : UAresSettingUIData {
	enum class EAresVoidSettingName BackingSetting; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class ShooterGame.SettingVoidBoolUIData
// Size: 0x128 (Inherited: 0xf8)
struct USettingVoidBoolUIData : USettingVoidUIData {
	struct FText OnText; // 0xf8(0x18)
	struct FText OffText; // 0x110(0x18)
};

// Class ShooterGame.ShellScreenViewModel
// Size: 0x208 (Inherited: 0x48)
struct UShellScreenViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnMenuStackActiveStateChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMenuAddedToStack; // 0x58(0x10)
	struct FMulticastInlineDelegate OnMenuRemovedFromStack; // 0x68(0x10)
	struct FMulticastInlineDelegate OnBackgroundImageUpdated; // 0x78(0x10)
	struct FMulticastInlineDelegate OnBackgroundVideoUpdated; // 0x88(0x10)
	char pad_98[0x10]; // 0x98(0x10)
	struct TArray<struct FName> MenuStacks; // 0xa8(0x10)
	struct FMenuStackMediaSourceParams BackgroundVideoParams; // 0xb8(0x30)
	struct TSoftObjectPtr<UTexture2D> BackgroundImage; // 0xe8(0x30)
	struct FShellWidgetVisibilityOptions WidgetVisibilityOptions; // 0x118(0x08)
	struct FString DefaultNavigationUrl; // 0x120(0x10)
	char pad_130[0xd8]; // 0x130(0xd8)

	bool ShouldAllowModals(); // Function ShooterGame.ShellScreenViewModel.ShouldAllowModals // (Native|Event|Public|BlueprintEvent) // @ game+0x382d4e0
	void SetMenuStacks(struct TArray<struct FName>& InMenuStacks); // Function ShooterGame.ShellScreenViewModel.SetMenuStacks // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b47070
	void SetBackgroundVideoParams(struct FMenuStackMediaSourceParams InParams); // Function ShooterGame.ShellScreenViewModel.SetBackgroundVideoParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3b46cb0
	void SetBackgroundImage(struct TSoftObjectPtr<UTexture2D> InImage); // Function ShooterGame.ShellScreenViewModel.SetBackgroundImage // (Final|Native|Public|BlueprintCallable) // @ game+0x3b46b80
	void NavigateToInitialUrl(); // Function ShooterGame.ShellScreenViewModel.NavigateToInitialUrl // (Final|Native|Public|BlueprintCallable) // @ game+0x3b44910
	void HandleOnMenuUrlChanged(struct FAresMenuUrl& NewUrl); // Function ShooterGame.ShellScreenViewModel.HandleOnMenuUrlChanged // (Final|Native|Public|HasOutParms) // @ game+0x3b417c0
	void HandleBackAction(); // Function ShooterGame.ShellScreenViewModel.HandleBackAction // (Final|Native|Public|BlueprintCallable) // @ game+0x3b417a0
	bool BP_NavigateToInitialUrl(); // Function ShooterGame.ShellScreenViewModel.BP_NavigateToInitialUrl // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShooterBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UShooterBlueprintLibrary : UBlueprintFunctionLibrary {

	float YardsToGameUnits(float Yards); // Function ShooterGame.ShooterBlueprintLibrary.YardsToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b49070
	void VisitWallSegments(struct UObject* WorldContextObject, struct FVector& StartLocation, struct FVector& EndLocation, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel Channel, struct FDelegate EntranceEvent, struct FDelegate ExitEvent); // Function ShooterGame.ShooterBlueprintLibrary.VisitWallSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b48de0
	bool UsingTouchInput(); // Function ShooterGame.ShooterBlueprintLibrary.UsingTouchInput // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x244a2b0
	void UpdatePostProcessModifier(struct APostProcessVolume* Volume, struct UPostProcessTintBlendable* Modifier, float Weight); // Function ShooterGame.ShooterBlueprintLibrary.UpdatePostProcessModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b48cd0
	void UnregisterAudioOcclusionZone(struct UObject* WorldContextObject, struct USphereComponent* AudioOcclusionZone); // Function ShooterGame.ShooterBlueprintLibrary.UnregisterAudioOcclusionZone // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b48c10
	struct AShooterPlayerState* TryGetShooterPlayerFromSubject(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.ShooterBlueprintLibrary.TryGetShooterPlayerFromSubject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b48b00
	struct UAresPurchasable* TryGetPurchasableClassByWeaponName(struct UObject* WorldContextObject, struct FString Name); // Function ShooterGame.ShooterBlueprintLibrary.TryGetPurchasableClassByWeaponName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b48a10
	struct AAresPlayerStateBase* TryGetAresPlayerFromSubject(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.ShooterBlueprintLibrary.TryGetAresPlayerFromSubject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b48920
	void ThrottleByFramerate(struct UObject* WorldContextObject, struct FName Key, int32_t EveryNFrames, enum class EThrottleOutputPins& OutResult); // Function ShooterGame.ShooterBlueprintLibrary.ThrottleByFramerate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b487b0
	bool SweepSingleCapsuleByChannel(struct UObject* WorldContextObject, struct FVector& CapsuleStartLocation, struct FVector& CapsuleEndLocation, float CapsuleRadius, float CapsuleHalfHeight, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel TraceChannel, bool bBlockingHitsOnly, struct FVector& OutCapsuleStoppedLocation, struct FVector& OutImpactLocation, bool bTraceComplex); // Function ShooterGame.ShooterBlueprintLibrary.SweepSingleCapsuleByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b48420
	struct FColor StringToColor(struct FString ColorString); // Function ShooterGame.ShooterBlueprintLibrary.StringToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b48330
	void StopListeningForInputActionV2(struct UInputComponent* InputComponent, struct FName ActionName, enum class EAresInputState EventType); // Function ShooterGame.ShooterBlueprintLibrary.StopListeningForInputActionV2 // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b48210
	bool SphereTraceSingleIgnoringTaggedObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FName ActorTagToIgnore, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, struct TArray<struct AActor*>& OutIgnoredActors, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function ShooterGame.ShooterBlueprintLibrary.SphereTraceSingleIgnoringTaggedObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b47cc0
	struct AGameObject* SpawnGameObject(struct UObject* WorldContextObject, struct AGameObject* GameObjectClass, struct FTransform& SpawnTransform, struct APawn* InstigatedBy, struct AActor* Owner); // Function ShooterGame.ShooterBlueprintLibrary.SpawnGameObject // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b47ac0
	struct AAresEquippable* SpawnEquippable(struct UObject* WorldContextObject, struct AAresEquippable* EquippableClass, struct FTransform& SpawnTransform, struct AActor* Owner, struct UEquippableSkinDataAsset* SkinAsset, struct UEquippableSkinLevelDataAsset* SkinLevelAsset, struct UEquippableSkinChromaDataAsset* ChromaAsset, struct UEquippableCharmDataAsset* CharmAsset, struct UEquippableCharmLevelDataAsset* CharmLevelAsset); // Function ShooterGame.ShooterBlueprintLibrary.SpawnEquippable // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b477c0
	struct AActor* SpawnAbilityChildActor(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct APawn* InstigatedBy, struct AActor* Owner); // Function ShooterGame.ShooterBlueprintLibrary.SpawnAbilityChildActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b47590
	void SortArrayByPredicateWithDelegate(struct UObject* WorldContextObject, struct TArray<struct UObject*>& ArrayToSort, struct FDelegate Predicate); // Function ShooterGame.ShooterBlueprintLibrary.SortArrayByPredicateWithDelegate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b47430
	bool ShouldEnableChatbox(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.ShouldEnableChatbox // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b473a0
	struct FTimerHandle SetTimerByEventAllowMultiple(struct FDelegate Event, float Time, bool bLooping, float InitialStartDelay); // Function ShooterGame.ShooterBlueprintLibrary.SetTimerByEventAllowMultiple // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b47230
	void SetNavMeshDrawing(bool bShowNavMesh); // Function ShooterGame.ShooterBlueprintLibrary.SetNavMeshDrawing // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3b47120
	void SetLightingChannel(struct AActor* TargetActor, int32_t Channel); // Function ShooterGame.ShooterBlueprintLibrary.SetLightingChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b46fb0
	bool SetCVarValueFloat(struct FName CVarName, float CVarValue); // Function ShooterGame.ShooterBlueprintLibrary.SetCVarValueFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b46de0
	void SetCollisionProfile(struct UPrimitiveComponent* Component, struct FName ProfileName); // Function ShooterGame.ShooterBlueprintLibrary.SetCollisionProfile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b46ed0
	void SetActionMappingPressed(struct UObject* WorldContextObject, struct FName ActionMapping, bool bIsPressed); // Function ShooterGame.ShooterBlueprintLibrary.SetActionMappingPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b469d0
	void SendSlackScreenshot(struct UObject* WorldContextObject, struct FString Title, struct FString PublicChannels, struct FString PrivateChannel); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackScreenshot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b46760
	void SendSlackMessage(struct FString Channel, struct FString FromName, struct FString Text, struct FString Icon); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b46490
	void SendSlackColorMessage(struct FString Channel, struct FString FromName, struct FString Text, struct FString Icon, struct FString Color); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackColorMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b46110
	void SendSlackBitmap(struct FString Filename, struct FString Title, struct FString Channel, struct TArray<struct FColor>& Bitmap, int32_t Width, int32_t Height); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackBitmap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b45ed0
	void SendCoachPermissionsMessage(struct UObject* WorldContextObject, enum class ECoachMessageType MessageType); // Function ShooterGame.ShooterBlueprintLibrary.SendCoachPermissionsMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b45e10
	void ScaleAresGameRewardMultiplier(struct FAresGameRewardMultiplier& OriginalMultiplier, float Scalar, struct FAresGameRewardMultiplier& ScaledMultiplier); // Function ShooterGame.ShooterBlueprintLibrary.ScaleAresGameRewardMultiplier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b45c90
	float SampleNormalDistribution(float Mean, float StdDev); // Function ShooterGame.ShooterBlueprintLibrary.SampleNormalDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b45bc0
	void RunEventInProfileScope(struct FDelegate Event, struct FString scope); // Function ShooterGame.ShooterBlueprintLibrary.RunEventInProfileScope // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b45a70
	struct FVector RotateVectorTowardsVector(struct FVector& FromVector, struct FVector& ToVector, float RotationDegrees); // Function ShooterGame.ShooterBlueprintLibrary.RotateVectorTowardsVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b45930
	struct FVector RotateVectorTowardsUp(struct FVector& FromVector, float RotationDegrees); // Function ShooterGame.ShooterBlueprintLibrary.RotateVectorTowardsUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b45830
	struct FVector RotateVectorTowardsDown(struct FVector& FromVector, float RotationDegrees); // Function ShooterGame.ShooterBlueprintLibrary.RotateVectorTowardsDown // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b45730
	struct UObject* ResolveAresSoftReference(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> AssetRef); // Function ShooterGame.ShooterBlueprintLibrary.ResolveAresSoftReference // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b455d0
	void ReportPIEErrorAndContinueTest(struct UObject* WorldContextObject, struct AActor* Actor, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.ReportPIEErrorAndContinueTest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b45470
	void ReportPIEError(struct UObject* WorldContextObject, struct AActor* Actor, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.ReportPIEError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b45310
	void RemovePostProcessModifier(struct APostProcessVolume* Volume, struct UPostProcessTintBlendable* Modifier); // Function ShooterGame.ShooterBlueprintLibrary.RemovePostProcessModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b45250
	void RemoveBoolSettingChangedEvent(struct UObject* WorldContextObject, struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingName, struct FDelegate& Event); // Function ShooterGame.ShooterBlueprintLibrary.RemoveBoolSettingChangedEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b450d0
	void RegisterAudioOcclusionZone(struct UObject* WorldContextObject, struct USphereComponent* AudioOcclusionZone); // Function ShooterGame.ShooterBlueprintLibrary.RegisterAudioOcclusionZone // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b45010
	void PrintLogWarning(struct UObject* WorldContextObject, struct AActor* Actor, struct FString WarningText); // Function ShooterGame.ShooterBlueprintLibrary.PrintLogWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b44eb0
	float PointPlaneDist(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function ShooterGame.ShooterBlueprintLibrary.PointPlaneDist // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b44d70
	void PIEValidationError(struct UObject* Source, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.PIEValidationError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b44bc0
	void PIEValidationCheck(struct UObject* Source, bool CheckedCondition, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.PIEValidationCheck // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b44a50
	struct FString PasteFromClipboard(); // Function ShooterGame.ShooterBlueprintLibrary.PasteFromClipboard // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b44cf0
	bool MontageHasAnyLoops(struct UAnimMontage* Montage); // Function ShooterGame.ShooterBlueprintLibrary.MontageHasAnyLoops // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b44880
	int32_t MinimapLayerToBitmask(enum class EAresMinimapLayer Layer); // Function ShooterGame.ShooterBlueprintLibrary.MinimapLayerToBitmask // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b32b00
	float MilesToGameUnits(float Miles); // Function ShooterGame.ShooterBlueprintLibrary.MilesToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b447f0
	float MetersToGameUnits(float Meters); // Function ShooterGame.ShooterBlueprintLibrary.MetersToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b44760
	bool MeshUsesVertexColoring_EditorOnly(struct UStaticMeshComponent* StaticMeshComp); // Function ShooterGame.ShooterBlueprintLibrary.MeshUsesVertexColoring_EditorOnly // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x37c3390
	struct FText LocalizedStringToText(struct FString Str); // Function ShooterGame.ShooterBlueprintLibrary.LocalizedStringToText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b44650
	void LoadStringTable(struct FName TableId); // Function ShooterGame.ShooterBlueprintLibrary.LoadStringTable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b445c0
	void ListenForInputActionV2(struct UUserWidget* UserWidget, struct UInputComponent* InputComponent, struct FName ActionName, enum class EAresInputState EventType, bool bConsume, struct FDelegate Callback); // Function ShooterGame.ShooterBlueprintLibrary.ListenForInputActionV2 // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b443c0
	bool LineTraceSingleIgnoringTaggedObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FName ActorTagToIgnore, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function ShooterGame.ShooterBlueprintLibrary.LineTraceSingleIgnoringTaggedObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b43f10
	struct TArray<struct FVector> LineIntersectSphere(struct FVector& LineStart, struct FVector& LineEnd, struct FVector& SphereCenter, float SphereRadius); // Function ShooterGame.ShooterBlueprintLibrary.LineIntersectSphere // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b43d30
	float LerpAngle(float FromDegrees, float ToDegrees, float Alpha); // Function ShooterGame.ShooterBlueprintLibrary.LerpAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b43c10
	float KilometersToGameUnits(float Kilometers); // Function ShooterGame.ShooterBlueprintLibrary.KilometersToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b43b80
	bool IsValidPlacePoint(struct UObject* WorldContextObject, struct FVector& Point, struct AActor* PlaceActor, struct FRotator PlaceRotator); // Function ShooterGame.ShooterBlueprintLibrary.IsValidPlacePoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b43a10
	bool IsValidForInclusionExclusionFilter(struct UObject* Object, struct FClassInclusionExclusionFilter& Filter); // Function ShooterGame.ShooterBlueprintLibrary.IsValidForInclusionExclusionFilter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b43890
	bool IsValidAppliedMaterialHandle(struct FAppliedMaterialHandle Handle); // Function ShooterGame.ShooterBlueprintLibrary.IsValidAppliedMaterialHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b43780
	bool IsPreview(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsPreview // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b436f0
	bool IsPointWithinViewAngles(struct AActor* Viewer, struct FVector& Point, float HorizontalDegressInView, float VerticalDegreesInView); // Function ShooterGame.ShooterBlueprintLibrary.IsPointWithinViewAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b43590
	bool IsPlayInEditor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b43220
	bool IsPlayerVisibleFromLocation(struct UObject* WorldContextObject, struct FVector& ViewLocation, struct FVector& ViewVector, struct AActor* Viewee, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel ChannelType, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.IsPlayerVisibleFromLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b43340
	bool IsPlayerModerator(struct AAresPlayerController* Player); // Function ShooterGame.ShooterBlueprintLibrary.IsPlayerModerator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b432b0
	bool IsOutOfGame(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsOutOfGame // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b43190
	bool IsNoneAssetID(struct TSoftClassPtr<UObject> AssetClass); // Function ShooterGame.ShooterBlueprintLibrary.IsNoneAssetID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x348c5b0
	bool IsLocationTargetBlocked(struct TArray<struct FName> TagsToCheck, struct UObject* WorldContextObject, struct FVector& Location); // Function ShooterGame.ShooterBlueprintLibrary.IsLocationTargetBlocked // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b43000
	bool IsLocalPlayerSubject(struct UObject* WorldContextObject, struct FString PlayerSubject); // Function ShooterGame.ShooterBlueprintLibrary.IsLocalPlayerSubject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42e40
	bool IsLocalPlayerACoach(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsLocalPlayerACoach // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42db0
	bool IsLocallyControlledOrSpectated(struct APawn* Pawn); // Function ShooterGame.ShooterBlueprintLibrary.IsLocallyControlledOrSpectated // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42f70
	bool IsListenServer(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsListenServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42d20
	bool IsKeybindsProfileSearchAllowed(); // Function ShooterGame.ShooterBlueprintLibrary.IsKeybindsProfileSearchAllowed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42cf0
	bool IsGameFeatureToggleEnabled(struct UObject* WorldContextObject, enum class EGameFeatureToggleName GameFeatureToggleName); // Function ShooterGame.ShooterBlueprintLibrary.IsGameFeatureToggleEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42c20
	bool IsForceModuleValid(struct FForceModuleHandle& Handle); // Function ShooterGame.ShooterBlueprintLibrary.IsForceModuleValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b42b80
	bool IsEqual(struct FForceModuleHandle& A, struct FForceModuleHandle& B); // Function ShooterGame.ShooterBlueprintLibrary.IsEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b42a90
	bool IsEnemyToLocalViewTarget(struct UObject* WorldContextObject, struct UObject* Object); // Function ShooterGame.ShooterBlueprintLibrary.IsEnemyToLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b429c0
	bool IsDefaultEnemyColorAllowed(); // Function ShooterGame.ShooterBlueprintLibrary.IsDefaultEnemyColorAllowed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b42990
	bool IsCrosshairProfileCustomNamesAllowed(); // Function ShooterGame.ShooterBlueprintLibrary.IsCrosshairProfileCustomNamesAllowed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42960
	bool IsColoredMuzzleFlashSettingEnabled(); // Function ShooterGame.ShooterBlueprintLibrary.IsColoredMuzzleFlashSettingEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42930
	bool IsChildOfClass(struct UObject* Object, struct TSoftClassPtr<UObject> Class); // Function ShooterGame.ShooterBlueprintLibrary.IsChildOfClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b427d0
	bool IsCharacterLocallyOwned(struct AShooterCharacter* Pawn); // Function ShooterGame.ShooterBlueprintLibrary.IsCharacterLocallyOwned // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42740
	bool IsCameraOutOfSpawnRange(struct UObject* WorldContextObject, struct FVector& SpawnLocation, float MaxSpawnDistance); // Function ShooterGame.ShooterBlueprintLibrary.IsCameraOutOfSpawnRange // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b42620
	bool IsBoneVisible(struct FName BoneName, struct FVector CameraLocation, struct AActor* Viewee, struct USkeletalMeshComponent* SkeletalMeshComponent, enum class ECollisionChannel ChannelType); // Function ShooterGame.ShooterBlueprintLibrary.IsBoneVisible // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3b42470
	bool IsAresSoftReferenceLoaded(struct TSoftObjectPtr<UObject> AssetRef); // Function ShooterGame.ShooterBlueprintLibrary.IsAresSoftReferenceLoaded // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b42350
	bool IsAllyToLocalViewTarget(struct UObject* WorldContextObject, struct UObject* Object); // Function ShooterGame.ShooterBlueprintLibrary.IsAllyToLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b42280
	bool IsAllowCheatsBuild(); // Function ShooterGame.ShooterBlueprintLibrary.IsAllowCheatsBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x244a2b0
	bool IsActionMappingPressed(struct UObject* WorldContextObject, struct FName ActionMapping); // Function ShooterGame.ShooterBlueprintLibrary.IsActionMappingPressed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b421a0
	struct FVector InvalidAIVector(); // Function ShooterGame.ShooterBlueprintLibrary.InvalidAIVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b42160
	float InterpolateRangeByInterpolant(float InputValue, struct FAresInputInterpolant& Interpolant); // Function ShooterGame.ShooterBlueprintLibrary.InterpolateRangeByInterpolant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b42060
	float InterpolateRange(float InputValue, float InputRangeStart, float InputRangeEnd, float OutputRangeStart, float OutputRangeEnd, enum class EAresInterpolationFunction InterpolationType); // Function ShooterGame.ShooterBlueprintLibrary.InterpolateRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b41e80
	float Interpolate(float A, float B, float Alpha, enum class EAresInterpolationFunction InterpolationType); // Function ShooterGame.ShooterBlueprintLibrary.Interpolate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b41d20
	bool HasSamePlayerInstigator(struct AActor* Actor, struct AActor* OtherActor); // Function ShooterGame.ShooterBlueprintLibrary.HasSamePlayerInstigator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b41b50
	int32_t HashString(struct FString StringValue); // Function ShooterGame.ShooterBlueprintLibrary.HashString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b41c20
	bool HasDefaultComponent(struct AActor* ActorClass, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.HasDefaultComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b41a80
	bool HasAllianceToLocalViewTarget(struct UObject* WorldContextObject, struct UObject* Object, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.HasAllianceToLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b41980
	void HandleUserAcceptPlatformFault(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.HandleUserAcceptPlatformFault // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b41900
	struct FVector GetWorldPosForYawAndPitch(struct AAresPlayerController* ShooterPlayerController, struct FVector2D YawAndPitch); // Function ShooterGame.ShooterBlueprintLibrary.GetWorldPosForYawAndPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b416c0
	struct FString GetWorldDescription(struct UWorld* World); // Function ShooterGame.ShooterBlueprintLibrary.GetWorldDescription // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b415f0
	void GetWallPenetrationSpans(struct UObject* WorldContextObject, struct FVector& StartLocation, struct FVector& EndLocation, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel Channel, float MinimumPlayableSpan, struct FWallSpanList& Spans); // Function ShooterGame.ShooterBlueprintLibrary.GetWallPenetrationSpans // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b41310
	struct UTelemetryManager* GetTelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetTelemetryManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b41280
	struct UActorComponent* GetSiblingComponent(struct UActorComponent* ThisComponent, struct UActorComponent* Class); // Function ShooterGame.ShooterBlueprintLibrary.GetSiblingComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b411b0
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStatesSortedByScore(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OmitBots, bool bOmitCoaches); // Function ShooterGame.ShooterBlueprintLibrary.GetShooterPlayerStatesSortedByScore // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b40fb0
	struct AShooterHUD* GetShooterHUD(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetShooterHUD // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40f20
	struct AShooterGameState* GetShooterGameState(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetShooterGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40e90
	int32_t GetRewardValue(struct FAresGameReward& Reward, enum class EAresGameReward RewardType); // Function ShooterGame.ShooterBlueprintLibrary.GetRewardValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b40d80
	int32_t GetRespawnNumberFromTimestamp(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp); // Function ShooterGame.ShooterBlueprintLibrary.GetRespawnNumberFromTimestamp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b40ce0
	enum class EAresOrientation GetRelativeOrientation(struct AActor* Actor, struct FVector Point); // Function ShooterGame.ShooterBlueprintLibrary.GetRelativeOrientation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b40c00
	struct FLinearColor GetRedToGreenColor(float tVal); // Function ShooterGame.ShooterBlueprintLibrary.GetRedToGreenColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b40b70
	float GetRadialFalloffDamage(float OuterRadius, float BaseDamage, float DistanceFromCenter, float InnerRadius, float MinDamage); // Function ShooterGame.ShooterBlueprintLibrary.GetRadialFalloffDamage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b409c0
	struct UAresPurchasableEquippable* GetPurchasableForWeaponItemClass(struct UObject* WorldContextObject, struct AAresItem* ItemClass); // Function ShooterGame.ShooterBlueprintLibrary.GetPurchasableForWeaponItemClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b408f0
	struct TArray<struct UActorComponent*> GetPreloadableComponents(struct AActor* Actor); // Function ShooterGame.ShooterBlueprintLibrary.GetPreloadableComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b40820
	float GetPlayerHFoV(struct AShooterCharacter* Viewer); // Function ShooterGame.ShooterBlueprintLibrary.GetPlayerHFoV // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b40790
	struct FString GetPlayerFacingBuildVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetPlayerFacingBuildVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40700
	struct TArray<struct AShooterCharacter*> GetPlayerCharactersSortedByScore(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.GetPlayerCharactersSortedByScore // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b405b0
	struct UObject* GetParentClass(struct UObject* Class); // Function ShooterGame.ShooterBlueprintLibrary.GetParentClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40520
	struct AAresEquippable* GetOwningEquippableFromAbilitySubObject(struct AActor* Subobject); // Function ShooterGame.ShooterBlueprintLibrary.GetOwningEquippableFromAbilitySubObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40490
	struct FString GetOnlineSubsystemEnvironment(); // Function ShooterGame.ShooterBlueprintLibrary.GetOnlineSubsystemEnvironment // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40410
	struct FString GetObjectWorldDescription(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetObjectWorldDescription // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40340
	struct FVector GetNonParallelUnitVector(struct FVector& SourceVector); // Function ShooterGame.ShooterBlueprintLibrary.GetNonParallelUnitVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b402a0
	struct FString GetNetModeString(struct UWorld* World); // Function ShooterGame.ShooterBlueprintLibrary.GetNetModeString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b401d0
	float GetMovementTimestampNet(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp); // Function ShooterGame.ShooterBlueprintLibrary.GetMovementTimestampNet // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b40130
	float GetMovementTimestamp(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp); // Function ShooterGame.ShooterBlueprintLibrary.GetMovementTimestamp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b40090
	struct FString GetMajorMinorFullBuildVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetMajorMinorFullBuildVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b40010
	struct AShooterCharacter* GetLocalViewTargetCharacter(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalViewTargetCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f300
	struct AActor* GetLocalViewTarget(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ff80
	float GetLocalPlayerLastRenderTime(struct UPrimitiveComponent* PrimComponent); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalPlayerLastRenderTime // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3b3fef0
	struct AOwnerExclusivePlayerInfo* GetLocalPlayerInfo(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalPlayerInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3fe60
	struct UGameFeatureTogglesComponent* GetLocalGameFeatureTogglesComponent(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalGameFeatureTogglesComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3fdd0
	struct AAresPlayerController* GetLocalController(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3fd40
	struct AShooterCharacter* GetLocalCharacter(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3fcb0
	struct FTransform GetLHMMirroredTransform(enum class ELHMMirroringIgnoreType MirroringType, struct FVector& OriginalLocation, struct FRotator& OriginalRotation, struct FVector& OriginalScale); // Function ShooterGame.ShooterBlueprintLibrary.GetLHMMirroredTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3faf0
	bool GetIsShippingBuild(); // Function ShooterGame.ShooterBlueprintLibrary.GetIsShippingBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x372f710
	bool GetIsLocalPlayerCurrentlyRendering(struct UPrimitiveComponent* PrimComponent); // Function ShooterGame.ShooterBlueprintLibrary.GetIsLocalPlayerCurrentlyRendering // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3b3fa60
	bool GetIsChinaBuild(); // Function ShooterGame.ShooterBlueprintLibrary.GetIsChinaBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x244a2b0
	int32_t GetIntSetting(struct AActor* WorldContextObject, struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingName); // Function ShooterGame.ShooterBlueprintLibrary.GetIntSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f960
	struct FName GetInputActionNameForMoveInput(enum class EAresMoveInput MoveInput); // Function ShooterGame.ShooterBlueprintLibrary.GetInputActionNameForMoveInput // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f8d0
	struct FName GetInputActionNameForEquippableInput(enum class EAresEquippableInput Input); // Function ShooterGame.ShooterBlueprintLibrary.GetInputActionNameForEquippableInput // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f840
	bool GetGameRuleBool(struct UObject* WorldContextObject, enum class EGameRuleBoolName GameRuleBoolName); // Function ShooterGame.ShooterBlueprintLibrary.GetGameRuleBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f770
	void GetGameFeatureFloatConfig(struct UObject* WorldContextObject, enum class EGameFeatureFloatConfigName GameFeatureFloatConfigName, bool& IsValid, float& ConfigValue); // Function ShooterGame.ShooterBlueprintLibrary.GetGameFeatureFloatConfig // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b3f600
	struct FString GetFullBuildVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetFullBuildVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f580
	struct FString GetFullBuildVersion(); // Function ShooterGame.ShooterBlueprintLibrary.GetFullBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f500
	float GetFloatValue(struct FExplicitFloatCurve& Curve, float Time); // Function ShooterGame.ShooterBlueprintLibrary.GetFloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b3f390
	struct AShooterCharacter* GetFirstPersonCharacter(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetFirstPersonCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f300
	struct APlayerController* GetFirstLocalPlayerController(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetFirstLocalPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f270
	struct UActorComponent* GetFirstDefaultComponent(struct AActor* ActorClass, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.GetFirstDefaultComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f1a0
	enum class EAresDisplayMode GetDisplayModeFromWindowMode(enum class EWindowMode WindowMode); // Function ShooterGame.ShooterBlueprintLibrary.GetDisplayModeFromWindowMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3f120
	float GetDegreesAwayFromUp(struct FVector& Vector); // Function ShooterGame.ShooterBlueprintLibrary.GetDegreesAwayFromUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3f090
	float GetDegreesAwayFromDown(struct FVector& Vector); // Function ShooterGame.ShooterBlueprintLibrary.GetDegreesAwayFromDown // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3f000
	float GetDegreesApart(struct FVector& VectorA, struct FVector& VectorB); // Function ShooterGame.ShooterBlueprintLibrary.GetDegreesApart // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3ef10
	struct AAresEquippable* GetDefaultEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.ShooterBlueprintLibrary.GetDefaultEquippable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ee80
	struct TArray<struct UActorComponent*> GetDefaultComponents(struct AActor* ActorClass, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.GetDefaultComponents // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ed70
	struct ADamageSource* GetDamageSourceFromDamageTypeClass(struct UDamageType* DamageTypeClass); // Function ShooterGame.ShooterBlueprintLibrary.GetDamageSourceFromDamageTypeClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ece0
	struct ADamageSource* GetDamageSourceFromDamageResponse(struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterBlueprintLibrary.GetDamageSourceFromDamageResponse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ec50
	struct FString GetCVarValueString(struct FName CVarName); // Function ShooterGame.ShooterBlueprintLibrary.GetCVarValueString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3e560
	int32_t GetCVarValueInt(struct FName CVarName); // Function ShooterGame.ShooterBlueprintLibrary.GetCVarValueInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3e4c0
	float GetCVarValueFloat(struct FName CVarName); // Function ShooterGame.ShooterBlueprintLibrary.GetCVarValueFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3e420
	int32_t GetCurrentEngineFrame(); // Function ShooterGame.ShooterBlueprintLibrary.GetCurrentEngineFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3ec20
	struct FText GetCurrentCalloutRegionNameForActor(struct AActor* Actor); // Function ShooterGame.ShooterBlueprintLibrary.GetCurrentCalloutRegionNameForActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3eb20
	struct AAresCalloutRegion* GetCurrentCalloutRegionForActor(struct AActor* Actor); // Function ShooterGame.ShooterBlueprintLibrary.GetCurrentCalloutRegionForActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ea90
	struct UCoordinatedHUDModel* GetCoordinatedHUDModel(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetCoordinatedHUDModel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3ea00
	struct FString GetContentVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetContentVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3e980
	void GetComponentArrayBounds(struct TArray<struct UActorComponent*>& Components, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function ShooterGame.ShooterBlueprintLibrary.GetComponentArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3e7f0
	enum class ECollisionTraceFlag GetCollisionTraceFlag(struct UStaticMesh* StaticMesh); // Function ShooterGame.ShooterBlueprintLibrary.GetCollisionTraceFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3e760
	struct UObject* GetClassDefaultObject(struct UObject* Class); // Function ShooterGame.ShooterBlueprintLibrary.GetClassDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3e6d0
	struct AAresCalloutRegion* GetCalloutRegionFromPlayer(struct AShooterPlayerState* Player); // Function ShooterGame.ShooterBlueprintLibrary.GetCalloutRegionFromPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3e640
	bool GetBoolSetting(struct AActor* WorldContextObject, struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingName); // Function ShooterGame.ShooterBlueprintLibrary.GetBoolSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3e320
	struct TArray<struct AActor*> GetBestAimTargetList(struct AShooterCharacter* AimingPawn, float MaxTargetRange, float MaxTargetRangeYaw, float MaxTargetAnglePitch, struct FClassInclusionExclusionFilter& ClassFilter, struct AActor* CurrentAimTarget, float CurrentTargetScoreBonus); // Function ShooterGame.ShooterBlueprintLibrary.GetBestAimTargetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b3e000
	struct AAresWorldSettings* GetAresWorldSettings(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAresWorldSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3df70
	struct UAresSlateGlobals* GetAresSlateGlobals(); // Function ShooterGame.ShooterBlueprintLibrary.GetAresSlateGlobals // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3df40
	struct UShooterGameGlobals* GetAresGlobals(); // Function ShooterGame.ShooterBlueprintLibrary.GetAresGlobals // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3df10
	struct UAresEquippableGlobals* GetAresEquippableGlobals(); // Function ShooterGame.ShooterBlueprintLibrary.GetAresEquippableGlobals // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3dee0
	float GetAngleFromNorthXY(struct FVector InVector, struct FVector North); // Function ShooterGame.ShooterBlueprintLibrary.GetAngleFromNorthXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3de00
	float GetAngleFromNorth(struct FVector& InVector, struct FVector& North); // Function ShooterGame.ShooterBlueprintLibrary.GetAngleFromNorth // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3dd10
	float GetAngleBetween2DVectors(struct FVector2D& From, struct FVector2D& To); // Function ShooterGame.ShooterBlueprintLibrary.GetAngleBetween2DVectors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3dc30
	void GetAmmoHudInfoForEquippable(struct UObject* WorldContextObject, struct AAresEquippable* Equippable, bool& bIsValid, struct FAmmoHudInfo& OutHudInfo); // Function ShooterGame.ShooterBlueprintLibrary.GetAmmoHudInfoForEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b3dac0
	float GetAimScore(struct AActor* AimTargetActor, struct FVector& CamLocation, struct FRotator& CamRotation, float MaxAimDistance, float AimDistanceBias, float CollisionScale, float IndirectTargetAngleYaw, float IndirectTargetAnglePitch, struct UCurveFloat* AimScoreCurve, struct FVector& OutAimPointOnObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAimScore // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3d7b0
	void GetActorAndChildren(struct AActor* Actor, struct TArray<struct AActor*>& Actors); // Function ShooterGame.ShooterBlueprintLibrary.GetActorAndChildren // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b3d6d0
	struct FColor GetAccessibilityEnemyHUDColor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAccessibilityEnemyHUDColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3b3d640
	struct FColor GetAccessibilityEnemyColor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAccessibilityEnemyColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3b3d5b0
	enum class EAresColorBlindMode GetAccessibilityColorBlindMode(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAccessibilityColorBlindMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3d520
	struct FColor GetAccessibilityAllyColor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAccessibilityAllyColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3b3d490
	float GameUnitsToYards(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToYards // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3d400
	float GameUnitsToMiles(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToMiles // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3d370
	float GameUnitsToMeters(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToMeters // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3d2e0
	float GameUnitsToKilometers(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToKilometers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3d250
	float GameUnitsToFeet(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToFeet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3d1c0
	struct TArray<struct AShooterCharacter*> FindSpawnedCharactersWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool AliveOnly); // Function ShooterGame.ShooterBlueprintLibrary.FindSpawnedCharactersWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3d010
	struct TArray<struct AShooterCharacter*> FindShooterCharactersInCone(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct FVector ConeForwardVector, float ConeFullAngle, enum class EAresConeAngleCheckType ConeAngleCheckType, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindShooterCharactersInCone // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3cc10
	struct AShooterCharacter* FindRandomSpawnedCharacterWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool AliveOnly); // Function ShooterGame.ShooterBlueprintLibrary.FindRandomSpawnedCharacterWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3cac0
	struct TArray<struct AShooterCharacter*> FindRadialShooterCharacters(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindRadialShooterCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3c7a0
	struct TArray<struct AAresOnGroundEquippable*> FindRadialOnGroundEquippables(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindRadialOnGroundEquippables // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3c480
	void FindRadialAresActors(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& ResultAresActors, bool bFindShooterCharacters, bool bFindGameObjects, bool bFindProjectiles, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindRadialAresActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3c060
	struct AShooterCharacter* FindPreviousPlayer(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, struct AShooterCharacter* CurrentAlly, struct AShooterCharacter* IgnoreCharacter); // Function ShooterGame.ShooterBlueprintLibrary.FindPreviousPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3bed0
	struct TArray<struct AStaticMeshActor*> FindOverlappingStaticMeshes(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindOverlappingStaticMeshes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3be00
	bool FindOtherSideOfWall(struct UObject* WorldContextObject, struct FVector& Location, struct FRotator& Rotation, float MaximumDistance, float IgnoreGapTolerance, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel Channel, struct FVector& Entrance, struct FVector& Exit); // Function ShooterGame.ShooterBlueprintLibrary.FindOtherSideOfWall // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3bb00
	struct AShooterCharacter* FindNextPlayer(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, struct AShooterCharacter* CurrentAlly, struct AShooterCharacter* IgnoreCharacter); // Function ShooterGame.ShooterBlueprintLibrary.FindNextPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3b970
	bool FindNearbyLocationForComponentToPoint(struct FVector& Location, struct FRotator& Rotation, struct UPrimitiveComponent* TargetComponent, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForComponentToPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3b5f0
	bool FindNearbyLocationForComponentToActor(struct AActor* SourceActor, struct UPrimitiveComponent* TargetComponent, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForComponentToActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3b2d0
	bool FindNearbyLocationForActorToPoint(struct FVector& Location, struct FRotator& Rotation, struct AActor* TargetActor, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForActorToPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3af50
	bool FindNearbyLocationForActorToActor(struct AActor* SourceActor, struct AActor* TargetActor, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForActorToActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b3ac30
	struct AGameObject* FindFirstGameObjectWithTagAndAlliance(struct UObject* WorldContextObject, struct FName Tag, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstGameObjectWithTagAndAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3aad0
	struct AGameObject* FindFirstGameObjectWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstGameObjectWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3a9e0
	struct UActorComponent* FindFirstComponentInOwnershipChain(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstComponentInOwnershipChain // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3a910
	struct AAresMarker* FindFirstAresMarkerWithTagAndAlliance(struct UObject* WorldContextObject, struct FName Tag, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstAresMarkerWithTagAndAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3a7b0
	struct AAresMarker* FindFirstAresMarkerWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstAresMarkerWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b3a6c0
	struct UActorComponent* FindDefaultComponentByName(struct AActor* InActorClass, struct FString Name); // Function ShooterGame.ShooterBlueprintLibrary.FindDefaultComponentByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b3a590
	void FindDamageableActorHitsInAxialArea(struct TMap<struct AActor*, struct FHitResult>& OutHitActors, struct UObject* WorldContextObject, struct FVector& SearchOrigin, struct TArray<struct AActor*>& IgnoreActors, float SearchRadius, float AxialOffset, enum class ECollisionChannel TraceChannel, bool UseComplexCollisionForEndpoints); // Function ShooterGame.ShooterBlueprintLibrary.FindDamageableActorHitsInAxialArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b3a220
	struct AShooterCharacter* FindClosestShooterCharacterInCone(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct FVector ConeForwardVector, float ConeFullAngle, enum class EAresConeAngleCheckType ConeAngleCheckType, struct TArray<struct AActor*>& IgnoreActors, bool LivingOnly, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindClosestShooterCharacterInCone // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b39e20
	struct AShooterCharacter* FindClosestRadialShooterCharacter(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& IgnoreActors, bool LivingOnly, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindClosestRadialShooterCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b39b00
	void FindAresActorsInCone(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct FVector ConeForwardVector, float ConeFullAngle, enum class EAresConeAngleCheckType ConeAngleCheckType, struct TArray<struct AActor*>& ResultAresActors, bool bFindShooterCharacters, bool bFindGameObjects, bool bFindProjectiles, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindAresActorsInCone // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b39600
	void FindAresActorsInAxialArea(struct TArray<struct AActor*>& OutHitActors, struct UObject* WorldContextObject, struct FVector& SearchOrigin, struct TArray<struct AActor*>& IgnoreActors, bool bFindShooterCharacters, bool bFindGameObjects, bool bFindProjectiles, struct UObject* Viewer, enum class EAresAlliance Alliance, float SearchRadius, float AxialOffset, enum class EAresSearchVisibilityType SearchVisibilityType, enum class ECollisionChannel TraceChannel, bool UseComplexCollisionForEndpoints); // Function ShooterGame.ShooterBlueprintLibrary.FindAresActorsInAxialArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b39190
	struct TArray<struct AShooterPlayerState*> FindAllShooterPlayerStatesWithAllianceSortedByTeam(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OmitCoaches, bool OnlyAlivePlayers); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterPlayerStatesWithAllianceSortedByTeam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b38f90
	struct TArray<struct AShooterPlayerController*> FindAllShooterControllersWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterControllersWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b38e40
	struct TArray<struct AShooterPlayerController*> FindAllShooterControllers(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterControllers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b38d70
	struct TArray<struct AShooterCharacter*> FindAllShooterCharactersWithAllianceSortedByTeam(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OnlyPlayerControlled, bool OnlyAlivePlayers); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterCharactersWithAllianceSortedByTeam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b38b70
	struct TArray<struct AShooterCharacter*> FindAllShooterCharactersWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OnlyPlayerControlled, bool OnlyAlivePlayers); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterCharactersWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b38970
	struct TArray<struct AShooterCharacter*> FindAllShooterCharacters(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b388a0
	struct TArray<struct AOwnerExclusivePlayerInfo*> FindAllPlayerInfosWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool bOmitCoaches); // Function ShooterGame.ShooterBlueprintLibrary.FindAllPlayerInfosWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b386f0
	struct TArray<struct AOwnerExclusivePlayerInfo*> FindAllPlayerInfos(struct UObject* WorldContextObject, bool bOmitCoaches); // Function ShooterGame.ShooterBlueprintLibrary.FindAllPlayerInfos // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b385e0
	struct TArray<struct AGameObject*> FindAllGameObjectsWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindAllGameObjectsWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b384b0
	struct TArray<struct AGameObject*> FindAllGameObjects(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllGameObjects // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b383e0
	struct TArray<struct AAresMarker*> FindAllAresMarkersWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindAllAresMarkersWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b382b0
	struct TArray<struct AAresPlayerController*> FindAllAresControllers(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllAresControllers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b381e0
	struct TArray<struct AActor*> FindActorsOverlappingComponentByChannel(struct UPrimitiveComponent* Primitive, enum class ECollisionChannel TraceChannel, struct TArray<struct AActor*>& IgnoreActors); // Function ShooterGame.ShooterBlueprintLibrary.FindActorsOverlappingComponentByChannel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b38070
	void FindActorsInAxialArea(struct TArray<struct AActor*>& OutHitActors, struct UObject* WorldContextObject, struct FVector& SearchOrigin, struct TArray<struct AActor*>& IgnoreActors, float SearchRadius, float AxialOffset, enum class ECollisionChannel TraceChannel); // Function ShooterGame.ShooterBlueprintLibrary.FindActorsInAxialArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b37df0
	float FeetToGameUnits(float Feet); // Function ShooterGame.ShooterBlueprintLibrary.FeetToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b37d60
	bool EqualEqual_ActionChordActionChord(struct FActionChord A, struct FActionChord B); // Function ShooterGame.ShooterBlueprintLibrary.EqualEqual_ActionChordActionChord // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b37b60
	void EndPlayInEditor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.EndPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x372eb00
	void DrawDebugTextOnAllClients(struct UObject* WorldContextObject, struct FString Text, struct FLinearColor Color, float LifeTime); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugTextOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3b379f0
	void DrawDebugSphereOnAllClients(struct UObject* WorldContextObject, struct FVector& Center, float Radius, int32_t Segments, struct FColor& SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugSphereOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b34bf0
	void DrawDebugLineOnAllClients(struct UObject* WorldContextObject, struct FVector& LineStart, struct FVector& LineEnd, struct FColor& LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugLineOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b34960
	void DrawDebugBoxOnAllClients(struct UObject* WorldContextObject, struct FBox& Box, struct FColor& Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugBoxOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b377b0
	void DoNothing(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.DoNothing // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x372eb00
	struct UUserWidget* CreateClientOnlyUserWidget(struct TSoftClassPtr<UObject> WidgetAsset, struct APlayerController* OwningPlayer); // Function ShooterGame.ShooterBlueprintLibrary.CreateClientOnlyUserWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b37650
	bool CouldEventBeAudibleByLocalPlayer(struct UObject* WorldContextObject, struct UAkAudioEvent* Event, struct FVector& SoundSpawnLocation, bool bIsSoundAttached, float VolumeMultiplier); // Function ShooterGame.ShooterBlueprintLibrary.CouldEventBeAudibleByLocalPlayer // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b37480
	void CopyToClipboard(struct FString Input); // Function ShooterGame.ShooterBlueprintLibrary.CopyToClipboard // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b373e0
	enum class EAresSurfaceType ConvertToAresSurfaceType(enum class EPhysicalSurface SurfaceType); // Function ShooterGame.ShooterBlueprintLibrary.ConvertToAresSurfaceType // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b37360
	struct AShooterCharacter* ControllerToShooterCharacter(struct AController* Controller); // Function ShooterGame.ShooterBlueprintLibrary.ControllerToShooterCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b372d0
	void ComputeViewpointValues(struct UObject* WorldContextObject, struct FVector& WorldPosition, bool& bIsOnScreen, float& InWorldDistanceToViewpoint, struct FVector2D& ScreenDistanceToViewpointNormalized01, float& AspectRatio); // Function ShooterGame.ShooterBlueprintLibrary.ComputeViewpointValues // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b370a0
	bool ComponentIsVisibleFrom(struct UPrimitiveComponent* ComponentToCheck, struct FVector& Origin, struct TArray<struct AActor*>& IgnoreActors, struct FHitResult& OutHitResult, enum class ECollisionChannel TraceChannel, bool bReverseLineCheck); // Function ShooterGame.ShooterBlueprintLibrary.ComponentIsVisibleFrom // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b36e50
	bool CompareText(struct FText& LHS, struct FText& Rhs); // Function ShooterGame.ShooterBlueprintLibrary.CompareText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b36cc0
	bool CompareNetworkedMovementTimestamps(struct FNetworkedMovementTimestamp& NetworkedMovementTimestampOne, struct FNetworkedMovementTimestamp& NetworkedMovementTimestampTwo); // Function ShooterGame.ShooterBlueprintLibrary.CompareNetworkedMovementTimestamps // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b36bc0
	struct FString ColorToString(struct FColor Color); // Function ShooterGame.ShooterBlueprintLibrary.ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b36b00
	struct FVector ClosestPointOnLineToPoint(struct FVector& LineStart, struct FVector& LineEnd, struct FVector& Point); // Function ShooterGame.ShooterBlueprintLibrary.ClosestPointOnLineToPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b369b0
	void ClientClearAllMapDecals(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.ClientClearAllMapDecals // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3b36930
	void ClickActionMapping(struct UObject* WorldContextObject, struct FName ActionMapping); // Function ShooterGame.ShooterBlueprintLibrary.ClickActionMapping // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b36850
	void ClearUserFocus(int32_t UserIndex); // Function ShooterGame.ShooterBlueprintLibrary.ClearUserFocus // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3b367d0
	bool ClassIsValid(struct UObject* ClassType); // Function ShooterGame.ShooterBlueprintLibrary.ClassIsValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b36720
	bool CircleOverlapsRectangle2D(struct FVector2D& CircleCenter, float CircleRadius, struct FVector2D& RectangleCenter, struct FVector2D& RectangleHalfSize); // Function ShooterGame.ShooterBlueprintLibrary.CircleOverlapsRectangle2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b365b0
	void CheckOrReportPIEError(bool Condition, struct UObject* WorldContextObject, struct AActor* Actor, struct FString ErrorMsg); // Function ShooterGame.ShooterBlueprintLibrary.CheckOrReportPIEError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b36400
	struct AShooterPlayerController* CastToShooterPlayerController(struct AController* Controller); // Function ShooterGame.ShooterBlueprintLibrary.CastToShooterPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b36370
	bool CapsuleBlockedByChannel(struct UObject* WorldContextObject, struct FVector& CapsuleLocation, float CapsuleHalfHeight, float CapsuleRadius, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel TraceChannel, bool bTraceComplex); // Function ShooterGame.ShooterBlueprintLibrary.CapsuleBlockedByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b36120
	bool CanPlayerSeePlayer(struct AShooterCharacter* Viewer, struct AShooterCharacter* Viewee, enum class ECollisionChannel ChannelType, bool bObeySightDebuffs, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.CanPlayerSeePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b35f80
	bool CanPlayerSeeActorWithCameraContext(struct AShooterCharacter* Viewer, struct AActor* Viewee, struct UWorld* CurrentWorld, struct FVector CameraLocation, struct FVector CameraAimVector, struct FVector CameraUpVector, enum class ECollisionChannel ChannelType, bool bObeySightDebuffs, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.CanPlayerSeeActorWithCameraContext // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3b35cc0
	bool CanPlayerSeeActor(struct AShooterCharacter* Viewer, struct AActor* Viewee, enum class ECollisionChannel ChannelType, bool bObeySightDebuffs, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.CanPlayerSeeActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b35b20
	bool CanActorSeeComponent(struct AActor* Viewer, struct UPrimitiveComponent* Viewee, float HorizontalDegressInView, float VerticalDegreesInView, enum class ECollisionChannel ChannelType, bool bHighRes); // Function ShooterGame.ShooterBlueprintLibrary.CanActorSeeComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b35950
	bool CanActorSeeActor(struct AActor* Viewer, struct AActor* Viewee, float HorizontalDegressInView, float VerticalDegreesInView, bool bNonColliding, enum class ECollisionChannel ChannelType, bool bHighRes); // Function ShooterGame.ShooterBlueprintLibrary.CanActorSeeActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b35740
	void CalculateGrenadeArc(float UpwardArc, float UpwardShift, struct FVector& InOrigin, struct FVector& InDirection, struct FVector& OutOrigin, struct FVector& OutDirection); // Function ShooterGame.ShooterBlueprintLibrary.CalculateGrenadeArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b35510
	void AuthWorldRemoveAllEquippablesByClass(struct UObject* WorldContextObject, struct AAresEquippable* EquippableClass); // Function ShooterGame.ShooterBlueprintLibrary.AuthWorldRemoveAllEquippablesByClass // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x3b35450
	struct AAresEquippable* AuthSpawnEquippableCopySkin(struct FTransform& SpawnTransform, struct AActor* Owner, struct AAresEquippable* ExistingEquippable); // Function ShooterGame.ShooterBlueprintLibrary.AuthSpawnEquippableCopySkin // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b352f0
	bool AuthProjectPointToNavMesh(struct UObject* WorldContextObject, struct FVector Point, struct FVector& OutProjectedPoint, float MaxAllowedProjectionVerticalDistance); // Function ShooterGame.ShooterBlueprintLibrary.AuthProjectPointToNavMesh // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b35170
	struct AShooterGameMode* AuthGetShooterGameMode(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.AuthGetShooterGameMode // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b350e0
	bool AuthFindValidPlacePoint(struct UObject* WorldContextObject, struct AActor* PlaceActor, struct FVector Point, struct FRotator PlaceRotator, float SearchRadius, float DesiredGroundHeightOffsetForPlacePoint, struct FVector& OutPlacePoint, float MaxAllowedProjectionVerticalDistance); // Function ShooterGame.ShooterBlueprintLibrary.AuthFindValidPlacePoint // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b34e60
	void AuthDrawDebugSphereOnAllClients(struct UObject* WorldContextObject, struct FVector& Center, float Radius, int32_t Segments, struct FColor& SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterBlueprintLibrary.AuthDrawDebugSphereOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b34bf0
	void AuthDrawDebugLineOnAllClients(struct UObject* WorldContextObject, struct FVector& LineStart, struct FVector& LineEnd, struct FColor& LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterBlueprintLibrary.AuthDrawDebugLineOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b34960
	void AuthCreateDelegatesForAbilitySubobject(struct UObject* WorldContextObject, struct AActor* SourceActor, struct AActor* TargetActor); // Function ShooterGame.ShooterBlueprintLibrary.AuthCreateDelegatesForAbilitySubobject // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x3b34860
	void AuthBroadcastSystemMessage(struct UWorld* World, struct APlayerState* SourcePlayer, struct APlayerState* TargetPlayer, struct FText& MsgText); // Function ShooterGame.ShooterBlueprintLibrary.AuthBroadcastSystemMessage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b346c0
	void AresStopEvent(struct UAkAudioEvent* Event, struct AActor* Owner); // Function ShooterGame.ShooterBlueprintLibrary.AresStopEvent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3b34600
	void AresStabilityTypeToString(struct FString& MovementTypeString, enum class EAresStabilityType StabilityType); // Function ShooterGame.ShooterBlueprintLibrary.AresStabilityTypeToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b34390
	bool AresProjectPointToNavigation(struct UObject* WorldContextObject, struct FVector& Point, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.ShooterBlueprintLibrary.AresProjectPointToNavigation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3b34480
	void AresMovementTypeToString(struct FString& MovementTypeString, enum class EAresMovementType MovementType); // Function ShooterGame.ShooterBlueprintLibrary.AresMovementTypeToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b34390
	bool AresLineTraceSingleByChannel(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<struct AActor*>& ActorsToIgnore, struct FHitResult& OutHit, enum class ECollisionChannel TraceChannel, bool bTraceComplex, bool bIncludeMovingObjects); // Function ShooterGame.ShooterBlueprintLibrary.AresLineTraceSingleByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b34080
	bool AresApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function ShooterGame.ShooterBlueprintLibrary.AresApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b33cd0
	bool ApproximateNewProjectileArc(struct UObject* WorldContextObject, struct FVector& Origin, struct FVector& ShootDir, struct AProjectile* ProjectileClass, struct AActor* IgnoreActor, struct TArray<struct FVector>& OutStepList, struct FVector& OutCollisionPoint, struct FVector& OutCollisionNormal); // Function ShooterGame.ShooterBlueprintLibrary.ApproximateNewProjectileArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b33a20
	void ApplyRadialBuff_V2(struct UObject* WorldContextObject, struct UAresGameplayBuff* BuffClass, struct FVector& Origin, float Radius, struct AActor* DamageCauser, struct APawn* InstigatorPawn); // Function ShooterGame.ShooterBlueprintLibrary.ApplyRadialBuff_V2 // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b33820
	struct TArray<struct UObject*> ApplyInclusionExclusionFilter(struct TArray<struct UObject*>& Array, struct FClassInclusionExclusionFilter& Filter); // Function ShooterGame.ShooterBlueprintLibrary.ApplyInclusionExclusionFilter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b33450
	struct FActiveGameplayEffectHandle ApplyAresBuff(struct AActor* BuffTarget, struct UAresGameplayBuff* BuffClass, struct AActor* DamageCauser, struct APawn* InstigatorPawn, float BuffLevel, bool bCanApplyToDeadObjects); // Function ShooterGame.ShooterBlueprintLibrary.ApplyAresBuff // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b33640
	struct TArray<struct AActor*> ApplyActorInclusionExclusionFilter(struct TArray<struct AActor*>& Array, struct FClassInclusionExclusionFilter& Filter); // Function ShooterGame.ShooterBlueprintLibrary.ApplyActorInclusionExclusionFilter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b33450
	void AdjustScoreForTeamPlayers(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, int32_t Delta, struct FName& Reason); // Function ShooterGame.ShooterBlueprintLibrary.AdjustScoreForTeamPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b332b0
	float AdjustDeveloperMovementHelper(float Adjustment); // Function ShooterGame.ShooterBlueprintLibrary.AdjustDeveloperMovementHelper // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b33220
	struct FNetworkedMovementTimestamp AddTimeToNetworkedMovementTimestamp(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp, float AdditionalTime); // Function ShooterGame.ShooterBlueprintLibrary.AddTimeToNetworkedMovementTimestamp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b33120
	void AddSentryTag(struct FString Name, struct FString Value); // Function ShooterGame.ShooterBlueprintLibrary.AddSentryTag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b33020
	struct FAresGameReward AddRewards(struct FAresGameReward& Reward1, struct FAresGameReward& Reward2); // Function ShooterGame.ShooterBlueprintLibrary.AddRewards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b32ee0
	struct UPostProcessTintBlendable* AddNewPostProcessModifier(struct APostProcessVolume* Volume, struct UPostProcessTintBlendable* ModifierClass, float Weight); // Function ShooterGame.ShooterBlueprintLibrary.AddNewPostProcessModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b32dd0
	struct UActorComponent* AddComponentByClass(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.AddComponentByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b32d00
	void AddBoolSettingChangedEvent(struct UObject* WorldContextObject, struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingName, struct FDelegate& Event); // Function ShooterGame.ShooterBlueprintLibrary.AddBoolSettingChangedEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b32b80
	int32_t ActorVisibilityTargetToBitmask(enum class EAresActorVisibilityTarget Target); // Function ShooterGame.ShooterBlueprintLibrary.ActorVisibilityTargetToBitmask // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b32b00
	void ActorGetShieldInfo(struct AActor* Actor, float& Shield, float& MaxShield); // Function ShooterGame.ShooterBlueprintLibrary.ActorGetShieldInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b329e0
};

// Class ShooterGame.ShooterCamera
// Size: 0x2ee0 (Inherited: 0x2e40)
struct AShooterCamera : APlayerCameraManager {
	struct FMulticastInlineDelegate OnViewTargetChanged; // 0x2e38(0x10)
	struct FMulticastInlineDelegate OnAresCameraStyleChanged; // 0x2e48(0x10)
	struct FMulticastInlineDelegate OnAresCameraPerspectiveChanged; // 0x2e58(0x10)
	enum class EAresCameraPerspective AresCameraPerspective; // 0x2e68(0x01)
	struct FRotator LastControlRotation; // 0x2e6c(0x0c)
	struct FRotator DebugInputRotator; // 0x2e78(0x0c)
	float Camera3PTargetZoom; // 0x2e84(0x04)
	bool bCamera3PRotateEnabled; // 0x2e88(0x01)
	char pad_2E8E[0x2]; // 0x2e8e(0x02)
	struct USpringArmComponent* Camera3PSpringArm; // 0x2e90(0x08)
	struct UCameraComponent* Camera3P; // 0x2e98(0x08)
	struct FAresThidPersonDebugCameraSettings ThirdPersonDebugCameraSettings; // 0x2ea0(0x20)
	struct FSpectatorFocusObjectCameraSettings SpectatorFocusObjectCameraSettings; // 0x2ec0(0x10)
	bool bTargetViewModeActive; // 0x2ed0(0x01)
	char pad_2ED1[0xf]; // 0x2ed1(0x0f)

	void SetTargetViewModeActive(bool bValue); // Function ShooterGame.ShooterCamera.SetTargetViewModeActive // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65270
	bool GetTargetViewModeActive(); // Function ShooterGame.ShooterCamera.GetTargetViewModeActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62980
};

// Class ShooterGame.ShooterCharacter
// Size: 0x1190 (Inherited: 0x680)
struct AShooterCharacter : ACharacter {
	char pad_680[0x28]; // 0x680(0x28)
	struct FMulticastInlineDelegate OnCharacterPreDeath; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnCharacterDeath; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnAuthGotKill; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnAuthGotAssist; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnAuthGenerateKillEffects; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnAuthTookDamage; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnAuthInvulnerabilityBlockedDamage; // 0x708(0x10)
	char pad_718[0x18]; // 0x718(0x18)
	struct FMulticastInlineDelegate OnAuthMoved; // 0x730(0x10)
	struct FMulticastInlineDelegate AuthOnDealtDamageToCharacter; // 0x740(0x10)
	struct FMulticastInlineDelegate OnAuthUsedEquippable; // 0x750(0x10)
	struct FMulticastInlineDelegate OnMoveBlocked; // 0x760(0x10)
	struct FMulticastInlineDelegate OnShooterPlayerStateChanged; // 0x770(0x10)
	char pad_780[0x18]; // 0x780(0x18)
	struct FMulticastInlineDelegate OnCharacterSpawnComplete; // 0x798(0x10)
	struct FMulticastInlineDelegate OnChararacterResetGameplay; // 0x7a8(0x10)
	bool bIsPlayerCharacter; // 0x7b8(0x01)
	bool bWaitingToNotifyGameState; // 0x7b9(0x01)
	char pad_7BA[0x6]; // 0x7ba(0x06)
	struct FMulticastInlineDelegate OnInstigatorChanged; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnClientControllerChanged; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnCameraUpdated; // 0x7e0(0x10)
	bool bAIControlled; // 0x7f0(0x01)
	bool bCreatedWithReuseActorRespawnDisabled; // 0x7f1(0x01)
	char pad_7F2[0x2]; // 0x7f2(0x02)
	float TargetEyeHeightProportion; // 0x7f4(0x04)
	struct URoundPersistenceComponent* Persistence; // 0x7f8(0x08)
	struct UGamepadTuningDataAsset* GamepadTuningData; // 0x800(0x08)
	struct UAresAbilitySystemComponent* AbilitiesAndBuffs; // 0x808(0x08)
	struct UBlindManagerComponent* BlindManagerComponent; // 0x810(0x08)
	enum class ENetRole AuthPrevRemoteRole; // 0x818(0x01)
	char pad_819[0x7]; // 0x819(0x07)
	struct TArray<struct TSoftClassPtr<UObject>> AdditionalTickingComponentAllowlist; // 0x820(0x10)
	char pad_830[0x18]; // 0x830(0x18)
	struct UShooterCharacterFogOfWarComponent* FogOfWarComponent; // 0x848(0x08)
	struct UShooterCharacterVisionComponent* VisionComponent; // 0x850(0x08)
	struct UFootstepsComponent* FootstepsComponent; // 0x858(0x08)
	struct UCalloutRegionTrackingComponent* CalloutRegionTrackingComponent; // 0x860(0x08)
	struct UDynamicBlockingComponent* DynamicBlocking; // 0x868(0x08)
	struct UFresnelComponent* FresnelComponent; // 0x870(0x08)
	struct FMulticastInlineDelegate OnPossession; // 0x878(0x10)
	struct FMulticastInlineDelegate OnUnpossession; // 0x888(0x10)
	char pad_898[0x48]; // 0x898(0x48)
	struct FShooterGameTimeMarker AuthLastPlayerInputTimestamp; // 0x8e0(0x0c)
	char pad_8EC[0x4]; // 0x8ec(0x04)
	struct FMulticastInlineDelegate OnStartTouchWidgets; // 0x8f0(0x10)
	struct FMulticastInlineDelegate OnStopTouchWidgets; // 0x900(0x10)
	struct TArray<enum class EAresItemSlot> AbilityUIOrder; // 0x910(0x10)
	struct FMulticastInlineDelegate OnExternalComponentAdded; // 0x920(0x10)
	struct UCharacterAbilityWidget* AbilityHUDWidget; // 0x930(0x08)
	struct UCharacterAbilityWidget* AbilityHUDWidgetTemplate; // 0x938(0x08)
	struct UAresInputStateComponent* InputStateComponent; // 0x940(0x08)
	struct UNetworkStreamComponent* NetworkStreamComponent; // 0x948(0x08)
	struct UEquippableEventCharacterComponent* EquippableEventComponent; // 0x950(0x08)
	struct UPlayspaceComponent* PlayspaceComponent; // 0x958(0x08)
	struct TArray<struct FStartingEquippable> StartingEquippables; // 0x960(0x10)
	bool bCanReceiveModeSpecificInventory; // 0x970(0x01)
	char pad_971[0x7]; // 0x971(0x07)
	struct TArray<struct AAresEquippable*> StartingEquippableClasses; // 0x978(0x10)
	struct TArray<struct UAresPurchasable*> StartingPurchasableAssets; // 0x988(0x10)
	struct FMulticastInlineDelegate AuthOnCharacterResurrected; // 0x998(0x10)
	struct UAresInventory* Inventory; // 0x9a8(0x08)
	bool bShouldTickInventory; // 0x9b0(0x01)
	char pad_9B1[0x1f]; // 0x9b1(0x1f)
	struct FMulticastInlineDelegate AuthOnResistedDeath; // 0x9d0(0x10)
	char pad_9E0[0x28]; // 0x9e0(0x28)
	struct UDamageableComponent* DamageHandler; // 0xa08(0x08)
	bool bShouldDamagePrioritizeRegions; // 0xa10(0x01)
	char pad_A11[0x7]; // 0xa11(0x07)
	struct FMulticastInlineDelegate OnFocusProjectileChanged; // 0xa18(0x10)
	struct FMulticastInlineDelegate OnFocusProjectileInvalidated; // 0xa28(0x10)
	struct TArray<struct TWeakObjectPtr<struct AActor>> FocusProjectiles; // 0xa38(0x10)
	struct UShooterCharacterDeathReactionComponent* DeathReactionComponent; // 0xa48(0x08)
	struct FMulticastInlineDelegate OnCollisionChangedFromDeath; // 0xa50(0x10)
	struct AEffectContainer* DeathEffectContainer; // 0xa60(0x08)
	struct TArray<enum class ECollisionChannel> ChannelsToIgnoreWhenIntangible; // 0xa68(0x10)
	enum class ECollisionChannel IntangibleObjectType; // 0xa78(0x01)
	struct FCollisionResponseContainer TangibleCapsuleResponse; // 0xa79(0x20)
	struct FCollisionResponseContainer TangibleMeshResponse; // 0xa99(0x20)
	struct FCollisionResponseContainer IntangibleCapsuleResponse; // 0xab9(0x20)
	struct FCollisionResponseContainer IntangibleMeshResponse; // 0xad9(0x20)
	char pad_AF9[0x7]; // 0xaf9(0x07)
	struct TMap<struct TWeakObjectPtr<struct UAnimationAsset>, struct TWeakObjectPtr<struct AAresEquippable>> AnimationAssociatedEquippables; // 0xb00(0x50)
	char pad_B50[0x8]; // 0xb50(0x08)
	struct UAkAudioEvent* HitConfirmEvent; // 0xb58(0x08)
	struct UAkAudioEvent* HitConfirmHeadshotEvent; // 0xb60(0x08)
	char pad_B68[0x14]; // 0xb68(0x14)
	float TeamVisionBlindThreshold; // 0xb7c(0x04)
	bool bCharacterMakesBloodSplatters; // 0xb80(0x01)
	bool bCharacterHasNavPointAttached; // 0xb81(0x01)
	char pad_B82[0x6]; // 0xb82(0x06)
	struct UNavPointComponent* NavpointComponentType; // 0xb88(0x08)
	struct FMulticastInlineDelegate OnTeamChanged; // 0xb90(0x10)
	struct FMulticastInlineDelegate OnDeathCameraComplete; // 0xba0(0x10)
	float CameraShakeDamageScalar; // 0xbb0(0x04)
	char pad_BB4[0x4]; // 0xbb4(0x04)
	struct FMulticastInlineDelegate OnUpdateCharacterMeshes; // 0xbb8(0x10)
	struct FMulticastInlineDelegate OnPerspectiveChanged; // 0xbc8(0x10)
	struct FMulticastInlineDelegate OnCharacterLanded; // 0xbd8(0x10)
	char pad_BE8[0x20]; // 0xbe8(0x20)
	struct FMulticastInlineDelegate OnJumpKeyPressed; // 0xc08(0x10)
	struct FMulticastInlineDelegate OnJumpKeyReleased; // 0xc18(0x10)
	struct TArray<struct FCharacterClassSlotModifer> CharacterClassSlotModifiers; // 0xc28(0x10)
	struct TArray<struct FCharacterClassCostModifer> CharacterClassCostModifiers; // 0xc38(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> CharacterClassExcludedPurchasableAssets; // 0xc48(0x10)
	int32_t TotalPurchasablesModifier; // 0xc58(0x04)
	char pad_C5C[0x4]; // 0xc5c(0x04)
	struct TArray<struct FCharacterClassDamageTypeModifer> CharacterClassDamageTypeModifiers; // 0xc60(0x10)
	bool bUsePlayerDamageScaling; // 0xc70(0x01)
	char pad_C71[0x7]; // 0xc71(0x07)
	struct USkeletalMeshComponent* Mesh1P; // 0xc78(0x08)
	struct USkeletalMeshComponent* MeshOverlay1P; // 0xc80(0x08)
	struct USkeletalMeshComponent* MeshCosmetic3P; // 0xc88(0x08)
	struct UMeshMaterialManagerComponent* MeshMaterialManager; // 0xc90(0x08)
	bool bShouldUseMeshMaterialManager; // 0xc98(0x01)
	bool WasEquippableWantsToHideFirstPersonMesh; // 0xc99(0x01)
	bool WasControllerWantsToHideFirstPersonMesh; // 0xc9a(0x01)
	bool WasInvisible; // 0xc9b(0x01)
	bool WasIntangible; // 0xc9c(0x01)
	bool bLastTickedFirstPerson; // 0xc9d(0x01)
	bool WasInvisibleEquippables; // 0xc9e(0x01)
	bool WasInvisible1P; // 0xc9f(0x01)
	bool WasInvisible3P; // 0xca0(0x01)
	bool WasAlly; // 0xca1(0x01)
	bool bMeshesDirtyInitiallyComputed; // 0xca2(0x01)
	bool bIsLeftHanded; // 0xca3(0x01)
	bool bSupportsLeftHandedMode; // 0xca4(0x01)
	bool bUseAlternateFlyingControls; // 0xca5(0x01)
	bool InitialPossessionOccured; // 0xca6(0x01)
	char pad_CA7[0x1]; // 0xca7(0x01)
	float JumpFallDistanceRequiredForLandingSound; // 0xca8(0x04)
	char pad_CAC[0x4]; // 0xcac(0x04)
	struct UCurveFloat* JumpFallDamageCurve; // 0xcb0(0x08)
	struct UDamageType* JumpFallDamageTypeAsset; // 0xcb8(0x08)
	char bAlternateMovementHeld : 1; // 0xcc0(0x01)
	char pad_CC0_1 : 7; // 0xcc0(0x01)
	bool bGamepadWalkButtonHeld; // 0xcc1(0x01)
	char bCrouchHeld : 1; // 0xcc2(0x01)
	char pad_CC2_1 : 7; // 0xcc2(0x01)
	bool bMoveSyncCrouchHeld; // 0xcc3(0x01)
	char bIsJumpKeyHeld : 1; // 0xcc4(0x01)
	char pad_CC4_1 : 7; // 0xcc4(0x01)
	char pad_CC5[0x3]; // 0xcc5(0x03)
	float LastJumpKeyDownTimestamp; // 0xcc8(0x04)
	float MitigatedFallDistance; // 0xccc(0x04)
	struct TArray<struct UMaterialInstanceDynamic*> Mesh3PMIDs; // 0xcd0(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> Mesh1PMIDs; // 0xce0(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> Mesh1POverlayMIDs; // 0xcf0(0x10)
	struct AGameObject* DropOnDeathObjectTemplateAsset; // 0xd00(0x08)
	bool bDropObjectWithKillersTeam; // 0xd08(0x01)
	char pad_D09[0x7]; // 0xd09(0x07)
	struct UAkAudioEvent* DeathEvent; // 0xd10(0x08)
	struct UParticleSystem* RespawnFX; // 0xd18(0x08)
	struct UAkAudioEvent* RespawnEvent; // 0xd20(0x08)
	struct UAkAudioEvent* TargetingEvent; // 0xd28(0x08)
	float CorpseLifetime; // 0xd30(0x04)
	float LastSpawnRoundTime; // 0xd34(0x04)
	float LastSpawnWorldTime; // 0xd38(0x04)
	float LastSpawnGameTime; // 0xd3c(0x04)
	char pad_D40[0x20]; // 0xd40(0x20)
	float MinimumTimeBetweenCameraHitRolls; // 0xd60(0x04)
	float TimeOfLastCameraHitRoll; // 0xd64(0x04)
	float AddedEyeHeight; // 0xd68(0x04)
	float StandingEyeOffset; // 0xd6c(0x04)
	float CrouchingEyeOffset; // 0xd70(0x04)
	char pad_D74[0x4]; // 0xd74(0x04)
	struct FMulticastInlineDelegate OnCausedDamageResponse; // 0xd78(0x10)
	struct FMulticastInlineDelegate OnAboutToFireProjectiles; // 0xd88(0x10)
	struct FMulticastInlineDelegate OnFiredProjectiles; // 0xd98(0x10)
	struct FMulticastInlineDelegate OnFiredProjectilesEx; // 0xda8(0x10)
	struct FMulticastInlineDelegate OnAuthFallingOutOfWorld; // 0xdb8(0x10)
	struct FMulticastInlineDelegate OnTeleported; // 0xdc8(0x10)
	struct UForceModuleManagerComponent* ForceModuleManager; // 0xdd8(0x08)
	struct UStealthComponent* StealthComponent; // 0xde0(0x08)
	struct FMulticastInlineDelegate OnInventoryRestored; // 0xde8(0x10)
	float MaxShield; // 0xdf8(0x04)
	float MaxOvershield; // 0xdfc(0x04)
	float ShieldDegenerationPerSecond; // 0xe00(0x04)
	float CrouchTimeSeconds; // 0xe04(0x04)
	float OverrideCrouchTimeSeconds; // 0xe08(0x04)
	float CrouchCompressionAmount; // 0xe0c(0x04)
	bool bIsStuckUncrouching; // 0xe10(0x01)
	char pad_E11[0x3]; // 0xe11(0x03)
	float CharacterScale; // 0xe14(0x04)
	struct FCharacterScaleData CharacterScaleData; // 0xe18(0x18)
	struct TWeakObjectPtr<struct AShooterCharacter> ScavengableCharacter; // 0xe30(0x08)
	struct FRotator FacingControlRotation; // 0xe38(0x0c)
	char pad_E44[0x4]; // 0xe44(0x04)
	struct FPurchasableList CharacterPurchasables; // 0xe48(0x10)
	struct TArray<struct UAresPurchasable*> PurchasableClassAssets; // 0xe58(0x10)
	int32_t NumPointsNeededForUltimate; // 0xe68(0x04)
	int32_t DesignPlaytestNumPointsNeededForUltimate; // 0xe6c(0x04)
	struct TArray<struct FName> HeadDamageBoneNames; // 0xe70(0x10)
	struct TArray<struct FName> LegDamageBoneNames; // 0xe80(0x10)
	enum class CharacterRange OptimalRange; // 0xe90(0x01)
	char pad_E91[0x3]; // 0xe91(0x03)
	float AimPunchMovementErrorThreshold; // 0xe94(0x04)
	struct UMaterialInterface* Baked3PMaterial; // 0xe98(0x08)
	struct UMaterialInterface* Baked1PMaterial; // 0xea0(0x08)
	bool bShouldAnimateOnTick; // 0xea8(0x01)
	bool bIsTornOff; // 0xea9(0x01)
	char pad_EAA[0x6]; // 0xeaa(0x06)
	struct UAresHitReactions* DeathReactionTemplateAsset; // 0xeb0(0x08)
	struct UAresHitReactions* DeathReactionObject; // 0xeb8(0x08)
	struct UAresHitReactions* AltDeathReactionTemplateAsset; // 0xec0(0x08)
	struct UAresHitReactions* AltDeathReactionObject; // 0xec8(0x08)
	bool bAllowCorpseMovement; // 0xed0(0x01)
	char pad_ED1[0x3]; // 0xed1(0x03)
	float DeathAwakeTime; // 0xed4(0x04)
	char pad_ED8[0x4]; // 0xed8(0x04)
	float DeathClothSettleTime; // 0xedc(0x04)
	char pad_EE0[0x8]; // 0xee0(0x08)
	struct FMulticastInlineDelegate OnBecomeViewTarget; // 0xee8(0x10)
	struct FMulticastInlineDelegate OnEndViewTarget; // 0xef8(0x10)
	struct UParticleSystemComponent* AllyIconParticleSystem; // 0xf08(0x08)
	struct FVector OldCachedLocation; // 0xf10(0x0c)
	char pad_F1C[0x4]; // 0xf1c(0x04)
	struct UCombatReportTrackingConfigComponent* CombatReportTrackingConfig; // 0xf20(0x08)
	struct UReplicationSleepComponent* ReplicationSleepComponent; // 0xf28(0x08)
	char pad_F30[0x4]; // 0xf30(0x04)
	struct FAres3PCameraSettings Camera3PSettings; // 0xf34(0x1c)
	bool CanBeAViewTarget; // 0xf50(0x01)
	char pad_F51[0x7]; // 0xf51(0x07)
	struct UTexture* NonPlayerCharacterIcon; // 0xf58(0x08)
	enum class EShooterCharacterCameraState CameraState; // 0xf60(0x01)
	char pad_F61[0x7]; // 0xf61(0x07)
	struct UCameraComponent* FollowRecoilCameraComponent; // 0xf68(0x08)
	struct UCameraComponent* CustomActiveCameraComponent; // 0xf70(0x08)
	bool bUseDeathCameraSpringArm; // 0xf78(0x01)
	char pad_F79[0x7]; // 0xf79(0x07)
	struct USpringArmComponent* DeathCameraSpringArm; // 0xf80(0x08)
	struct UCameraComponent* DeathCameraComponent; // 0xf88(0x08)
	struct UCameraComponent* DeathCameraComponentOverride; // 0xf90(0x08)
	char pad_F98[0x10]; // 0xf98(0x10)
	struct UCurveFloat* DeathCameraOverrideCurve; // 0xfa8(0x08)
	struct UCurveFloat* DeathCameraFoVOverrideCurve; // 0xfb0(0x08)
	enum class EShooterCharacterDebugCameraMode DebugCameraMode; // 0xfb8(0x01)
	char pad_FB9[0x7]; // 0xfb9(0x07)
	struct FAresDeathCameraSettings DeathCameraSettings; // 0xfc0(0x48)
	char pad_1008[0x54]; // 0x1008(0x54)
	struct TWeakObjectPtr<struct UCharacterDataAsset> DataAsset; // 0x105c(0x08)
	char pad_1064[0x24]; // 0x1064(0x24)
	struct UServerRewindComponent* ServerRewindComponent; // 0x1088(0x08)
	struct UTransformRewinderComponent* TransformRewinderComponent; // 0x1090(0x08)
	struct USkeletalPoseRewinderComponent* SkeletalPoseRewinderComponent; // 0x1098(0x08)
	char pad_10A0[0x2]; // 0x10a0(0x02)
	bool bIsForced1PTextureStreamingEnabled; // 0x10a2(0x01)
	char pad_10A3[0x5]; // 0x10a3(0x05)
	struct UAresGameplayBuff* DisconnectedBuff; // 0x10a8(0x08)
	struct FMulticastInlineDelegate OnDisconnectedCharacterDestroyed; // 0x10b0(0x10)
	bool bNeedsEnemyHitRegInfo; // 0x10c0(0x01)
	char pad_10C1[0x3]; // 0x10c1(0x03)
	float GamepadBaseTurnRate; // 0x10c4(0x04)
	float GamepadBaseLookUpRate; // 0x10c8(0x04)
	char pad_10CC[0x10]; // 0x10cc(0x10)
	int32_t NumResetsForRespawn; // 0x10dc(0x04)
	char pad_10E0[0x4]; // 0x10e0(0x04)
	bool bIsInSpawnZone; // 0x10e4(0x01)
	char pad_10E5[0x3]; // 0x10e5(0x03)
	struct FMulticastInlineDelegate OnIsInSpawnRoomChanged; // 0x10e8(0x10)
	struct FDeadAndSettledRespawnData DeadAndSettledRespawnData; // 0x10f8(0x04)
	char pad_10FC[0x4]; // 0x10fc(0x04)
	struct FDefaultSkeletalMeshInfo Mesh1PDefaultSkeletalMeshInfo; // 0x1100(0x18)
	struct FDefaultSkeletalMeshInfo MeshOverlay1PDefaultSkeletalMeshInfo; // 0x1118(0x18)
	struct FDefaultSkeletalMeshInfo MeshCosmetic3PDefaultSkeletalMeshInfo; // 0x1130(0x18)
	struct FDefaultSkeletalMeshInfo CurMeshDefaultSkeletalMeshInfo; // 0x1148(0x18)
	struct TArray<struct UPrimitiveComponent*> DefaultPrimitiveComponents; // 0x1160(0x10)
	char pad_1170[0x20]; // 0x1170(0x20)

	void UpdateTeam(); // Function ShooterGame.ShooterCharacter.UpdateTeam // (Final|Native|Public) // @ game+0x3b65df0
	void UpdatePawnMeshes(); // Function ShooterGame.ShooterCharacter.UpdatePawnMeshes // (Final|Native|Public|BlueprintCallable) // @ game+0x3b63f40
	void TriggerAIDamageSenseEvent(struct AShooterCharacter* VictimCharacter, struct AController* DamageInstigator, struct AActor* DamagCauser, float Damage); // Function ShooterGame.ShooterCharacter.TriggerAIDamageSenseEvent // (Final|Native|Public) // @ game+0x3b65c90
	void TouchMoveUpReleased(); // Function ShooterGame.ShooterCharacter.TouchMoveUpReleased // (Final|Native|Public) // @ game+0x3b65c50
	void TouchMoveUpPressed(); // Function ShooterGame.ShooterCharacter.TouchMoveUpPressed // (Final|Native|Public) // @ game+0x3b65c70
	void TouchMoveDownReleased(); // Function ShooterGame.ShooterCharacter.TouchMoveDownReleased // (Final|Native|Public) // @ game+0x3b65c50
	void TouchMoveDownPressed(); // Function ShooterGame.ShooterCharacter.TouchMoveDownPressed // (Final|Native|Public) // @ game+0x3b65c30
	void StopForceStrafe(); // Function ShooterGame.ShooterCharacter.StopForceStrafe // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65c10
	void StopForceMoveInputDirection(); // Function ShooterGame.ShooterCharacter.StopForceMoveInputDirection // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65bf0
	void StopForceMoveInput(enum class EAresMoveInput MoveInput); // Function ShooterGame.ShooterCharacter.StopForceMoveInput // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65b70
	void StopActiveCameraComponent(struct UCameraComponent* CameraComponent); // Function ShooterGame.ShooterCharacter.StopActiveCameraComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65ae0
	void StopAbilityHUDWidget(bool bForceStop); // Function ShooterGame.ShooterCharacter.StopAbilityHUDWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b65a50
	struct UCharacterAbilityWidget* StartAbilityHUDWidget(); // Function ShooterGame.ShooterCharacter.StartAbilityHUDWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b65a20
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bAutoDestroy); // Function ShooterGame.ShooterCharacter.SpawnEmitterAttached // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3b65810
	void SimulateYawInput(float YawAmount); // Function ShooterGame.ShooterCharacter.SimulateYawInput // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65790
	void SimulatePitchInput(float PitchAmount); // Function ShooterGame.ShooterCharacter.SimulatePitchInput // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65710
	struct AActor* SimpleTraceFromCamera(float Distance, enum class ECollisionChannel Channel, struct FVector& HitPoint, bool& bBlockingHit); // Function ShooterGame.ShooterCharacter.SimpleTraceFromCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b65580
	bool ShouldUseMeshMaterialManager(); // Function ShooterGame.ShooterCharacter.ShouldUseMeshMaterialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b65550
	bool ShouldSwapTriggersForCurrentEquippable(); // Function ShooterGame.ShooterCharacter.ShouldSwapTriggersForCurrentEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65520
	struct UMatineeCameraShake* ShouldAimPunch(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.ShouldAimPunch // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3b65480
	void SetWalkHeld(bool bSet); // Function ShooterGame.ShooterCharacter.SetWalkHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x3b653f0
	void SetVectorOnMIDs(struct FName Name, struct FLinearColor Value); // Function ShooterGame.ShooterCharacter.SetVectorOnMIDs // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x3b65300
	void SetServerRewindPaused(bool bNewRewind); // Function ShooterGame.ShooterCharacter.SetServerRewindPaused // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void SetScalarOnMIDs(struct FName Name, float Value); // Function ShooterGame.ShooterCharacter.SetScalarOnMIDs // (Final|Native|Protected|BlueprintCallable) // @ game+0x3b65180
	void SetOnDemandSensitivityModifier(float SensitivityModifier); // Function ShooterGame.ShooterCharacter.SetOnDemandSensitivityModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65100
	void SetNumPointsNeededForUltimate(int32_t NumPoints); // Function ShooterGame.ShooterCharacter.SetNumPointsNeededForUltimate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635550
	void SetJumpHeld(bool bSet); // Function ShooterGame.ShooterCharacter.SetJumpHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x3b65070
	void SetIsInSpawnZone(bool bIsInSpawn); // Function ShooterGame.ShooterCharacter.SetIsInSpawnZone // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64fe0
	void SetHideThirdPersonOverride(bool bHide); // Function ShooterGame.ShooterCharacter.SetHideThirdPersonOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64f50
	void SetHideFirstPersonOverride(bool bHide); // Function ShooterGame.ShooterCharacter.SetHideFirstPersonOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64ec0
	void SetDroppedAmmoCount(struct AGameObject* DroppedAmmo, int32_t AmmoCount); // Function ShooterGame.ShooterCharacter.SetDroppedAmmoCount // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void SetDeathCameraTimingsOverride(struct FAresDeathCameraTimings& Timings); // Function ShooterGame.ShooterCharacter.SetDeathCameraTimingsOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b64e10
	void SetDeathCameraComponentOverride(struct UCameraComponent* Camera, struct UCurveFloat* LerpCurve, struct UCurveFloat* FoVLerpCurve); // Function ShooterGame.ShooterCharacter.SetDeathCameraComponentOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64d00
	void SetCurrentEquippableAnimationHidden(bool bNewHidden, struct UAnimationAsset* HidingAsset); // Function ShooterGame.ShooterCharacter.SetCurrentEquippableAnimationHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64c30
	void SetCrouchTimeOverride(float Override); // Function ShooterGame.ShooterCharacter.SetCrouchTimeOverride // (Final|Native|Protected|BlueprintCallable) // @ game+0x3b64bb0
	void SetAlternateMovementHeld(bool bSet); // Function ShooterGame.ShooterCharacter.SetAlternateMovementHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64b20
	void Set3PMeshVisible(bool bSet3PVisible); // Function ShooterGame.ShooterCharacter.Set3PMeshVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64a90
	void ServerReceiveNetworkStream(struct FComponentDataStream ComponentDataStream); // Function ShooterGame.ShooterCharacter.ServerReceiveNetworkStream // (Net|Native|Event|Public|NetServer) // @ game+0x3b649f0
	void ServerPickupOnGroundEquippable(struct AAresOnGroundEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.ServerPickupOnGroundEquippable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x296c490
	bool ScriptCanAutoPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.ScriptCanAutoPickupEquippable // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2a5cc90
	void RunEventWhileRewound(struct TArray<struct AActor*>& RewoundActors, struct FDelegate Event, bool bComplexRewind); // Function ShooterGame.ShooterCharacter.RunEventWhileRewound // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b64880
	void ResetGameplay(); // Function ShooterGame.ShooterCharacter.ResetGameplay // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64860
	void ResetCharacterMaterials(struct USkeletalMeshComponent* MeshToReset); // Function ShooterGame.ShooterCharacter.ResetCharacterMaterials // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b647d0
	void RequestActiveCameraComponent(struct UCameraComponent* CameraComponent); // Function ShooterGame.ShooterCharacter.RequestActiveCameraComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64740
	void RemoveDisconnectedDelegates(); // Function ShooterGame.ShooterCharacter.RemoveDisconnectedDelegates // (Final|Native|Private) // @ game+0x2024060
	void RemoveBuff(struct FActiveGameplayEffectHandle& Handle); // Function ShooterGame.ShooterCharacter.RemoveBuff // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b646a0
	float ReduceShield(float Amount); // Function ShooterGame.ShooterCharacter.ReduceShield // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64600
	void Queue3PMeshVisible(bool b3PVisible); // Function ShooterGame.ShooterCharacter.Queue3PMeshVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x3b64570
	void PredictivelyModifyFallDamage(bool bResetFallHeight, float FallGraceDistance); // Function ShooterGame.ShooterCharacter.PredictivelyModifyFallDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x3b644a0
	void PlayHitConfirmEvent(struct UAkAudioEvent* HitEvent, enum class EAresHitConfirmLocality HitLocality, enum class EAresRegionalDamage RegionalDamage, float FalloffMultiplier); // Function ShooterGame.ShooterCharacter.PlayHitConfirmEvent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b64340
	void OnUncrouchDown(); // Function ShooterGame.ShooterCharacter.OnUncrouchDown // (Final|Native|Public) // @ game+0x3b64320
	void OnRep_IsPlayerCharacter(); // Function ShooterGame.ShooterCharacter.OnRep_IsPlayerCharacter // (Final|Native|Public) // @ game+0x3b64300
	void OnRep_FocusProjectile(struct TArray<struct TWeakObjectPtr<struct AActor>> OldFocusList); // Function ShooterGame.ShooterCharacter.OnRep_FocusProjectile // (Final|Native|Protected) // @ game+0x3b64200
	void OnRep_CharacterScale(); // Function ShooterGame.ShooterCharacter.OnRep_CharacterScale // (Final|Native|Protected) // @ game+0x3b641e0
	void OnJumpUp(); // Function ShooterGame.ShooterCharacter.OnJumpUp // (Final|Native|Public) // @ game+0x3b641c0
	void OnJumpInputChanged(enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.OnJumpInputChanged // (Final|Native|Public) // @ game+0x3b64140
	void OnJumpDown(); // Function ShooterGame.ShooterCharacter.OnJumpDown // (Final|Native|Public) // @ game+0x3b64120
	void OnInvisibilityAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ShooterCharacter.OnInvisibilityAttributeChanged // (Final|Native|Private|HasOutParms) // @ game+0x3b63f60
	void OnInventoryItemsChanged(); // Function ShooterGame.ShooterCharacter.OnInventoryItemsChanged // (Final|Native|Private) // @ game+0x3b63f40
	void OnGamePhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ShooterCharacter.OnGamePhaseChanged // (Final|Native|Public) // @ game+0x3b63ec0
	void OnDesignPlaytestToggleChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterCharacter.OnDesignPlaytestToggleChanged // (Final|Native|Private) // @ game+0x3b63df0
	bool OnCrushed(struct AActor* CrushingObject, float CrushDamage); // Function ShooterGame.ShooterCharacter.OnCrushed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnCrouchUp(); // Function ShooterGame.ShooterCharacter.OnCrouchUp // (Final|Native|Public) // @ game+0x3b63dd0
	void OnCrouchDown(); // Function ShooterGame.ShooterCharacter.OnCrouchDown // (Final|Native|Public) // @ game+0x3b63db0
	void OnCosmeticDeath(enum class EAresRegionalDamage KillRegion, struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterCharacter.OnCosmeticDeath // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnBombDefused(); // Function ShooterGame.ShooterCharacter.OnBombDefused // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAlternateMovementUp(); // Function ShooterGame.ShooterCharacter.OnAlternateMovementUp // (Final|Native|Public) // @ game+0x3b63d90
	void OnAlternateMovementDown(); // Function ShooterGame.ShooterCharacter.OnAlternateMovementDown // (Final|Native|Public) // @ game+0x3b63d70
	void OnAliveStateChanged(bool bNewAlive); // Function ShooterGame.ShooterCharacter.OnAliveStateChanged // (Final|Native|Private) // @ game+0x3b63ce0
	void NotifyOnPlayerState(); // Function ShooterGame.ShooterCharacter.NotifyOnPlayerState // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void NotifyHandednessUpdated(); // Function ShooterGame.ShooterCharacter.NotifyHandednessUpdated // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool NeedsToBeRespawned(); // Function ShooterGame.ShooterCharacter.NeedsToBeRespawned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63cc0
	void MulticastNotifyKilledEnemy(struct AShooterCharacter* KillerCharacter, struct AShooterCharacter* KilledCharacter, int32_t MultikillLevel); // Function ShooterGame.ShooterCharacter.MulticastNotifyKilledEnemy // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b63bb0
	void MulticastItemPickedUp(struct AAresEquippable* Item, bool bCurrentWasDropped); // Function ShooterGame.ShooterCharacter.MulticastItemPickedUp // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b63ad0
	void MoveUp(float Val); // Function ShooterGame.ShooterCharacter.MoveUp // (Final|Native|Public) // @ game+0x3b63a50
	void MoveRight(float Val); // Function ShooterGame.ShooterCharacter.MoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x3b639d0
	void MoveForward(float Val); // Function ShooterGame.ShooterCharacter.MoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x3b63950
	struct AShooterCharacter* LoadCharacterAssetsSynchronous(struct UWorld* World, struct UCharacterDataAsset* CharacterDataAsset); // Function ShooterGame.ShooterCharacter.LoadCharacterAssetsSynchronous // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b63880
	bool IsZoomed(); // Function ShooterGame.ShooterCharacter.IsZoomed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63850
	bool IsVisibleToLocalPlayer(); // Function ShooterGame.ShooterCharacter.IsVisibleToLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63820
	bool IsUsingObject(); // Function ShooterGame.ShooterCharacter.IsUsingObject // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b637f0
	bool IsTeamVisionBlind(); // Function ShooterGame.ShooterCharacter.IsTeamVisionBlind // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b637c0
	bool IsStuckUncrouching(); // Function ShooterGame.ShooterCharacter.IsStuckUncrouching // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63790
	bool IsStillFiring(); // Function ShooterGame.ShooterCharacter.IsStillFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63760
	bool IsReuseActorRespawnEnabled(); // Function ShooterGame.ShooterCharacter.IsReuseActorRespawnEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63730
	bool IsPossessableOnPlayerStart(); // Function ShooterGame.ShooterCharacter.IsPossessableOnPlayerStart // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b636f0
	bool IsPlayerCharacter(); // Function ShooterGame.ShooterCharacter.IsPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b636c0
	bool IsLeftHanded(); // Function ShooterGame.ShooterCharacter.IsLeftHanded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63690
	bool IsInvisibleToActor(struct AActor* Actor); // Function ShooterGame.ShooterCharacter.IsInvisibleToActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b635f0
	bool IsFirstPerson(); // Function ShooterGame.ShooterCharacter.IsFirstPerson // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b635b0
	bool IsEquippablePermitted(struct AAresEquippable* Equippable, enum class EAresEquippableRestrictionType& RestrictionType); // Function ShooterGame.ShooterCharacter.IsEquippablePermitted // (Final|Native|Public|HasOutParms|Const) // @ game+0x3b634d0
	bool IsDeadAndSettled(); // Function ShooterGame.ShooterCharacter.IsDeadAndSettled // (Final|Native|Public|Const) // @ game+0x3b634a0
	bool IsAlive(); // Function ShooterGame.ShooterCharacter.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63470
	bool IsAIControlled(); // Function ShooterGame.ShooterCharacter.IsAIControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63440
	bool Is3PCameraEnabled(); // Function ShooterGame.ShooterCharacter.Is3PCameraEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b63410
	void IntangibleChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ShooterCharacter.IntangibleChanged // (Final|Native|Private|HasOutParms) // @ game+0x3b63250
	float HowMuchIsPointVisible(struct FVector& TestPoint); // Function ShooterGame.ShooterCharacter.HowMuchIsPointVisible // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b631a0
	void HasAltDeathReaction(bool& Result); // Function ShooterGame.ShooterCharacter.HasAltDeathReaction // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x40572e0
	void HandleOnPreDeath(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.HandleOnPreDeath // (Final|Native|Protected) // @ game+0x3b63110
	void HandleOnHealed(float HealTaken, struct AActor* HealedActor, struct TArray<struct UDamageSectionComponent*>& HealedComponents, struct AController* EventInstigator, struct APawn* EventInstigatorPawn, struct AActor* HealCauser); // Function ShooterGame.ShooterCharacter.HandleOnHealed // (Final|Native|Protected|HasOutParms) // @ game+0x3b62f00
	void HandleOnDeath(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.HandleOnDeath // (Final|Native|Protected) // @ game+0x3b62e70
	void HandleOnDamaged(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.HandleOnDamaged // (Final|Native|Protected) // @ game+0x3b62de0
	void HandleHandednessSettingChanged(enum class EAresBoolSettingName Setting, bool bOldValue, bool bNewValue); // Function ShooterGame.ShooterCharacter.HandleHandednessSettingChanged // (Final|Native|Protected) // @ game+0x3b62cc0
	float GetZoomMultiplier(); // Function ShooterGame.ShooterCharacter.GetZoomMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62c90
	float GetZoomFoV1PFraction(); // Function ShooterGame.ShooterCharacter.GetZoomFoV1PFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62c60
	float GetZoomFoV1P(); // Function ShooterGame.ShooterCharacter.GetZoomFoV1P // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62c30
	struct FString GetWwisePerspective(); // Function ShooterGame.ShooterCharacter.GetWwisePerspective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62bb0
	bool GetWalkHeld(); // Function ShooterGame.ShooterCharacter.GetWalkHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62b80
	struct FVector GetViewVectorNoRecoil(); // Function ShooterGame.ShooterCharacter.GetViewVectorNoRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62b40
	struct FVector GetViewVectorFullRecoil(); // Function ShooterGame.ShooterCharacter.GetViewVectorFullRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62b00
	struct FVector GetViewVectorCamera(); // Function ShooterGame.ShooterCharacter.GetViewVectorCamera // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62ac0
	struct FRotator GetViewRotationNoRecoil(); // Function ShooterGame.ShooterCharacter.GetViewRotationNoRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62a80
	struct FRotator GetViewRotationFullRecoil(); // Function ShooterGame.ShooterCharacter.GetViewRotationFullRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62a40
	struct FRotator GetViewRotationCamera(); // Function ShooterGame.ShooterCharacter.GetViewRotationCamera // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62a00
	struct FRotator GetViewRotation(); // Function ShooterGame.ShooterCharacter.GetViewRotation // (Native|Public|HasDefaults|Const) // @ game+0x3b629b0
	struct TArray<struct AAresEquippable*> GetStartingEquippableClasses(); // Function ShooterGame.ShooterCharacter.GetStartingEquippableClasses // (Final|Native|Public|BlueprintCallable) // @ game+0x3b628f0
	struct AShooterPlayerState* GetShooterPlayerState(); // Function ShooterGame.ShooterCharacter.GetShooterPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b628c0
	struct AShooterPlayerController* GetShooterPlayerController(); // Function ShooterGame.ShooterCharacter.GetShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62890
	struct UShooterCharacterVisionComponent* GetShooterCharacterVision(); // Function ShooterGame.ShooterCharacter.GetShooterCharacterVision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62860
	struct UShooterCharacterMovement* GetShooterCharacterMovement(); // Function ShooterGame.ShooterCharacter.GetShooterCharacterMovement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62830
	struct UShooterCharacterFogOfWarComponent* GetShooterCharacterFogOfWar(); // Function ShooterGame.ShooterCharacter.GetShooterCharacterFogOfWar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62800
	float GetShield(); // Function ShooterGame.ShooterCharacter.GetShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b627d0
	int32_t GetRespawnNumber(); // Function ShooterGame.ShooterCharacter.GetRespawnNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b627a0
	enum class EAresRegionalDamage GetRegionalDamage(struct FHitResult& HitResult, bool bIgnoreDisableRegionalDamageMultipliers); // Function ShooterGame.ShooterCharacter.GetRegionalDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3b62670
	struct FCharacterReveal GetRecentReveal(struct FName& OtherTeam); // Function ShooterGame.ShooterCharacter.GetRecentReveal // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b625c0
	struct UPlayspaceComponent* GetPlayspaceComponent(); // Function ShooterGame.ShooterCharacter.GetPlayspaceComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b625a0
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.ShooterCharacter.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62570
	struct AShooterPlayerController* GetPlayerControllerEvenIfDead(); // Function ShooterGame.ShooterCharacter.GetPlayerControllerEvenIfDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62540
	struct FVector GetPawnViewLocation(); // Function ShooterGame.ShooterCharacter.GetPawnViewLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b624f0
	struct USkeletalMeshComponent* GetPawnMesh(); // Function ShooterGame.ShooterCharacter.GetPawnMesh // (Final|Native|Public|Const) // @ game+0x3b624c0
	struct AOwnerExclusivePlayerInfo* GetOwnerExclusivePlayerInfo(); // Function ShooterGame.ShooterCharacter.GetOwnerExclusivePlayerInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62490
	struct USkeletalMeshComponent* GetOverlayMesh1P(); // Function ShooterGame.ShooterCharacter.GetOverlayMesh1P // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62460
	struct TArray<struct UMaterialInstanceDynamic*> GetOriginalMaterialsForMesh(struct USkeletalMeshComponent* CharacterMesh); // Function ShooterGame.ShooterCharacter.GetOriginalMaterialsForMesh // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62380
	int32_t GetNumPointsNeededForUltimate(); // Function ShooterGame.ShooterCharacter.GetNumPointsNeededForUltimate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62350
	enum class EAresMovementType GetMovementType(); // Function ShooterGame.ShooterCharacter.GetMovementType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62320
	struct UMeshMaterialManagerComponent* GetMeshMaterialManager(); // Function ShooterGame.ShooterCharacter.GetMeshMaterialManager // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b622f0
	struct USkeletalMeshComponent* GetMesh1P(); // Function ShooterGame.ShooterCharacter.GetMesh1P // (Final|Native|Public|Const) // @ game+0x3b622c0
	float GetMaxShield(); // Function ShooterGame.ShooterCharacter.GetMaxShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62290
	int32_t GetMaxHealth(); // Function ShooterGame.ShooterCharacter.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62260
	float GetLastSpawnWorldTime(); // Function ShooterGame.ShooterCharacter.GetLastSpawnWorldTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3b62230
	float GetLastSpawnRoundTime(); // Function ShooterGame.ShooterCharacter.GetLastSpawnRoundTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3b62200
	float GetLastSpawnGameTime(); // Function ShooterGame.ShooterCharacter.GetLastSpawnGameTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b621d0
	bool GetJumpHeld(); // Function ShooterGame.ShooterCharacter.GetJumpHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b621a0
	float GetJumpHeight(); // Function ShooterGame.ShooterCharacter.GetJumpHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62170
	float GetJumpFallDistanceWithMitigation(); // Function ShooterGame.ShooterCharacter.GetJumpFallDistanceWithMitigation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62140
	float GetJumpFallDistance(); // Function ShooterGame.ShooterCharacter.GetJumpFallDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62110
	bool GetIsInSpawnZone(); // Function ShooterGame.ShooterCharacter.GetIsInSpawnZone // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b620e0
	struct UAresInventory* GetInventory(); // Function ShooterGame.ShooterCharacter.GetInventory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b620b0
	float GetHealth(); // Function ShooterGame.ShooterCharacter.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b62080
	struct UGamepadTuningDataAsset* GetGamepadTuningData(); // Function ShooterGame.ShooterCharacter.GetGamepadTuningData // (Final|Native|Public|BlueprintCallable) // @ game+0x3b62020
	struct AActor* GetFocusProjectile(); // Function ShooterGame.ShooterCharacter.GetFocusProjectile // (Final|Native|Public|Const) // @ game+0x3b61ff0
	float GetFiringRateModifier(); // Function ShooterGame.ShooterCharacter.GetFiringRateModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61fc0
	bool GetFiringLocationAndDirection(struct FVector& Location, struct FRotator& Rotation, bool bApplyRecoil); // Function ShooterGame.ShooterCharacter.GetFiringLocationAndDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61e80
	struct UEquippableEventCharacterComponent* GetEquippableEventComponent(); // Function ShooterGame.ShooterCharacter.GetEquippableEventComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61e60
	struct UShooterCharacterDeathReactionComponent* GetDeathReactionComponent(); // Function ShooterGame.ShooterCharacter.GetDeathReactionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61e30
	struct UCharacterDataAsset* GetDataAsset(); // Function ShooterGame.ShooterCharacter.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61e00
	enum class EAresInputState GetCurrentInputState(enum class EAresEquippableInput Input); // Function ShooterGame.ShooterCharacter.GetCurrentInputState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61d70
	struct FNetworkedMovementTimestamp GetCurrentCharacterTimestamp(); // Function ShooterGame.ShooterCharacter.GetCurrentCharacterTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61d30
	enum class EAresInputState GetCurrentActivationInputState(enum class EAresItemSlot ItemSlot); // Function ShooterGame.ShooterCharacter.GetCurrentActivationInputState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61ca0
	bool GetCrouchHeld(); // Function ShooterGame.ShooterCharacter.GetCrouchHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61c70
	struct USkeletalMeshComponent* GetCosmeticMesh3P(); // Function ShooterGame.ShooterCharacter.GetCosmeticMesh3P // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61c40
	struct USkeletalMeshComponent* GetCoreMesh3P(); // Function ShooterGame.ShooterCharacter.GetCoreMesh3P // (Final|Native|Public|Const) // @ game+0x369ef70
	struct FPurchasableList GetCharacterPurchasables(); // Function ShooterGame.ShooterCharacter.GetCharacterPurchasables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61bc0
	enum class EAresCharacterPosture GetCharacterPosture(); // Function ShooterGame.ShooterCharacter.GetCharacterPosture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61b90
	struct UTexture* GetCharacterIcon(); // Function ShooterGame.ShooterCharacter.GetCharacterIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61b60
	struct TArray<struct TSoftClassPtr<UObject>> GetCharacterClassExcludedPurchasableAssets(); // Function ShooterGame.ShooterCharacter.GetCharacterClassExcludedPurchasableAssets // (Final|Native|Public) // @ game+0x3b61a10
	enum class EShooterCharacterCameraState GetCameraState(); // Function ShooterGame.ShooterCharacter.GetCameraState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b619e0
	struct UBlindManagerComponent* GetBlindManagerComponent(); // Function ShooterGame.ShooterCharacter.GetBlindManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b619c0
	struct AAresPlayerController* GetAresPlayerController(); // Function ShooterGame.ShooterCharacter.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61990
	bool GetAlternateMovementHeld(); // Function ShooterGame.ShooterCharacter.GetAlternateMovementHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61960
	struct TArray<struct TWeakObjectPtr<struct AActor>> GetAllFocusProjectiles(); // Function ShooterGame.ShooterCharacter.GetAllFocusProjectiles // (Final|Native|Public|Const) // @ game+0x3b61920
	struct FRotator GetAimOffsets(); // Function ShooterGame.ShooterCharacter.GetAimOffsets // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b618e0
	struct TArray<struct AAresEquippable*> GetAbilitiesToCleanup(); // Function ShooterGame.ShooterCharacter.GetAbilitiesToCleanup // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3b61850
	struct UAresAbilitySystemComponent* GetAbilitiesAndBuffsHandler(); // Function ShooterGame.ShooterCharacter.GetAbilitiesAndBuffsHandler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b61830
	void GamepadMoveUpReleased(); // Function ShooterGame.ShooterCharacter.GamepadMoveUpReleased // (Final|Native|Public) // @ game+0x3b617f0
	void GamepadMoveUpPressed(); // Function ShooterGame.ShooterCharacter.GamepadMoveUpPressed // (Final|Native|Public) // @ game+0x3b61810
	void GamepadMoveDownReleased(); // Function ShooterGame.ShooterCharacter.GamepadMoveDownReleased // (Final|Native|Public) // @ game+0x3b617f0
	void GamepadMoveDownPressed(); // Function ShooterGame.ShooterCharacter.GamepadMoveDownPressed // (Final|Native|Public) // @ game+0x3b617d0
	void GamepadChangeElevation(float Direction); // Function ShooterGame.ShooterCharacter.GamepadChangeElevation // (Final|Native|Public|BlueprintCallable) // @ game+0x3b61750
	void ForceUseInteractableObjectInputState(enum class EUseKeyType KeyType, enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceUseInteractableObjectInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b61680
	void ForceStrafe(struct FVector& PlayerRelativeInputDirection, float ChangeDirectionTime); // Function ShooterGame.ShooterCharacter.ForceStrafe // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b615a0
	void ForceMoveInWorldDirection(struct FVector& WorldDirection); // Function ShooterGame.ShooterCharacter.ForceMoveInWorldDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b613b0
	void ForceMoveInputState(enum class EAresMoveInput MoveInput, enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceMoveInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b614d0
	void ForceMoveInputDirection(struct FVector& PlayerRelativeInputDirection); // Function ShooterGame.ShooterCharacter.ForceMoveInputDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b61440
	void ForceJumpInputState(enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceJumpInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b61330
	void ForceInputState(enum class EAresEquippableInput Input, enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b61260
	void ForceActivationInputState(enum class EAresItemSlot ItemSlot, enum class EAresInputState InputState, enum class EAresActivationInputType ActivationType, char IndexInSlot); // Function ShooterGame.ShooterCharacter.ForceActivationInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b61110
	enum class EAresDeathCamFocusPoint DefaultDeathCamFocusPoint(); // Function ShooterGame.ShooterCharacter.DefaultDeathCamFocusPoint // (Native|Event|Protected|BlueprintEvent) // @ game+0x3b610d0
	void DebugReportServerMove(struct FServerMoveDebugData ServerMove); // Function ShooterGame.ShooterCharacter.DebugReportServerMove // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3b61040
	void Cycle3PCamera(); // Function ShooterGame.ShooterCharacter.Cycle3PCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	struct FActiveGameplayEffectHandle CreateAndApplyBuff_V2(struct UAresGameplayBuff* BuffClass, struct AActor* DamageCauser, struct AController* InstigatedByController, float BuffLevel, bool bCanApplyToDeadCharacters); // Function ShooterGame.ShooterCharacter.CreateAndApplyBuff_V2 // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60e60
	struct FActiveGameplayEffectHandle CreateAndApplyBuff(struct UAresGameplayBuff* BuffClass, struct AActor* DamageCauser, struct APawn* InstigatorPawn, float BuffLevel, bool bCanApplyToDeadCharacters); // Function ShooterGame.ShooterCharacter.CreateAndApplyBuff // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60c80
	void ClientResetRemoteMovementPrediction(bool isPossess); // Function ShooterGame.ShooterCharacter.ClientResetRemoteMovementPrediction // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x3b60be0
	void ClientPlayAimpunchSimple(struct UMatineeCameraShake* CameraMod, float ShakeStrength, bool bSharesWeaponShakeCooldown); // Function ShooterGame.ShooterCharacter.ClientPlayAimpunchSimple // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3b60ac0
	void ClientModifyFallDamage(bool bResetFallHeight, float FallGraceDistance); // Function ShooterGame.ShooterCharacter.ClientModifyFallDamage // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3b609e0
	void ClientFly(); // Function ShooterGame.ShooterCharacter.ClientFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3b609b0
	void ClientDebugDrawTextOnScreen(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.ShooterCharacter.ClientDebugDrawTextOnScreen // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient|Const) // @ game+0x3b60870
	void ClientAckInputAndMovementWithCorrection(int32_t LatestReceivedEventID, struct FTimeStampIndex MovementTimeStampIndex, struct FGradualCorrectionData GmcData); // Function ShooterGame.ShooterCharacter.ClientAckInputAndMovementWithCorrection // (Final|Net|Native|Event|Private|NetClient) // @ game+0x3b60750
	void ClientAckInputAndMovement(int32_t LatestReceivedEventID, struct FTimeStampIndex MovementTimeStampIndex); // Function ShooterGame.ShooterCharacter.ClientAckInputAndMovement // (Final|Net|Native|Event|Private|NetClient) // @ game+0x3b60670
	void ClearDeathCameraTimingsOverride(); // Function ShooterGame.ShooterCharacter.ClearDeathCameraTimingsOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60650
	void ClearDeathCameraComponentOverride(); // Function ShooterGame.ShooterCharacter.ClearDeathCameraComponentOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60630
	void CheckBuffForErrors(struct UAbilitySystemComponent* AbilitySystem, struct FGameplayEffectSpec& EffectSpec, struct FActiveGameplayEffectHandle EffectHandle); // Function ShooterGame.ShooterCharacter.CheckBuffForErrors // (Final|Native|Private|HasOutParms) // @ game+0x3b604d0
	bool CanPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.CanPickupEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60430
	bool CanAutoPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.CanAutoPickupEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60390
	bool CanActivateEquippable(struct AAresEquippable* Equippable); // Function ShooterGame.ShooterCharacter.CanActivateEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b602f0
	void BombDefused(); // Function ShooterGame.ShooterCharacter.BombDefused // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b602d0
	bool AuthTeleportToSpawn(); // Function ShooterGame.ShooterCharacter.AuthTeleportToSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a05b0
	void AuthSpawnDefaultInventory(); // Function ShooterGame.ShooterCharacter.AuthSpawnDefaultInventory // (Final|Native|Protected) // @ game+0x2024060
	void AuthSetCorpseLifetime(float NewCorpseLifetime); // Function ShooterGame.ShooterCharacter.AuthSetCorpseLifetime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthSetCharacterScale(float Scale); // Function ShooterGame.ShooterCharacter.AuthSetCharacterScale // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthScoreKillOnThisPawn(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.AuthScoreKillOnThisPawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b60240
	void AuthRevealToTeam(struct FName& OtherTeam, enum class ERevealType RevealType); // Function ShooterGame.ShooterCharacter.AuthRevealToTeam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b60190
	void AuthRevealToAllEnemies(enum class ERevealType RevealType); // Function ShooterGame.ShooterCharacter.AuthRevealToAllEnemies // (Final|Native|Public|BlueprintCallable) // @ game+0x3b60120
	float AuthRestoreShield(float Amount, struct AController* EventInstigator, struct AActor* ShieldRestorer, struct UDamageType* DamageType); // Function ShooterGame.ShooterCharacter.AuthRestoreShield // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b5fb90
	void AuthRemoveFocusProjectile(struct AActor* Projectile); // Function ShooterGame.ShooterCharacter.AuthRemoveFocusProjectile // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthRefreshInventory(); // Function ShooterGame.ShooterCharacter.AuthRefreshInventory // (Final|Native|Public) // @ game+0x2024060
	struct AAresEquippable* AuthPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.AuthPickupEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b60080
	void AuthPersistInventory(enum class EPersistInventoryMode Mode, bool bForcePersistAmmo); // Function ShooterGame.ShooterCharacter.AuthPersistInventory // (Final|Native|Public) // @ game+0x3690810
	void AuthOnPurchase(struct UAresPurchasable* Purchasable); // Function ShooterGame.ShooterCharacter.AuthOnPurchase // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthOnGameplayInvisibleUpdated(bool bNewInvisibility); // Function ShooterGame.ShooterCharacter.AuthOnGameplayInvisibleUpdated // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthOnDeath(struct AShooterPlayerController* Killer); // Function ShooterGame.ShooterCharacter.AuthOnDeath // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
	void AuthOnConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ShooterCharacter.AuthOnConnectionStatusChanged // (Final|Native|Private) // @ game+0x363f1c0
	void AuthNotifyPlayerTemporaryDeath(struct UDamageResponse* Response, bool bRecoversInstantly); // Function ShooterGame.ShooterCharacter.AuthNotifyPlayerTemporaryDeath // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3743cd0
	void AuthNotifyPlayerRecovery(struct AShooterPlayerState* RecoveredByPlayerState); // Function ShooterGame.ShooterCharacter.AuthNotifyPlayerRecovery // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthModifyFallDamage(bool bResetFallHeight, float FallGraceDistance, bool bNotifyClient); // Function ShooterGame.ShooterCharacter.AuthModifyFallDamage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b5ff60
	void AuthKill(struct AActor* DamageCauser, struct AController* InstigatedByController, struct UDamageType* DamageTypeClass); // Function ShooterGame.ShooterCharacter.AuthKill // (Final|Native|Public|BlueprintCallable) // @ game+0x3b5fe50
	bool AuthIsNetworkInitialized(); // Function ShooterGame.ShooterCharacter.AuthIsNetworkInitialized // (Final|Native|Public|Const) // @ game+0x36a05b0
	void AuthInstigatedDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function ShooterGame.ShooterCharacter.AuthInstigatedDamage // (Final|Native|Public) // @ game+0x3b5fcf0
	float AuthHealUnmitigated(float Amount, struct AController* EventInstigator, struct AActor* Healer, struct UDamageType* DamageType); // Function ShooterGame.ShooterCharacter.AuthHealUnmitigated // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b5fb90
	float AuthHeal(float Amount, struct AController* EventInstigator, struct AActor* Healer, struct UDamageType* DamageType); // Function ShooterGame.ShooterCharacter.AuthHeal // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b5fb90
	void AuthGrantStartingPurchasableForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.ShooterCharacter.AuthGrantStartingPurchasableForSlot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void AuthDropInventory(struct FRotator& DropRotation); // Function ShooterGame.ShooterCharacter.AuthDropInventory // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3731520
	void AuthClearFocusProjectiles(); // Function ShooterGame.ShooterCharacter.AuthClearFocusProjectiles // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthCheckForReveal(float RevealRadiusSquared, enum class ERevealType RevealType); // Function ShooterGame.ShooterCharacter.AuthCheckForReveal // (Final|Native|Public|BlueprintCallable) // @ game+0x3b5fae0
	void AuthCheatModifyHealth(float DeltaHealth); // Function ShooterGame.ShooterCharacter.AuthCheatModifyHealth // (Final|Native|Public) // @ game+0x36a0b30
	void AuthAllowCorpseMovement(bool bShouldAllowCorpseMovement); // Function ShooterGame.ShooterCharacter.AuthAllowCorpseMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthAddFocusProjectile(struct AActor* NewProjectile); // Function ShooterGame.ShooterCharacter.AuthAddFocusProjectile // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AssociateEquippableWithAnimation(struct AAresEquippable* Equippable, struct UAnimationAsset* Animation); // Function ShooterGame.ShooterCharacter.AssociateEquippableWithAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x3b5fa10
};

// Class ShooterGame.ShooterCharacterAnimInstance
// Size: 0xe60 (Inherited: 0x300)
struct UShooterCharacterAnimInstance : UAnimInstance {
	struct UAnimationStateComponent* AnimationStateComponent; // 0x300(0x08)
	struct USplitBodyRotationComponent* SplitBodyRotationComponent; // 0x308(0x08)
	struct USplitBodyRotationGroundComponent* SplitBodyRotationGroundComponent; // 0x310(0x08)
	struct USplitBodyRotationRopeComponent* SplitBodyRotationRopeComponent; // 0x318(0x08)
	struct FAnimationStateParams AnimationStateParams; // 0x320(0x1d0)
	struct FAnimSequenceSlotArray Idle1PSlotArray; // 0x4f0(0x20)
	struct FAnimSequenceSlotArray IdleAdd1PSlotArray; // 0x510(0x20)
	struct FAnimSequenceSlotArray Disabled1PSlotArray; // 0x530(0x20)
	struct FAnimSequenceSlotArray Run1PSlotArray; // 0x550(0x20)
	struct FAnimSequenceSlotArray Walk1PSlotArray; // 0x570(0x20)
	struct FAnimSequenceSlotArray Jump1PSlotArray; // 0x590(0x20)
	struct FAnimSequenceSlotArray JumpLand1PSlotArray; // 0x5b0(0x20)
	struct FAnimSequenceSlotArray Crouch1PSlotArray; // 0x5d0(0x20)
	struct FAnimSequenceSlotArray CrouchIdle1PSlotArray; // 0x5f0(0x20)
	struct FAnimSequenceSlotArray CrouchWalk1PSlotArray; // 0x610(0x20)
	struct FAnimSequenceSlotArray UnCrouch1PSlotArray; // 0x630(0x20)
	struct FAimOffsetBlendspaceSlotArray Primary1PAimOffsets; // 0x650(0x20)
	struct FAimOffsetBlendspaceSlotArray Secondary1PAimOffsets; // 0x670(0x20)
	struct FAnimSequenceSlotArray IdleBaseUpperBody3PSlotArray; // 0x690(0x20)
	struct FAnimSequenceSlotArray IdleUpperBody3PSlotArray; // 0x6b0(0x20)
	struct FBlendspaceSlotArray RunUpperBody3PSlotArray; // 0x6d0(0x20)
	struct FAnimSequenceSlotArray JumpUpperBody3PSlotArray; // 0x6f0(0x20)
	struct FAnimSequenceSlotArray JumpLandUpperBody3PSlotArray; // 0x710(0x20)
	struct FAnimSequenceSlotArray JumpLandAddUpperBody3PSlotArray; // 0x730(0x20)
	struct FAnimSequenceSlotArray CrouchJumpLandAddUpperBody3PSlotArray; // 0x750(0x20)
	struct FAnimSequenceSlotArray CrouchUpperBody3PSlotArray; // 0x770(0x20)
	struct FBlendspaceSlotArray CrouchWalkUpperBody3PSlotArray; // 0x790(0x20)
	struct FAnimSequenceSlotArray CrouchFallUpperBody3PSlotArray; // 0x7b0(0x20)
	struct FAnimSequenceSlotArray FallUpperBody3PSlotArray; // 0x7d0(0x20)
	struct FAnimSequenceSlotArray RightGripUpperBody3PSlotArray; // 0x7f0(0x20)
	struct FAnimSequenceSlotArray LeftGripUpperBody3PSlotArray; // 0x810(0x20)
	struct FAnimSequenceSlotArray StopUpperBody3PSlotArray; // 0x830(0x20)
	struct FAnimSequenceSlotArray RopeIdleUpperBody3PSlotArray; // 0x850(0x20)
	struct FAnimSequenceSlotArray RopeIdleAddUpperBody3PSlotArray; // 0x870(0x20)
	struct FBlendspaceSlotArray RopeLookUpperBody3PSlotArray; // 0x890(0x20)
	struct FBlendspace1DSlotArray RopeTurnLeftUpperBody3PSlotArray; // 0x8b0(0x20)
	struct FBlendspace1DSlotArray RopeTurnRightUpperBody3PSlotArray; // 0x8d0(0x20)
	struct FBlendspace1DSlotArray RopeNavUpperBody3PSlotArray; // 0x8f0(0x20)
	struct FBlendspace1DSlotArray RopeNavHorizontalUpperBody3PSlotArray; // 0x910(0x20)
	struct FBlendspace1DSlotArray RopeNavVerticalUpperBody3PSlotArray; // 0x930(0x20)
	struct FAnimSequenceSlotArray RopeStopUpUpperBody3PSlotArray; // 0x950(0x20)
	struct FAnimSequenceSlotArray RopeStopDownUpperBody3PSlotArray; // 0x970(0x20)
	struct FAnimSequenceSlotArray IdleLowerBody3PSlotArray; // 0x990(0x20)
	struct FBlendspace1DSlotArray TurnLeftLowerBody3PSlotArray; // 0x9b0(0x20)
	struct FBlendspace1DSlotArray TurnRightLowerBody3PSlotArray; // 0x9d0(0x20)
	struct FBlendspaceSlotArray RunLowerBody3PSlotArray; // 0x9f0(0x20)
	struct FBlendspaceSlotArray JumpLowerBody3PSlotArray; // 0xa10(0x20)
	struct FAnimSequenceSlotArray FallLowerBody3PSlotArray; // 0xa30(0x20)
	struct FAnimSequenceSlotArray GlideLowerBody3PSlotArray; // 0xa50(0x20)
	struct FAnimSequenceSlotArray JumpLandLowerBody3PSlotArray; // 0xa70(0x20)
	struct FAnimSequenceSlotArray JumpLandAddLowerBody3PSlotArray; // 0xa90(0x20)
	struct FAnimSequenceSlotArray CrouchLowerBody3PSlotArray; // 0xab0(0x20)
	struct FBlendspace1DSlotArray CrouchTurnLeftLowerBody3PSlotArray; // 0xad0(0x20)
	struct FBlendspace1DSlotArray CrouchTurnRightLowerBody3PSlotArray; // 0xaf0(0x20)
	struct FBlendspaceSlotArray CrouchWalkLowerBody3PSlotArray; // 0xb10(0x20)
	struct FAnimSequenceSlotArray StopLowerBody3PSlotArray; // 0xb30(0x20)
	struct FAnimSequenceSlotArray RopeIdleLowerBody3PSlotArray; // 0xb50(0x20)
	struct FAnimSequenceSlotArray RopeIdleAddLowerBody3PSlotArray; // 0xb70(0x20)
	struct FBlendspaceSlotArray RopeLookLowerBody3PSlotArray; // 0xb90(0x20)
	struct FBlendspace1DSlotArray RopeTurnLeftLowerBody3PSlotArray; // 0xbb0(0x20)
	struct FBlendspace1DSlotArray RopeTurnRightLowerBody3PSlotArray; // 0xbd0(0x20)
	struct FBlendspace1DSlotArray RopeNavLowerBody3PSlotArray; // 0xbf0(0x20)
	struct FBlendspace1DSlotArray RopeNavHorizontalLowerBody3PSlotArray; // 0xc10(0x20)
	struct FAnimSequenceSlotArray RopeNavHorizontalAddLowerBody3PSlotArray; // 0xc30(0x20)
	struct FBlendspace1DSlotArray RopeNavVerticalLowerBody3PSlotArray; // 0xc50(0x20)
	struct FAnimSequenceSlotArray RopeNavVerticalAddLowerBody3PSlotArray; // 0xc70(0x20)
	struct FAnimSequenceSlotArray RopeStopUpLowerBody3PSlotArray; // 0xc90(0x20)
	struct FAnimSequenceSlotArray RopeStopDownLowerBody3PSlotArray; // 0xcb0(0x20)
	struct FAimOffsetBlendspaceSlotArray UpperBodyAimOffsets; // 0xcd0(0x20)
	struct FAimOffsetBlendspaceSlotArray LowerBodyAimOffsets; // 0xcf0(0x20)
	struct FBlendspaceSlotArray HitReactions3PSlotArray; // 0xd10(0x20)
	struct UAnimSequence* FaceAiming3PSlot; // 0xd30(0x08)
	struct UAnimSequence* FaceAimFiring3PSlot; // 0xd38(0x08)
	struct UAnimSequence* FaceDead3PSlot; // 0xd40(0x08)
	struct UAnimSequence* FaceFiring3PSlot; // 0xd48(0x08)
	struct UAnimSequence* FaceHit3PSlot; // 0xd50(0x08)
	struct UAnimSequence* FaceIdle3PSlot; // 0xd58(0x08)
	struct UAnimSequence* FaceMeleeAttacking3PSlot; // 0xd60(0x08)
	struct UAnimSequence* FaceFidget3PSlot; // 0xd68(0x08)
	bool bResetFaceFidgetTimers; // 0xd70(0x01)
	char pad_D71[0x3]; // 0xd71(0x03)
	struct FBoneTransformAim3P BoneTransformAim3P; // 0xd74(0x74)
	bool HasAnimationStateComponent; // 0xde8(0x01)
	char pad_DE9[0x3]; // 0xde9(0x03)
	struct FVector AccumulatedRootMotion; // 0xdec(0x0c)
	float StartAccumulationTimestamp; // 0xdf8(0x04)
	bool bHasAccumulatedRootMotion; // 0xdfc(0x01)
	char pad_DFD[0x63]; // 0xdfd(0x63)

	void SetRootMotionAccumulation(bool bAccumulate); // Function ShooterGame.ShooterCharacterAnimInstance.SetRootMotionAccumulation // (Final|Native|Public|BlueprintCallable) // @ game+0x3b69d70
	void OnServerLeaveFoW(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.ShooterCharacterAnimInstance.OnServerLeaveFoW // (Final|Native|Private) // @ game+0x3b69a70
	bool IsAccumulatingRootMotion(); // Function ShooterGame.ShooterCharacterAnimInstance.IsAccumulatingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b697d0
	float GetStateMachineCurrentStateElapsedTime(struct FName MachineName); // Function ShooterGame.ShooterCharacterAnimInstance.GetStateMachineCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b69720
	struct UBlendSpace* GetBlendspaceUpperBody3P(struct UAnimSlotUpperBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspaceUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b695a0
	struct UBlendSpace* GetBlendspaceLowerBody3P(struct UAnimSlotLowerBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspaceLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b694d0
	struct UBlendSpace1D* GetBlendspace1DUpperBody3P(struct UAnimSlotUpperBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspace1DUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b69400
	struct UBlendSpace1D* GetBlendspace1DLowerBody3P(struct UAnimSlotLowerBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspace1DLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b69330
	int32_t GetAnimationUpperBody3PActiveIndex(struct UAnimSlotUpperBody3P* Slot); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b69290
	struct UAnimSequence* GetAnimationSequenceUpperBody3P(struct UAnimSlotUpperBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationSequenceUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b691c0
	struct UAnimSequence* GetAnimationSequenceLowerBody3P(struct UAnimSlotLowerBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationSequenceLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b690f0
	int32_t GetAnimationLowerBody3PActiveIndex(struct UAnimSlotLowerBody3P* Slot); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b69050
	struct FVector GetAndConsumeRootMotion(float& AccumulationTime); // Function ShooterGame.ShooterCharacterAnimInstance.GetAndConsumeRootMotion // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b68f90
	int32_t GetAimOffsetUpperBody3PActiveIndex(); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b68f60
	struct UAimOffsetBlendSpace* GetAimOffsetUpperBody3P(int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b68ec0
	int32_t GetAimOffsetLowerBody3PLastValidActiveIndex(); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetLowerBody3PLastValidActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b68e90
	int32_t GetAimOffsetLowerBody3PActiveIndex(); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b68e60
	struct UAimOffsetBlendSpace* GetAimOffsetLowerBody3P(int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b68dc0
};

// Class ShooterGame.ShooterCharacterAnimInstanceReplicationComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UShooterCharacterAnimInstanceReplicationComponent : UActorComponent {
	struct TArray<struct FPendingAnimUpdate> PendingAnimUpdates; // 0xe8(0x10)

	void PostMovementUpdate(float Timestamp); // Function ShooterGame.ShooterCharacterAnimInstanceReplicationComponent.PostMovementUpdate // (Final|Native|Public) // @ game+0x3b69c60
	void OnRoundEnded(int32_t RoundNumberEnded); // Function ShooterGame.ShooterCharacterAnimInstanceReplicationComponent.OnRoundEnded // (Final|Native|Private) // @ game+0x3b699e0
	void ClientUpdateAnimState(struct UAnimInstanceReplicationComponent* AnimInstanceReplicationComponent, struct UAnimationStateComponent* Component, float CurrentTime, struct FAnimUpdate AnimUpdate); // Function ShooterGame.ShooterCharacterAnimInstanceReplicationComponent.ClientUpdateAnimState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3b68b70
};

// Class ShooterGame.ShooterCharacterDeathReactionComponent
// Size: 0x168 (Inherited: 0xe8)
struct UShooterCharacterDeathReactionComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TArray<struct FBodySectionEntry> BodySectionInfo; // 0xf0(0x10)
	struct AEffectContainer* DeathMontageEffect; // 0x100(0x08)
	struct UForceModule* DeathForceModule; // 0x108(0x08)
	struct AEffectContainer* DeathMontageEffectOverride; // 0x110(0x08)
	struct UObject* DeathMontageEffectOverrideContext; // 0x118(0x08)
	bool DeathMontageCancelMovement; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	float DeathMontageDestroyCorpseTime; // 0x124(0x04)
	bool bAllowDeathMontageEffectOverride; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float CorpsePerchRadius; // 0x12c(0x04)
	float CorrectionAngleTotalLerpTime; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UAnimMontage* DeathAnimMontage; // 0x138(0x08)
	float InitialActorYaw; // 0x140(0x04)
	float TargetActorYaw; // 0x144(0x04)
	float CorrectionAngleLerpTime; // 0x148(0x04)
	char pad_14C[0x1c]; // 0x14c(0x1c)

	void UpdateCurrentMontage(struct UAnimMontage* MontageToPlay); // Function ShooterGame.ShooterCharacterDeathReactionComponent.UpdateCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x3b69e00
	void SetDeathReactionQueued(bool Queued); // Function ShooterGame.ShooterCharacterDeathReactionComponent.SetDeathReactionQueued // (Final|Native|Public|BlueprintCallable) // @ game+0x3b69ce0
	void PlayFinisherEffect(bool bLocalOnly); // Function ShooterGame.ShooterCharacterDeathReactionComponent.PlayFinisherEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3b69bd0
	void OnOwnerDamageableComponentDeathResponseReady(struct FDeathResponse& DeathResponse); // Function ShooterGame.ShooterCharacterDeathReactionComponent.OnOwnerDamageableComponentDeathResponseReady // (Final|Native|Private|HasOutParms) // @ game+0x3b69930
	void OnHasSettled(); // Function ShooterGame.ShooterCharacterDeathReactionComponent.OnHasSettled // (Final|Native|Public|BlueprintCallable) // @ game+0x3b69910
	void OnCharacterSpawnComplete(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterDeathReactionComponent.OnCharacterSpawnComplete // (Final|Native|Public) // @ game+0x3b69880
	void IsPersistingAfterDeadAndSettled(bool Persists); // Function ShooterGame.ShooterCharacterDeathReactionComponent.IsPersistingAfterDeadAndSettled // (Final|Native|Public|BlueprintCallable) // @ game+0x3b697f0
	enum class EAresBodySection GetBodySectionForBone(struct FName BoneName); // Function ShooterGame.ShooterCharacterDeathReactionComponent.GetBodySectionForBone // (Final|Native|Public|Const) // @ game+0x3b69670
	void DeathMontageDestroyCorpse(); // Function ShooterGame.ShooterCharacterDeathReactionComponent.DeathMontageDestroyCorpse // (Final|Native|Public) // @ game+0x3b68da0
	void AuthTriggerDeathReaction(struct AShooterCharacter* ShooterCharacter, struct UAresHitReactions* DeathReactions, struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacterDeathReactionComponent.AuthTriggerDeathReaction // (Final|Native|Public) // @ game+0x3634fc0
	bool AuthSetDeathMontageEffectOverride(struct AEffectContainer* InDeathMontageEffectOverride, struct UObject* EffectContext, bool bCancelMovement, float DestroyCorpseTime, bool bIgnoreGameModeRules); // Function ShooterGame.ShooterCharacterDeathReactionComponent.AuthSetDeathMontageEffectOverride // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b689b0
	void AuthCancelDeathMovement(); // Function ShooterGame.ShooterCharacterDeathReactionComponent.AuthCancelDeathMovement // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.ShooterCharacterDebugComponent
// Size: 0x300 (Inherited: 0xe8)
struct UShooterCharacterDebugComponent : UActorComponent {
	struct TSet<struct AShooterPlayerController*> DebugCharacterNetworkingWatchingControllers; // 0xe8(0x50)
	char pad_138[0x50]; // 0x138(0x50)
	struct TArray<struct AAresEquippable*> DebugWatchEquippables; // 0x188(0x10)
	struct FDebugServerHitRegTuning DebugServerHitRegTuning; // 0x198(0x1c)
	struct FDebugProjectileFiringTuning DebugProjectileFiringTuning; // 0x1b4(0x10)
	float AutoFireTimeInterval; // 0x1c4(0x04)
	float AutoFireCooldown; // 0x1c8(0x04)
	bool bAutoFireHold; // 0x1cc(0x01)
	bool bAutoFireHoldPrevious; // 0x1cd(0x01)
	bool bAutoWalkHold; // 0x1ce(0x01)
	bool bAutoWalkHoldPrevious; // 0x1cf(0x01)
	bool bAutoJumpRepeatedly; // 0x1d0(0x01)
	bool bJumpIsHeld; // 0x1d1(0x01)
	char pad_1D2[0x2]; // 0x1d2(0x02)
	float JumpRepeatedlyLastJumpTime; // 0x1d4(0x04)
	char pad_1D8[0x8]; // 0x1d8(0x08)
	bool bAutoCrouchHold; // 0x1e0(0x01)
	bool bAutoCrouchHoldPrevious; // 0x1e1(0x01)
	enum class EAresItemSlot AutoSwapEquippable; // 0x1e2(0x01)
	char pad_1E3[0x2d]; // 0x1e3(0x2d)
	int32_t HitRegHistoryIndex; // 0x210(0x04)
	float LastTimestampOfConfirmedHit; // 0x214(0x04)
	char pad_218[0x80]; // 0x218(0x80)
	struct TArray<struct FDebugPruneComplexRewindEntry> DebugPruneComplexRewindEntries; // 0x298(0x10)
	struct TArray<struct FDebugProjectileTargetCheckingEntry> DebugProjectileTargetCheckingEntries; // 0x2a8(0x10)
	struct TArray<struct FDebugProjectileFireSnapshot> ClientDebugProjectileFireSnapshots; // 0x2b8(0x10)
	struct TArray<struct FDebugProjectileFireSnapshot> AuthDebugProjectileFireSnapshots; // 0x2c8(0x10)
	struct TArray<struct FDebugProjectileDamageSnapshot> ClientProjectileDamageSnapshots; // 0x2d8(0x10)
	struct TArray<struct FDebugProjectileDamageSnapshot> AuthProjectileDamageSnapshots; // 0x2e8(0x10)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void TeleportToLocation(struct FVector Location); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportToLocation // (Final|Native|Protected|HasDefaults) // @ game+0x372c930
	void TeleportNearCommonFunc(struct TArray<struct FString>& Args, struct UWorld* World, enum class DebugTeleportMode Mode); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportNearCommonFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x3b6ffa0
	void TeleportNearCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportNearCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void TeleportNear(struct UWorld* World, enum class EAresAlliance AllianceRestriction); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportNear // (Final|Native|Protected) // @ game+0x3b6fed0
	void TeleportFriendCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportFriendCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void TeleportEnemyCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportEnemyCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void TeleportCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void SyncAutoFireFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SyncAutoFireFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void SpawnMannequinPlayerFunc(struct TArray<struct FString> Params); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinPlayerFunc // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3b6fe00
	void SpawnMannequinPlayerCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinPlayerCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void SpawnMannequinFunc(struct FString SpawnClass); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinFunc // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3b6fd50
	void SpawnMannequinCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void SetOutlineModeForMeshFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SetOutlineModeForMeshFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void ServerVerifyShot(float TimestampOfShot, struct AShooterCharacter* VictimActor); // Function ShooterGame.ShooterCharacterDebugComponent.ServerVerifyShot // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6fc70
	void ServerShowPossessedCharacterForDebugCharacterNetworking(bool bSet); // Function ShooterGame.ShooterCharacterDebugComponent.ServerShowPossessedCharacterForDebugCharacterNetworking // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3935d30
	void ServerSetPlayerDebugFlag(enum class EPlayerDebugFlags Flag, bool bEnabled); // Function ShooterGame.ShooterCharacterDebugComponent.ServerSetPlayerDebugFlag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3b6fb90
	void ServerFramePercentageAddition(float Percentage); // Function ShooterGame.ShooterCharacterDebugComponent.ServerFramePercentageAddition // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6fb00
	void ServerDebugServerHitBox(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugServerHitBox // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6fa70
	void ServerDebugPruneComplexRewinds(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugPruneComplexRewinds // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3949760
	void ServerDebugProjectileTargetChecking(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugProjectileTargetChecking // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x39678c0
	void ServerDebugProjectileFiring(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugProjectileFiring // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6f9e0
	void ServerDebugHitRegEveryShot(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugHitRegEveryShot // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6f950
	void ServerDebugHitReg(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugHitReg // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6f8c0
	void ServerDebugForceRewindTime(float ForceRewindTime); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugForceRewindTime // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3690ff0
	void ServerDebugApplyBuff(struct FName BuffName, bool bApplyBuff); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugApplyBuff // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b6f7d0
	void OnProjectileFired(); // Function ShooterGame.ShooterCharacterDebugComponent.OnProjectileFired // (Final|Native|Public) // @ game+0x2024060
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.ShooterCharacterDebugComponent.OnBugCommand // (Final|Native|Public) // @ game+0x3905560
	void MulticastServerHitBox(struct TArray<struct FRepSocketTransform> HitBoxSocketWorldTransformArray); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastServerHitBox // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b6f720
	void MulticastPruneComplexRewind(struct FVector SphereCastStart, struct FVector SphereCastEnd, float SphereRadius, struct TArray<struct FVector> ImpactPoints); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastPruneComplexRewind // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x3b6f5a0
	void MulticastProjectileTargetChecking(struct FVector SphereCastStart, struct FVector SphereCastEnd, float SphereRadius, struct TArray<struct FVector> ImpactPoints); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastProjectileTargetChecking // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x3b6f420
	void MulticastHitRegResult(struct FVector ActorLocation, struct TArray<struct FRepSocketTransform> HitBoxSocketWorldTransformArray, struct TArray<struct FHitResult> HitResults, float RewindTime, float JitterTime, float RewindTargetTimestamp, bool bHasVictimActorTicked); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastHitRegResult // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x3b6f1b0
	void MulticastDebugServerHitBox(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugServerHitBox // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b6f120
	void MulticastDebugPruneComplexRewinds(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugPruneComplexRewinds // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x36f83f0
	void MulticastDebugProjectileTargetChecking(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugProjectileTargetChecking // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b6f090
	void MulticastDebugProjectileFiring(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugProjectileFiring // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x39f0a20
	void MulticastDebugHitRegEveryShot(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugHitRegEveryShot // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b6f000
	void MulticastDebugHitReg(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugHitReg // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b6ef70
	void ListSpawnedEffectsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ListSpawnedEffectsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void ListPooledEffectsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ListPooledEffectsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void ListAllCharacterMeshComponentsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ListAllCharacterMeshComponentsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugTrackDroppedShotsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugTrackDroppedShotsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugSetAttributeOnLocalCharacterFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugSetAttributeOnLocalCharacterFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugServerHitRegFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerHitRegFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugServerHitRegEveryShotFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerHitRegEveryShotFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugServerHitBoxFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerHitBoxFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugServerFramePercentageAdditionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerFramePercentageAdditionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugServerForceRewindTimeFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerForceRewindTimeFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugPruneComplexRewindsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugPruneComplexRewindsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugProjectileTargetCheckingFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugProjectileTargetCheckingFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugProjectileFiringFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugProjectileFiringFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugPreventAwayPenaltyFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugPreventAwayPenaltyFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugInputFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugInputFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugForceEnemyOutlinesVisibleFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugForceEnemyOutlinesVisibleFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugEquippableWatchItemInSlotFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugEquippableWatchItemInSlotFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugEquippableToggleSlotFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugEquippableToggleSlotFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugEquippableClearWatchesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugEquippableClearWatchesFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugCharacterNetworkingWatchCurrentFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugCharacterNetworkingWatchCurrentFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugCharacterNetworkingShowPossessedFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugCharacterNetworkingShowPossessedFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugCharacterNetworkingClearWatchesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugCharacterNetworkingClearWatchesFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void DebugApplyBuffFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugApplyBuffFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void ClientDebugFallDamageInformation(float HighestCharacterHeight, float LandingHeight, float FallDistance, float MitigatedHeight, float Damage); // Function ShooterGame.ShooterCharacterDebugComponent.ClientDebugFallDamageInformation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3b6edb0
	void ClientConfirmDroppedShot(float TimeInSeconds, struct AShooterCharacter* VictimCharacter, struct FVector ActorLocation, struct TArray<struct FRepSocketTransform> HitBoxSocketWorldTransformArray, struct TArray<struct FHitResult> HitResults, float RewindTime, float JitterTime, float RewindTargetTimestamp, bool bHasTargetActorTicked); // Function ShooterGame.ShooterCharacterDebugComponent.ClientConfirmDroppedShot // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient) // @ game+0x3b6eac0
	void ClearMouseHistoryCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ClearMouseHistoryCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void CheatTeleport(enum class DebugTeleportMode Mode, struct FVector Location); // Function ShooterGame.ShooterCharacterDebugComponent.CheatTeleport // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3b6e9e0
	void AutoWalkHoldFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoWalkHoldFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoSwapEquippableFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoSwapEquippableFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoStrafeStopFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeStopFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoStrafeInVectorDirectionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeInVectorDirectionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoStrafeFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoStrafeForwardBackwardFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeForwardBackwardFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveStopFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveStopFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveRightFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveRightFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveLeftFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveLeftFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveInWorldVectorDirectionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveInWorldVectorDirectionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveInVectorDirectionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveInVectorDirectionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveForwardFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveForwardFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoMoveBackwardFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveBackwardFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoJumpRepeatedlyFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoJumpRepeatedlyFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoFireHoldFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoFireHoldFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoFireFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoFireFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AutoCrouchHoldFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoCrouchHoldFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x372e9f0
	void AuthVerifyShots(); // Function ShooterGame.ShooterCharacterDebugComponent.AuthVerifyShots // (Final|Native|Protected) // @ game+0x2024060
	void AuthOnOwningCharacterTookDamage(struct AShooterCharacter* VictimCharacter, struct AController* DamageInstigator, struct AActor* DamageCauser, float Damage, struct FDamageEvent& DamageEvent); // Function ShooterGame.ShooterCharacterDebugComponent.AuthOnOwningCharacterTookDamage // (Final|Native|Protected|HasOutParms) // @ game+0x3b6e820
};

// Class ShooterGame.ShooterCharacterFogOfWarComponent
// Size: 0x348 (Inherited: 0x320)
struct UShooterCharacterFogOfWarComponent : UFogOfWarComponent {
	float JumpVelocityContribution; // 0x320(0x04)
	float MaxSpeedContribution; // 0x324(0x04)
	float MaxSpeed; // 0x328(0x04)
	float InitialJumpVelocity; // 0x32c(0x04)
	bool bCachedMaxSpeed; // 0x330(0x01)
	bool bCachedJumpVelocity; // 0x331(0x01)
	char pad_332[0x6]; // 0x332(0x06)
	struct AShooterCharacter* OwnerCharacter; // 0x338(0x08)
	struct UBaseTeamComponent* CachedTeamComponent; // 0x340(0x08)

	void OnTeleported(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterFogOfWarComponent.OnTeleported // (Final|Native|Public) // @ game+0x3634e00
	void OnPlayspaceChanged(struct UPlayspaceComponent* PlayspaceComponent); // Function ShooterGame.ShooterCharacterFogOfWarComponent.OnPlayspaceChanged // (Final|Native|Public) // @ game+0x3634e00
	void OnInventoryTransaction(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* Item); // Function ShooterGame.ShooterCharacterFogOfWarComponent.OnInventoryTransaction // (Final|Native|Public) // @ game+0x36f7a70
};

// Class ShooterGame.ShooterCharacterHitRegDebugComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UShooterCharacterHitRegDebugComponent : UActorComponent {
	char pad_E8[0x78]; // 0xe8(0x78)
	struct TArray<struct FNetworkedClientShotResult> PendingShotResultsToSerialize; // 0x160(0x10)
	char pad_170[0x38]; // 0x170(0x38)

	void ServerReportClientShotResults(struct TArray<struct FNetworkedShotId> MissedShotIds, struct TArray<struct FNetworkedClientShotResult> ClientHitShotResults); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ServerReportClientShotResults // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3b78ac0
	void ServerGenerateHitRegSample(struct AShooterCharacter* SampleTarget, struct FNetworkedMovementTimestamp SampleTimeStamp, int32_t RecordID); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ServerGenerateHitRegSample // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3b78990
	void HandleControllerChanged(struct AController* NewController); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.HandleControllerChanged // (Final|Native|Private) // @ game+0x3b77d90
	void ClientReportServerHitRegSample(int32_t RecordID, struct FReplicatedDebugHitRegSample Entry); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClientReportServerHitRegSample // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3b77300
	void ClientGenerateHitRegRecord(struct AShooterCharacter* SampleTarget); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClientGenerateHitRegRecord // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x36368f0
	void ClientDrawDebugShotResult(struct FNetworkedShotId ShotId, struct FShotResult ShotResult, int32_t RenderIdx); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClientDrawDebugShotResult // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3b76dd0
	void ClearHitRegRecords(); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClearHitRegRecords // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	bool CheckMeasuredErrorsBelowThreshold(float MaxSocketTranslationError, float MaxSocketRotationError, struct TSet<struct FName>& SocketsToCheck); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.CheckMeasuredErrorsBelowThreshold // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b76b50
	void AuthHandleControllerChanged(struct AController* NewController); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.AuthHandleControllerChanged // (Final|Native|Private) // @ game+0x3634e00
};

// Class ShooterGame.ShooterCharacterMinimapComponent
// Size: 0x540 (Inherited: 0x500)
struct UShooterCharacterMinimapComponent : UAresMinimapComponent {
	float TeleportInvisibleDelay; // 0x4f8(0x04)
	bool bNeedsShooterCharacterParameterUpdate; // 0x4fc(0x01)
	bool bIsSelf; // 0x4fd(0x01)
	bool bIsEnemy; // 0x4fe(0x01)
	bool bIsAlive; // 0x4ff(0x01)
	bool bHasBomb; // 0x500(0x01)
	bool bIsVisible; // 0x501(0x01)
	float LastSeen; // 0x504(0x04)
	bool bIsSpeaking; // 0x508(0x01)
	bool bPlayCommPulse; // 0x509(0x01)
	bool bPlayCommCriticalPulse; // 0x50a(0x01)
	bool bDebugFogOfWar; // 0x50b(0x01)
	char pad_512[0x6]; // 0x512(0x06)
	struct UVisibilityComponent* VisibilityComponent; // 0x518(0x08)
	struct UBaseTeamComponent* LastTeamComponent; // 0x520(0x08)
	struct AShooterCharacter* LastViewTarget; // 0x528(0x08)
	bool bLocalObserver; // 0x530(0x01)
	bool bRecentlyTeleported; // 0x531(0x01)
	bool bHasTeamSight; // 0x532(0x01)
	bool bBeingDestroyed; // 0x533(0x01)
	char pad_534[0xc]; // 0x534(0x0c)

	void SetSpeaking(bool bInSpeaking); // Function ShooterGame.ShooterCharacterMinimapComponent.SetSpeaking // (Final|Native|Public|BlueprintCallable) // @ game+0x3b78cb0
	void SetNeedsShooterCharacterParameterUpdate(); // Function ShooterGame.ShooterCharacterMinimapComponent.SetNeedsShooterCharacterParameterUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x3b78c90
	void SetHoldingBomb(bool bInHoldingBomb); // Function ShooterGame.ShooterCharacterMinimapComponent.SetHoldingBomb // (Final|Native|Public|BlueprintCallable) // @ game+0x3b78c00
	void PlayCommPulse(); // Function ShooterGame.ShooterCharacterMinimapComponent.PlayCommPulse // (Final|Native|Public|BlueprintCallable) // @ game+0x3b78950
	void PlayCommCriticalPulse(); // Function ShooterGame.ShooterCharacterMinimapComponent.PlayCommCriticalPulse // (Final|Native|Public|BlueprintCallable) // @ game+0x3b78930
	void OnViewTargetChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ShooterCharacterMinimapComponent.OnViewTargetChanged // (Final|Native|Public|HasOutParms) // @ game+0x3b788a0
	void OnMapVisibleToAllChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ShooterCharacterMinimapComponent.OnMapVisibleToAllChanged // (Final|Native|Protected|HasOutParms) // @ game+0x3b785c0
	bool IsVisibleOverride(bool bSuperIsVisible); // Function ShooterGame.ShooterCharacterMinimapComponent.IsVisibleOverride // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x3b782c0
	void HandleViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleViewTargetModeChanged // (Final|Native|Protected|HasOutParms) // @ game+0x3b780e0
	void HandleTeleportedFinishDelay(); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleTeleportedFinishDelay // (Final|Native|Protected) // @ game+0x3b780c0
	void HandleTeleported(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleTeleported // (Final|Native|Protected) // @ game+0x3b78030
	void HandlePlayerStateChanged(struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.ShooterCharacterMinimapComponent.HandlePlayerStateChanged // (Final|Native|Protected) // @ game+0x3b77e20
	void HandleOwnerExitedTeamSight(struct AActor* Actor); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleOwnerExitedTeamSight // (Final|Native|Protected) // @ game+0x3b77e20
	void HandleOwnerEnteredTeamSight(struct AActor* Actor, struct TArray<struct AShooterCharacter*>& CharactersWithVisibility); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleOwnerEnteredTeamSight // (Final|Native|Protected|HasOutParms) // @ game+0x3b77f40
	void HandleOwnerDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleOwnerDestroyed // (Final|Native|Protected) // @ game+0x3b77eb0
	void HandleHiddenChanged(struct AActor* Actor); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleHiddenChanged // (Final|Native|Protected) // @ game+0x3b77e20
	void HandleFoWDebugCheatsChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleFoWDebugCheatsChanged // (Final|Native|Protected) // @ game+0x3690810
	void HandleCharacterDeath(struct AShooterCharacter* ShooterCharacter, struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleCharacterDeath // (Final|Native|Protected) // @ game+0x3b77cc0
	void BindViewTargetEvents(); // Function ShooterGame.ShooterCharacterMinimapComponent.BindViewTargetEvents // (Final|Native|Public) // @ game+0x3b76b30
	void BindTeamComponentEvents(); // Function ShooterGame.ShooterCharacterMinimapComponent.BindTeamComponentEvents // (Final|Native|Public) // @ game+0x3b76b10
};

// Class ShooterGame.ShooterCharacterMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UShooterCharacterMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.ShooterCharacterMinimapWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UShooterCharacterMinimapWidget : UAresMinimapWidget {
	bool bIsSelf; // 0x2e0(0x01)
	bool bIsEnemy; // 0x2e1(0x01)
	bool bIsAlive; // 0x2e2(0x01)
	bool bHasBomb; // 0x2e3(0x01)
	bool bIsVisible; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	float LastSeen; // 0x2e8(0x04)
	bool bCommPulse; // 0x2ec(0x01)
	bool bCommCriticalPulse; // 0x2ed(0x01)
	bool bDebugFogOfWar; // 0x2ee(0x01)
	char pad_2EF[0x1]; // 0x2ef(0x01)

	void SetState(bool bInIsSelf, bool bInIsEnemy, bool bInIsAlive, bool bInHasBomb, bool bInIsVisible, float InLastSeen, bool bInCommPulse, bool bInCommCriticalPulse, bool bDebugFogOfWar); // Function ShooterGame.ShooterCharacterMinimapWidget.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b78d40
};

// Class ShooterGame.ShooterCharacterMovement
// Size: 0x1020 (Inherited: 0xbe0)
struct UShooterCharacterMovement : UCharacterMovementComponent {
	char pad_BE0[0x18]; // 0xbe0(0x18)
	struct FMulticastInlineDelegate OnPreMovementTick; // 0xbf8(0x10)
	struct FMulticastInlineDelegate OnPrepareMovement; // 0xc08(0x10)
	struct FMulticastInlineDelegate OnPostMovementTick; // 0xc18(0x10)
	struct FMulticastInlineDelegate OnGameFrameMovementComplete; // 0xc28(0x10)
	struct FMulticastInlineDelegate OnCrouchStateUpdated; // 0xc38(0x10)
	char pad_C48[0x44]; // 0xc48(0x44)
	float AirControlDisableOnBounceTime; // 0xc8c(0x04)
	char pad_C90[0x10]; // 0xc90(0x10)
	struct FMulticastInlineDelegate OnBouncedOff; // 0xca0(0x10)
	char pad_CB0[0x8]; // 0xcb0(0x08)
	float CachedTemporaryMovementSpeedModifier; // 0xcb8(0x04)
	char pad_CBC[0x8]; // 0xcbc(0x08)
	struct FVector LastWalkingLocation; // 0xcc4(0x0c)
	struct FMulticastInlineDelegate OnJump; // 0xcd0(0x10)
	float CrouchHopVelocityMultiplier; // 0xce0(0x04)
	float FlightHeight; // 0xce4(0x04)
	struct FJumpVariables JumpVariables; // 0xce8(0x34)
	float TimeOfLastRemoteClientTimingRecording; // 0xd1c(0x04)
	struct FAresMovementTuning MovementTuning; // 0xd20(0xcc)
	char pad_DEC[0xc]; // 0xdec(0x0c)
	struct FAresJumpTuning DefaultJumpTuning; // 0xdf8(0x20)
	float CrouchSlideThreshold; // 0xe18(0x04)
	bool bEnableCrouchSlide; // 0xe1c(0x01)
	char pad_E1D[0x3]; // 0xe1d(0x03)
	struct FAresJumpLandSlowTuningV2 JumpLandSlowTuningV2; // 0xe20(0x10)
	bool bIsDroppingMoves; // 0xe30(0x01)
	char pad_E31[0x7]; // 0xe31(0x07)
	int32_t DebugLastServerCombinedMoves; // 0xe38(0x04)
	int32_t DebugTotalServerCombinedMoves; // 0xe3c(0x04)
	float ReplicateServerCombinedMovesVarsTimer; // 0xe40(0x04)
	char pad_E44[0xc]; // 0xe44(0x0c)
	float ServerLocationDiffMag; // 0xe50(0x04)
	float ServerLocationDiffMagMin; // 0xe54(0x04)
	float ServerLocationDiffMagMax; // 0xe58(0x04)
	char pad_E5C[0x18]; // 0xe5c(0x18)
	float DebugMovementCurveTimeLength; // 0xe74(0x04)
	float DebugFlySpeedMultiplierFast; // 0xe78(0x04)
	float DebugFlySpeedMultiplierSlow; // 0xe7c(0x04)
	char pad_E80[0x40]; // 0xe80(0x40)
	bool bWasLocallyRelevant; // 0xec0(0x01)
	char pad_EC1[0x7]; // 0xec1(0x07)
	uint64_t DebugTotalClientAdjustPositionCalls; // 0xec8(0x08)
	float TrueVerticalVelocity; // 0xed0(0x04)
	char pad_ED4[0x2c]; // 0xed4(0x2c)
	int32_t BotNumAccumulatedMoveTicks; // 0xf00(0x04)
	int32_t TotalMovesExecuted; // 0xf04(0x04)
	float DebugLastFwdPredDeltaTime; // 0xf08(0x04)
	int32_t DebugTotalForwardPredictedMoves; // 0xf0c(0x04)
	int32_t DebugTotalRealMovesExecuted; // 0xf10(0x04)
	int32_t NumRebases; // 0xf14(0x04)
	int32_t NumOverQueuedRebases; // 0xf18(0x04)
	uint32_t SerializedMovesReceivedSinceLastTimestep; // 0xf1c(0x04)
	bool DebugForceRebase; // 0xf20(0x01)
	char pad_F21[0x3]; // 0xf21(0x03)
	struct FVector ForceModulesTotal; // 0xf24(0x0c)
	struct UMovementTimeShiftMonitor* TimeShiftMonitor; // 0xf30(0x08)
	char pad_F38[0x28]; // 0xf38(0x28)
	float PreviousMovementOverrideRemoteSimulationMoveDelayTimeSeconds; // 0xf60(0x04)
	int32_t ConsecutiveInsertionFailureNum; // 0xf64(0x04)
	char pad_F68[0x3c]; // 0xf68(0x3c)
	float TimeInForwardPrediction; // 0xfa4(0x04)
	char pad_FA8[0x8]; // 0xfa8(0x08)
	struct UShooterCharacterMovementDebugComponent* DebugComponent; // 0xfb0(0x08)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0xfb8(0x08)
	char pad_FC0[0x60]; // 0xfc0(0x60)

	void ReceiveTeleportFromClientUpdate(); // Function ShooterGame.ShooterCharacterMovement.ReceiveTeleportFromClientUpdate // (Final|Native|Private) // @ game+0x3b78970
	void OnRoundEnded(int32_t RoundNumberEnded); // Function ShooterGame.ShooterCharacterMovement.OnRoundEnded // (Final|Native|Private) // @ game+0x3b78810
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ShooterCharacterMovement.OnRoundBegin // (Final|Native|Private) // @ game+0x3b78780
	void OnForceModuleValuesUpdated(); // Function ShooterGame.ShooterCharacterMovement.OnForceModuleValuesUpdated // (Final|Native|Private) // @ game+0x3b785a0
	void OnForceModulePreAdd(struct UForceModuleManagerComponent* ForceManager, struct FForceModuleHandle ForceModuleHandle, struct UForceModule* NewForceModule); // Function ShooterGame.ShooterCharacterMovement.OnForceModulePreAdd // (Final|Native|Private) // @ game+0x3b78480
	void MulticastDebugMoveCombineVars(int32_t LastCombinesMoves, int32_t TotalCombinedMoves); // Function ShooterGame.ShooterCharacterMovement.MulticastDebugMoveCombineVars // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x3b783a0
	bool MovementIsDisabled(); // Function ShooterGame.ShooterCharacterMovement.MovementIsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b78370
	bool IsStrafingRight(); // Function ShooterGame.ShooterCharacterMovement.IsStrafingRight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b78290
	bool IsStrafingLeft(); // Function ShooterGame.ShooterCharacterMovement.IsStrafingLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b78260
	bool IsStrafing(); // Function ShooterGame.ShooterCharacterMovement.IsStrafing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b78230
	bool IsOnAscender(); // Function ShooterGame.ShooterCharacterMovement.IsOnAscender // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b78200
	bool IsMovingForward(); // Function ShooterGame.ShooterCharacterMovement.IsMovingForward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b781d0
	bool IsMoving(); // Function ShooterGame.ShooterCharacterMovement.IsMoving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b781a0
	bool IsBackpedalling(); // Function ShooterGame.ShooterCharacterMovement.IsBackpedalling // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b78170
	float GetTrueVerticalVelocity(); // Function ShooterGame.ShooterCharacterMovement.GetTrueVerticalVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77ca0
	float GetTimeSinceLanding(); // Function ShooterGame.ShooterCharacterMovement.GetTimeSinceLanding // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77c70
	float GetTemporaryMovementSpeedModifier(); // Function ShooterGame.ShooterCharacterMovement.GetTemporaryMovementSpeedModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77c40
	float GetRemoteMoveDelayTime(); // Function ShooterGame.ShooterCharacterMovement.GetRemoteMoveDelayTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77c10
	struct FVector GetPlayerSpaceCurrentVelocity(); // Function ShooterGame.ShooterCharacterMovement.GetPlayerSpaceCurrentVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77bd0
	struct FVector GetPlayerSpaceCurrentAcceleration(); // Function ShooterGame.ShooterCharacterMovement.GetPlayerSpaceCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77b90
	enum class EAresMovementType GetMovementType(); // Function ShooterGame.ShooterCharacterMovement.GetMovementType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77b60
	float GetMostRecentJumpStartNetTime(); // Function ShooterGame.ShooterCharacterMovement.GetMostRecentJumpStartNetTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77b30
	float GetMostRecentJumpLandNetTime(); // Function ShooterGame.ShooterCharacterMovement.GetMostRecentJumpLandNetTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77b00
	float GetMaxSpeedForMovementType(enum class EAresMovementType AresMovementType, float SpeedModifier); // Function ShooterGame.ShooterCharacterMovement.GetMaxSpeedForMovementType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77a20
	float GetLastJumpLandSpeed(); // Function ShooterGame.ShooterCharacterMovement.GetLastJumpLandSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b779f0
	float GetJumpVelocity(); // Function ShooterGame.ShooterCharacterMovement.GetJumpVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b779c0
	struct FVector GetInputVectorWorldSpace(); // Function ShooterGame.ShooterCharacterMovement.GetInputVectorWorldSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77980
	struct FVector GetInputVectorViewSpace(); // Function ShooterGame.ShooterCharacterMovement.GetInputVectorViewSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77940
	float GetInitialMaxStepHeight(); // Function ShooterGame.ShooterCharacterMovement.GetInitialMaxStepHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77920
	float GetGroundTime(float TotalTime); // Function ShooterGame.ShooterCharacterMovement.GetGroundTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77880
	float GetFullMovementSpeedModifier(); // Function ShooterGame.ShooterCharacterMovement.GetFullMovementSpeedModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77850
	struct FAresPerMovementStateData GetDefaultMovementTuning(enum class EAresMovementType MovementType); // Function ShooterGame.ShooterCharacterMovement.GetDefaultMovementTuning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b777a0
	struct FAresJumpTuning GetDefaultJumpTuning(); // Function ShooterGame.ShooterCharacterMovement.GetDefaultJumpTuning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77760
	uint64_t GetDebugTotalClientAdjustPositionCalls(); // Function ShooterGame.ShooterCharacterMovement.GetDebugTotalClientAdjustPositionCalls // (Final|Native|Public|Const) // @ game+0x3b77740
	float GetCurrentMovementTimestamp(); // Function ShooterGame.ShooterCharacterMovement.GetCurrentMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b77710
	float GetCurrentMovementNetTimestamp(); // Function ShooterGame.ShooterCharacterMovement.GetCurrentMovementNetTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b776e0
	float GetBaseMovementSpeedModifier(); // Function ShooterGame.ShooterCharacterMovement.GetBaseMovementSpeedModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b776b0
	void ClientUpdateClientToServerTimestep(int32_t NewTimestep); // Function ShooterGame.ShooterCharacterMovement.ClientUpdateClientToServerTimestep // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x3b77620
	void ClientShiftTimingSeconds(float ShiftSeconds); // Function ShooterGame.ShooterCharacterMovement.ClientShiftTimingSeconds // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x3b77590
	void ClientSendMoveError(float LocDiffMag); // Function ShooterGame.ShooterCharacterMovement.ClientSendMoveError // (Net|NetReliableNative|Event|NetMulticast|Protected|NetClient) // @ game+0x3b77500
	void ClientRecordMovementTiming(enum class EMovementTimingType Type, float Timestamp, float CurrentServerTimeStamp); // Function ShooterGame.ShooterCharacterMovement.ClientRecordMovementTiming // (Net|Native|Event|Protected|NetClient) // @ game+0x3b771e0
	void ClientDebugUpdateMoveSnapshot(struct TArray<int16_t> MoveSnapshots); // Function ShooterGame.ShooterCharacterMovement.ClientDebugUpdateMoveSnapshot // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x3b76d20
	void AuthOnOwnerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ShooterCharacterMovement.AuthOnOwnerConnectionStatusChanged // (Final|Native|Private) // @ game+0x363f1c0
	struct FVector AuthGetLastWalkingLocation(); // Function ShooterGame.ShooterCharacterMovement.AuthGetLastWalkingLocation // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b76ad0
	void AddVelocity(struct FVector VelocityToAdd, enum class EAresCoordinateSpace CoordinateSpace); // Function ShooterGame.ShooterCharacterMovement.AddVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3b76a00
};

// Class ShooterGame.ShooterCharacterMovementDebugComponent
// Size: 0x1b8 (Inherited: 0xe8)
struct UShooterCharacterMovementDebugComponent : UActorComponent {
	char pad_E8[0xd0]; // 0xe8(0xd0)

	void TrackMoveHistoryFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.TrackMoveHistoryFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ShiftTimingSecondsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ShiftTimingSecondsFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ShiftServerPositionToCorrectionThresholdFunc(struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ShiftServerPositionToCorrectionThresholdFunc // (Final|Native|Static|Public) // @ game+0x372eb00
	void ShiftClientPositionToCorrectionThresholdFunc(struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ShiftClientPositionToCorrectionThresholdFunc // (Final|Native|Static|Public) // @ game+0x372eb00
	void SetShowNetCorrectionCapsulesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.SetShowNetCorrectionCapsulesFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void SetNetCorrectionCapsuleLifetimeFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.SetNetCorrectionCapsuleLifetimeFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ServerShiftCharacterPosition(); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerShiftCharacterPosition // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x36355e0
	void ServerOverrideMoveStepTimesPerSecond(int32_t MoveStepsPerSecond); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerOverrideMoveStepTimesPerSecond // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x39678c0
	void ServerForceRebase(); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerForceRebase // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3654e70
	void ServerDumpMoveCorrectionDetails(uint32_t CorrectionId); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerDumpMoveCorrectionDetails // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3b7f570
	void ResetMovementDebugHistoryCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ResetMovementDebugHistoryCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ResetDisplayableCorrectionCounterFunc(struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ResetDisplayableCorrectionCounterFunc // (Final|Native|Static|Public) // @ game+0x372eb00
	void MoveStepsPerSecondCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.MoveStepsPerSecondCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ForceRebaseRemoteClientFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ForceRebaseRemoteClientFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ForceRebaseAutonomousFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ForceRebaseAutonomousFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void DumpMoveCorrectionDataFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.DumpMoveCorrectionDataFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
};

// Class ShooterGame.ShooterCharacterVisibilityComponent
// Size: 0x188 (Inherited: 0x188)
struct UShooterCharacterVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.ShooterCharacterVisionComponent
// Size: 0x108 (Inherited: 0xe8)
struct UShooterCharacterVisionComponent : UActorComponent {
	struct TArray<struct AShooterCharacter*> VisibleCharacterOverrides; // 0xe8(0x10)
	struct TArray<struct AShooterCharacter*> LastVisibleCharacterOverrides; // 0xf8(0x10)

	void RemoveVisibleCharacterOverride(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterVisionComponent.RemoveVisibleCharacterOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void RemoveAllVisibleCharacterOverrides(); // Function ShooterGame.ShooterCharacterVisionComponent.RemoveAllVisibleCharacterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void OnRep_VisibleCharacterOverrides(); // Function ShooterGame.ShooterCharacterVisionComponent.OnRep_VisibleCharacterOverrides // (Final|Native|Public) // @ game+0x3b7f450
	bool HasVisibleCharacterOverride(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterVisionComponent.HasVisibleCharacterOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b7f3b0
	void AddVisibleCharacterOverride(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterVisionComponent.AddVisibleCharacterOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
};

// Class ShooterGame.ShooterCheatManager
// Size: 0x128 (Inherited: 0x108)
struct UShooterCheatManager : UAresCheatManager {
	struct FSoftObjectPath DevOnlyGunNamesToEquippableDataAssetsDataTable; // 0x108(0x20)

	void WinGameWithPenalties(); // Function ShooterGame.ShooterCheatManager.WinGameWithPenalties // (Final|Exec|Native|Public) // @ game+0x2024060
	void WinGame(); // Function ShooterGame.ShooterCheatManager.WinGame // (Final|Exec|Native|Public) // @ game+0x2024060
	void ToggleTeam(); // Function ShooterGame.ShooterCheatManager.ToggleTeam // (Final|Exec|Native|Public) // @ game+0x2024060
	void ToggleMatchTimerRequest(); // Function ShooterGame.ShooterCheatManager.ToggleMatchTimerRequest // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2024060
	void ToggleMatchTimeout(); // Function ShooterGame.ShooterCheatManager.ToggleMatchTimeout // (Final|Exec|Native|Public) // @ game+0x2024060
	void ToggleAfkDetection(); // Function ShooterGame.ShooterCheatManager.ToggleAfkDetection // (Final|Exec|Native|Public) // @ game+0x2024060
	void TakeDamage(int32_t Amount); // Function ShooterGame.ShooterCheatManager.TakeDamage // (Final|Exec|Native|Public) // @ game+0x3635550
	void SwapTeamToObserver_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamToObserver_ClientHack // (Final|Exec|Native|Public) // @ game+0x2024060
	void SwapTeams(); // Function ShooterGame.ShooterCheatManager.SwapTeams // (Final|Exec|Native|Public) // @ game+0x2024060
	void SwapTeamRestoreOriginalTeams_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamRestoreOriginalTeams_ClientHack // (Final|Exec|Native|Public) // @ game+0x2024060
	void SwapTeamForRandomEnemy_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamForRandomEnemy_ClientHack // (Final|Exec|Native|Public) // @ game+0x2024060
	void SwapTeamForRandomAlly_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamForRandomAlly_ClientHack // (Final|Exec|Native|Public) // @ game+0x2024060
	void SwapTeamForAllEnemies_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamForAllEnemies_ClientHack // (Final|Exec|Native|Public) // @ game+0x2024060
	void SwapTeam_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeam_ClientHack // (Final|Exec|Native|Public) // @ game+0x2024060
	void Suicide(); // Function ShooterGame.ShooterCheatManager.Suicide // (Exec|Native|Public) // @ game+0x37e5e10
	void SprayLoadoutSetSprayInWheelByLevel(struct FString SprayName, int32_t WheelSlotIndex, int32_t Level); // Function ShooterGame.ShooterCheatManager.SprayLoadoutSetSprayInWheelByLevel // (Final|Exec|Native|Public) // @ game+0x3b7f820
	void SprayLoadoutSetSprayInWheel(struct FString SprayName, int32_t WheelSlotIndex); // Function ShooterGame.ShooterCheatManager.SprayLoadoutSetSprayInWheel // (Final|Exec|Native|Public) // @ game+0x3b7f180
	void SpawnBot(struct FString ArgsString); // Function ShooterGame.ShooterCheatManager.SpawnBot // (Final|Exec|Native|Public) // @ game+0x2024240
	void ShuffleClasses(); // Function ShooterGame.ShooterCheatManager.ShuffleClasses // (Final|Exec|Native|Public) // @ game+0x2024060
	void ShowKillBanners(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowKillBanners // (Final|Exec|Native|Public) // @ game+0x3635550
	void ShowCrosshair(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowCrosshair // (Final|Exec|Native|Public) // @ game+0x3635550
	void ShowBlindOverlay(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowBlindOverlay // (Final|Exec|Native|Public) // @ game+0x3635550
	void ShowAllyOutlines(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowAllyOutlines // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetTeamMoney(int32_t Amount); // Function ShooterGame.ShooterCheatManager.SetTeamMoney // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetTeamForAll(struct FString TeamName); // Function ShooterGame.ShooterCheatManager.SetTeamForAll // (Final|Exec|Native|Public) // @ game+0x2024240
	void SetServerTickRate(int32_t TickRate); // Function ShooterGame.ShooterCheatManager.SetServerTickRate // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetRoundNumber(int32_t RoundNum); // Function ShooterGame.ShooterCheatManager.SetRoundNumber // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetPowderedToastDelta(struct FString ID, uint32_t Delta); // Function ShooterGame.ShooterCheatManager.SetPowderedToastDelta // (Final|Exec|Native|Public) // @ game+0x3b7f730
	void SetPointsForMyTeam(int32_t Points); // Function ShooterGame.ShooterCheatManager.SetPointsForMyTeam // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetNumDefendingBots(int32_t Num); // Function ShooterGame.ShooterCheatManager.SetNumDefendingBots // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetNumAttackingBots(int32_t Num); // Function ShooterGame.ShooterCheatManager.SetNumAttackingBots // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetInvulnerable(int32_t Enabled, struct FString Team); // Function ShooterGame.ShooterCheatManager.SetInvulnerable // (Final|Exec|Native|Public) // @ game+0x3b7f600
	void SetInfiniteMagazine(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteMagazine // (Final|Native|Public) // @ game+0x3635550
	void SetInfiniteHealth(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteHealth // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetInfiniteAbilities(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteAbilities // (Final|Native|Public) // @ game+0x3635550
	void SetIgnoreShoppingRestrictions(bool Enabled); // Function ShooterGame.ShooterCheatManager.SetIgnoreShoppingRestrictions // (Final|BlueprintAuthorityOnly|Exec|Native|Public|BlueprintCallable) // @ game+0x3635160
	void SetIgnoreCooldowns(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetIgnoreCooldowns // (Final|Native|Public) // @ game+0x3635550
	void SetHealth(int32_t Amount); // Function ShooterGame.ShooterCheatManager.SetHealth // (Final|Exec|Native|Public) // @ game+0x3635550
	void SetDeveloperSettingsToDefaults(); // Function ShooterGame.ShooterCheatManager.SetDeveloperSettingsToDefaults // (Final|Exec|Native|Public) // @ game+0x2024060
	void SetDesiredClass(struct FString NewClass); // Function ShooterGame.ShooterCheatManager.SetDesiredClass // (Final|Exec|Native|Public) // @ game+0x36d6150
	void SetDefaultWeapon(struct FString ShippingName); // Function ShooterGame.ShooterCheatManager.SetDefaultWeapon // (Final|Exec|Native|Public) // @ game+0x2024240
	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.ShooterCheatManager.SetConfigurationValue // (Final|Exec|Native|Public) // @ game+0x39a0000
	void SetCompetitiveTier(int32_t NewTier); // Function ShooterGame.ShooterCheatManager.SetCompetitiveTier // (Final|Exec|Native|Public) // @ game+0x3635550
	void SendMessageToChat(struct FString NewMessage); // Function ShooterGame.ShooterCheatManager.SendMessageToChat // (Final|Exec|Native|Public) // @ game+0x3b7f470
	void RestartGame(); // Function ShooterGame.ShooterCheatManager.RestartGame // (Final|Exec|Native|Public) // @ game+0x2024060
	void Respawn(); // Function ShooterGame.ShooterCheatManager.Respawn // (Final|Exec|Native|Public) // @ game+0x2024060
	void ResetUserSettingOverrides(struct FString OverrideAssetPath); // Function ShooterGame.ShooterCheatManager.ResetUserSettingOverrides // (Final|Exec|Native|Public) // @ game+0x36d6150
	void ResetCombatStats(); // Function ShooterGame.ShooterCheatManager.ResetCombatStats // (Final|Exec|Native|Public) // @ game+0x2024060
	void RefreshPrespawnedEquippables(); // Function ShooterGame.ShooterCheatManager.RefreshPrespawnedEquippables // (Final|Exec|Native|Public) // @ game+0x2024060
	void RefreshInventory(); // Function ShooterGame.ShooterCheatManager.RefreshInventory // (Final|Exec|Native|Public) // @ game+0x2024060
	void ProgressAccolade(struct FString Accolade, int32_t Progress); // Function ShooterGame.ShooterCheatManager.ProgressAccolade // (Final|Exec|Native|Public) // @ game+0x373ab90
	void PlayerControllerCheat(struct FString CheatString); // Function ShooterGame.ShooterCheatManager.PlayerControllerCheat // (Final|Exec|Native|Public) // @ game+0x2024240
	void PlayCeremony(struct FString ClassName); // Function ShooterGame.ShooterCheatManager.PlayCeremony // (Final|Exec|Native|Public) // @ game+0x36d6150
	void PackmanSetThreadEnabled(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.PackmanSetThreadEnabled // (Final|Exec|Native|Public) // @ game+0x3635550
	void PackmanSetThreadDelay(int32_t NewMilliseconds); // Function ShooterGame.ShooterCheatManager.PackmanSetThreadDelay // (Final|Exec|Native|Public) // @ game+0x3635550
	void PackmanSetReencryptMaximum(int32_t Count); // Function ShooterGame.ShooterCheatManager.PackmanSetReencryptMaximum // (Final|Exec|Native|Public) // @ game+0x3635550
	void PackmanResetReencryptCount(); // Function ShooterGame.ShooterCheatManager.PackmanResetReencryptCount // (Final|Exec|Native|Public) // @ game+0x2024060
	void PackmanReencryptNow(int32_t PercentageOfPages); // Function ShooterGame.ShooterCheatManager.PackmanReencryptNow // (Final|Exec|Native|Public) // @ game+0x3635550
	void OverrideCurrentStateTimer(float Seconds); // Function ShooterGame.ShooterCheatManager.OverrideCurrentStateTimer // (Final|Exec|Native|Public) // @ game+0x36a0b30
	void LogTeams(); // Function ShooterGame.ShooterCheatManager.LogTeams // (Final|Exec|Native|Public) // @ game+0x2024060
	void Hide3P(int32_t Hide); // Function ShooterGame.ShooterCheatManager.Hide3P // (Final|Exec|Native|Public) // @ game+0x3635550
	void Hide1P(int32_t Hide); // Function ShooterGame.ShooterCheatManager.Hide1P // (Final|Exec|Native|Public) // @ game+0x3635550
	void Heal(int32_t Amount); // Function ShooterGame.ShooterCheatManager.Heal // (Final|Exec|Native|Public) // @ game+0x3635550
	void GunSkinSetSlotSkin(struct FString SlotName, struct FString SkinName, int32_t Level, struct FString Chroma); // Function ShooterGame.ShooterCheatManager.GunSkinSetSlotSkin // (Final|Exec|Native|Public) // @ game+0x3a286a0
	void GunSkinSetSkinLevel(int32_t Level); // Function ShooterGame.ShooterCheatManager.GunSkinSetSkinLevel // (Final|Exec|Native|Public) // @ game+0x3635550
	void GunSkinSetSkin(struct FString SkinName); // Function ShooterGame.ShooterCheatManager.GunSkinSetSkin // (Final|Exec|Native|Public) // @ game+0x3b7f2b0
	void GunSkinSetChroma(struct FString ChromaName); // Function ShooterGame.ShooterCheatManager.GunSkinSetChroma // (Final|Exec|Native|Public) // @ game+0x2024240
	void GunSkinSetBuddyLevel(int32_t Level); // Function ShooterGame.ShooterCheatManager.GunSkinSetBuddyLevel // (Final|Exec|Native|Public) // @ game+0x3635550
	void GunSkinSetBuddy(struct FString BuddyName); // Function ShooterGame.ShooterCheatManager.GunSkinSetBuddy // (Final|Exec|Native|Public) // @ game+0x2024240
	void GunSkinSetAttachmentByIndex(int32_t AttachmentIndex); // Function ShooterGame.ShooterCheatManager.GunSkinSetAttachmentByIndex // (Final|Exec|Native|Public) // @ game+0x3635550
	void GunSkinSetAttachment(struct FString Attachment); // Function ShooterGame.ShooterCheatManager.GunSkinSetAttachment // (Final|Exec|Native|Public) // @ game+0x2024240
	void GunSkinRemoveAttachmentByIndex(int32_t AttachmentIndex); // Function ShooterGame.ShooterCheatManager.GunSkinRemoveAttachmentByIndex // (Final|Exec|Native|Public) // @ game+0x3635550
	void GunSkinRemoveAttachment(struct FString Attachment); // Function ShooterGame.ShooterCheatManager.GunSkinRemoveAttachment // (Final|Exec|Native|Public) // @ game+0x2024240
	void GunSkinLoadAllSkins(); // Function ShooterGame.ShooterCheatManager.GunSkinLoadAllSkins // (Final|Exec|Native|Public) // @ game+0x2024060
	void GiveUltimatePoints(int32_t Amount); // Function ShooterGame.ShooterCheatManager.GiveUltimatePoints // (Final|Exec|Native|Public) // @ game+0x3635550
	void GiveUltimate(); // Function ShooterGame.ShooterCheatManager.GiveUltimate // (Final|Exec|Native|Public) // @ game+0x2024060
	void GiveMoney(int32_t Amount); // Function ShooterGame.ShooterCheatManager.GiveMoney // (Final|Exec|Native|Public) // @ game+0x3635550
	void GameSpeed(float T); // Function ShooterGame.ShooterCheatManager.GameSpeed // (Final|Exec|Native|Public) // @ game+0x36a0b30
	void GameModeCheat(struct FString CheatString); // Function ShooterGame.ShooterCheatManager.GameModeCheat // (Final|Exec|Native|Public) // @ game+0x2024240
	void ForceUserSettingOverrides(struct FString OverrideAssetPath); // Function ShooterGame.ShooterCheatManager.ForceUserSettingOverrides // (Final|Exec|Native|Public) // @ game+0x36d6150
	void ForceMatchStart(); // Function ShooterGame.ShooterCheatManager.ForceMatchStart // (Final|Exec|Native|Public) // @ game+0x2024060
	void ExpressionsLoadoutSetTotemInWheel(struct FString TotemName, int32_t WheelSlotIndex); // Function ShooterGame.ShooterCheatManager.ExpressionsLoadoutSetTotemInWheel // (Final|Exec|Native|Public) // @ game+0x3b7f180
	void EndGamePhase(); // Function ShooterGame.ShooterCheatManager.EndGamePhase // (Final|Exec|Native|Public) // @ game+0x2024060
	void DumpFogOfWarLog(); // Function ShooterGame.ShooterCheatManager.DumpFogOfWarLog // (Final|Exec|Native|Public) // @ game+0x2024060
	void Disassociate(); // Function ShooterGame.ShooterCheatManager.Disassociate // (Final|Exec|Native|Public) // @ game+0x2024060
	void Die(); // Function ShooterGame.ShooterCheatManager.Die // (Final|Exec|Native|Public) // @ game+0x2024060
	void DespawnBot(struct FString ArgsString); // Function ShooterGame.ShooterCheatManager.DespawnBot // (Final|Exec|Native|Public) // @ game+0x2024240
	void DemoPlayLastMatch(int32_t Num); // Function ShooterGame.ShooterCheatManager.DemoPlayLastMatch // (Final|Exec|Native|Public) // @ game+0x3635550
	void DamageSelf(float Damage); // Function ShooterGame.ShooterCheatManager.DamageSelf // (Final|Exec|Native|Public) // @ game+0x36a0b30
	void CycleOrbInSlot(int32_t Slot); // Function ShooterGame.ShooterCheatManager.CycleOrbInSlot // (Final|Exec|Native|Public) // @ game+0x3635550
	void Cheat(struct FString Msg); // Function ShooterGame.ShooterCheatManager.Cheat // (Final|Exec|Native|Public) // @ game+0x36d6150
	void ChangeTeam(struct FString TeamName); // Function ShooterGame.ShooterCheatManager.ChangeTeam // (Final|Exec|Native|Public) // @ game+0x2024240
	void ChangePlayerName(struct FString NewName); // Function ShooterGame.ShooterCheatManager.ChangePlayerName // (Final|Exec|Native|Public) // @ game+0x2024240
	void CalculateBehaviorFactors(); // Function ShooterGame.ShooterCheatManager.CalculateBehaviorFactors // (Final|Exec|Native|Public) // @ game+0x2024060
	void AssignMission(struct FString MissionName); // Function ShooterGame.ShooterCheatManager.AssignMission // (Final|Exec|Native|Public) // @ game+0x2024240
	void AdvanceToOvertime(); // Function ShooterGame.ShooterCheatManager.AdvanceToOvertime // (Final|Exec|Native|Public) // @ game+0x2024060
	void AddVacanciesForTeam(struct FString TeamName, char Count); // Function ShooterGame.ShooterCheatManager.AddVacanciesForTeam // (Final|Exec|Native|Public) // @ game+0x3b7f050
};

// Class ShooterGame.ShooterConsoleComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UShooterConsoleComponent : UActorComponent {
};

// Class ShooterGame.ShooterDamageListener
// Size: 0x100 (Inherited: 0xe8)
struct UShooterDamageListener : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnDamageCaused; // 0xf0(0x10)
};

// Class ShooterGame.ShooterDamageType
// Size: 0x148 (Inherited: 0x48)
struct UShooterDamageType : UDamageType {
	struct FCanvasIcon KillIcon; // 0x48(0x18)
	struct TSoftClassPtr<UObject> Equippable; // 0x60(0x30)
	bool bIgnoresShield; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	float HealthScale; // 0x94(0x04)
	float ShieldScale; // 0x98(0x04)
	float CharacterScale; // 0x9c(0x04)
	float PlayerCharacterScale; // 0xa0(0x04)
	float NonPlayerCharacterScale; // 0xa4(0x04)
	float ObjectScale; // 0xa8(0x04)
	float NonPlayerObjectScale; // 0xac(0x04)
	bool bShowHitConfirm; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct AEffectContainer* CharacterHitFXC; // 0xb8(0x08)
	bool bApplySelfDamageMultiplier; // 0xc0(0x01)
	bool bApplyAllyDamageMultiplier; // 0xc1(0x01)
	bool bIgnoreFriendlyFire; // 0xc2(0x01)
	bool bIsNonLethal; // 0xc3(0x01)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct FString DisplayName; // 0xc8(0x10)
	struct FText DisplayNameText; // 0xd8(0x18)
	enum class EAresDamageCategory DamageCategory; // 0xf0(0x01)
	enum class EAresDamageIndicationType DamageIndicationType; // 0xf1(0x01)
	enum class EAresHitIndicatorDisplayType HitIndicatorDisplayType; // 0xf2(0x01)
	enum class EAresHitSoundPlayType HitSoundPlayType; // 0xf3(0x01)
	enum class EAresDamageAnimationCategory DamageAnimationCategory; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	float DamagePhysicsScale; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TArray<struct FDamagePenetration> Penetration; // 0x100(0x10)
	struct ADamageSource* DamageSource; // 0x110(0x08)
	struct UMatineeCameraShake* OnHitHeadshotCameraMod; // 0x118(0x08)
	struct UMatineeCameraShake* OnHitMovingTargetCameraMod; // 0x120(0x08)
	bool bReportDeath; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct UAkAudioEvent* HitConfirmEventOverride; // 0x130(0x08)
	struct UAkAudioEvent* HitConfirmHeadshotEventOverride; // 0x138(0x08)
	struct UAresHitReactions* DeathReactions; // 0x140(0x08)

	void RespondToHealing(float HealTaken, struct AController* InstigatingController, struct AActor* HealCauser); // Function ShooterGame.ShooterDamageType.RespondToHealing // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	void RespondToDamage(struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterDamageType.RespondToDamage // (Event|Public|BlueprintEvent|Const) // @ game+0x40572e0
	void PlayHitConfirmSound(struct AShooterCharacter* FirstPersonShooterCharacter, struct AShooterCharacter* ShooterCharacterInstigator, struct AActor* HitActor, enum class EAresHitConfirmLocality HitLocality, enum class EAresRegionalDamage RegionalDamage, bool bLocalPlayerCanSeeVictim, float FalloffMultiplier, struct UDamageResponse* DamageResponse, bool bDied); // Function ShooterGame.ShooterDamageType.PlayHitConfirmSound // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b824a0
};

// Class ShooterGame.ShooterExplosionEffect
// Size: 0x418 (Inherited: 0x3d8)
struct AShooterExplosionEffect : AActor {
	struct UParticleSystem* ExplosionFX; // 0x3d8(0x08)
	struct UPointLightComponent* ExplosionLight; // 0x3e0(0x08)
	float ExplosionLightFadeOut; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct UAkAudioEvent* ExplosionEvent; // 0x3f0(0x08)
	float ParticleTeamColor; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct UParticleSystemComponent* ActiveParticleSystemComponent; // 0x400(0x08)
	char pad_408[0x10]; // 0x408(0x10)

	void SetTeamColor(float ColorScalar); // Function ShooterGame.ShooterExplosionEffect.SetTeamColor // (Native|Public|BlueprintCallable) // @ game+0x3b82760
};

// Class ShooterGame.ShooterGame_Menu
// Size: 0x4f8 (Inherited: 0x4c8)
struct AShooterGame_Menu : AGameMode {
	char pad_4C8[0x30]; // 0x4c8(0x30)
};

// Class ShooterGame.ShooterGameGlobals
// Size: 0x858 (Inherited: 0x30)
struct UShooterGameGlobals : UObject {
	char pad_30[0xe8]; // 0x30(0xe8)
	struct FAresCheatData CheatData; // 0x118(0x70)
	struct FAresAccessibilityGlobals Accessibility; // 0x188(0x24)
	char pad_1AC[0x4]; // 0x1ac(0x04)
	struct FAresGameGlobals Game; // 0x1b0(0x48)
	struct FAresInputGlobals Input; // 0x1f8(0x14)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct FAresAudioGlobals Audio; // 0x210(0x10)
	struct FAresHUDGlobals HUD; // 0x220(0x3c0)
	struct TArray<struct FAresTheme> Themes; // 0x5e0(0x10)
	struct FAresDecalManagerGlobals DecalManager; // 0x5f0(0x04)
	struct FAresStoreGlobals Store; // 0x5f4(0x08)
	struct FAresRespawnGlobals Respawn; // 0x5fc(0x08)
	char pad_604[0x4]; // 0x604(0x04)
	struct UAresSlateGlobals* SlateGlobals; // 0x608(0x08)
	struct TSoftClassPtr<UObject> SlateGlobalsAsset; // 0x610(0x30)
	struct UAresSlateGlobals* CachedSlateGlobals; // 0x640(0x08)
	struct UAresEquippableGlobals* EquippableGlobals; // 0x648(0x08)
	struct TSoftClassPtr<UObject> EquippableGlobalsAsset; // 0x650(0x30)
	struct UAresEquippableGlobals* CachedEquippableGlobals; // 0x680(0x08)
	struct TSoftClassPtr<UObject> WeaponsCatalog; // 0x688(0x30)
	struct AAresSkinCatalog* CachedWeaponsCatalog; // 0x6b8(0x08)
	struct TArray<struct FEquippedSkin> InitEquips; // 0x6c0(0x10)
	struct TArray<struct UHUDGlobalsDataAsset*> CachedHUDGlobals; // 0x6d0(0x10)
	struct TArray<struct UUIGlobalsDataAsset*> CachedUIGlobals; // 0x6e0(0x10)
	struct TArray<struct UCoreGlobalsDataAsset*> CachedCoreGlobals; // 0x6f0(0x10)
	struct TArray<struct UFrontendUIGlobalsDataAsset*> CachedFrontendUIGlobals; // 0x700(0x10)
	struct TArray<struct UUINavigationGlobalsDataAsset*> CachedUINavigationGlobals; // 0x710(0x10)
	struct TArray<struct UPlatformSpecializedUIGlobalsDataAsset*> CachedPlatformSpecializedUIGlobals; // 0x720(0x10)
	struct TArray<struct UNonVerbalCommGlobalsDataAsset*> CachedNonVerbalCommGlobals; // 0x730(0x10)
	struct TArray<struct UContextAwareModuleGlobalsDataAsset*> CachedContextAwareModuleGlobals; // 0x740(0x10)
	struct TSoftClassPtr<UObject> WallPenetrationGlobalsAsset; // 0x750(0x30)
	struct UAresWallPenetrationGlobals* CachedWallPenetrationGlobals; // 0x780(0x08)
	struct TSoftClassPtr<UObject> NetworkingGlobalsAsset; // 0x788(0x30)
	struct UAresNetworkingGlobals* CachedNetworkingGlobals; // 0x7b8(0x08)
	struct TSoftObjectPtr<UMaterial> WatermarkMaterial; // 0x7c0(0x30)
	struct TSoftObjectPtr<UMaterial> WatermarkUIMaterial; // 0x7f0(0x30)
	char pad_820[0x20]; // 0x820(0x20)
	struct UGamepadTuningDataAsset* GamepadTuningData; // 0x840(0x08)
	char pad_848[0x10]; // 0x848(0x10)

	void OnMobileDefaultFoVChanged(enum class EGameRuleBoolName ToggleName, bool ToggleValue); // Function ShooterGame.ShooterGameGlobals.OnMobileDefaultFoVChanged // (Final|Native|Private) // @ game+0x3b87a00
	struct TSoftClassPtr<UObject> GetScreenFromUIGlobals(enum class EUIGlobalsScreenType DesiredScreenType); // Function ShooterGame.ShooterGameGlobals.GetScreenFromUIGlobals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b87940
	struct TSoftClassPtr<UObject> GetScreenFromHUDGlobals(enum class EHUDGlobalsScreenType DesiredScreenType); // Function ShooterGame.ShooterGameGlobals.GetScreenFromHUDGlobals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b87880
	struct TSoftClassPtr<UObject> GetScreenFromFrontendUIGlobals(enum class EFrontendUIGlobalsScreenType DesiredScreenType); // Function ShooterGame.ShooterGameGlobals.GetScreenFromFrontendUIGlobals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b877c0
	float GetPlatformFOV(); // Function ShooterGame.ShooterGameGlobals.GetPlatformFOV // (Final|Native|Public|Const) // @ game+0x3b87790
	struct UNonVerbalCommGlobalsDataAsset* GetNonVerbalCommGlobalsDataAsset(); // Function ShooterGame.ShooterGameGlobals.GetNonVerbalCommGlobalsDataAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b87760
	void GetGlobalUserWidgetsWithTagBlocking(struct FString Tag, struct TArray<struct UUserWidget*>& OutWidgetClasses); // Function ShooterGame.ShooterGameGlobals.GetGlobalUserWidgetsWithTagBlocking // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b87610
	struct TArray<struct TSoftClassPtr<UObject>> GetGlobalUserWidgetSoftClassPtrsWithTag(struct FString Tag); // Function ShooterGame.ShooterGameGlobals.GetGlobalUserWidgetSoftClassPtrsWithTag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b874c0
	void GetGlobalUIAssetsWithTagBlocking(struct FString Tag, struct TArray<struct UObject*>& OutAssets); // Function ShooterGame.ShooterGameGlobals.GetGlobalUIAssetsWithTagBlocking // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3b87370
	struct UContextAwareModuleGlobalsDataAsset* GetContextAwareModuleGlobalsDataAsset(); // Function ShooterGame.ShooterGameGlobals.GetContextAwareModuleGlobalsDataAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b87340
};

// Class ShooterGame.ShooterGameMode
// Size: 0x980 (Inherited: 0x4c8)
struct AShooterGameMode : AGameMode {
	struct AOwnerExclusivePlayerInfo* PlayerInfoClass; // 0x4c8(0x08)
	struct TSet<enum class EGameModeSublevelKey> GameModeSublevelKeys; // 0x4d0(0x50)
	struct TArray<struct AAresEquippable*> StartingEquippableClasses; // 0x520(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> DefaultTotemClasses; // 0x530(0x10)
	bool bDisableCharacterMeshTickWhileInFogOfWar; // 0x540(0x01)
	char pad_541[0x7]; // 0x541(0x07)
	struct TArray<struct ULevelStreaming*> ClientOnlySublevelsToStream; // 0x548(0x10)
	struct FMulticastInlineDelegate OnRoundBegin; // 0x558(0x10)
	struct FMulticastInlineDelegate OnRoundEnd; // 0x568(0x10)
	struct FMulticastInlineDelegate OnPlayerKilled; // 0x578(0x10)
	struct FMulticastInlineDelegate OnPlayerSpawned; // 0x588(0x10)
	struct FMulticastInlineDelegate OnPhaseChange; // 0x598(0x10)
	struct FMulticastInlineDelegate OnGameplayActiveChange; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnDisconnectedPlayerDestroyed; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnPlayerDisassociated; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnRoundPlayersReady; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnGameRestart; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnReset; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnGameShutdown; // 0x608(0x10)
	struct APawn* BotPawnClass; // 0x618(0x08)
	struct TSoftClassPtr<UObject> BotPawnClassAsset; // 0x620(0x30)
	struct FString BotControllerClassPath; // 0x650(0x10)
	struct TSoftClassPtr<UObject> BotControllerClass; // 0x660(0x30)
	struct TArray<struct FName> AllowedBotDataAssetDeveloperNames; // 0x690(0x10)
	bool bLimitBotCharacterUniquenessToOnlyTeam; // 0x6a0(0x01)
	char pad_6A1[0x7]; // 0x6a1(0x07)
	struct FMulticastInlineDelegate OnDefaultWeaponChanged; // 0x6a8(0x10)
	struct UAresGameEventLog* GameEventLog; // 0x6b8(0x08)
	struct UMatchResultEventCollector* MatchResultEventCollector; // 0x6c0(0x08)
	bool bAlwaysAllowWeaponSelling; // 0x6c8(0x01)
	bool bCarryOverPickedUpEquippablesToNextRound; // 0x6c9(0x01)
	bool bCarryOverAmmoToNextRound; // 0x6ca(0x01)
	char pad_6CB[0x5]; // 0x6cb(0x05)
	struct UAresCeremonyComponent* CeremonyComponent; // 0x6d0(0x08)
	struct UBehaviorScoreTrackerManagerComponent* BehaviorScoreTrackerManagerComponent; // 0x6d8(0x08)
	struct UVoteManagerComponent* VoteManagerComponent; // 0x6e0(0x08)
	struct UAFKDetectionComponent* AFKHandlingType; // 0x6e8(0x08)
	struct UFeedingDetectionComponent* FeedingHandlingType; // 0x6f0(0x08)
	struct UGameModeReplayComponent* ReplayComponent; // 0x6f8(0x08)
	struct UDropInManagerComponent* DropInManagerComponent; // 0x700(0x08)
	struct UServerPerRoundTelemetryComponent* ServerPerRoundTelemetryComponent; // 0x708(0x08)
	struct UServerMovementTimingComponent* ServerMovementTimingComponent; // 0x710(0x08)
	char pad_718[0x8]; // 0x718(0x08)
	bool bForceBotTargetSite; // 0x720(0x01)
	char pad_721[0x7]; // 0x721(0x07)
	struct FString BotTargetSite; // 0x728(0x10)
	char pad_738[0x4]; // 0x738(0x04)
	int32_t KillScore; // 0x73c(0x04)
	int32_t AssistScore; // 0x740(0x04)
	float DamageSelfScale; // 0x744(0x04)
	float DamageAllyScale; // 0x748(0x04)
	int32_t MaxBots; // 0x74c(0x04)
	struct TArray<struct AShooterAIController*> BotControllers; // 0x750(0x10)
	struct UStateMachineComponent* StateMachine; // 0x760(0x08)
	struct AAresRespawnManager* RespawnManager; // 0x768(0x08)
	char pad_770[0x10]; // 0x770(0x10)
	float GameEventTickRate; // 0x780(0x04)
	float MaxRespawnDelay; // 0x784(0x04)
	float MaxRespawnDelayTime; // 0x788(0x04)
	float MinRespawnDelayValue; // 0x78c(0x04)
	struct AAresRespawnManager* RespawnManagerClass; // 0x790(0x08)
	struct TSoftClassPtr<UObject> RespawnManagerClassAsset; // 0x798(0x30)
	struct TMap<enum class EAresTeamRole, int32_t> SpawnSetForRole; // 0x7c8(0x50)
	struct TArray<struct FAresGameRewardTuning> KillBountyTable; // 0x818(0x10)
	struct TArray<struct FAresGameRewardTuning> DeathPenaltyTable; // 0x828(0x10)
	char pad_838[0x4]; // 0x838(0x04)
	float GamePhaseStartTime; // 0x83c(0x04)
	struct UFogOfWarManagerComponent* FogOfWarManager; // 0x840(0x08)
	struct UServerTeamVisibilityComponent* ServerTeamVisibilityComponent; // 0x848(0x08)
	char pad_850[0x18]; // 0x850(0x18)
	struct UMegapacketComponent* MegapacketComponent; // 0x868(0x08)
	bool bIsLoadTestEnabled; // 0x870(0x01)
	char pad_871[0x1]; // 0x871(0x01)
	bool bGameplayStartsImmediately; // 0x872(0x01)
	bool bDownsampleServerCharacterAnims; // 0x873(0x01)
	int32_t ServerAnimUpdateRate; // 0x874(0x04)
	float BotNumMovementTicksPerSecond; // 0x878(0x04)
	char pad_87C[0x4]; // 0x87c(0x04)
	struct FGameServerInstanceInfo ServerInstanceInfo; // 0x880(0xb8)
	struct FMulticastInlineDelegate OnBuyPhaseUpdated; // 0x938(0x10)
	struct TArray<struct AShooterCharacter*> RegisteredCharactersNeedingEnemyHitRegInfo; // 0x948(0x10)
	bool bIsFriendlyFireEnabled; // 0x958(0x01)
	char pad_959[0x3]; // 0x959(0x03)
	float MaxSecondsToWaitForInactivePlayers; // 0x95c(0x04)
	bool bIsRoundBeingReset; // 0x960(0x01)
	char pad_961[0x17]; // 0x961(0x17)
	bool bIsChangingRoles; // 0x978(0x01)
	char pad_979[0x7]; // 0x979(0x07)

	void UpdateSingleObfuscatedPlayerInformationForAllPlayers(struct AAresPlayerStateBase* SubjectPlayer, struct FObfuscatedPlayerInformation PlayerInformation); // Function ShooterGame.ShooterGameMode.UpdateSingleObfuscatedPlayerInformationForAllPlayers // (Final|Native|Protected) // @ game+0x3b8fac0
	void UpdateAwayPenaltiesForAllPlayers(); // Function ShooterGame.ShooterGameMode.UpdateAwayPenaltiesForAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8faa0
	void UpdateAllObfuscatedPlayerInformationForPlayer(struct AAresPlayerStateBase* SubjectPlayer); // Function ShooterGame.ShooterGameMode.UpdateAllObfuscatedPlayerInformationForPlayer // (Final|Native|Public) // @ game+0x3b8fa10
	bool TeamIsNonEmptyAndAllDead(struct UBaseTeamComponent* WhichTeam, bool bCheckPreventionAttribute); // Function ShooterGame.ShooterGameMode.TeamIsNonEmptyAndAllDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8f940
	struct AAresBotController* SpawnBot(int32_t BotNumber, struct UCharacterDataAsset* Agent, struct AShooterCharacter* CommandingCharacter, enum class EAresTeamRole TargetRole); // Function ShooterGame.ShooterGameMode.SpawnBot // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8f7e0
	bool ShouldUpdateObfuscatedPlayerInformationForPlayer(struct AAresPlayerStateBase* SubjectPlayer, struct AAresPlayerStateBase* PlayerToUpdate); // Function ShooterGame.ShooterGameMode.ShouldUpdateObfuscatedPlayerInformationForPlayer // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b8f700
	bool ShouldSwitchTeams(); // Function ShooterGame.ShooterGameMode.ShouldSwitchTeams // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b8f6c0
	void SetupBotPlayerState(struct AShooterPlayerState* BotPlayerState, int32_t BotNumber, struct UCharacterDataAsset* Agent, enum class EAresTeamRole TargetRole, struct AShooterGameState* ShooterGameState, struct UWorld* World); // Function ShooterGame.ShooterGameMode.SetupBotPlayerState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3b8f4f0
	void SetPhaseTimeRemaining(float Time); // Function ShooterGame.ShooterGameMode.SetPhaseTimeRemaining // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void SetIsFriendlyFireEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.SetIsFriendlyFireEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8f460
	int32_t SetFogOfWarEnabled(int32_t NewValue); // Function ShooterGame.ShooterGameMode.SetFogOfWarEnabled // (Final|Native|Protected) // @ game+0x3b8f3c0
	void SetBotsToSpawn(int32_t NumBotsToSpawn); // Function ShooterGame.ShooterGameMode.SetBotsToSpawn // (Final|Exec|Native|Public) // @ game+0x3635550
	void OnPlayerConnectionStatusChanged(struct AAresPlayerStateBase* SubjectPlayer, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ShooterGameMode.OnPlayerConnectionStatusChanged // (Final|Native|Public) // @ game+0x3b8f2b0
	void OnPhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ShooterGameMode.OnPhaseChanged // (Final|Native|Private) // @ game+0x3b8f230
	void OnAuthWinRound(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.ShooterGameMode.OnAuthWinRound // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAuthSetUpGameOverrides(); // Function ShooterGame.ShooterGameMode.OnAuthSetUpGameOverrides // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAuthRoundEnd(); // Function ShooterGame.ShooterGameMode.OnAuthRoundEnd // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnAuthRoundBegin(); // Function ShooterGame.ShooterGameMode.OnAuthRoundBegin // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	bool IsTeamSameParty(struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.ShooterGameMode.IsTeamSameParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8f190
	bool IsSpawnpointValid(struct AShooterTeamStart* SpawnPoint, struct AShooterPlayerState* PlayerState); // Function ShooterGame.ShooterGameMode.IsSpawnpointValid // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b8f0b0
	bool IsSpawnpointAllowed(struct AShooterTeamStart* SpawnPoint, struct AShooterPlayerState* Player, enum class ESpawnPointAllowedInfo& OutSpawnPointAllowedInfo); // Function ShooterGame.ShooterGameMode.IsSpawnpointAllowed // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8ef90
	bool IsMatchTimeoutActive(); // Function ShooterGame.ShooterGameMode.IsMatchTimeoutActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8ef60
	bool IsChangingRoles(); // Function ShooterGame.ShooterGameMode.IsChangingRoles // (Final|Native|Public|Const) // @ game+0x3b8ef30
	bool HasAnyObservers(); // Function ShooterGame.ShooterGameMode.HasAnyObservers // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8ef00
	struct UVoteManagerComponent* GetVoteManagerComponent(); // Function ShooterGame.ShooterGameMode.GetVoteManagerComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8eed0
	struct UStateMachineComponent* GetStateMachineComponent(); // Function ShooterGame.ShooterGameMode.GetStateMachineComponent // (Final|Native|Public|Const) // @ game+0x3b8eea0
	struct UServerMovementTimingComponent* GetServerMovementTimingComponent(); // Function ShooterGame.ShooterGameMode.GetServerMovementTimingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8ee70
	struct AAresRespawnManager* GetRespawnManager(); // Function ShooterGame.ShooterGameMode.GetRespawnManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288a7f0
	int32_t GetPlayersAliveCount(struct UBaseTeamComponent* WhichTeam); // Function ShooterGame.ShooterGameMode.GetPlayersAliveCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8edd0
	int32_t GetNumCharactersNeedingEnemyHitRegInfo(struct UBaseTeamComponent* WhichTeam); // Function ShooterGame.ShooterGameMode.GetNumCharactersNeedingEnemyHitRegInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8edd0
	struct FString GetMatchID(); // Function ShooterGame.ShooterGameMode.GetMatchID // (Final|Native|Public|Const) // @ game+0x3b8ed50
	bool GetIsFriendlyFireEnabled(); // Function ShooterGame.ShooterGameMode.GetIsFriendlyFireEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8ed20
	enum class EProvisioningFlowID GetGameProvisioningFlowID(); // Function ShooterGame.ShooterGameMode.GetGameProvisioningFlowID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8ecf0
	int32_t GetFogOfWarEnabled(); // Function ShooterGame.ShooterGameMode.GetFogOfWarEnabled // (Final|Native|Public|Const) // @ game+0x3b8ecc0
	struct UBehaviorScoreTrackerManagerComponent* GetBehaviorScoreTrackerManagerComponent(); // Function ShooterGame.ShooterGameMode.GetBehaviorScoreTrackerManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8ec90
	void EnablePlayerStartsByTagAndAlliance(struct FName MatchTag, struct UObject* SourceObject, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterGameMode.EnablePlayerStartsByTagAndAlliance // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8eb60
	void EnablePlayerStarts(); // Function ShooterGame.ShooterGameMode.EnablePlayerStarts // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void DisablePlayerStartsByTagAndAlliance(struct FName MatchTag, struct UObject* SourceObject, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterGameMode.DisablePlayerStartsByTagAndAlliance // (Final|Native|Public|BlueprintCallable) // @ game+0x3b8eb60
	void DisablePlayerStarts(); // Function ShooterGame.ShooterGameMode.DisablePlayerStarts // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void DespawnBot(struct AShooterPlayerState* BotPlayerState); // Function ShooterGame.ShooterGameMode.DespawnBot // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	float ChooseSpawnRotation(struct AShooterTeamStart* ShooterTeamStart, struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.ChooseSpawnRotation // (Native|Event|Public|BlueprintEvent) // @ game+0x3b8ea80
	struct AActor* ChooseSpawnPoint(struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.ChooseSpawnPoint // (Native|Event|Public|BlueprintEvent) // @ game+0x3b8e9d0
	void CheatWinGame(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.ShooterGameMode.CheatWinGame // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void CheatToggleAfkDetection(bool bValue); // Function ShooterGame.ShooterGameMode.CheatToggleAfkDetection // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void CheatSetDefaultWeapon(struct UAresPurchasable*& DefaultWeapon); // Function ShooterGame.ShooterGameMode.CheatSetDefaultWeapon // (Final|Native|Public|HasOutParms) // @ game+0x373bf90
	void CheatOverrideCurrentStateTimer(float Seconds); // Function ShooterGame.ShooterGameMode.CheatOverrideCurrentStateTimer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void CheatEndGamePhase(); // Function ShooterGame.ShooterGameMode.CheatEndGamePhase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void CheatAdvanceToOvertime(); // Function ShooterGame.ShooterGameMode.CheatAdvanceToOvertime // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	bool CanPlayOnKillEffects(struct AShooterCharacter* Victim); // Function ShooterGame.ShooterGameMode.CanPlayOnKillEffects // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b8e920
	void AuthWinRound(struct UBaseTeamComponent* NewWinnerTeam, enum class EAresRoundOutcome RoundResult, bool ShouldAddPoints); // Function ShooterGame.ShooterGameMode.AuthWinRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b8e800
	void AuthWinGame(struct UBaseTeamComponent* NewWinnerTeam); // Function ShooterGame.ShooterGameMode.AuthWinGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthSwitchTeamRoles(enum class EAresTeamRole FirstRole, enum class EAresTeamRole SecondRole); // Function ShooterGame.ShooterGameMode.AuthSwitchTeamRoles // (Final|Native|Public|BlueprintCallable) // @ game+0x36b7d70
	void AuthStartRound(); // Function ShooterGame.ShooterGameMode.AuthStartRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	bool AuthStartMatchTimeout(float Duration, struct AShooterPlayerState* CallingPlayer); // Function ShooterGame.ShooterGameMode.AuthStartMatchTimeout // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x3b8e720
	void AuthStartMatch(); // Function ShooterGame.ShooterGameMode.AuthStartMatch // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b8e700
	void AuthSignalClientsToLoadClientOnlySublevels(); // Function ShooterGame.ShooterGameMode.AuthSignalClientsToLoadClientOnlySublevels // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x3b8e6e0
	void AuthShutdown(); // Function ShooterGame.ShooterGameMode.AuthShutdown // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthSetUpGameOverrides(); // Function ShooterGame.ShooterGameMode.AuthSetUpGameOverrides // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthSetStoreEnabled(bool bIsStoreEnabled); // Function ShooterGame.ShooterGameMode.AuthSetStoreEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetSpawnSetForRole(enum class EAresTeamRole TeamRole, int32_t SpawnSet); // Function ShooterGame.ShooterGameMode.AuthSetSpawnSetForRole // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x363f0f0
	void AuthSetPauseMatchTimer(bool bIsMatchTimerPaused); // Function ShooterGame.ShooterGameMode.AuthSetPauseMatchTimer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetIntentionEnabled(bool bIsIntentionEnabled); // Function ShooterGame.ShooterGameMode.AuthSetIntentionEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetInfiniteReserveEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteReserveEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetInfiniteMoneyEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteMoneyEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetInfiniteAmmoEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteAmmoEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetInfiniteAbilitiesEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteAbilitiesEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetIgnoreShoppingRestrictionsEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetIgnoreShoppingRestrictionsEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetGameplayEnabled(bool bIsGameplayEnabled); // Function ShooterGame.ShooterGameMode.AuthSetGameplayEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthRoundEnded(); // Function ShooterGame.ShooterGameMode.AuthRoundEnded // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthResetRound(bool PersistState); // Function ShooterGame.ShooterGameMode.AuthResetRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthResetGameWithNewRoundResults(struct TArray<struct FAresRoundResult>& NewResults); // Function ShooterGame.ShooterGameMode.AuthResetGameWithNewRoundResults // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3b8e610
	void AuthResetGame(); // Function ShooterGame.ShooterGameMode.AuthResetGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3739c70
	void AuthReplicateClientOnlySublevels(struct APlayerController* PC); // Function ShooterGame.ShooterGameMode.AuthReplicateClientOnlySublevels // (Final|Native|Private) // @ game+0x3b8e580
	void AuthOnPlayerAfkStatusChanged(struct AShooterPlayerState* SubjectPlayer, bool bIsAFK); // Function ShooterGame.ShooterGameMode.AuthOnPlayerAfkStatusChanged // (Final|Native|Public) // @ game+0x3b8e4b0
	void AuthLockInLoadoutValues(); // Function ShooterGame.ShooterGameMode.AuthLockInLoadoutValues // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthLoadGameModeSpecificSublevels(); // Function ShooterGame.ShooterGameMode.AuthLoadGameModeSpecificSublevels // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x3b8e490
	bool AuthIsServerStreamingLevels(); // Function ShooterGame.ShooterGameMode.AuthIsServerStreamingLevels // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	int32_t AuthGetSpawnSetForRole(enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameMode.AuthGetSpawnSetForRole // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8e400
	struct TArray<struct AShooterTeamStart*> AuthGetSpawnPointsForTeam(struct UBaseTeamComponent* Team, enum class EBlockedSpawnPointBehavior BlockedSpawnPointBehavior, float BlockCheckHalfHeight, float BlockCheckRadius); // Function ShooterGame.ShooterGameMode.AuthGetSpawnPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b8e240
	bool AuthGetShouldSpawnPlayer(struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.AuthGetShouldSpawnPlayer // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3b8e190
	float AuthGetRoundTimeElapsed(); // Function ShooterGame.ShooterGameMode.AuthGetRoundTimeElapsed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38821e0
	struct TArray<struct ARoundStartRewardSpawnPoint*> AuthGetRoundStartRewardSpawnPointsForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameMode.AuthGetRoundStartRewardSpawnPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b8e0b0
	float AuthGetPhaseRemainingTime(); // Function ShooterGame.ShooterGameMode.AuthGetPhaseRemainingTime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b8e080
	void AuthGameplayCleanCharacterAbilities(struct AShooterCharacter* Character); // Function ShooterGame.ShooterGameMode.AuthGameplayCleanCharacterAbilities // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthGameModeCheatDisplayMessageToController(struct FString DisplayMessage, struct AShooterPlayerController* Controller); // Function ShooterGame.ShooterGameMode.AuthGameModeCheatDisplayMessageToController // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b8df50
	void AuthGameModeCheatDisplayMessageToClients(struct FString DisplayMessage); // Function ShooterGame.ShooterGameMode.AuthGameModeCheatDisplayMessageToClients // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024240
	void AuthGameModeCheat(struct FString CheatString, struct AShooterPlayerController* ExecutingController); // Function ShooterGame.ShooterGameMode.AuthGameModeCheat // (Final|Native|Public) // @ game+0x3b8df50
	void AuthFinishMatchMarkCompleted(enum class EMatchCompletionState CompletionState); // Function ShooterGame.ShooterGameMode.AuthFinishMatchMarkCompleted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36908e0
	void AuthFinishMatch(); // Function ShooterGame.ShooterGameMode.AuthFinishMatch // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthFinalizeMatchDetails(enum class EMatchCompletionState CompletionState); // Function ShooterGame.ShooterGameMode.AuthFinalizeMatchDetails // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x3b8dec0
	void AuthCancelMatchTimeout(); // Function ShooterGame.ShooterGameMode.AuthCancelMatchTimeout // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x3b8de90
	bool AuthAttemptStartMatchTimeout(float Duration, struct AShooterPlayerState* CallingPlayer); // Function ShooterGame.ShooterGameMode.AuthAttemptStartMatchTimeout // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b8ddc0
	void AuthApplyRoundEndRewards(); // Function ShooterGame.ShooterGameMode.AuthApplyRoundEndRewards // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	struct FString AssignRandomMatchId(); // Function ShooterGame.ShooterGameMode.AssignRandomMatchId // (Final|Native|Public) // @ game+0x3b8dd40
	bool AreAllPlayersResponsive(); // Function ShooterGame.ShooterGameMode.AreAllPlayersResponsive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55f50
	bool AreAllPlayersReadyToStart(); // Function ShooterGame.ShooterGameMode.AreAllPlayersReadyToStart // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
};

// Class ShooterGame.ShooterGamePathFollowingDebugger
// Size: 0x38 (Inherited: 0x30)
struct UShooterGamePathFollowingDebugger : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.ShooterGameSession
// Size: 0x4f0 (Inherited: 0x3f8)
struct AShooterGameSession : AGameSession {
	char pad_3F8[0xf8]; // 0x3f8(0xf8)
};

// Class ShooterGame.ShooterGameState
// Size: 0xc60 (Inherited: 0x5f0)
struct AShooterGameState : AAresGameStateBase {
	float ExtraDeathcamFadeToBlackDuration; // 0x5f0(0x04)
	char pad_5F4[0x4]; // 0x5f4(0x04)
	struct UAresAimToolingTracker* AimToolingTracker; // 0x5f8(0x08)
	struct TArray<struct AAresCalloutRegion*> CalloutRegions; // 0x600(0x10)
	struct TArray<struct FCustomTeamColor> CustomTeamColors; // 0x610(0x10)
	enum class ECharacterColorationScheme CharacterColorationMode; // 0x620(0x01)
	bool bShowAFKStatusChangedInChat; // 0x621(0x01)
	bool bAllowCharacterSpecificStartingEquippables; // 0x622(0x01)
	bool bAllowCharacterSpecificEquippablesInShop; // 0x623(0x01)
	char pad_624[0x4]; // 0x624(0x04)
	struct TArray<struct UObject*> EnabledUIScreenCoordinators; // 0x628(0x10)
	int32_t NumTeamsToCreateOverride; // 0x638(0x04)
	char pad_63C[0x4]; // 0x63c(0x04)
	struct FAresMatchResult MatchResult; // 0x640(0x10)
	struct UBaseTeamComponent* PendingWinningTeam; // 0x650(0x08)
	char pad_658[0x8]; // 0x658(0x08)
	struct UBaseTeamComponent* WinnerOfLastRound; // 0x660(0x08)
	struct TArray<struct FAresTeamEconomy> TeamEconomy; // 0x668(0x10)
	struct FMulticastInlineDelegate OnTeamAverageLoadoutValueUpdated; // 0x678(0x10)
	struct AActor* SpectateFocusObject; // 0x688(0x08)
	struct TArray<struct FAresTeamInfo> TeamComponents; // 0x690(0x10)
	struct TArray<struct FMapPingData> MegaMapPings; // 0x6a0(0x10)
	struct TArray<struct FMapPingData> FirstPersonPings; // 0x6b0(0x10)
	struct UAresClientGameInstance* ClientGameInstance; // 0x6c0(0x08)
	struct FMulticastInlineDelegate OnMatchTimeoutStateChanged; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnMatchTimerPausedChanged; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnIgnoreShoppingRestrictionsChanged; // 0x6e8(0x10)
	int32_t NumPointsToWinGame; // 0x6f8(0x04)
	int32_t NumRoundsToSwitchTeams; // 0x6fc(0x04)
	bool bUseKillScoring; // 0x700(0x01)
	char pad_701[0x7]; // 0x701(0x07)
	struct FAresGameInfo GameInfo; // 0x708(0x40)
	float FriendlyDamageScale; // 0x748(0x04)
	float SelfDamageScale; // 0x74c(0x04)
	struct FMulticastInlineDelegate OnPlayerStateListUpdated; // 0x750(0x10)
	char pad_760[0x10]; // 0x760(0x10)
	struct FMulticastInlineDelegate OnNotificationSystemUpdated; // 0x770(0x10)
	struct FMulticastInlineDelegate OnResetGame; // 0x780(0x10)
	float GearGivenAsBountyPercent; // 0x790(0x04)
	float BountyGivenToKillerVSTeamPercent; // 0x794(0x04)
	float PercentToRefundDeadPlayersOnRoundWin; // 0x798(0x04)
	int32_t MaxBankedMoney; // 0x79c(0x04)
	float DurationOfDamageAssist; // 0x7a0(0x04)
	float RechargeCostMultiplier; // 0x7a4(0x04)
	struct FMulticastInlineDelegate OnShooterPlayerStateAdded; // 0x7a8(0x10)
	struct FMulticastInlineDelegate OnShooterPlayerStateRemoved; // 0x7b8(0x10)
	struct FMulticastInlineDelegate OnPlayerSpawn; // 0x7c8(0x10)
	struct FMulticastInlineDelegate OnCharacterSpawn; // 0x7d8(0x10)
	struct FMulticastInlineDelegate OnWeaponAttachmentSpawn; // 0x7e8(0x10)
	struct FMulticastInlineDelegate OnNonPlayerActorKilled; // 0x7f8(0x10)
	struct FMulticastInlineDelegate OnPlayerKill; // 0x808(0x10)
	struct FMulticastInlineDelegate AuthOnPlayerKilledAndProcessed; // 0x818(0x10)
	struct FMulticastInlineDelegate OnPlayerTemporaryDeath; // 0x828(0x10)
	struct FMulticastInlineDelegate OnPlayerRecovery; // 0x838(0x10)
	struct FMulticastInlineDelegate OnPlayerResurrect; // 0x848(0x10)
	struct FMulticastInlineDelegate AuthOnActorDamaged; // 0x858(0x10)
	float TimeToBuyOnceRoundBegins; // 0x868(0x04)
	float TimeToSetPlayerIntentionOnceRoundBegins; // 0x86c(0x04)
	float PlayerIntentionFadeTime; // 0x870(0x04)
	int32_t HeavyWeaponCostThreshold; // 0x874(0x04)
	struct FMulticastInlineDelegate OnRoundNumberChanged; // 0x878(0x10)
	char pad_888[0x30]; // 0x888(0x30)
	int32_t MinSecondsBetweenPresenceUpdates; // 0x8b8(0x04)
	bool bForceReuseActorOnRespawnEnabled; // 0x8bc(0x01)
	bool bShouldShowPlayerWidgetBase; // 0x8bd(0x01)
	bool bScoreboardOmitsBots; // 0x8be(0x01)
	char pad_8BF[0x1]; // 0x8bf(0x01)
	int32_t NetServerMaxTickRate; // 0x8c0(0x04)
	char pad_8C4[0x4]; // 0x8c4(0x04)
	struct FAresPlatformMatchInfo MatchInfo; // 0x8c8(0x10)
	struct UGameStateHUDConfig* GameStateHUDConfig; // 0x8d8(0x08)
	enum class EAresGamePhase StartingPhase; // 0x8e0(0x01)
	char pad_8E1[0x3]; // 0x8e1(0x03)
	int32_t RoundTime; // 0x8e4(0x04)
	int32_t RoundEndingTime; // 0x8e8(0x04)
	bool bIsShoppingEnabled; // 0x8ec(0x01)
	char pad_8ED[0x3]; // 0x8ed(0x03)
	struct FMulticastInlineDelegate OnPointsUpdated; // 0x8f0(0x10)
	char pad_900[0x10]; // 0x900(0x10)
	struct FMulticastInlineDelegate OnDropInEnabledUpdated; // 0x910(0x10)
	char pad_920[0x10]; // 0x920(0x10)
	struct FMulticastInlineDelegate OnPlayerPreDisassociated; // 0x930(0x10)
	struct FMulticastInlineDelegate OnGameplayActiveChanged; // 0x940(0x10)
	struct FMulticastInlineDelegate OnRoundResultsUpdated; // 0x950(0x10)
	struct FMulticastInlineDelegate OnCharacterSwitched; // 0x960(0x10)
	struct FMulticastInlineDelegate OnStrategicOutcomesUpdated; // 0x970(0x10)
	struct FMulticastInlineDelegate OnChosenCeremonyForRoundUpdated; // 0x980(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> CriticalGameItemClasses; // 0x990(0x10)
	struct TArray<struct AAresEquippable*> AllowlistedEquippablesToAlwaysDrop; // 0x9a0(0x10)
	struct TArray<struct FAresRoundResult> RoundResults; // 0x9b0(0x10)
	struct TArray<struct FStrategicOutcomeOfRound> StrategicOutcomes; // 0x9c0(0x10)
	struct AAresCeremony* ChosenCeremonyForRound; // 0x9d0(0x08)
	int32_t RoundNumber; // 0x9d8(0x04)
	char pad_9DC[0x4]; // 0x9dc(0x04)
	struct FString DebugMessage; // 0x9e0(0x10)
	struct UAresStore* Store; // 0x9f0(0x08)
	struct TSoftClassPtr<UObject> StoreAsset; // 0x9f8(0x30)
	struct UAresStore* CachedStore; // 0xa28(0x08)
	uint32_t TotalServerLogLinesRecorded; // 0xa30(0x04)
	char pad_A34[0x4]; // 0xa34(0x04)
	struct TArray<struct FAresGameRewardTuning> GameRewardsTable; // 0xa38(0x10)
	struct UDecalManager* DecalManager; // 0xa48(0x08)
	struct UClientPerRoundTelemetryComponent* ClientPerRoundTelemetryComponent; // 0xa50(0x08)
	struct UMobileDeviceTelemetryComponent* MobileDeviceTelemetryComponent; // 0xa58(0x08)
	float AverageServerFrameTimeMs; // 0xa60(0x04)
	char pad_A64[0x4]; // 0xa64(0x04)
	struct TArray<struct FAresDebugSphereReplicated> ReplicatedDebugSpheres; // 0xa68(0x10)
	struct TArray<struct FAresDebugLineReplicated> ReplicatedDebugLines; // 0xa78(0x10)
	struct TArray<struct FAresDebugTextReplicated> ReplicatedDebugText; // 0xa88(0x10)
	struct FMulticastInlineDelegate OnMatchBegin; // 0xa98(0x10)
	struct FMulticastInlineDelegate OnMatchEnd; // 0xaa8(0x10)
	struct FMulticastInlineDelegate OnRoundBegin; // 0xab8(0x10)
	struct FMulticastInlineDelegate OnInRound; // 0xac8(0x10)
	struct FMulticastInlineDelegate OnRoundEnd; // 0xad8(0x10)
	struct FMulticastInlineDelegate OnGamePhaseChanged; // 0xae8(0x10)
	struct FMulticastInlineDelegate OnAllowedVoteTypesReplicated; // 0xaf8(0x10)
	struct UBasePerformanceMonitoringComponent* LocalPerformanceMonitoringComponent; // 0xb08(0x08)
	enum class EAresGamePhase Phase; // 0xb10(0x01)
	char pad_B11[0x7]; // 0xb11(0x07)
	struct TArray<struct AGameplayVote*> AllowedVoteTypes; // 0xb18(0x10)
	char pad_B28[0x8]; // 0xb28(0x08)
	struct AAresSoundHandler* SoundHandler; // 0xb30(0x08)
	struct AAresActorSoundPool* ActorSoundPool; // 0xb38(0x08)
	struct UOnGroundEquippableSearchComponent* OnGroundEquippableSearchComponent; // 0xb40(0x08)
	struct AAresDroppedEquippable* DroppedEquippable; // 0xb48(0x08)
	struct AAresOnGroundEquippable* OnGroundEquippable; // 0xb50(0x08)
	int32_t PhaseAllowedGameInput; // 0xb58(0x04)
	char pad_B5C[0x4]; // 0xb5c(0x04)
	struct URemoteNetworkedGameStateComponent* RemoteNetworkedGameStateComponent; // 0xb60(0x08)
	struct UShooterTimeSyncComponent* TimeSyncComponent; // 0xb68(0x08)
	struct UFixedMoveTimeStepManagerComponent* FixedMoveTimeStepManagerComponent; // 0xb70(0x08)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0xb78(0x08)
	struct UGameDataExportComponent* GameDataExportComponent; // 0xb80(0x08)
	struct UOcclusionPathComponent* OcclusionPathComponent; // 0xb88(0x08)
	struct UEquippableEventGameStateComponent* EquippableEventComponent; // 0xb90(0x08)
	struct FMulticastInlineDelegate OnModifierManagerCreated; // 0xb98(0x10)
	struct TSoftClassPtr<UObject> ModifierManagerClass; // 0xba8(0x30)
	struct AGameModifierManager* ModifierManager; // 0xbd8(0x08)
	struct FDegradedNetworkSimulationPresets DegradedNetworkSimulationPresets; // 0xbe0(0x10)
	struct FCurrentNetworkSimulationSettings CurrentNetworkSimulationSettings; // 0xbf0(0x18)
	char pad_C08[0x8]; // 0xc08(0x08)
	struct UDebugSubscriptionComponent* DebugSubscriptionComponent; // 0xc10(0x08)
	struct UGameModeDataAsset* GameModeDataAsset; // 0xc18(0x08)
	struct TArray<struct FRoundParticipantsInfo> RoundParticipantsInfos; // 0xc20(0x10)
	char pad_C30[0x10]; // 0xc30(0x10)
	struct UImpactEffectManagerComponent* ImpactEffectManager; // 0xc40(0x08)
	struct UTracerManagerComponent* TracerManager; // 0xc48(0x08)
	struct UEffectPoolManagerComponent* EffectPoolManager; // 0xc50(0x08)
	struct UReplayGameEventReceiver* ReplayGameEventReceiver; // 0xc58(0x08)

	void WeaponAttachmentSpawned(struct UAresWeaponAttachmentComponent* WeaponAttachment); // Function ShooterGame.ShooterGameState.WeaponAttachmentSpawned // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3ba01a0
	bool UseShoppingRestrictionRules(); // Function ShooterGame.ShooterGameState.UseShoppingRestrictionRules // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba0170
	void UpdateGameplayActive(); // Function ShooterGame.ShooterGameState.UpdateGameplayActive // (Final|Native|Protected) // @ game+0x3ba0150
	void TrackServerGracePeriodDelay(float TransitionScreenGracePeriodRemaining); // Function ShooterGame.ShooterGameState.TrackServerGracePeriodDelay // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba00d0
	bool TeamsHaveSwitched(); // Function ShooterGame.ShooterGameState.TeamsHaveSwitched // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3ba0090
	bool ShouldDoGameFlow(); // Function ShooterGame.ShooterGameState.ShouldDoGameFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a55f50
	void SetSpectateFocusObject(struct AActor* FocusObject); // Function ShooterGame.ShooterGameState.SetSpectateFocusObject // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba0000
	void SetShoppingEnabled(bool Enabled); // Function ShooterGame.ShooterGameState.SetShoppingEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3b9ff70
	void SetRoundNumber(int32_t NewRoundNumber); // Function ShooterGame.ShooterGameState.SetRoundNumber // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b9fee0
	void SetManualGarbageCollectionPending(bool InPending); // Function ShooterGame.ShooterGameState.SetManualGarbageCollectionPending // (Final|Native|Protected|BlueprintCallable) // @ game+0x3b9fe50
	void SetCurrentGameStateHUDConfig(struct UGameStateHUDConfig* NewConfig); // Function ShooterGame.ShooterGameState.SetCurrentGameStateHUDConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x3b9fdc0
	void SetAllowedVoteTypes(struct TArray<struct AGameplayVote*> Types); // Function ShooterGame.ShooterGameState.SetAllowedVoteTypes // (Final|Native|Public) // @ game+0x3b9fcc0
	void ServerSerializedData(struct TArray<char> Bytes); // Function ShooterGame.ShooterGameState.ServerSerializedData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3b9fc10
	void ReceiveTickDebug(); // Function ShooterGame.ShooterGameState.ReceiveTickDebug // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void PlayerListUpdated(); // Function ShooterGame.ShooterGameState.PlayerListUpdated // (Final|Native|Private) // @ game+0x3b9fbf0
	void OnSimulateDegradedNetworkConditionsChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterGameState.OnSimulateDegradedNetworkConditionsChanged // (Final|Native|Protected) // @ game+0x3690810
	void OnRep_TeamComponents(struct TArray<struct FAresTeamInfo>& OldTeamComponents); // Function ShooterGame.ShooterGameState.OnRep_TeamComponents // (Final|Native|Protected|HasOutParms) // @ game+0x3b9fb40
	void OnRep_TeamAverageLoadoutValue(); // Function ShooterGame.ShooterGameState.OnRep_TeamAverageLoadoutValue // (Final|Native|Protected) // @ game+0x3b9fb20
	void OnRep_StrategicOutcomes(); // Function ShooterGame.ShooterGameState.OnRep_StrategicOutcomes // (Final|Native|Protected) // @ game+0x3b9fb00
	void OnRep_RoundResults(); // Function ShooterGame.ShooterGameState.OnRep_RoundResults // (Final|Native|Protected) // @ game+0x3b9fae0
	void OnRep_RoundNumber(); // Function ShooterGame.ShooterGameState.OnRep_RoundNumber // (Final|Native|Protected) // @ game+0x3b9fac0
	void OnRep_NotificationSystem(); // Function ShooterGame.ShooterGameState.OnRep_NotificationSystem // (Final|Native|Protected) // @ game+0x3b9faa0
	void OnRep_NetServerMaxTickRate(); // Function ShooterGame.ShooterGameState.OnRep_NetServerMaxTickRate // (Final|Native|Public) // @ game+0x3b9fa80
	void OnRep_MatchResults(); // Function ShooterGame.ShooterGameState.OnRep_MatchResults // (Final|Native|Private) // @ game+0x3b9fa60
	void OnRep_GameStateHUDConfig(); // Function ShooterGame.ShooterGameState.OnRep_GameStateHUDConfig // (Final|Native|Protected) // @ game+0x3b9fa40
	void OnRep_GameInfo(struct FAresGameInfo& OldGameInfo); // Function ShooterGame.ShooterGameState.OnRep_GameInfo // (Final|Native|Public|HasOutParms) // @ game+0x3b9f950
	void OnRep_CurrentNetworkSimulationSettings(); // Function ShooterGame.ShooterGameState.OnRep_CurrentNetworkSimulationSettings // (Final|Native|Protected) // @ game+0x2024060
	void OnRep_ChosenCeremonyForRound(); // Function ShooterGame.ShooterGameState.OnRep_ChosenCeremonyForRound // (Final|Native|Protected) // @ game+0x3b9f930
	void OnRep_BroadcastModifierManagerCreated(); // Function ShooterGame.ShooterGameState.OnRep_BroadcastModifierManagerCreated // (Final|Native|Private) // @ game+0x3b9f910
	void OnRep_AllowedVoteTypes(); // Function ShooterGame.ShooterGameState.OnRep_AllowedVoteTypes // (Final|Native|Private) // @ game+0x3b9f8f0
	void OnPreInitGame(); // Function ShooterGame.ShooterGameState.OnPreInitGame // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnEnableIncreasedNetDriverRateLimitingChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterGameState.OnEnableIncreasedNetDriverRateLimitingChanged // (Final|Native|Protected) // @ game+0x3b9f820
	void OnCharacterExitedTeamVisibility(struct AShooterCharacter* Character); // Function ShooterGame.ShooterGameState.OnCharacterExitedTeamVisibility // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void OnCharacterEnteredTeamVisibility(struct AShooterCharacter* Character); // Function ShooterGame.ShooterGameState.OnCharacterEnteredTeamVisibility // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void MulticastUpdateServerPerformanceInfoEx(float ServerFrameTimeMs, struct TArray<float> SubsystemFrameTimesMs); // Function ShooterGame.ShooterGameState.MulticastUpdateServerPerformanceInfoEx // (Net|Native|Event|NetMulticast|Protected) // @ game+0x3b9f730
	void MulticastUpdateServerPerformanceInfo(float ServerFrameTimeMs); // Function ShooterGame.ShooterGameState.MulticastUpdateServerPerformanceInfo // (Net|Native|Event|NetMulticast|Protected) // @ game+0x3b9f6a0
	void MulticastSkillTestStartedEvent(); // Function ShooterGame.ShooterGameState.MulticastSkillTestStartedEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9f670
	void MulticastSkillTestEndedEvent(); // Function ShooterGame.ShooterGameState.MulticastSkillTestEndedEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9f640
	void MulticastSetSpectateFocusObject(struct AActor* FocusObject); // Function ShooterGame.ShooterGameState.MulticastSetSpectateFocusObject // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x3b9f5b0
	void MulticastSetPhase(enum class EAresGamePhase NewPhase); // Function ShooterGame.ShooterGameState.MulticastSetPhase // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b9f520
	void MulticastSerializedData(struct TArray<char> Bytes); // Function ShooterGame.ShooterGameState.MulticastSerializedData // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b9f470
	void MulticastReceivePlayerTemporaryDeathEvent(struct AShooterPlayerState* DamagerPlayer, struct AShooterPlayerState* DownedPlayer, struct UDamageResponse* DamageResponse, struct AAresEquippable* EquippableUsed, bool bRecoversInstantly); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerTemporaryDeathEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9f2c0
	void MulticastReceivePlayerSpawnEvent(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerSpawnEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9f1e0
	void MulticastReceivePlayerResurrectEvent(struct AShooterPlayerState* ResurrectorPlayer, struct AShooterPlayerState* ResurrectedPlayer, int32_t KillNumberInRoundForResurrector, int32_t KillNumberInRoundForResurrected); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerResurrectEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9f090
	void MulticastReceivePlayerRecoveryEvent(struct AShooterPlayerState* RecoveredByPlayerState, struct AShooterPlayerState* RecoveredPlayerState); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerRecoveryEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9efb0
	void MulticastNotifyOnNonPlayerActorKilledEvent(struct AShooterPlayerState* KillerPlayer, struct AActor* KilledActor, struct AAresEquippable* UsedEquippable, bool bWasHeadshot); // Function ShooterGame.ShooterGameState.MulticastNotifyOnNonPlayerActorKilledEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3b9ee50
	void MulticastExitPlayspace(struct UPlayspaceComponent* PlayspaceComponent, struct UPlayspace* PlayspaceToLeave, bool bExecuteOnOwner); // Function ShooterGame.ShooterGameState.MulticastExitPlayspace // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b9ed40
	void MulticastEnterPlayspace(struct UPlayspaceComponent* PlayspaceComponent, struct UPlayspace* NewPlayspace, bool bLeaveCurrentPlayspaces, bool bExecuteOnOwner); // Function ShooterGame.ShooterGameState.MulticastEnterPlayspace // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b9ebd0
	void MulticastEndRound(int32_t NewRoundNumber); // Function ShooterGame.ShooterGameState.MulticastEndRound // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x3b9eb40
	bool IsVoteTypeEnabled(struct AGameplayVote* Type); // Function ShooterGame.ShooterGameState.IsVoteTypeEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9eaa0
	bool IsShoppingAllowed(); // Function ShooterGame.ShooterGameState.IsShoppingAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9ea70
	bool IsRelevantForAnyEnemyTeam(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.ShooterGameState.IsRelevantForAnyEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e9d0
	bool IsNextRoundOvertime(); // Function ShooterGame.ShooterGameState.IsNextRoundOvertime // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3b9e990
	bool IsMatchTimerPaused(); // Function ShooterGame.ShooterGameState.IsMatchTimerPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e960
	bool IsMatchTimeoutActive(); // Function ShooterGame.ShooterGameState.IsMatchTimeoutActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e930
	bool IsInTeamSelect(); // Function ShooterGame.ShooterGameState.IsInTeamSelect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36a05b0
	bool IsInOvertime(); // Function ShooterGame.ShooterGameState.IsInOvertime // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3b9e830
	bool IsInfiniteReserveEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteReserveEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e900
	bool IsInfiniteMoneyEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteMoneyEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e8d0
	bool IsInfiniteAmmoEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteAmmoEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e8a0
	bool IsInfiniteAbilitiesEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteAbilitiesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e870
	bool IsGameplayActive(); // Function ShooterGame.ShooterGameState.IsGameplayActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e800
	bool IsDropInEnabled(); // Function ShooterGame.ShooterGameState.IsDropInEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e7d0
	bool HasPassedTimestamp(float Timestamp); // Function ShooterGame.ShooterGameState.HasPassedTimestamp // (Final|Native|Protected|Const) // @ game+0x3b9e740
	int32_t GetWinsForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetWinsForTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e6a0
	struct UBaseTeamComponent* GetWinningTeam(); // Function ShooterGame.ShooterGameState.GetWinningTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e670
	int32_t GetTeamAverageLoadoutValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetTeamAverageLoadoutValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3b9e5d0
	struct FStrategicOutcomeOfRound GetStrategicOutcomeForRound(int32_t InRoundNumber); // Function ShooterGame.ShooterGameState.GetStrategicOutcomeForRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e4f0
	struct AActor* GetSpectateFocusObject(); // Function ShooterGame.ShooterGameState.GetSpectateFocusObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x369efa0
	struct AAresSoundHandler* GetSoundHandler(); // Function ShooterGame.ShooterGameState.GetSoundHandler // (Final|Native|Public|Const) // @ game+0x3b9e4c0
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStatesSortedByCharacterName(); // Function ShooterGame.ShooterGameState.GetShooterPlayerStatesSortedByCharacterName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e440
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStatesByIsAlive(bool bIsAlive); // Function ShooterGame.ShooterGameState.GetShooterPlayerStatesByIsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e360
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStates(bool bOmitCoaches); // Function ShooterGame.ShooterGameState.GetShooterPlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e280
	int32_t GetRoundTime(); // Function ShooterGame.ShooterGameState.GetRoundTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f7b0
	struct TArray<struct FAresRoundResult> GetRoundResults(); // Function ShooterGame.ShooterGameState.GetRoundResults // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e160
	void GetRoundPenalizedPlayersForTeam(struct TArray<struct AShooterPlayerState*>& OutPlayers, int32_t RoundToGet, struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.ShooterGameState.GetRoundPenalizedPlayersForTeam // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9e030
	void GetRoundInfo(int32_t& OutRoundNumber, enum class EAresGamePhase& OutGamePhase); // Function ShooterGame.ShooterGameState.GetRoundInfo // (Final|Native|Public|HasOutParms|Const) // @ game+0x3b9df50
	int32_t GetRoundEndingTime(); // Function ShooterGame.ShooterGameState.GetRoundEndingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x393f7b0
	enum class EAresTeamRole GetRoleForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetRoleForTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9deb0
	struct URemoteNetworkedGameStateComponent* GetRemoteNetworkedGameStateComponent(); // Function ShooterGame.ShooterGameState.GetRemoteNetworkedGameStateComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9de80
	int32_t GetPreRoundAddTime(int32_t RoundNumberIn); // Function ShooterGame.ShooterGameState.GetPreRoundAddTime // (Event|Protected|BlueprintEvent|Const) // @ game+0x40572e0
	int32_t GetPointsForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetPointsForTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9dde0
	struct TArray<struct AOwnerExclusivePlayerInfo*> GetPlayerInfos(bool bOmitCoaches); // Function ShooterGame.ShooterGameState.GetPlayerInfos // (Final|Native|Public|Const) // @ game+0x3b9dd00
	int32_t GetPlayerCount(); // Function ShooterGame.ShooterGameState.GetPlayerCount // (Final|Native|Public|Const) // @ game+0x3b9dcd0
	struct AAresOnGroundEquippable* GetOnGroundEquippable(); // Function ShooterGame.ShooterGameState.GetOnGroundEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9dcb0
	struct UOcclusionPathComponent* GetOcclusionPathComponent(); // Function ShooterGame.ShooterGameState.GetOcclusionPathComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9dc80
	int32_t GetNumTeams(); // Function ShooterGame.ShooterGameState.GetNumTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9dc50
	int32_t GetNumPenalizedPlayers(int32_t RoundToGet); // Function ShooterGame.ShooterGameState.GetNumPenalizedPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9dbb0
	float GetMatchTimeoutTimeRemaining(); // Function ShooterGame.ShooterGameState.GetMatchTimeoutTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9db80
	struct AShooterPlayerState* GetMatchTimeoutCallingPlayer(); // Function ShooterGame.ShooterGameState.GetMatchTimeoutCallingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9db50
	struct FStrategicOutcomeOfRound GetLatestStrategicOutcome(); // Function ShooterGame.ShooterGameState.GetLatestStrategicOutcome // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9dae0
	int32_t GetGameReward(struct FName RewardName, enum class EAresGameReward Type); // Function ShooterGame.ShooterGameState.GetGameReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d9e0
	float GetGamePhaseRemainingTime(bool bUsePredictedTime); // Function ShooterGame.ShooterGameState.GetGamePhaseRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d940
	enum class EAresGamePhase GetGamePhaseName(); // Function ShooterGame.ShooterGameState.GetGamePhaseName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c8d610
	float GetGamePhaseElapsedTime(); // Function ShooterGame.ShooterGameState.GetGamePhaseElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d910
	struct UGameModeDataAsset* GetGameModeDataAsset(); // Function ShooterGame.ShooterGameState.GetGameModeDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d8f0
	bool GetGameHasWinner(); // Function ShooterGame.ShooterGameState.GetGameHasWinner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d8c0
	struct UGameDataExportComponent* GetGameDataExportComponent(); // Function ShooterGame.ShooterGameState.GetGameDataExportComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d890
	struct UFixedMoveTimeStepManagerComponent* GetFixedMoveTimeStepManagerComponent(); // Function ShooterGame.ShooterGameState.GetFixedMoveTimeStepManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d860
	struct UBaseTeamComponent* GetFirstTeamForRole(enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.GetFirstTeamForRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d7d0
	struct UEquippableEventGameStateComponent* GetEquippableEventComponent(); // Function ShooterGame.ShooterGameState.GetEquippableEventComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d7b0
	struct UBaseTeamComponent* GetEnemyTeam(struct UBaseTeamComponent* AllyTeam); // Function ShooterGame.ShooterGameState.GetEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d710
	struct AAresDroppedEquippable* GetDroppedEquippable(); // Function ShooterGame.ShooterGameState.GetDroppedEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d6f0
	bool GetCustomTeamColor(struct UObject* Object, struct FColor& OutCustomColor, bool bHUDColor); // Function ShooterGame.ShooterGameState.GetCustomTeamColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3b9d5d0
	int32_t GetCurrentRoundNumber(); // Function ShooterGame.ShooterGameState.GetCurrentRoundNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d5a0
	int32_t GetCurrentHighestTeamScore(); // Function ShooterGame.ShooterGameState.GetCurrentHighestTeamScore // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d570
	struct UGameStateHUDConfig* GetCurrentGameStateHudConfigDefaultObject(); // Function ShooterGame.ShooterGameState.GetCurrentGameStateHudConfigDefaultObject // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d540
	struct UGameStateHUDConfig* GetCurrentGameStateHUDConfig(); // Function ShooterGame.ShooterGameState.GetCurrentGameStateHUDConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d500
	struct UClientPerformanceMonitoringComponent* GetClientPerformanceMonitoringComponent(); // Function ShooterGame.ShooterGameState.GetClientPerformanceMonitoringComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d4d0
	struct AAresCeremony* GetChosenCeremonyForEndedRound(); // Function ShooterGame.ShooterGameState.GetChosenCeremonyForEndedRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d4a0
	struct TArray<struct AAresCalloutRegion*> GetCalloutRegions(); // Function ShooterGame.ShooterGameState.GetCalloutRegions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3b9d410
	struct UAresStore* GetAresStore(); // Function ShooterGame.ShooterGameState.GetAresStore // (Final|Native|Public|BlueprintCallable) // @ game+0x3b9d3e0
	struct TArray<struct UBaseTeamComponent*> GetAllTeamsForRole(enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.GetAllTeamsForRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d270
	struct TArray<struct UBaseTeamComponent*> GetAllTeamComponentsWithAlliance(struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterGameState.GetAllTeamComponentsWithAlliance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d160
	struct TArray<struct UBaseTeamComponent*> GetAllTeamComponents(); // Function ShooterGame.ShooterGameState.GetAllTeamComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d0e0
	struct TArray<struct FStrategicOutcomeOfRound> GetAllStrategicOutcomes(); // Function ShooterGame.ShooterGameState.GetAllStrategicOutcomes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d030
	struct TArray<struct AGameplayVote*> GetAllowedVoteTypes(); // Function ShooterGame.ShooterGameState.GetAllowedVoteTypes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9d350
	struct TArray<struct UBaseTeamComponent*> GetAllEnemyTeams(struct UBaseTeamComponent* AllyTeam); // Function ShooterGame.ShooterGameState.GetAllEnemyTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9cf50
	struct AAresActorSoundPool* GetActorSoundPool(); // Function ShooterGame.ShooterGameState.GetActorSoundPool // (Final|Native|Public|Const) // @ game+0x3b9cf20
	bool GameModeHidesMinimap(); // Function ShooterGame.ShooterGameState.GameModeHidesMinimap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9cef0
	void FXCWarmEffectPools(); // Function ShooterGame.ShooterGameState.FXCWarmEffectPools // (Final|Exec|Native|Private) // @ game+0x3b9cec0
	void FXCLogEffectPoolUsage(); // Function ShooterGame.ShooterGameState.FXCLogEffectPoolUsage // (Final|Exec|Native|Private|Const) // @ game+0x3b9ce90
	void CycleOrbInSlot(int32_t Slot); // Function ShooterGame.ShooterGameState.CycleOrbInSlot // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	int32_t ComputeRoundPointValue(int32_t RoundNum, struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.ComputeRoundPointValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3b9cdb0
	void ClientResetRound(); // Function ShooterGame.ShooterGameState.ClientResetRound // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x3b9cd80
	void AuthUpdateDropInEnabled(bool bIsDropInEnabled); // Function ShooterGame.ShooterGameState.AuthUpdateDropInEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetWinsForTeam(struct UBaseTeamComponent* Team, int32_t Wins); // Function ShooterGame.ShooterGameState.AuthSetWinsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3636980
	void AuthSetTeamRole(struct UBaseTeamComponent* Team, enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.AuthSetTeamRole // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36eab40
	void AuthSetPointsForTeam(struct UBaseTeamComponent* Team, int32_t Points); // Function ShooterGame.ShooterGameState.AuthSetPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3636980
	void AuthSetMatchTimeoutState(enum class EAresMatchTimeoutState TimeoutState, float Duration, struct AShooterPlayerState* CallingPlayer); // Function ShooterGame.ShooterGameState.AuthSetMatchTimeoutState // (Final|Native|Public|BlueprintCallable) // @ game+0x3b9cc60
	void AuthSetMatchTimeout(float Duration); // Function ShooterGame.ShooterGameState.AuthSetMatchTimeout // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthResetTeamMoneyValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthResetTeamMoneyValue // (Final|Native|Public) // @ game+0x3634e00
	void AuthResetGame(); // Function ShooterGame.ShooterGameState.AuthResetGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthRemoveTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthRemoveTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthRecordPenalizedPlayerForRound(struct AShooterPlayerState* PenalizedPlayer); // Function ShooterGame.ShooterGameState.AuthRecordPenalizedPlayerForRound // (Final|Native|Public) // @ game+0x3634e00
	void AuthPostStrategicOutcome(struct FStrategicOutcomeOfRound& StrategicOutcome); // Function ShooterGame.ShooterGameState.AuthPostStrategicOutcome // (Final|Native|Public|HasOutParms) // @ game+0x3b9cb80
	void AuthPostChosenCeremonyForRound(struct AAresCeremony* ChosenCeremony); // Function ShooterGame.ShooterGameState.AuthPostChosenCeremonyForRound // (Final|Native|Public) // @ game+0x3634e00
	void AuthNotifyOnSkillTestStarted(); // Function ShooterGame.ShooterGameState.AuthNotifyOnSkillTestStarted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthNotifyOnSkillTestEnded(); // Function ShooterGame.ShooterGameState.AuthNotifyOnSkillTestEnded // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthNotifyNonPlayerActorKilled(struct AShooterPlayerState* KillerPlayer, struct AActor* KilledActor, struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterGameState.AuthNotifyNonPlayerActorKilled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634fc0
	int32_t AuthGetTeamInventoryAverageValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthGetTeamInventoryAverageValue // (Final|Native|Public) // @ game+0x3b8edd0
	void AuthDrawDebugTextOnAllClients(struct FString Text, struct FColor Color, float LifeTime); // Function ShooterGame.ShooterGameState.AuthDrawDebugTextOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults) // @ game+0x3b9ca50
	void AuthDrawDebugSphereOnAllClients(struct FVector& Center, float Radius, int32_t Segments, struct FColor& SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterGameState.AuthDrawDebugSphereOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults) // @ game+0x3b9c810
	void AuthDrawDebugLineOnAllClients(struct FVector& LineStart, struct FVector& LineEnd, struct FColor& LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterGameState.AuthDrawDebugLineOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults) // @ game+0x3b9c5c0
	void AuthDisassociatePlayer(struct AShooterPlayerState* PlayerState); // Function ShooterGame.ShooterGameState.AuthDisassociatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthCountTeamMoneyValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthCountTeamMoneyValue // (Final|Native|Public) // @ game+0x3634e00
	void AuthCancelMatchTimeout(); // Function ShooterGame.ShooterGameState.AuthCancelMatchTimeout // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthAddWinForTeam(struct UBaseTeamComponent* Team, enum class EAresRoundOutcome RoundResult); // Function ShooterGame.ShooterGameState.AuthAddWinForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36eab40
	void AuthAddPointsForTeam(struct UBaseTeamComponent* Team, int32_t NumPoints); // Function ShooterGame.ShooterGameState.AuthAddPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3636980
	void AuthAddNewTeam(struct UBaseTeamComponent* Team, enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.AuthAddNewTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x36eab40
	void ApplyNetworkDegradation(); // Function ShooterGame.ShooterGameState.ApplyNetworkDegradation // (Final|Native|Protected) // @ game+0x2024060
	bool AllowsMatchTimeouts(); // Function ShooterGame.ShooterGameState.AllowsMatchTimeouts // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3b9c590
	void AddDebugLine(struct FString Message); // Function ShooterGame.ShooterGameState.AddDebugLine // (Final|Native|Protected|BlueprintCallable) // @ game+0x2024240
};

// Class ShooterGame.ShooterGameUserSettings
// Size: 0x1d8 (Inherited: 0x130)
struct UShooterGameUserSettings : UGameUserSettings {
	struct FMulticastInlineDelegate OnMonitorInfoChanged; // 0x130(0x10)
	struct FString DefaultMonitorDeviceID; // 0x140(0x10)
	int32_t DefaultMonitorIndex; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct FString LastConfirmedDefaultMonitorDeviceID; // 0x158(0x10)
	int32_t LastConfirmedDefaultMonitorIndex; // 0x168(0x04)
	bool bShouldLetterbox; // 0x16c(0x01)
	bool bLastConfirmedShouldLetterbox; // 0x16d(0x01)
	char pad_16E[0x32]; // 0x16e(0x32)
	struct TArray<struct FAresMonitorInfo> AllMonitorInfo; // 0x1a0(0x10)
	char pad_1B0[0x20]; // 0x1b0(0x20)
	struct UAresSettingsManager* AresSettingsManager; // 0x1d0(0x08)

	void ValidateDefaultMonitor(); // Function ShooterGame.ShooterGameUserSettings.ValidateDefaultMonitor // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5f60
	void SetDefaultMonitorByIndex(int32_t Index); // Function ShooterGame.ShooterGameUserSettings.SetDefaultMonitorByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba58c0
	void SetDefaultMonitor(struct FString DeviceID, int32_t Index); // Function ShooterGame.ShooterGameUserSettings.SetDefaultMonitor // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba57d0
	void OnUIQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnUIQualityChanged // (Final|Native|Private) // @ game+0x3ba5560
	void OnTextureQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnTextureQualityChanged // (Final|Native|Private) // @ game+0x3ba5450
	void OnSettingsInitialized(); // Function ShooterGame.ShooterGameUserSettings.OnSettingsInitialized // (Final|Native|Private) // @ game+0x3ba5430
	void OnMouseInvertedChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.ShooterGameUserSettings.OnMouseInvertedChanged // (Final|Native|Private) // @ game+0x3ba5310
	void OnIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnIntSettingChanged // (Final|Native|Private) // @ game+0x3ba5200
	void OnIntGraphicsQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnIntGraphicsQualityChanged // (Final|Native|Private) // @ game+0x3ba50f0
	void OnGraphicsQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnGraphicsQualityChanged // (Final|Native|Private) // @ game+0x3ba4f50
	void OnBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ShooterGameUserSettings.OnBoolSettingChanged // (Final|Native|Private) // @ game+0x3ba4e30
	int32_t GetLastConfirmedDefaultMonitorIndex(); // Function ShooterGame.ShooterGameUserSettings.GetLastConfirmedDefaultMonitorIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba49b0
	struct FString GetLastConfirmedDefaultMonitorDeviceID(); // Function ShooterGame.ShooterGameUserSettings.GetLastConfirmedDefaultMonitorDeviceID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4970
	int32_t GetDefaultMonitorIndex(); // Function ShooterGame.ShooterGameUserSettings.GetDefaultMonitorIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4870
	struct FString GetDefaultMonitorDeviceID(); // Function ShooterGame.ShooterGameUserSettings.GetDefaultMonitorDeviceID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4830
};

// Class ShooterGame.ShooterHUD
// Size: 0xa68 (Inherited: 0x4d8)
struct AShooterHUD : AHUD {
	struct FAresHudTuning HudTuning; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
	struct FAresDebugHudTuning DebugHudTuning; // 0x4e0(0x80)
	struct FCharacterHUD CharacterDisplay; // 0x560(0x60)
	struct FAnnouncerHUD AnnouncerDisplay; // 0x5c0(0x04)
	char pad_5C4[0x4]; // 0x5c4(0x04)
	struct FCanvasIcon SprayVelocityIndicatorIcon; // 0x5c8(0x18)
	struct FCanvasIcon RemoteActivatableHighlightIcon; // 0x5e0(0x18)
	struct FColor CrossHairDrawColor; // 0x5f8(0x04)
	char pad_5FC[0x14]; // 0x5fc(0x14)
	struct UFont* BigFont; // 0x610(0x08)
	struct UFont* NormalFont; // 0x618(0x08)
	struct UFont* CustomFont; // 0x620(0x08)
	struct UFont* CustomFont2; // 0x628(0x08)
	struct UFont* CustomFont3; // 0x630(0x08)
	struct UFont* EndOfRoundFont; // 0x638(0x08)
	struct UFont* FixedWidthFont; // 0x640(0x08)
	float IntentionPortraitPadding; // 0x648(0x04)
	char pad_64C[0x4]; // 0x64c(0x04)
	struct UTexture* IntentionHighlightTexture; // 0x650(0x08)
	struct UTexture* MissingIntentionPortraitTexture; // 0x658(0x08)
	char pad_660[0x8]; // 0x660(0x08)
	struct UShooterUICoordinator* Coordinator; // 0x668(0x08)
	struct TWeakObjectPtr<struct UAresWidgetRegistry> CachedWidgetRegistry; // 0x670(0x08)
	struct FColor HUDLight; // 0x678(0x04)
	struct FColor HUDDark; // 0x67c(0x04)
	struct FCanvasIcon VictoryIcon; // 0x680(0x18)
	struct FCanvasIcon DefeatIcon; // 0x698(0x18)
	struct FCanvasIcon TieIcon; // 0x6b0(0x18)
	char pad_6C8[0x4]; // 0x6c8(0x04)
	bool bDisableHitNotify; // 0x6cc(0x01)
	char pad_6CD[0x3]; // 0x6cd(0x03)
	float HitNotifyDisplayTime; // 0x6d0(0x04)
	struct FVector HitNotifyCenterOffset; // 0x6d4(0x0c)
	float HitNotifyMinimumAlpha; // 0x6e0(0x04)
	struct FColor HitNotifyHealthColor; // 0x6e4(0x04)
	struct FColor HitNotifyShieldColor; // 0x6e8(0x04)
	float YouHitEnemyFullAlphaTime; // 0x6ec(0x04)
	float YouHitEnemyFadeTime; // 0x6f0(0x04)
	float YouHitEnemyFadeFraction1; // 0x6f4(0x04)
	float YouHitEnemyFadeHeight1; // 0x6f8(0x04)
	float KillConfirmFullAlphaTime; // 0x6fc(0x04)
	float KillConfirmFadeTime; // 0x700(0x04)
	float KillConfirmFullAlpha; // 0x704(0x04)
	float KillConfirmPulseInTime; // 0x708(0x04)
	float KillConfirmPulseScale; // 0x70c(0x04)
	struct FCanvasIcon KillNotifyCrosshair; // 0x710(0x18)
	float GrenadeIndicatorHudRadius; // 0x728(0x04)
	char pad_72C[0x8]; // 0x72c(0x08)
	float FXEndTime; // 0x734(0x04)
	float FXStartTime; // 0x738(0x04)
	char pad_73C[0x4]; // 0x73c(0x04)
	struct UMaterialInstanceDynamic* AbilityFXMaterial; // 0x740(0x08)
	float ParticleSystemEndTime; // 0x748(0x04)
	char pad_74C[0x4]; // 0x74c(0x04)
	struct UParticleSystemComponent* AbilityParticleSystem; // 0x750(0x08)
	struct FCanvasIcon HitNotifyIcon; // 0x758(0x18)
	struct FCanvasIcon Crosshair[0x5]; // 0x770(0x78)
	struct FCanvasIcon HitNotifyCrosshair; // 0x7e8(0x18)
	char pad_800[0x30]; // 0x800(0x30)
	float OffscreenNameAllowPercentage; // 0x830(0x04)
	float NameOffsetHeight; // 0x834(0x04)
	struct FColor PlayerNames_AllyTeamColor; // 0x838(0x04)
	struct FColor PlayerNames_EnemyTeamColor; // 0x83c(0x04)
	struct FColor PlayerNames_NeutralTeamColor; // 0x840(0x04)
	struct FColor PlayerNames_FullHealthColor; // 0x844(0x04)
	struct FColor PlayerNames_ZeroHealthColor; // 0x848(0x04)
	float PlayerNames_HealthTextScale; // 0x84c(0x04)
	struct UTexture2D* HitNotifyTexture; // 0x850(0x08)
	struct UTexture2D* HUDMainTexture; // 0x858(0x08)
	struct UTexture2D* HUDAssets02Texture; // 0x860(0x08)
	struct UTexture2D* LowHealthOverlayTexture; // 0x868(0x08)
	struct UTexture2D* CrossHairIcon; // 0x870(0x08)
	struct UTexture2D* AllyDownWorldspaceIcon; // 0x878(0x08)
	struct FVector AllyDownWorldspaceIconOffset; // 0x880(0x0c)
	struct FColor UsingBarColor; // 0x88c(0x04)
	struct FColor UsingMessageColor; // 0x890(0x04)
	struct FColor UsingIconTint; // 0x894(0x04)
	float UsingHUD_TextDistanceFromIcon; // 0x898(0x04)
	float UsingHUD_TextHeight; // 0x89c(0x04)
	float UsingHUD_PaddingBetweenTextMessages; // 0x8a0(0x04)
	char pad_8A4[0x44]; // 0x8a4(0x44)
	struct FMulticastInlineDelegate ShooterHUDElementsFinished; // 0x8e8(0x10)
	struct FMulticastInlineDelegate SetShowBlindOverlayUpdated; // 0x8f8(0x10)
	struct FMulticastInlineDelegate ShowKillBannerUpdated; // 0x908(0x10)
	struct UPanelWidget* AbilityHUDParent; // 0x918(0x08)
	char pad_920[0x1]; // 0x920(0x01)
	bool bShowBlindOverlay; // 0x921(0x01)
	bool bShowKillBanners; // 0x922(0x01)
	char pad_923[0x5]; // 0x923(0x05)
	struct TArray<struct UAresHudElement*> DebugHudElementClasses; // 0x928(0x10)
	struct TArray<struct UAresHudElement*> HUDElements; // 0x938(0x10)
	struct UBaseCrosshairHudElement* CrosshairHUDElement; // 0x948(0x08)
	bool bHudElementsInitCalled; // 0x950(0x01)
	char pad_951[0xef]; // 0x951(0xef)
	struct TArray<struct AActor*> QueuedActorsForDebugDrawName; // 0xa40(0x10)
	struct TArray<struct USceneComponent*> QueuedComponentsForDebugDrawName; // 0xa50(0x10)
	char pad_A60[0x4]; // 0xa60(0x04)
	float LastUpdateTime; // 0xa64(0x04)

	void StopAbilityHUDParticle(); // Function ShooterGame.ShooterHUD.StopAbilityHUDParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5f40
	void StopAbilityHUDFX(); // Function ShooterGame.ShooterHUD.StopAbilityHUDFX // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5f20
	struct UParticleSystemComponent* StartAbilityHUDParticle(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachSocket, float EffectDuration, bool bAutoDestoy); // Function ShooterGame.ShooterHUD.StartAbilityHUDParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5d70
	struct UMaterialInstanceDynamic* StartAbilityHUDFX(struct UMaterialInstance* HUDEffectMaterialMI, float EffectDuration); // Function ShooterGame.ShooterHUD.StartAbilityHUDFX // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5ca0
	void ShowClientErrorMessageText(struct FText& Text, float Duration); // Function ShooterGame.ShooterHUD.ShowClientErrorMessageText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ba5b60
	void ShowClientErrorMessage(struct FString Text, float Duration); // Function ShooterGame.ShooterHUD.ShowClientErrorMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5a70
	void SetShowCrosshair(bool bInShowCrosshair); // Function ShooterGame.ShooterHUD.SetShowCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba59e0
	void SetInformationalScreenVisibility(bool Visible); // Function ShooterGame.ShooterHUD.SetInformationalScreenVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba5950
	void SetAbilityHUDParent(struct UPanelWidget* NewAbilityHUDParent); // Function ShooterGame.ShooterHUD.SetAbilityHUDParent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3ba5740
	void RemoveWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.ShooterHUD.RemoveWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3ba5670
	void OnPlayerHit(float DamageTaken, struct APawn* PawnInstigator, struct AShooterCharacter* HitPawn); // Function ShooterGame.ShooterHUD.OnPlayerHit // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnPlayerHealed(float HealAmount, struct APawn* PawnInstigator, struct AShooterCharacter* HealedPawn); // Function ShooterGame.ShooterHUD.OnPlayerHealed // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
	void OnHideHUDChanged(bool bHideUI); // Function ShooterGame.ShooterHUD.OnHideHUDChanged // (Final|Native|Public) // @ game+0x3ba5060
	void OnBlindSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.ShooterHUD.OnBlindSettingChanged // (Final|Native|Protected) // @ game+0x3ba4d10
	void NotifyEnemyKilled(struct AShooterCharacter* KilledCharacter, int32_t MultikillLevel); // Function ShooterGame.ShooterHUD.NotifyEnemyKilled // (Final|Native|Public) // @ game+0x3ba4c40
	void NotifyEnemyHit(); // Function ShooterGame.ShooterHUD.NotifyEnemyHit // (Final|Native|Public|BlueprintCallable) // @ game+0x3ba4c20
	struct UUserWidget* LookupWidget(struct UUserWidget* WidgetClass); // Function ShooterGame.ShooterHUD.LookupWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3ba4b80
	bool IsBehindCamera(struct AActor* TargetActor, struct FVector CameraAimVector, struct FVector CameraLocation); // Function ShooterGame.ShooterHUD.IsBehindCamera // (Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4a40
	struct UAresWidgetRegistry* GetWidgetRegistry(); // Function ShooterGame.ShooterHUD.GetWidgetRegistry // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ba4a10
	float GetScaleUI(); // Function ShooterGame.ShooterHUD.GetScaleUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba49e0
	bool GetInformationalScreenVisibility(); // Function ShooterGame.ShooterHUD.GetInformationalScreenVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4940
	struct UAresHudElement* GetHudElementByClass(struct UAresHudElement* ElementClass); // Function ShooterGame.ShooterHUD.GetHudElementByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba48a0
	struct UCoordinatedHUDElement* GetCoordinatedHudElementByClass(struct UCoordinatedHUDElement* ElementClass); // Function ShooterGame.ShooterHUD.GetCoordinatedHudElementByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4790
	struct FVector2D GetCanvasExtents(); // Function ShooterGame.ShooterHUD.GetCanvasExtents // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x3ba4750
	struct UPanelWidget* GetAbilityHUDParent(struct UObject* WorldContextObject); // Function ShooterGame.ShooterHUD.GetAbilityHUDParent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ba46c0
	void DrawWorldspaceText(struct FVector& WorldspaceLocation, struct UFont* InFont, struct FString InText, struct FColor& TextColor, float XScale, float YScale); // Function ShooterGame.ShooterHUD.DrawWorldspaceText // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba44b0
	void DrawWorldspaceLocalizedText(struct FVector& WorldspaceLocation, struct UFont* InFont, struct FText& InText, struct FColor& TextColor, float XScale, float YScale); // Function ShooterGame.ShooterHUD.DrawWorldspaceLocalizedText // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4220
	void DrawWorldspaceIndicator(struct FVector& WorldspaceLocation, struct UTexture* IndicatorTexture, float IconScale, enum class EIconJustification IconJustification, struct FColor IconTint); // Function ShooterGame.ShooterHUD.DrawWorldspaceIndicator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ba4070
	void AddWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.ShooterHUD.AddWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x3ba3fa0
};

// Class ShooterGame.ShooterLocalPlayer
// Size: 0x268 (Inherited: 0x268)
struct UShooterLocalPlayer : ULocalPlayer {
};

// Class ShooterGame.ShooterManifestBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UShooterManifestBlueprintLibrary : UBlueprintFunctionLibrary {
};

// Class ShooterGame.ClickableMapWidget
// Size: 0x2d8 (Inherited: 0x2d8)
struct UClickableMapWidget : UCoordinatedHUDElement {

	void UpdateZoom(float ZoomDelta); // Function ShooterGame.ClickableMapWidget.UpdateZoom // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void SecondaryActionPressed(); // Function ShooterGame.ClickableMapWidget.SecondaryActionPressed // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void PrimaryActionPressed(); // Function ShooterGame.ClickableMapWidget.PrimaryActionPressed // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void MoveMapCenter(struct FVector2D NewCenter); // Function ShooterGame.ClickableMapWidget.MoveMapCenter // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x40572e0
	void EndMapInteractions(); // Function ShooterGame.ClickableMapWidget.EndMapInteractions // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void CycleMapFloors(); // Function ShooterGame.ClickableMapWidget.CycleMapFloors // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void BeginMapInteractions(); // Function ShooterGame.ClickableMapWidget.BeginMapInteractions // (Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShooterMinimapDeprecated
// Size: 0x3d8 (Inherited: 0x3d8)
struct AShooterMinimapDeprecated : AInfo {
};

// Class ShooterGame.ShooterPlayerController_Menu
// Size: 0x750 (Inherited: 0x750)
struct AShooterPlayerController_Menu : APlayerController {
};

// Class ShooterGame.ShooterPlayerControllerDebugComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UShooterPlayerControllerDebugComponent : UActorComponent {

	void ServerWatchCurrentCharacterForDebugCharacterNetworking(struct UShooterCharacterDebugComponent* ShooterCharacterDebugComponentToWatch, bool bSet); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerWatchCurrentCharacterForDebugCharacterNetworking // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9960
	void ServerToggleTeam(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerToggleTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9930
	void ServerToggleDebugSubscription(enum class EDebugSubscription Subscription); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerToggleDebugSubscription // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9870
	void ServerSuicide(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSuicide // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9840
	void ServerSetWinsForTeam(int32_t Wins); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetWinsForTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb97b0
	void ServerSetTeamMoney(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetTeamMoney // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3b6fa70
	void ServerSetTeam(struct FString TeamName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9700
	void ServerSetRoundNumber(int32_t RoundNum); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetRoundNumber // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9670
	void ServerSetPointsForTeam(int32_t Points); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetPointsForTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x379c100
	void ServerSetPlayerName(struct FString NewName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetPlayerName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb95c0
	void ServerSetHealth(int32_t NewHealth); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9450
	void ServerSetGameSpeed(float T); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameSpeed // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb93c0
	void ServerSetGameRuleBool(enum class EGameRuleBoolName GameRuleName, bool bEnabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameRuleBool // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb92e0
	void ServerSetGameFeatureFloatConfig(enum class EGameFeatureFloatConfigName GameFeatureFloatConfigName, float ConfigValue); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameFeatureFloatConfig // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x3bb9210
	void ServerSetGameFeatureEnabled(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameFeatureEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9130
	void ServerSetDesiredClassAndRespawn(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDesiredClassAndRespawn // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9080
	void ServerSetDesiredClass(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDesiredClass // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8fd0
	void ServerSetDefaultWeapon(struct FString DebugMessage); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDefaultWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8f20
	void ServerSetDebugSubscription(enum class EDebugSubscription Subscription, bool bNewState); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDebugSubscription // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8e40
	void ServerSetCheatInvulnerable(int32_t Enabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetCheatInvulnerable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8db0
	void ServerRespawn(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerRespawn // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3785c30
	void ServerRefreshInventory(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerRefreshInventory // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36725a0
	void ServerProgressAccolade(struct FString Accolade, int32_t Progress); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerProgressAccolade // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8cb0
	void ServerPlayerControllerCheat(struct FString CheatString); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerPlayerControllerCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8c00
	void ServerModifyTotemLoadout(struct UTotemDataAsset* SocketAsset, int32_t SlotIndex); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerModifyTotemLoadout // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8b20
	void ServerModifySprayLoadoutV2(struct USprayLevelDataAsset* SprayAsset, int32_t SlotIndex); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerModifySprayLoadoutV2 // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8a40
	void ServerModifyHealth(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerModifyHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb89b0
	void ServerGunSkinModifySkinLevel(int32_t Level); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifySkinLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8920
	void ServerGunSkinModifySkinByEquippable(struct UEquippableSkinDataAsset* SkinDataAsset, struct UEquippableDataAsset* EquippableDataAsset, struct UEquippableSkinChromaDataAsset* GunSkinChromaAsset, int32_t Level); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifySkinByEquippable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb87d0
	void ServerGunSkinModifySkin(struct UEquippableSkinDataAsset* SkinDataAsset); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifySkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8740
	void ServerGunSkinModifyChromaByName(struct FString Chroma); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyChromaByName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8690
	void ServerGunSkinModifyCharmLevel(int32_t Level); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyCharmLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8600
	void ServerGunSkinModifyCharmByName(struct FString Charm); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyCharmByName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8550
	void ServerGunSkinModifyAttachmentByIndex(bool bRemove, int32_t AttachmentIndex); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyAttachmentByIndex // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8470
	void ServerGunSkinClearAll(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinClearAll // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3671a00
	void ServerGrantPurchasable(struct AAresItem* ItemToPurchase, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantPurchasable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8390
	void ServerGrantMoney(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantMoney // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8300
	void ServerGrantEquippable(struct AAresEquippable* ClassToGrant); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantEquippable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8270
	void ServerGrantAllAbilities(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantAllAbilities // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8240
	void ServerGiveUltimatePoints(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGiveUltimatePoints // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb81b0
	void ServerGiveUltimate(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGiveUltimate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb8180
	void ServerGameModeCheat(struct FString CheatString); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGameModeCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb80d0
	void ServerForceRefreshPrespawnWeaponCache(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerForceRefreshPrespawnWeaponCache // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x37cd810
	void ServerDrawDebugTextOnAllClients(struct FString Text, struct FColor Color, float LifeTime); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDrawDebugTextOnAllClients // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3bb7f90
	void ServerDrawDebugSphereOnAllClients(struct FVector Center, float Radius, int32_t Segments, struct FColor SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDrawDebugSphereOnAllClients // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3bb7d70
	void ServerDrawDebugLineOnAllClients(struct FVector LineStart, struct FVector LineEnd, struct FColor LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDrawDebugLineOnAllClients // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3bb7b50
	void ServerDamageSelf(float Damage); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDamageSelf // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x377fe30
	void ServerCycleOrbInSlot(int32_t Slot); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCycleOrbInSlot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7ac0
	void ServerCheatWinGame(bool ShouldMatchDisablePenalties); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatWinGame // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb78d0
	void ServerCheatWalk(struct ACharacter* TargetCharacter); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatWalk // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7840
	void ServerCheatToggleAfkDetection(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatToggleAfkDetection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3654e70
	void ServerCheatSwapTeams(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSwapTeams // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7810
	void ServerCheatSetTickRate(int32_t TickRate); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetTickRate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7780
	void ServerCheatSetTeamForAll(struct FString TeamName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetTeamForAll // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb76d0
	void ServerCheatSetPositionAndRotation(struct ACharacter* TargetCharacter, struct FVector Position, struct FRotator Rotation); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetPositionAndRotation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x3bb7580
	void ServerCheatSetCompetitiveTier(int32_t NewTier); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetCompetitiveTier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb74f0
	void ServerCheatRestartGame(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatRestartGame // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x374c410
	void ServerCheatResetCombatStats(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatResetCombatStats // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x36eb5e0
	void ServerCheatOverrideCurrentStateTimer(float Seconds); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatOverrideCurrentStateTimer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7460
	void ServerCheatGhost(struct ACharacter* TargetCharacter); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatGhost // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb73d0
	void ServerCheatForceCeremony(struct FString ClassName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatForceCeremony // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7320
	void ServerCheatFly(struct ACharacter* TargetCharacter); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatFly // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7290
	void ServerCheatEndGamePhase(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatEndGamePhase // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x374c350
	void ServerCheatAssignMission(struct FString MissionName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatAssignMission // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb71e0
	void ServerCheatAdvanceToOvertime(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatAdvanceToOvertime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x374c440
	void ServerCheat(struct FString Msg); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7130
	void ServerCalculateBehaviorFactors(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCalculateBehaviorFactors // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7100
	void ServerAddVacanciesForTeam(struct FString TeamName, char Count); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerAddVacanciesForTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7000
	void ServerActivateRoundRestore(int32_t RoundToRestore); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerActivateRoundRestore // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb6f70
	void ReportNetEmulationSettingsChanged(struct UNetDriver* Driver, struct FPacketSimulationSettings& NewSettings); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ReportNetEmulationSettingsChanged // (Final|Native|Public|HasOutParms) // @ game+0x3bb6e70
	void ClientErrorMessage(struct FString DebugMessage); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ClientErrorMessage // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x3bb60e0
};

// Class ShooterGame.ShooterPlayerState
// Size: 0xa28 (Inherited: 0x678)
struct AShooterPlayerState : AAresPlayerStateBase {
	char pad_678[0x30]; // 0x678(0x30)
	struct FMulticastInlineDelegate OnDesiredClassDefaultObjectChanged; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnSpawnedCharacterChanged; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnPossessedCharacterChanged; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnPossessedCharacterChangedWithPrevCharacter; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnNumUltimatePointsChanged; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnTotalAcquiredUltimatePointsChanged; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnEquippableChargeInfosChanged; // 0x708(0x10)
	struct FMulticastInlineDelegate OnAliveStateChanged; // 0x718(0x10)
	struct FMulticastInlineDelegate AuthOnAliveStateChanged; // 0x728(0x10)
	struct FMulticastInlineDelegate AuthOnUltimateReadyStatusChanged; // 0x738(0x10)
	struct FMulticastInlineDelegate AuthOnUltimatePointsGiven; // 0x748(0x10)
	struct AOwnerExclusivePlayerInfo* PlayerInfo; // 0x758(0x08)
	struct UCombatReportComponent* CombatReportType; // 0x760(0x08)
	struct TArray<struct FGuid> AccessibleCharacterList; // 0x768(0x10)
	struct UBasicCombatStatsComponent* BasicCombatStatsComponent; // 0x778(0x08)
	struct UMoneyManagementComponent* MoneyManagementComponent; // 0x780(0x08)
	struct UPlayerScoreComponent* PlayerScoreComponent; // 0x788(0x08)
	struct UGunRequestComponent* GunRequestComponent; // 0x790(0x08)
	struct UAccoladeManagerComponent* AccoladeManagerComponent; // 0x798(0x08)
	struct UMissionManagerComponent* MissionManagerComponent; // 0x7a0(0x08)
	struct UBasePlayerStateTelemetryComponent* PlayerStateTelemetryComponent; // 0x7a8(0x08)
	struct UEquippableEventPlayerStateComponent* EquippableEventComponent; // 0x7b0(0x08)
	struct UPlayerDiscrepancyDetectionComponent* PlayerDiscrepancyDetectionComponent; // 0x7b8(0x08)
	struct UAFKDetectionComponent* AFKDetectionComponent; // 0x7c0(0x08)
	struct UAFKDetectionComponent* AFKHandlingType; // 0x7c8(0x08)
	struct UFeedingDetectionComponent* FeedingDetectionComponent; // 0x7d0(0x08)
	struct UFeedingDetectionComponent* FeedingHandlingType; // 0x7d8(0x08)
	struct UContextAwareModuleManagerComponent* ContextAwareModuleManagerComponent; // 0x7e0(0x08)
	struct FCrosshairSettings CrosshairSettings; // 0x7e8(0x130)
	struct AShooterCharacter* SpawnedCharacter; // 0x918(0x08)
	struct AShooterCharacter* ClientPrevSpawnedCharacter; // 0x920(0x08)
	struct AShooterCharacter* PossessedCharacter; // 0x928(0x08)
	int32_t NumUltimatePoints; // 0x930(0x04)
	int32_t TotalAcquiredUltimatePoints; // 0x934(0x04)
	int32_t NumRefundableUltimatePoints; // 0x938(0x04)
	char pad_93C[0x4]; // 0x93c(0x04)
	struct TMap<enum class ERewardSource, int32_t> AcquiredUltPointsBySource; // 0x940(0x50)
	struct TArray<struct AShooterPlayerState*> MapPingsMuted; // 0x990(0x10)
	struct FGuid DesiredClass; // 0x9a0(0x10)
	bool bIsDropInPlayer; // 0x9b0(0x01)
	char pad_9B1[0x3]; // 0x9b1(0x03)
	struct FGuid AuthNextRoundClass; // 0x9b4(0x10)
	bool bIsCheatInvulnerable; // 0x9c4(0x01)
	bool bIsCheatAutoResurrect; // 0x9c5(0x01)
	char pad_9C6[0x2]; // 0x9c6(0x02)
	struct FVector AutoResurrectLocation; // 0x9c8(0x0c)
	struct FRotator AutoResurrectRotation; // 0x9d4(0x0c)
	bool bIsCheatGhost; // 0x9e0(0x01)
	char pad_9E1[0x3]; // 0x9e1(0x03)
	int32_t CombatReportIndex; // 0x9e4(0x04)
	struct TArray<struct TSoftClassPtr<UObject>> DebugDefaultWheelSprays; // 0x9e8(0x10)
	bool bAllowAgentSpecificKeybinds; // 0x9f8(0x01)
	bool bShouldInitCoach; // 0x9f9(0x01)
	bool bIsCoach; // 0x9fa(0x01)
	char pad_9FB[0x1]; // 0x9fb(0x01)
	struct FName AuthCoachTeam; // 0x9fc(0x0c)
	struct FMulticastInlineDelegate OnSuppressRevealed; // 0xa08(0x10)
	struct FMulticastInlineDelegate OnCoachInitialized; // 0xa18(0x10)

	struct UServerPlayerStateTelemetryComponent* TryGetServerPlayerStateTelemetryComponent(); // Function ShooterGame.ShooterPlayerState.TryGetServerPlayerStateTelemetryComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288a7f0
	struct UCharacterDataAsset* TryGetDesiredClassDataAsset(); // Function ShooterGame.ShooterPlayerState.TryGetDesiredClassDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb9b90
	struct UClientPlayerStateTelemetryComponent* TryGetClientPlayerStateTelemetryComponent(); // Function ShooterGame.ShooterPlayerState.TryGetClientPlayerStateTelemetryComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb9b60
	struct UBasePlayerStateTelemetryComponent* TryGetBasePlayerStateTelemetryComponent(); // Function ShooterGame.ShooterPlayerState.TryGetBasePlayerStateTelemetryComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb9b30
	void Tick(float DeltaSeconds); // Function ShooterGame.ShooterPlayerState.Tick // (Native|Public) // @ game+0x3690ff0
	void SetMapPingsMuted(struct AShooterPlayerState* ForPlayerState, bool bMuted); // Function ShooterGame.ShooterPlayerState.SetMapPingsMuted // (Final|Native|Public|BlueprintCallable) // @ game+0x3bb9a60
	void SetAutoResurrectPoint(); // Function ShooterGame.ShooterPlayerState.SetAutoResurrectPoint // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bb9a40
	void ServerToggleTeam(); // Function ShooterGame.ShooterPlayerState.ServerToggleTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb9900
	void ServerSetMapPingsMuted(struct AShooterPlayerState* ForPlayerState, bool bMuted); // Function ShooterGame.ShooterPlayerState.ServerSetMapPingsMuted // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3bb94e0
	void ServerCrosshairSettingsUpdate(struct FCrosshairSettings NewCrosshairSettings); // Function ShooterGame.ShooterPlayerState.ServerCrosshairSettingsUpdate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x3bb7970
	void RemoveAutoResurrectPoint(); // Function ShooterGame.ShooterPlayerState.RemoveAutoResurrectPoint // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bb6e50
	void OnSpawnedCharacterAliveStateChanged(bool bNewAlive); // Function ShooterGame.ShooterPlayerState.OnSpawnedCharacterAliveStateChanged // (Final|Native|Protected) // @ game+0x3bb6dc0
	void OnRep_TotalAcquiredUltimatePoints(); // Function ShooterGame.ShooterPlayerState.OnRep_TotalAcquiredUltimatePoints // (Final|Native|Protected) // @ game+0x3bb6da0
	void OnRep_SpawnedCharacter(struct AShooterCharacter* PreviousSpawnedCharacter); // Function ShooterGame.ShooterPlayerState.OnRep_SpawnedCharacter // (Final|Native|Protected) // @ game+0x3bb6d10
	void OnRep_ShouldInitCoach(); // Function ShooterGame.ShooterPlayerState.OnRep_ShouldInitCoach // (Final|Native|Protected) // @ game+0x3bb6cf0
	void OnRep_PossessedCharacter(struct AShooterCharacter* PrevCharacter); // Function ShooterGame.ShooterPlayerState.OnRep_PossessedCharacter // (Final|Native|Protected) // @ game+0x3bb6c60
	void OnRep_NumUltimatePoints(); // Function ShooterGame.ShooterPlayerState.OnRep_NumUltimatePoints // (Final|Native|Protected) // @ game+0x3bb6c40
	void OnRep_DesiredClass(); // Function ShooterGame.ShooterPlayerState.OnRep_DesiredClass // (Final|Native|Protected) // @ game+0x3bb6c20
	void OnRep_AFKComponent(struct UAFKDetectionComponent* PreviousAFKDetectionComponent); // Function ShooterGame.ShooterPlayerState.OnRep_AFKComponent // (Final|Native|Protected) // @ game+0x3bb6b90
	void OnCrosshairSettingsReceived(); // Function ShooterGame.ShooterPlayerState.OnCrosshairSettingsReceived // (Final|Native|Protected) // @ game+0x3bb6b70
	void OnAFKStatusChanged(struct AShooterPlayerState* ShooterPlayerState, bool bIsAFK); // Function ShooterGame.ShooterPlayerState.OnAFKStatusChanged // (Final|Native|Protected) // @ game+0x3bb6aa0
	bool IsUltimateReady(); // Function ShooterGame.ShooterPlayerState.IsUltimateReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6a70
	bool IsCoach(); // Function ShooterGame.ShooterPlayerState.IsCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6a40
	bool IsCheatInvulnerable(); // Function ShooterGame.ShooterPlayerState.IsCheatInvulnerable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6a10
	bool IsCheatGhost(); // Function ShooterGame.ShooterPlayerState.IsCheatGhost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb69e0
	bool IsCheatAutoResurrect(); // Function ShooterGame.ShooterPlayerState.IsCheatAutoResurrect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb69b0
	bool IsAlive(); // Function ShooterGame.ShooterPlayerState.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6980
	void InitCoachModeCommon(); // Function ShooterGame.ShooterPlayerState.InitCoachModeCommon // (Final|Native|Protected) // @ game+0x3bb6960
	void IncrementCombatReportIndex(); // Function ShooterGame.ShooterPlayerState.IncrementCombatReportIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3bb6940
	int32_t GetTotalAcquiredUltimatePoints(); // Function ShooterGame.ShooterPlayerState.GetTotalAcquiredUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6910
	float GetTimeUntilRespawn(); // Function ShooterGame.ShooterPlayerState.GetTimeUntilRespawn // (Final|Native|Public|Const) // @ game+0x38821e0
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.ShooterPlayerState.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb68e0
	struct AShooterPlayerController* GetShooterPlayerController(); // Function ShooterGame.ShooterPlayerState.GetShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb68b0
	int32_t GetRespawnTime(); // Function ShooterGame.ShooterPlayerState.GetRespawnTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6880
	struct AAresRespawnManager* GetRespawnManager(); // Function ShooterGame.ShooterPlayerState.GetRespawnManager // (Final|Native|Public|BlueprintCallable) // @ game+0x3bb6850
	struct AShooterCharacter* GetPossessedCharacter(); // Function ShooterGame.ShooterPlayerState.GetPossessedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6820
	struct TArray<struct AAresPlayerStateBase*> GetPlayersSpectating(bool bOmitCoaches); // Function ShooterGame.ShooterPlayerState.GetPlayersSpectating // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6740
	struct UPlayerScoreComponent* GetPlayerScoreComponent(); // Function ShooterGame.ShooterPlayerState.GetPlayerScoreComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6710
	struct AOwnerExclusivePlayerInfo* GetOwnerExclusivePlayerInfo(); // Function ShooterGame.ShooterPlayerState.GetOwnerExclusivePlayerInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb66e0
	int32_t GetNumUltimatePoints(); // Function ShooterGame.ShooterPlayerState.GetNumUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb66b0
	int32_t GetNumRefundableUltimatePoints(); // Function ShooterGame.ShooterPlayerState.GetNumRefundableUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6680
	int32_t GetNumPointsNeededForUltimate(); // Function ShooterGame.ShooterPlayerState.GetNumPointsNeededForUltimate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6650
	struct UMoneyManagementComponent* GetMoneyManagementComponent(); // Function ShooterGame.ShooterPlayerState.GetMoneyManagementComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6620
	int32_t GetMoney(); // Function ShooterGame.ShooterPlayerState.GetMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb65f0
	struct UMissionManagerComponent* GetMissionManagerComponent(); // Function ShooterGame.ShooterPlayerState.GetMissionManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb65c0
	bool GetIsPenalizedForBeingAway(); // Function ShooterGame.ShooterPlayerState.GetIsPenalizedForBeingAway // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6590
	bool GetIsFeeding(); // Function ShooterGame.ShooterPlayerState.GetIsFeeding // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6560
	bool GetIsAFK(); // Function ShooterGame.ShooterPlayerState.GetIsAFK // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6530
	struct UGunRequestComponent* GetGunRequestComponent(); // Function ShooterGame.ShooterPlayerState.GetGunRequestComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6500
	struct UFeedingDetectionComponent* GetFeedingDetectionComponent(); // Function ShooterGame.ShooterPlayerState.GetFeedingDetectionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb64d0
	struct UEquippableEventPlayerStateComponent* GetEquippableEventComponent(); // Function ShooterGame.ShooterPlayerState.GetEquippableEventComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb64a0
	struct FGuid GetDesiredClassUuid(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassUuid // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6460
	struct UCharacterUIData* GetDesiredClassUIData(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassUIData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6430
	struct FText GetDesiredClassText(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6380
	struct FName GetDesiredClassDeveloperName(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassDeveloperName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6340
	struct AShooterCharacter* GetDesiredClassDefaultObject(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassDefaultObject // (Final|Native|Public|Const) // @ game+0x3bb6310
	struct APawn* GetDesiredClass(); // Function ShooterGame.ShooterPlayerState.GetDesiredClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb62d0
	struct UTexture* GetDefaultClassSmallCharacterIcon(); // Function ShooterGame.ShooterPlayerState.GetDefaultClassSmallCharacterIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb62a0
	struct UTexture* GetDefaultClassCharacterIcon(); // Function ShooterGame.ShooterPlayerState.GetDefaultClassCharacterIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6270
	struct FCrosshairSettings GetCrosshairSettings(); // Function ShooterGame.ShooterPlayerState.GetCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bb6230
	struct UCombatReportComponent* GetCombatReportType(); // Function ShooterGame.ShooterPlayerState.GetCombatReportType // (Final|Native|Public|BlueprintCallable) // @ game+0x3bb61f0
	struct UBasicCombatStatsComponent* GetBasicCombatStatsComponent(); // Function ShooterGame.ShooterPlayerState.GetBasicCombatStatsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb61c0
	struct UAFKDetectionComponent* GetAFKDetectionComponent(); // Function ShooterGame.ShooterPlayerState.GetAFKDetectionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6190
	bool CharacterIsUnlocked(struct UCharacterDataAsset* Character); // Function ShooterGame.ShooterPlayerState.CharacterIsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6040
	bool CanPossessPawns(); // Function ShooterGame.ShooterPlayerState.CanPossessPawns // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb6010
	void BroadcastEquippableChargeInfosChanged(); // Function ShooterGame.ShooterPlayerState.BroadcastEquippableChargeInfosChanged // (Final|Native|Public) // @ game+0x3bb5ff0
	void AutomationAuthBecomeCoach(); // Function ShooterGame.ShooterPlayerState.AutomationAuthBecomeCoach // (Final|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthToggleTeam(); // Function ShooterGame.ShooterPlayerState.AuthToggleTeam // (Final|Native|Public) // @ game+0x2024060
	void AuthSetUltimatePoints(int32_t NewUltimatePoints, enum class EIsRefundable Refundable, bool bWasAcquired, enum class ERewardSource Source); // Function ShooterGame.ShooterPlayerState.AuthSetUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bb5e90
	bool AuthSetDesiredClassName(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerState.AuthSetDesiredClassName // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bb5dd0
	bool AuthSetDesiredClassByClass(struct UCharacterDataAsset* CharacterClass); // Function ShooterGame.ShooterPlayerState.AuthSetDesiredClassByClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a54c50
	bool AuthSetDesiredClass(struct FGuid& NewDesiredClass); // Function ShooterGame.ShooterPlayerState.AuthSetDesiredClass // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3bb5d20
	void AuthSetClassForNextRound(struct FGuid& NewNextRoundClass); // Function ShooterGame.ShooterPlayerState.AuthSetClassForNextRound // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3bb5c80
	void AuthSetCheatInvulnerable(bool bEnabled); // Function ShooterGame.ShooterPlayerState.AuthSetCheatInvulnerable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetCheatGhost(bool bEnabled); // Function ShooterGame.ShooterPlayerState.AuthSetCheatGhost // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthSetCheatAutoResurrect(bool bEnabled); // Function ShooterGame.ShooterPlayerState.AuthSetCheatAutoResurrect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
	void AuthResetUltimatePoints(); // Function ShooterGame.ShooterPlayerState.AuthResetUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void AuthRemoveUltimatePoints(int32_t UltimatePointsToRemove, enum class EIsRefundable Refundable, enum class ERewardSource Source); // Function ShooterGame.ShooterPlayerState.AuthRemoveUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bb5ad0
	void AuthInitCoachMode(struct FName& TeamName); // Function ShooterGame.ShooterPlayerState.AuthInitCoachMode // (Final|Native|Protected|HasOutParms) // @ game+0x3bb5be0
	void AuthGiveUltimatePoints(int32_t UltimatePointsToGive, enum class EIsRefundable Refundable, enum class ERewardSource Source); // Function ShooterGame.ShooterPlayerState.AuthGiveUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bb5ad0
	void AuthGiveUltimate(); // Function ShooterGame.ShooterPlayerState.AuthGiveUltimate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	int32_t AuthGetAcquiredUltimatePointsForSource(enum class ERewardSource Source); // Function ShooterGame.ShooterPlayerState.AuthGetAcquiredUltimatePointsForSource // (Final|Native|Public|Const) // @ game+0x3bb5a40
	bool AuthEvaluateDisconnectedSpawnStatus(); // Function ShooterGame.ShooterPlayerState.AuthEvaluateDisconnectedSpawnStatus // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3a55f50
	void AuthConsumeUltimatePoints(); // Function ShooterGame.ShooterPlayerState.AuthConsumeUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	bool AreMapPingsMuted(struct AShooterPlayerState* ForPlayerState); // Function ShooterGame.ShooterPlayerState.AreMapPingsMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bb59a0
};

// Class ShooterGame.ShooterSettingsFacade
// Size: 0x30 (Inherited: 0x30)
struct UShooterSettingsFacade : UObject {

	bool ShouldForceLetterboxForCurrentResolution(); // Function ShooterGame.ShooterSettingsFacade.ShouldForceLetterboxForCurrentResolution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd4620
	void SetSpeakerConfig(int32_t Config); // Function ShooterGame.ShooterSettingsFacade.SetSpeakerConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd45a0
	void SetResolution(int32_t ResX, int32_t ResY); // Function ShooterGame.ShooterSettingsFacade.SetResolution // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd44e0
	void SetLetterboxEnabled(bool bEnabled); // Function ShooterGame.ShooterSettingsFacade.SetLetterboxEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd4460
	void SetDisplayMode(enum class EAresDisplayMode DisplayMode); // Function ShooterGame.ShooterSettingsFacade.SetDisplayMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd43f0
	void SetDefaultMonitorIndex(int32_t Index); // Function ShooterGame.ShooterSettingsFacade.SetDefaultMonitorIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd4370
	void SetAntiAliasing(enum class EAresAntiAliasing AntiAliasingMode); // Function ShooterGame.ShooterSettingsFacade.SetAntiAliasing // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd4300
	bool SetAKAudioParameter(struct FName RtpcName, float Value); // Function ShooterGame.ShooterSettingsFacade.SetAKAudioParameter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd4210
	void RevertDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.RevertDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd41f0
	void ResetToCurrentDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.ResetToCurrentDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd41d0
	struct TArray<struct FAresResolutionInfo> GetSupportedResolutions(); // Function ShooterGame.ShooterSettingsFacade.GetSupportedResolutions // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd4000
	struct TArray<enum class EAresDisplayMode> GetSupportedDisplayModes(); // Function ShooterGame.ShooterSettingsFacade.GetSupportedDisplayModes // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3f80
	struct TArray<enum class EAresAntiAliasing> GetSupportedAntiAliasing(); // Function ShooterGame.ShooterSettingsFacade.GetSupportedAntiAliasing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3f00
	struct FText GetResolutionText(struct FAresResolutionInfo& ResolutionInfo); // Function ShooterGame.ShooterSettingsFacade.GetResolutionText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3bd3de0
	float GetPhysicalDeviceWidth(); // Function ShooterGame.ShooterSettingsFacade.GetPhysicalDeviceWidth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3d80
	bool GetLetterboxEnabled(); // Function ShooterGame.ShooterSettingsFacade.GetLetterboxEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3d50
	struct FString GetDisplayModeText(enum class EAresDisplayMode DisplayMode); // Function ShooterGame.ShooterSettingsFacade.GetDisplayModeText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3c80
	enum class EAresDisplayMode GetDisplayMode(); // Function ShooterGame.ShooterSettingsFacade.GetDisplayMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd3c50
	int32_t GetDefaultMonitorIndex(); // Function ShooterGame.ShooterSettingsFacade.GetDefaultMonitorIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3c20
	struct FString GetCurrentResolutionText(); // Function ShooterGame.ShooterSettingsFacade.GetCurrentResolutionText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3ba0
	struct FString GetCurrentAspectRatioText(); // Function ShooterGame.ShooterSettingsFacade.GetCurrentAspectRatioText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3b20
	struct FText GetAspectRatioTextFromDimensions(int32_t Width, int32_t Height); // Function ShooterGame.ShooterSettingsFacade.GetAspectRatioTextFromDimensions // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd39b0
	struct FText GetAspectRatioText(struct FAresResolutionInfo& ResolutionInfo); // Function ShooterGame.ShooterSettingsFacade.GetAspectRatioText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3bd3890
	struct UAresSettingsManager* GetAresSettingsManager(struct UObject* WorldContextObject); // Function ShooterGame.ShooterSettingsFacade.GetAresSettingsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3800
	struct FString GetAntiAliasingText(enum class EAresAntiAliasing AntiAliasing); // Function ShooterGame.ShooterSettingsFacade.GetAntiAliasingText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3730
	struct TArray<struct FAresMonitorInfo> GetAllMonitorInfo(); // Function ShooterGame.ShooterSettingsFacade.GetAllMonitorInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd36f0
	void ConfirmDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.ConfirmDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd3510
	bool CanSupportNvidiaReflexLowLatency(); // Function ShooterGame.ShooterSettingsFacade.CanSupportNvidiaReflexLowLatency // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd34e0
	bool CanSupportMultithreadedRendering(); // Function ShooterGame.ShooterSettingsFacade.CanSupportMultithreadedRendering // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd34b0
	bool AreDisplaySettingsUnconfirmed(); // Function ShooterGame.ShooterSettingsFacade.AreDisplaySettingsUnconfirmed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd33a0
	bool AreDisplaySettingsDirty(); // Function ShooterGame.ShooterSettingsFacade.AreDisplaySettingsDirty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd3370
	void ApplyDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.ApplyDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd3350
};

// Class ShooterGame.ShooterTimeSyncComponent
// Size: 0x178 (Inherited: 0xe8)
struct UShooterTimeSyncComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FMulticastInlineDelegate OnTimeSyncComponentInitializedDynamic; // 0x100(0x10)
	char pad_110[0x8]; // 0x110(0x08)
	struct UVTSAuthorityGameTimelineManager* AuthorityGameTimelineManager; // 0x118(0x08)
	struct UVTSAutonomousGameTimelineManager* AutonomousGameTimelineManager; // 0x120(0x08)
	struct TMap<struct AAresPlayerStateBase*, struct UVTSPlayerTimelineSynchronizer*> PlayerStateTimelineSynchronizerMap; // 0x128(0x50)

	void PlayerStateRemoved(struct AAresPlayerStateBase* AresPlayerStateBase); // Function ShooterGame.ShooterTimeSyncComponent.PlayerStateRemoved // (Final|Native|Public) // @ game+0x3bd4140
	void PlayerStateAdded(struct AAresPlayerStateBase* AresPlayerStateBase); // Function ShooterGame.ShooterTimeSyncComponent.PlayerStateAdded // (Final|Native|Public) // @ game+0x3bd40b0
	bool IsTimeSyncComponentInitialized(); // Function ShooterGame.ShooterTimeSyncComponent.IsTimeSyncComponentInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd4080
	struct UVTSFixedTimeStepTimelineAPI* GetRemoteTimelineAPI(); // Function ShooterGame.ShooterTimeSyncComponent.GetRemoteTimelineAPI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd3db0
	struct UVTSFixedTimeStepTimelineAPI* GetAutonomousTimelineAPI(); // Function ShooterGame.ShooterTimeSyncComponent.GetAutonomousTimelineAPI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd3af0
	bool ConvertToRemoteTimeStamp(struct AAresPlayerStateBase* AresPlayerStateBase, struct FVTSTimeStampIndex& OutConvertedTimeStampIndex); // Function ShooterGame.ShooterTimeSyncComponent.ConvertToRemoteTimeStamp // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd3610
	bool ConvertFromRemoteTimeStamp(struct AAresPlayerStateBase* AresPlayerStateBase, struct FVTSTimeStampIndex& OutConvertedTimeStampIndex); // Function ShooterGame.ShooterTimeSyncComponent.ConvertFromRemoteTimeStamp // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd3530
	struct UVTSFixedTimeStepTimelineAPI* AuthGetAuthorityTimelineAPI(); // Function ShooterGame.ShooterTimeSyncComponent.AuthGetAuthorityTimelineAPI // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288a7f0
	bool AuthConvertToAutonomousTimeStamp(struct AAresPlayerStateBase* AresPlayerStateBase, struct FVTSTimeStampIndex& OutConvertedTimeStampIndex); // Function ShooterGame.ShooterTimeSyncComponent.AuthConvertToAutonomousTimeStamp // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd33d0
	bool AuthConvertFromAutonomousTimeStamp(struct AAresPlayerStateBase* AresPlayerStateBase, struct FVTSTimeStampIndex& OutConvertedTimeStampIndex); // Function ShooterGame.ShooterTimeSyncComponent.AuthConvertFromAutonomousTimeStamp // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd33d0
};

// Class ShooterGame.ShooterUICoordinator
// Size: 0x98 (Inherited: 0x30)
struct UShooterUICoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnMinimapVisibilityChanged; // 0x38(0x10)
	struct UMenuStackManager* MenuStackManager; // 0x48(0x08)
	struct UHUDElementCoordinator* HUDElementCoordinator; // 0x50(0x08)
	struct UShopScreenCoordinator* ShopScreenCoordinator; // 0x58(0x08)
	struct UOptionsScreenCoordinator* OptionsScreenCoordinator; // 0x60(0x08)
	struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel; // 0x68(0x08)
	struct UMegamapCoordinator* MegamapCoordinator; // 0x70(0x08)
	struct URadialCommCoordinator* RadialCommCoordinator; // 0x78(0x08)
	struct UMissionSettingsScreenCoordinator* MissionSettingsScreenCoordinator; // 0x80(0x08)
	char pad_88[0x10]; // 0x88(0x10)

	void OnMegamapToggled(bool bVisible); // Function ShooterGame.ShooterUICoordinator.OnMegamapToggled // (Final|Native|Public) // @ game+0x3bd9d40
	bool IsAnyScreenOpen(struct UObject* WorldContextObject, bool bMegamap, bool bOptions, bool bShop); // Function ShooterGame.ShooterUICoordinator.IsAnyScreenOpen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd9bc0
	struct UShopScreen* GetShopScreen(struct UObject* WorldContextObject); // Function ShooterGame.ShooterUICoordinator.GetShopScreen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd9aa0
	struct UMegamap* GetMegamap(struct UObject* WorldContextObject); // Function ShooterGame.ShooterUICoordinator.GetMegamap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bd98f0
	struct UCoordinatedShooterUIModel* GetCoordinatedShooterUIModel(); // Function ShooterGame.ShooterUICoordinator.GetCoordinatedShooterUIModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x371e860
	struct UCoordinatedHUDElement* GetCoordinatedHudElementByClass(struct UCoordinatedHUDElement* ElementClass); // Function ShooterGame.ShooterUICoordinator.GetCoordinatedHudElementByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd9850
	void CloseMapOnly(struct UObject* WorldContextObject); // Function ShooterGame.ShooterUICoordinator.CloseMapOnly // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bd9590
};

// Class ShooterGame.CoordinatedShooterUIModel
// Size: 0x80 (Inherited: 0x30)
struct UCoordinatedShooterUIModel : UObject {
	struct FMulticastInlineDelegate OnShopVisbilityChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnHudVisbilityChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOptionsVisbilityChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMegamapVisibilityChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMinimapVisibilityChanged; // 0x70(0x10)

	void RebroadcastOnShopToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnShopToggled // (Final|Native|Public) // @ game+0x37d5fb0
	void RebroadcastOnOptionsToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnOptionsToggled // (Final|Native|Public) // @ game+0x3bda2f0
	void RebroadcastOnMinimapToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnMinimapToggled // (Final|Native|Public) // @ game+0x3bda260
	void RebroadcastOnMegamapToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnMegamapToggled // (Final|Native|Public) // @ game+0x3bda1d0
	void RebroadcastOnHudToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnHudToggled // (Final|Native|Public) // @ game+0x3bda040
};

// Class ShooterGame.InventorySlotModel
// Size: 0x90 (Inherited: 0x30)
struct UInventorySlotModel : UObject {
	int32_t Charges; // 0x30(0x04)
	int32_t MaxCharges; // 0x34(0x04)
	int32_t ExtraCharges; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UShopPurchasableModel* ItemDetails; // 0x40(0x08)
	struct UShopPurchasableModel* UpgradeDetails; // 0x48(0x08)
	struct UCharacterHudComponent* CurrentItemHudComponent; // 0x50(0x08)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x58(0x10)
	struct TArray<enum class EAresItemSlot> CompatibleSlotTypes; // 0x68(0x10)
	struct AShooterPlayerState* PlayerState; // 0x78(0x08)
	enum class EAresItemSlot ItemSlot; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct AAresItem* CurrentItem; // 0x88(0x08)
};

// Class ShooterGame.PurchasableWeaponData
// Size: 0x60 (Inherited: 0x30)
struct UPurchasableWeaponData : UObject {
	float MaxDamage; // 0x30(0x04)
	float MinDamage; // 0x34(0x04)
	float FarthestRangeForMaxDamage; // 0x38(0x04)
	float ClostedRangeForMinDamage; // 0x3c(0x04)
	float HeadshotMultiplier; // 0x40(0x04)
	float MinSpread; // 0x44(0x04)
	float MaxSpread; // 0x48(0x04)
	float FiringRate; // 0x4c(0x04)
	float MagazineSize; // 0x50(0x04)
	float ReloadSpeed; // 0x54(0x04)
	float MovementSpeed; // 0x58(0x04)
	float ReadyTime; // 0x5c(0x04)
};

// Class ShooterGame.ShopPurchasableModel
// Size: 0x190 (Inherited: 0x30)
struct UShopPurchasableModel : UObject {
	int32_t Price; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FText Name; // 0x38(0x18)
	struct TArray<enum class EAresItemSlot> CompatibleSlots; // 0x50(0x10)
	struct FSlateBrush ShopImage; // 0x60(0x90)
	struct FName ShopCategory; // 0xf0(0x0c)
	struct FName ShopSubcategory; // 0xfc(0x0c)
	struct FText ShopCategoryText; // 0x108(0x18)
	struct FShopGridPosition ShopGridPosition; // 0x120(0x08)
	struct FText Description; // 0x128(0x18)
	bool bCanAfford; // 0x140(0x01)
	bool bCanPurchase; // 0x141(0x01)
	bool bCanSell; // 0x142(0x01)
	bool bIsOwned; // 0x143(0x01)
	char pad_144[0x4]; // 0x144(0x04)
	struct TArray<enum class EAresItemSlot> InventorySlotsOwnedIn; // 0x148(0x10)
	bool bCanDrop; // 0x158(0x01)
	bool bCanRemove; // 0x159(0x01)
	bool bCanTrash; // 0x15a(0x01)
	bool bShowInStore; // 0x15b(0x01)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct UPurchasableWeaponData* WeaponDetails; // 0x160(0x08)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x168(0x10)
	bool bWasPurchasedThisRound; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	int32_t SellPrice; // 0x17c(0x04)
	struct AOwnerExclusivePlayerInfo* PlayerInfo; // 0x180(0x08)
	struct UAresPurchasable* Purchasable; // 0x188(0x08)

	bool TrySell(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TrySell // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda650
	bool TryRemove(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TryRemove // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda5c0
	bool TryPurchase(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TryPurchase // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda530
	bool TryMakeGunRequest(); // Function ShooterGame.ShopPurchasableModel.TryMakeGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda500
	bool TryDrop(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TryDrop // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda3d0
	bool TryCancelGunRequest(); // Function ShooterGame.ShopPurchasableModel.TryCancelGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda3a0
	struct AAresItem* GetPurchasableEquippableClass(); // Function ShooterGame.ShopPurchasableModel.GetPurchasableEquippableClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3bd99b0
	struct UAresPurchasable* GetPurchasable(); // Function ShooterGame.ShopPurchasableModel.GetPurchasable // (Final|Native|Public|BlueprintCallable) // @ game+0x3bd9980
};

// Class ShooterGame.ShopGameInfoModel
// Size: 0x50 (Inherited: 0x30)
struct UShopGameInfoModel : UObject {
	int32_t CurrentRound; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x38(0x10)
	struct AShooterGameState* GameState; // 0x48(0x08)
};

// Class ShooterGame.ShopPlayerModel
// Size: 0x250 (Inherited: 0x30)
struct UShopPlayerModel : UObject {
	struct FString PlayerName; // 0x30(0x10)
	int32_t LoadoutValue; // 0x40(0x04)
	int32_t PlayerMoney; // 0x44(0x04)
	int32_t PlayerEnergy; // 0x48(0x04)
	int32_t TotalPurchases; // 0x4c(0x04)
	struct APawn* DesiredClass; // 0x50(0x08)
	struct FText ClassName; // 0x58(0x18)
	struct FSlateBrush ClassPortrait; // 0x70(0x90)
	int32_t UltimatePoints; // 0x100(0x04)
	int32_t RefundableUltimatePoints; // 0x104(0x04)
	int32_t ClassUltimatePointsNeeded; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct FSlateBrush ClassUltiamteIcon; // 0x110(0x90)
	struct UInventorySlotModel* PrimarySlot; // 0x1a0(0x08)
	struct UInventorySlotModel* SecondarySlot; // 0x1a8(0x08)
	struct UInventorySlotModel* GrenadeSlot; // 0x1b0(0x08)
	struct UInventorySlotModel* Ability1Slot; // 0x1b8(0x08)
	struct UInventorySlotModel* Ability2Slot; // 0x1c0(0x08)
	struct UInventorySlotModel* UltimateSlot; // 0x1c8(0x08)
	struct UInventorySlotModel* ArmorSlot; // 0x1d0(0x08)
	struct UInventorySlotModel* PassiveSlot; // 0x1d8(0x08)
	struct TArray<struct FAresPlayerRoundInfo> RoundInfos; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnSlotCompatibilityUpdated; // 0x200(0x10)
	float PreviousPurchaseTime; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct FMulticastInlineDelegate OnFulfillGunRequest; // 0x218(0x10)
	struct FMulticastInlineDelegate OnMakeGunRequest; // 0x228(0x10)
	struct FMulticastInlineDelegate OnCancelGunRequest; // 0x238(0x10)
	struct AShooterPlayerState* PlayerState; // 0x248(0x08)

	bool TryFulfillOtherPlayerGunRequest(struct AShooterPlayerState* FulfilleePlayerState); // Function ShooterGame.ShopPlayerModel.TryFulfillOtherPlayerGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda460
	void RebroadcastOnMakeGunRequest(struct FAresGunRequest UpdatedGunRequest, struct AShooterPlayerState* RequestingPlayerState); // Function ShooterGame.ShopPlayerModel.RebroadcastOnMakeGunRequest // (Final|Native|Public) // @ game+0x3bda0d0
	void RebroadcastOnFulfillGunRequest(struct FAresGunRequest UpdatedGunRequest, struct AShooterPlayerState* FulfillerPlayerState, struct AShooterPlayerState* RequestingPlayerState); // Function ShooterGame.ShopPlayerModel.RebroadcastOnFulfillGunRequest // (Final|Native|Public) // @ game+0x3bd9ef0
	void RebroadcastOnCancelGunRequest(struct FAresGunRequest UpdatedGunRequest, struct AShooterPlayerState* RequestingPlayerState); // Function ShooterGame.ShopPlayerModel.RebroadcastOnCancelGunRequest // (Final|Native|Public) // @ game+0x3bd9df0
	struct FAresPlayerRoundInfo GetRoundInfoForRound(int32_t RoundNumber); // Function ShooterGame.ShopPlayerModel.GetRoundInfoForRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd99f0
	struct FRoundReports GetCombatReportForRound(int32_t RoundNumber); // Function ShooterGame.ShopPlayerModel.GetCombatReportForRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd9650
	struct FAresGunRequest GetActiveGunRequest(); // Function ShooterGame.ShopPlayerModel.GetActiveGunRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bd9610
};

// Class ShooterGame.ShopAbilitiesContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopAbilitiesContainer : UUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopAbilitiesContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void AddChild(struct UUserWidget* Content, bool bForceFillSize); // Function ShooterGame.ShopAbilitiesContainer.AddChild // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopItemCategoryContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopItemCategoryContainer : UDesignableUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopItemCategoryContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void AddChild(struct UUserWidget* Content, bool bForceFillSize); // Function ShooterGame.ShopItemCategoryContainer.AddChild // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopArmorCategoryContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopArmorCategoryContainer : UUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopArmorCategoryContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void AddChild(struct UUserWidget* Content, bool bForceFillSize); // Function ShooterGame.ShopArmorCategoryContainer.AddChild // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopSidearmsCategoryContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopSidearmsCategoryContainer : UUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopSidearmsCategoryContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void AddChild(struct UUserWidget* Content, bool bForceFillSize); // Function ShooterGame.ShopSidearmsCategoryContainer.AddChild // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopItemDetailPanel
// Size: 0x2d8 (Inherited: 0x2c8)
struct UShopItemDetailPanel : UUserWidget {
	struct FMulticastInlineDelegate OnItemPreviewReset; // 0x2c8(0x10)

	void UpdatePreview(struct UShopPurchasableModel* SelectedWeapon); // Function ShooterGame.ShopItemDetailPanel.UpdatePreview // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void ResetPreview(struct UShopPurchasableModel* SelectedWeapon); // Function ShooterGame.ShopItemDetailPanel.ResetPreview // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnItemPreviewReset__DelegateSignature(); // DelegateFunction ShooterGame.ShopItemDetailPanel.OnItemPreviewReset__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x40572e0
};

// Class ShooterGame.ShopTeamLoadout
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopTeamLoadout : UUserWidget {

	void SetLocalPlayer(struct UShopPlayerModel* PlayerModel); // Function ShooterGame.ShopTeamLoadout.SetLocalPlayer // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void CreateTeammateWidgets(struct TArray<struct UShopPlayerModel*>& TeammatePlayerModels, struct UShopPlayerModel* PlayerModel); // Function ShooterGame.ShopTeamLoadout.CreateTeammateWidgets // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopConfirmationToast
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopConfirmationToast : UUserWidget {

	void FireFeedback(struct FText& TextToDisplay); // Function ShooterGame.ShopConfirmationToast.FireFeedback // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopScreen
// Size: 0x2d0 (Inherited: 0x2c8)
struct UShopScreen : UUserWidget {
	int32_t ZOrder; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)

	void SetTeammatePlayers(struct TArray<struct UShopPlayerModel*>& Teammates); // Function ShooterGame.ShopScreen.SetTeammatePlayers // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SetShopScreenCoordinator(struct UShopScreenCoordinator* Coordinator); // Function ShooterGame.ShopScreen.SetShopScreenCoordinator // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SetSelfPlayer(struct UShopPlayerModel* Player); // Function ShooterGame.ShopScreen.SetSelfPlayer // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SetPurchasables(struct TArray<struct UShopPurchasableModel*>& Purchasables); // Function ShooterGame.ShopScreen.SetPurchasables // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SetGameInfo(struct UShopGameInfoModel* GameInfo); // Function ShooterGame.ShopScreen.SetGameInfo // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SetDirty(); // Function ShooterGame.ShopScreen.SetDirty // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void SetCoordinatedShooterUIModel(struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel); // Function ShooterGame.ShopScreen.SetCoordinatedShooterUIModel // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void Open(); // Function ShooterGame.ShopScreen.Open // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnOpened(); // Function ShooterGame.ShopScreen.OnOpened // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void OnClosed(); // Function ShooterGame.ShopScreen.OnClosed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
	void Close(); // Function ShooterGame.ShopScreen.Close // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopContentWidget
// Size: 0x3f8 (Inherited: 0x398)
struct UShopContentWidget : UAresCommonActivatableWidget {
	struct UHorizontalBox* RankUpWidgetContainer; // 0x398(0x08)
	struct UShopAbilitiesContainer* AbilitiesContainer; // 0x3a0(0x08)
	struct UShopArmorCategoryContainer* ArmorContainer; // 0x3a8(0x08)
	struct UShopSidearmsCategoryContainer* SidearmsContainer; // 0x3b0(0x08)
	struct UShopItemCategoryContainer* HeavyWeaponsContainer; // 0x3b8(0x08)
	struct UShopItemCategoryContainer* ShotgunsContainer; // 0x3c0(0x08)
	struct UShopItemCategoryContainer* SMGsContainer; // 0x3c8(0x08)
	struct UShopItemCategoryContainer* SniperRiflesContainer; // 0x3d0(0x08)
	struct UShopItemCategoryContainer* RiflesContainer; // 0x3d8(0x08)
	struct UShopItemDetailPanel* ItemDetailPanel; // 0x3e0(0x08)
	struct UShopTeamLoadout* TeamLoadoutRecap; // 0x3e8(0x08)
	struct UShopConfirmationToast* Toast; // 0x3f0(0x08)

	struct UUserWidget* CreateShopWidgetFromData(struct APlayerController* OwningPlayer, struct UShopItemDetailPanel* ItemDetailPreview, struct UShopPurchasableModel* Model, struct UShopPlayerModel* PlayerModel, struct UInventorySlotModel* InventorySlotModel, struct UShopConfirmationToast* ShopConfirmationToast, enum class EAresItemSlot TargetSlot, bool bIsFavorite); // Function ShooterGame.ShopContentWidget.CreateShopWidgetFromData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.ShopScreenCoordinator
// Size: 0xa8 (Inherited: 0x30)
struct UShopScreenCoordinator : UObject {
	char pad_30[0x28]; // 0x30(0x28)
	struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel; // 0x58(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x60(0x08)
	struct AShooterPlayerController* PlayerController; // 0x68(0x08)
	struct UMenuStackEntry* ShopMenuStackEntry; // 0x70(0x08)
	struct TArray<struct UShopPurchasableModel*> CurrentPurchasablesModel; // 0x78(0x10)
	struct TArray<struct UShopPlayerModel*> CurrentTeammateModel; // 0x88(0x10)
	struct UShopPlayerModel* CurrentPlayerModel; // 0x98(0x08)
	struct UShopGameInfoModel* CurrentGameInfoModel; // 0xa0(0x08)

	void ToggleVisibility(); // Function ShooterGame.ShopScreenCoordinator.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3bda380
	void OnOpenedShopScreen(); // Function ShooterGame.ShopScreenCoordinator.OnOpenedShopScreen // (Final|Native|Private) // @ game+0x3bd9dd0
	void OnClosedShopScreen(); // Function ShooterGame.ShopScreenCoordinator.OnClosedShopScreen // (Final|Native|Private) // @ game+0x3bd9d20
	void HandleLocalPlayerStateChanged(struct AShooterPlayerState* NewState); // Function ShooterGame.ShopScreenCoordinator.HandleLocalPlayerStateChanged // (Final|Native|Private) // @ game+0x3bd9b30
	struct TArray<struct UShopPlayerModel*> BuildTeammatesModel(struct APlayerController* PlayerController); // Function ShooterGame.ShopScreenCoordinator.BuildTeammatesModel // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0x3bd94c0
	void BuildPurchasablesModel(struct AOwnerExclusivePlayerInfo* PlayerInfo, struct TArray<struct UShopPurchasableModel*>& OutPurchasables); // Function ShooterGame.ShopScreenCoordinator.BuildPurchasablesModel // (Final|Native|Static|Private|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3bd93e0
};

// Class ShooterGame.SignatureAbilityResourceComponent
// Size: 0x1a8 (Inherited: 0x1a0)
struct USignatureAbilityResourceComponent : UEquipmentChargeComponent {
	int32_t NumSignatureChargesPerUse; // 0x1a0(0x04)
	int32_t AuthSignatureChargeAmount; // 0x1a4(0x04)

	void OnRep_AuthSignatureChargeAmount(); // Function ShooterGame.SignatureAbilityResourceComponent.OnRep_AuthSignatureChargeAmount // (Final|Native|Private) // @ game+0x365e420
	int32_t GetSignatureChargeAmount(); // Function ShooterGame.SignatureAbilityResourceComponent.GetSignatureChargeAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be1ab0
};

// Class ShooterGame.SimpleLifecycleWidget
// Size: 0x2e8 (Inherited: 0x2c8)
struct USimpleLifecycleWidget : UUserWidget {
	struct FMulticastInlineDelegate OnShowCompleted; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnHideCompleted; // 0x2d8(0x10)

	void Show(); // Function ShooterGame.SimpleLifecycleWidget.Show // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37c24d0
	void Hide(); // Function ShooterGame.SimpleLifecycleWidget.Hide // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37c24a0
};

// Class ShooterGame.SimpleReplicationSleepComponent
// Size: 0x118 (Inherited: 0x118)
struct USimpleReplicationSleepComponent : UReplicationSleepComponent {
};

// Class ShooterGame.SimpleSectionHeadersListModelBase
// Size: 0x70 (Inherited: 0x58)
struct USimpleSectionHeadersListModelBase : UWrapperListModel {
	struct TArray<struct FSimpleSectionHeadersListModelBase_HeaderInfo> HeaderList; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)

	void SetIgnoreReplacedEvents(bool bNewValue); // Function ShooterGame.SimpleSectionHeadersListModelBase.SetIgnoreReplacedEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x3be1fd0
	bool MatchHeaderKey(struct FWildcard& Item, struct FWildcard& Key); // Function ShooterGame.SimpleSectionHeadersListModelBase.MatchHeaderKey // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3be1ca0
	struct FSimpleSectionHeadersListModelBase_Location MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.SimpleSectionHeadersListModelBase.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be1c10
	int32_t MapIndexInnerToOuter(struct FSimpleSectionHeadersListModelBase_Location InnerLocation); // Function ShooterGame.SimpleSectionHeadersListModelBase.MapIndexInnerToOuter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be1b70
	int32_t GetNumHeaders(); // Function ShooterGame.SimpleSectionHeadersListModelBase.GetNumHeaders // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be1a80
	void GenerateHeaders(struct FWildcard& ItemBefore, struct FWildcard& ItemAfter, struct TArray<struct FWildcard>& OutNewHeaders); // Function ShooterGame.SimpleSectionHeadersListModelBase.GenerateHeaders // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3be1850
};

// Class ShooterGame.SimpleSectionHeadersListModel
// Size: 0x90 (Inherited: 0x70)
struct USimpleSectionHeadersListModel : USimpleSectionHeadersListModelBase {
	char pad_70[0x20]; // 0x70(0x20)

	void SetHeaderKeyMatchFunction(struct FDelegate& Delegate); // Function ShooterGame.SimpleSectionHeadersListModel.SetHeaderKeyMatchFunction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3be1f10
	void SetGenerateHeadersDelegate(struct FDelegate& Delegate); // Function ShooterGame.SimpleSectionHeadersListModel.SetGenerateHeadersDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3be1e50
	void RebuildHeaders(); // Function ShooterGame.SimpleSectionHeadersListModel.RebuildHeaders // (Final|Native|Public|BlueprintCallable) // @ game+0x3be1e30
	bool KeyMatchDynamicDelegate__DelegateSignature(struct FWildcard& Item, struct FWildcard& Key); // DelegateFunction ShooterGame.SimpleSectionHeadersListModel.KeyMatchDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x40572e0
	struct TArray<struct FWildcard> GenerateHeadersDynamicDelegate__DelegateSignature(struct FWildcard& ItemBefore, struct FWildcard& ItemAfter); // DelegateFunction ShooterGame.SimpleSectionHeadersListModel.GenerateHeadersDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x40572e0
	struct USimpleSectionHeadersListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& GenerateHeadersDelegate, struct UObject* Outer); // Function ShooterGame.SimpleSectionHeadersListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3be16d0
};

// Class ShooterGame.SimpleTeamComponent
// Size: 0x108 (Inherited: 0xf8)
struct USimpleTeamComponent : UBaseTeamComponent {
	struct FName TeamName; // 0xf8(0x0c)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_TeamChanged(); // Function ShooterGame.SimpleTeamComponent.OnRep_TeamChanged // (Final|Native|Protected) // @ game+0x37e69c0
	void AuthSetTeamName(struct FName& NewTeamName); // Function ShooterGame.SimpleTeamComponent.AuthSetTeamName // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3bb5be0
};

// Class ShooterGame.SingleItemListModel
// Size: 0xa0 (Inherited: 0x48)
struct USingleItemListModel : UOrderedListModelBase {
	struct FWildcard ContentItem; // 0x48(0x40)
	char pad_88[0x18]; // 0x88(0x18)

	void SetItemCount(int32_t NewValue); // Function ShooterGame.SingleItemListModel.SetItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3be2190
	void SetItem(struct FWildcard NewValue); // Function ShooterGame.SingleItemListModel.SetItem // (Final|Native|Public|BlueprintCallable) // @ game+0x3be2060
	void NotifyItemModified(); // Function ShooterGame.SingleItemListModel.NotifyItemModified // (Final|Native|Public|BlueprintCallable) // @ game+0x3be1e10
	void BP_SetKeyMatchFunction(struct FDelegate& NewValue); // Function ShooterGame.SingleItemListModel.BP_SetKeyMatchFunction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3be1610
};

// Class ShooterGame.SnapshotRewinderComponent
// Size: 0x100 (Inherited: 0xe8)
struct USnapshotRewinderComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bSampleEveryFrame; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	float TimeBetweenRewindSnapshots; // 0xf4(0x04)
	float MaxRewindTime; // 0xf8(0x04)
	float LastSnapshotCreatedTimeStamp; // 0xfc(0x04)
};

// Class ShooterGame.SkeletalPoseRewinderComponent
// Size: 0x140 (Inherited: 0x100)
struct USkeletalPoseRewinderComponent : USnapshotRewinderComponent {
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x100(0x08)
	struct TArray<struct FSkeletalPoseSnapshot> Snapshots; // 0x108(0x10)
	char pad_118[0x28]; // 0x118(0x28)
};

// Class ShooterGame.SkinUpgradeButton
// Size: 0x2f8 (Inherited: 0x2c8)
struct USkinUpgradeButton : UUserWidget {
	struct FGuid ProgressionDefinitionID; // 0x2c8(0x10)
	enum class ESkinUpgradeState UpgradeState; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	int32_t CurrentTier; // 0x2dc(0x04)
	int32_t NextTier; // 0x2e0(0x04)
	int32_t Cost; // 0x2e4(0x04)
	struct UCurrencyDataAsset* CurrencyDataAsset; // 0x2e8(0x08)
	struct USidegradeModel* CurrentSidegradeModel; // 0x2f0(0x08)

	void UpdateStateForVariantSelect(struct UEquippableSkinHandle* SkinHandle, struct UEquippableSkinChromaHandle* ChromaHandle, struct UInventoryManager* InventoryManager, struct UWorld* World); // Function ShooterGame.SkinUpgradeButton.UpdateStateForVariantSelect // (Final|Native|Protected) // @ game+0x3be2490
	void UpdateStateForNextLevel(struct UEquippableSkinHandle* SkinHandle, struct UWorld* World); // Function ShooterGame.SkinUpgradeButton.UpdateStateForNextLevel // (Final|Native|Protected) // @ game+0x3be23c0
	void UpdateButtonState(struct UEquippableSkinHandle* SkinHandle, struct UEquippableSkinChromaHandle* ChromaHandle); // Function ShooterGame.SkinUpgradeButton.UpdateButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x3be22f0
	void SetStateForAvailableVariant(struct UEquippableSkinChromaHandle* ChromaHandle, struct UWorld* World); // Function ShooterGame.SkinUpgradeButton.SetStateForAvailableVariant // (Final|Native|Protected) // @ game+0x3be2220
	void InitButtonState(struct UEquippableSkinHandle* SkinHandle); // Function ShooterGame.SkinUpgradeButton.InitButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x3be1ae0
	bool AllChromasUnlockedForSkin(struct UEquippableSkinHandle* SkinHandle); // Function ShooterGame.SkinUpgradeButton.AllChromasUnlockedForSkin // (Final|Native|Protected) // @ game+0x3be1570
};

// Class ShooterGame.SlashCommandHandler
// Size: 0x30 (Inherited: 0x30)
struct USlashCommandHandler : UInterface {
};

// Class ShooterGame.SlotModifierComponent
// Size: 0xf8 (Inherited: 0xe8)
struct USlotModifierComponent : UActorComponent {
	enum class EAresItemSlot TargetSlot; // 0xe8(0x01)
	enum class EAresItemSlot AddedCompatibility; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
	struct UAresInventory* Inventory; // 0xf0(0x08)
};

// Class ShooterGame.SniperCrosshairHudElement
// Size: 0x190 (Inherited: 0x178)
struct USniperCrosshairHudElement : UBaseCrosshairHudElement {
	struct TArray<struct FSniperCrosshairMaterial> SniperCrosshairMaterialsToDraw; // 0x178(0x10)
	struct UCurveFloat* SpreadToDistortionCurve; // 0x188(0x08)

	void PreDrawCrosshairMaterial(struct UMaterialInstanceDynamic* MaterialInstanceDynamic, struct AAresEquippable* CurrentEquippable); // Function ShooterGame.SniperCrosshairHudElement.PreDrawCrosshairMaterial // (Event|Protected|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.SocialPartyTeam
// Size: 0x88 (Inherited: 0x30)
struct USocialPartyTeam : UObject {
	struct TArray<struct USocialPlayer*> Players; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPlayerAdded; // 0x40(0x10)
	struct FMulticastInlineDelegate OnPlayerRemoved; // 0x50(0x10)
	char pad_60[0x28]; // 0x60(0x28)

	void RemovePlayerIfPresent(struct USocialPlayer* Player); // Function ShooterGame.SocialPartyTeam.RemovePlayerIfPresent // (Final|Native|Public) // @ game+0x3be92f0
	struct TScriptInterface<IOrderedListModel> GetPlayersModel(); // Function ShooterGame.SocialPartyTeam.GetPlayersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8750
	struct TArray<struct USocialPlayer*> GetPlayers(); // Function ShooterGame.SocialPartyTeam.GetPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8720
	void AddPlayerIfNeeded(struct USocialPlayer* Player); // Function ShooterGame.SocialPartyTeam.AddPlayerIfNeeded // (Final|Native|Public) // @ game+0x3be7900
};

// Class ShooterGame.SocialPartyModel
// Size: 0x1d0 (Inherited: 0x30)
struct USocialPartyModel : UObject {
	struct FString PartyID; // 0x30(0x10)
	struct FMulticastInlineDelegate OnOwnerProvisioningFlowChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOwnerSessionLoopStateChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOwnerMatchMapChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnOwnerMatchScoreChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnPartyClientVersionChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPartyStateChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnPartyAccessibilityChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnIsPartyOpenChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnIsJoinableChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnIsMyPartyChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnVersionChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnQueueEntryTimeChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnPendingRequestChanged; // 0x120(0x10)
	struct USocialPartyTeam* AllMembers; // 0x130(0x08)
	enum class EProvisioningFlowID OwnerProvisioningFlow; // 0x138(0x01)
	enum class ESessionLoopState OwnerSessionLoopState; // 0x139(0x01)
	char pad_13A[0x6]; // 0x13a(0x06)
	struct FString OwnerMatchMap; // 0x140(0x10)
	struct FString OwnerMatchCurrentTeam; // 0x150(0x10)
	int32_t OwnerMatchScoreAllyTeam; // 0x160(0x04)
	int32_t OwnerMatchScoreEnemyTeam; // 0x164(0x04)
	bool bIsCustomGame; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
	struct USocialPlayer* PartyLeader; // 0x170(0x08)
	struct FString PartyClientVersion; // 0x178(0x10)
	enum class EAresPartyState PartyState; // 0x188(0x01)
	enum class EAresPartyAccessibility PartyAccessibility; // 0x189(0x01)
	bool bIsPartyOpen; // 0x18a(0x01)
	bool bIsJoinable; // 0x18b(0x01)
	bool bIsMyParty; // 0x18c(0x01)
	bool bHasPendingRequest; // 0x18d(0x01)
	char pad_18E[0x2]; // 0x18e(0x02)
	int32_t MaxPartySize; // 0x190(0x04)
	int32_t PartySize; // 0x194(0x04)
	int32_t Version; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct FDateTime QueueEntryTime; // 0x1a0(0x08)
	bool bHasInvite; // 0x1a8(0x01)
	char pad_1A9[0x7]; // 0x1a9(0x07)
	struct FDateTime LastInviteSent; // 0x1b0(0x08)
	bool bHasRequest; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
	struct FDateTime LastRequestSent; // 0x1c0(0x08)
	char pad_1C8[0x8]; // 0x1c8(0x08)

	void RemovePlayer(struct USocialPlayer* Player); // Function ShooterGame.SocialPartyModel.RemovePlayer // (Final|Native|Public) // @ game+0x3be9260
	bool IsPartyOpen(); // Function ShooterGame.SocialPartyModel.IsPartyOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8fc0
	bool IsJoinable(); // Function ShooterGame.SocialPartyModel.IsJoinable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8fa0
	bool HasPendingRequest(); // Function ShooterGame.SocialPartyModel.HasPendingRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8dd0
	int32_t GetVersion(); // Function ShooterGame.SocialPartyModel.GetVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be87d0
	struct FDateTime GetQueueEntryTime(); // Function ShooterGame.SocialPartyModel.GetQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8790
	enum class EAresPartyState GetPartyState(); // Function ShooterGame.SocialPartyModel.GetPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8700
	int32_t GetPartySize(); // Function ShooterGame.SocialPartyModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be86e0
	struct FString GetPartyClientVersion(); // Function ShooterGame.SocialPartyModel.GetPartyClientVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be85e0
	enum class EAresPartyAccessibility GetPartyAccessibility(); // Function ShooterGame.SocialPartyModel.GetPartyAccessibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be85c0
	enum class ESessionLoopState GetOwnerSessionLoopState(); // Function ShooterGame.SocialPartyModel.GetOwnerSessionLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be85a0
	enum class EProvisioningFlowID GetOwnerProvisioningFlow(); // Function ShooterGame.SocialPartyModel.GetOwnerProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8580
	int32_t GetOwnerMatchScoreEnemyTeam(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchScoreEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8560
	int32_t GetOwnerMatchScoreAllyTeam(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchScoreAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8540
	struct FString GetOwnerMatchMap(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911f50
	struct FString GetOwnerMatchCurrentTeam(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchCurrentTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8470
	int32_t GetMaxPartySize(); // Function ShooterGame.SocialPartyModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8320
	bool GetIsMyParty(); // Function ShooterGame.SocialPartyModel.GetIsMyParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be82c0
};

// Class ShooterGame.SocialPlayer
// Size: 0xe8 (Inherited: 0x30)
struct USocialPlayer : UObject {
	struct FMulticastInlineDelegate OnInviteChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnRequestChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnNotificationAdded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnNotificationRemoved; // 0x60(0x10)
	struct FMulticastInlineDelegate OnPartyMembersChanged; // 0x70(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x80(0x08)
	struct UPartyMessageModel* Invite; // 0x88(0x08)
	struct UPartyMessageModel* Request; // 0x90(0x08)
	struct FDateTime LastInteraction; // 0x98(0x08)
	struct TArray<struct UNotification*> NotificationsForPlayer; // 0xa0(0x10)
	char pad_B0[0x10]; // 0xb0(0x10)
	struct USocialPartyModel* AssociatedSocialParty; // 0xc0(0x08)
	struct USocialPartyModel* LastAssociatedSocialParty; // 0xc8(0x08)
	char pad_D0[0x18]; // 0xd0(0x18)

	bool HasRequest(); // Function ShooterGame.SocialPlayer.HasRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8e00
	bool HasNotifications(); // Function ShooterGame.SocialPlayer.HasNotifications // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8da0
	bool HasInvite(); // Function ShooterGame.SocialPlayer.HasInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8cb0
	bool HasAssociatedSocialParty(); // Function ShooterGame.SocialPlayer.HasAssociatedSocialParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8c80
	enum class EAresSocialPlayerCategory GetSocialCategory(); // Function ShooterGame.SocialPlayer.GetSocialCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be87b0
	struct UPartyMessageModel* GetRequest(); // Function ShooterGame.SocialPlayer.GetRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x37cd6d0
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.SocialPlayer.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ac5b50
	struct TArray<struct UNotification*> GetNotifications(); // Function ShooterGame.SocialPlayer.GetNotifications // (Final|Native|Public|BlueprintCallable) // @ game+0x3be8340
	enum class EAresSocialPlayerCategory GetLastSocialCategory(); // Function ShooterGame.SocialPlayer.GetLastSocialCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8300
	struct UPartyMessageModel* GetInvite(bool& HasInvite); // Function ShooterGame.SocialPlayer.GetInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3be8220
	struct USocialPartyModel* GetAssociatedSocialParty(); // Function ShooterGame.SocialPlayer.GetAssociatedSocialParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3949e00
};

// Class ShooterGame.SocialViewControllerV3
// Size: 0x368 (Inherited: 0x80)
struct USocialViewControllerV3 : UInitSystem {
	struct FMulticastInlineDelegate OnCurrentPartyChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnFriendPartyListWasReset; // 0x90(0x10)
	struct FMulticastInlineDelegate OnNumFriendPartiesOnlineChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnNumFriendsOnlineInPartiesChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnFriendsOnlineInOtherGamesListWasReset; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnNumFriendsOnlineInOtherGamesChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnFriendsOfflineListWasReset; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnNumFriendsOfflineChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnSocialPartyAdded; // 0x100(0x10)
	struct FMulticastInlineDelegate OnSocialPartyExpired; // 0x110(0x10)
	struct FMulticastInlineDelegate OnSocialPlayerCategoryChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnSocialPlayerAdded; // 0x130(0x10)
	struct FMulticastInlineDelegate OnSocialPlayerExpired; // 0x140(0x10)
	struct FMulticastInlineDelegate OnAllModelsConsistent; // 0x150(0x10)
	struct FMulticastInlineDelegate OnPartyMessageAdded; // 0x160(0x10)
	struct FMulticastInlineDelegate OnPartyMessageRemoved; // 0x170(0x10)
	struct FMulticastInlineDelegate OnSocialPanelOpenStateChanged; // 0x180(0x10)
	char pad_190[0x10]; // 0x190(0x10)
	struct UPartyManager* PartyManager; // 0x1a0(0x08)
	struct UPartyViewController* PartyViewController; // 0x1a8(0x08)
	struct UNotificationManager* NotificationManager; // 0x1b0(0x08)
	struct UPartyModel* PartyModel; // 0x1b8(0x08)
	struct UPresenceManager* PresenceManager; // 0x1c0(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x1c8(0x08)
	struct UConfigManager* ConfigManager; // 0x1d0(0x08)
	struct UPlayerListingManager* PlayerListingManager; // 0x1d8(0x08)
	struct UFriendsManager* FriendsManager; // 0x1e0(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x1e8(0x08)
	char pad_1F0[0x10]; // 0x1f0(0x10)
	struct USocialPartyModel* CurrentParty; // 0x200(0x08)
	char pad_208[0x10]; // 0x208(0x10)
	struct TArray<struct USocialPartyModel*> FriendParties_Backing; // 0x218(0x10)
	char pad_228[0x30]; // 0x228(0x30)
	struct TArray<struct USocialPlayer*> FriendsOnlineInOtherGames; // 0x258(0x10)
	char pad_268[0x8]; // 0x268(0x08)
	struct TArray<struct USocialPlayer*> FriendsOffline; // 0x270(0x10)
	char pad_280[0x8]; // 0x280(0x08)
	struct TMap<struct FString, struct USocialPartyModel*> AllSocialPartiesByID; // 0x288(0x50)
	struct TMap<struct FString, struct USocialPlayer*> AllSocialPlayersBySubject; // 0x2d8(0x50)
	struct TArray<struct UPartyMessageModel*> PartyMessages; // 0x328(0x10)
	struct TArray<struct UPartyMessageModel*> HiddenPartyMessages; // 0x338(0x10)
	struct TArray<struct FString> SeenInboundFriendRequestIds; // 0x348(0x10)
	char pad_358[0x8]; // 0x358(0x08)
	struct FTimerHandle ScheduledUpdateTimerHandle; // 0x360(0x08)

	void UpdatePartyMessageVisibility(); // Function ShooterGame.SocialViewControllerV3.UpdatePartyMessageVisibility // (Final|Native|Private) // @ game+0x3be9680
	void UpdateInvalidProperties(); // Function ShooterGame.SocialViewControllerV3.UpdateInvalidProperties // (Final|Native|Private) // @ game+0x3be9660
	void SetUpdatePolicy(enum class ESocialViewControllerUpdatePolicy NewPolicy); // Function ShooterGame.SocialViewControllerV3.SetUpdatePolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x3be95e0
	void SendFriendRequest(struct FString Name, struct FString TagLine); // Function ShooterGame.SocialViewControllerV3.SendFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x3be94d0
	void RequestToJoin(struct USocialPartyModel* SocialParty, struct FDelegate CompletedCallback, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.RequestToJoin // (Final|Native|Public|BlueprintCallable) // @ game+0x3be9380
	void OnInboundFriendRequestRemoved(struct UFriendRequestModel* FriendRequestModel); // Function ShooterGame.SocialViewControllerV3.OnInboundFriendRequestRemoved // (Final|Native|Private) // @ game+0x3be91d0
	void NotifySocialPanelChangedOpenState(bool bIsOpen); // Function ShooterGame.SocialViewControllerV3.NotifySocialPanelChangedOpenState // (Final|Native|Public|BlueprintCallable) // @ game+0x3be9140
	bool JoinPartySolo(struct USocialPartyModel* SocialParty, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.JoinPartySolo // (Final|Native|Public|BlueprintCallable) // @ game+0x3be8fe0
	void InvitePlayer(struct UPlatformPlayer* Player, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.InvitePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3be8e50
	void InvalidatePlayersAndParties(); // Function ShooterGame.SocialViewControllerV3.InvalidatePlayersAndParties // (Final|Native|Private) // @ game+0x3be8e30
	bool HasInviteFromSubject(struct FString Subject); // Function ShooterGame.SocialViewControllerV3.HasInviteFromSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8ce0
	void HandleRequestRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleRequestRemoved // (Final|Native|Private) // @ game+0x3be8bf0
	void HandleRequestAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleRequestAdded // (Final|Native|Private) // @ game+0x3be8b60
	void HandleReceivedInviteRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleReceivedInviteRemoved // (Final|Native|Private) // @ game+0x3be8ad0
	void HandleReceivedInviteAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleReceivedInviteAdded // (Final|Native|Private) // @ game+0x3be8a40
	void HandlePartyPlayerUpdated(); // Function ShooterGame.SocialViewControllerV3.HandlePartyPlayerUpdated // (Final|Native|Private) // @ game+0x3be8a20
	void HandlePartyInvitesSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.SocialViewControllerV3.HandlePartyInvitesSettingChanged // (Final|Native|Private) // @ game+0x3be8900
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.SocialViewControllerV3.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x3be8880
	void HandleFriendRemoved(struct UFriendModel* FriendModel); // Function ShooterGame.SocialViewControllerV3.HandleFriendRemoved // (Final|Native|Private) // @ game+0x3be87f0
	void HandleFriendAdded(struct UFriendModel* FriendModel); // Function ShooterGame.SocialViewControllerV3.HandleFriendAdded // (Final|Native|Private) // @ game+0x3be87f0
	struct TArray<struct UPartyMessageModel*> GetPartyMessages(); // Function ShooterGame.SocialViewControllerV3.GetPartyMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8610
	int32_t GetNumFriendsOnlineInParties(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendsOnlineInParties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8420
	int32_t GetNumFriendsOnlineInOtherGames(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendsOnlineInOtherGames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8400
	int32_t GetNumFriendsOffline(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendsOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be83e0
	int32_t GetNumFriendPartiesOnline(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendPartiesOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be83c0
	int32_t GetNumberOfOutstandingInvites(); // Function ShooterGame.SocialViewControllerV3.GetNumberOfOutstandingInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8440
	bool GetLastKnownSocialPanelOpenState(); // Function ShooterGame.SocialViewControllerV3.GetLastKnownSocialPanelOpenState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be82e0
	struct TArray<struct USocialPlayer*> GetFriendsOnlineInOtherGames(); // Function ShooterGame.SocialViewControllerV3.GetFriendsOnlineInOtherGames // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3be8150
	struct TArray<struct USocialPlayer*> GetFriendsOffline(); // Function ShooterGame.SocialViewControllerV3.GetFriendsOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3be8080
	struct TScriptInterface<IOrderedListModel> GetFriendPartiesModel(); // Function ShooterGame.SocialViewControllerV3.GetFriendPartiesModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8040
	struct TArray<struct USocialPartyModel*> GetFriendParties(); // Function ShooterGame.SocialViewControllerV3.GetFriendParties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be7f70
	struct USocialPartyModel* GetCurrentParty(); // Function ShooterGame.SocialViewControllerV3.GetCurrentParty // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3be7f50
	struct TMap<struct FString, struct USocialPlayer*> GetAllPlayers(); // Function ShooterGame.SocialViewControllerV3.GetAllPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3be7eb0
	struct USocialPlayer* FindSocialPlayerBySubject(struct FString Subject); // Function ShooterGame.SocialViewControllerV3.FindSocialPlayerBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3be7df0
	struct USocialPartyModel* FindSocialPartyByPartyID(struct FString PartyID); // Function ShooterGame.SocialViewControllerV3.FindSocialPartyByPartyID // (Final|Native|Public|BlueprintCallable) // @ game+0x3be7d30
	void DismissRequestOnPlayer(struct USocialPlayer* Player, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.DismissRequestOnPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3be7be0
	void DismissInviteOnPlayer(struct USocialPlayer* Player, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.DismissInviteOnPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3be7a90
	bool AddSeenInboundFriendRequestIfUnseen(struct FString FriendRequestId); // Function ShooterGame.SocialViewControllerV3.AddSeenInboundFriendRequestIfUnseen // (Final|Native|Public|BlueprintCallable) // @ game+0x3be7990
};

// Class ShooterGame.SortedListModelBase
// Size: 0x68 (Inherited: 0x68)
struct USortedListModelBase : UIndexedWrapperListModelBase {

	bool IsStableSort(); // Function ShooterGame.SortedListModelBase.IsStableSort // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x382d4a0
	bool IsSortingActive(); // Function ShooterGame.SortedListModelBase.IsSortingActive // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x36a0730
	bool CompareLessThan(struct FWildcard& ItemA, struct FWildcard& ItemB); // Function ShooterGame.SortedListModelBase.CompareLessThan // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3bee1a0
	void BP_Resort(); // Function ShooterGame.SortedListModelBase.BP_Resort // (Final|Native|Protected|BlueprintCallable) // @ game+0x3bee130
};

// Class ShooterGame.SortedListModel
// Size: 0x78 (Inherited: 0x68)
struct USortedListModel : USortedListModelBase {
	char pad_68[0x10]; // 0x68(0x10)

	void SetComparisonDelegate(struct FDelegate& Delegate); // Function ShooterGame.SortedListModel.SetComparisonDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3bef3f0
	void Resort(); // Function ShooterGame.SortedListModel.Resort // (Final|Native|Public|BlueprintCallable) // @ game+0x3bee130
	struct USortedListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& ComparisonDelegate, struct UObject* Outer); // Function ShooterGame.SortedListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3bee480
};

// Class ShooterGame.SortedMapToListModelBase
// Size: 0xb8 (Inherited: 0x48)
struct USortedMapToListModelBase : UOrderedListModelBase {
	struct TArray<struct FWildcard> Items; // 0x48(0x10)
	struct TMap<struct FWildcard, int32_t> KeyToIndexMap; // 0x58(0x50)
	struct TScriptInterface<IUnorderedMapModel> WrappedMapModel; // 0xa8(0x10)

	void SetMapModel(struct TScriptInterface<IUnorderedMapModel> NewValue); // Function ShooterGame.SortedMapToListModelBase.SetMapModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3bef570
	bool IsSortingActive(); // Function ShooterGame.SortedMapToListModelBase.IsSortingActive // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2a7fb10
	void HandleMapChanged(struct UObject* Source, struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.SortedMapToListModelBase.HandleMapChanged // (Final|Native|Private|HasOutParms) // @ game+0x3beecd0
	bool CompareLessThan(struct FWildcard& ItemA, struct FWildcard& ItemB); // Function ShooterGame.SortedMapToListModelBase.CompareLessThan // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3bee310
	void BP_Resort(); // Function ShooterGame.SortedMapToListModelBase.BP_Resort // (Final|Native|Protected|BlueprintCallable) // @ game+0x3bee150
};

// Class ShooterGame.SortedMapToListModel
// Size: 0xc8 (Inherited: 0xb8)
struct USortedMapToListModel : USortedMapToListModelBase {
	char pad_B8[0x10]; // 0xb8(0x10)

	void SetComparisonDelegate(struct FDelegate& Delegate); // Function ShooterGame.SortedMapToListModel.SetComparisonDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3bef4b0
	void Resort(); // Function ShooterGame.SortedMapToListModel.Resort // (Final|Native|Public|BlueprintCallable) // @ game+0x3bee150
	struct USortedMapToListModel* Create(struct TScriptInterface<IUnorderedMapModel> MapModel, struct FDelegate& ComparisonDelegate, struct UObject* Outer); // Function ShooterGame.SortedMapToListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3bee600
};

// Class ShooterGame.SoundNodeConstParamCrossFade
// Size: 0x80 (Inherited: 0x60)
struct USoundNodeConstParamCrossFade : USoundNode {
	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x60(0x10)
	struct FName ParamName; // 0x70(0x0c)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class ShooterGame.SoundNodeLocalPlayer
// Size: 0x60 (Inherited: 0x60)
struct USoundNodeLocalPlayer : USoundNode {
};

// Class ShooterGame.SpawnActorProjectileEffectComponent
// Size: 0x128 (Inherited: 0xf8)
struct USpawnActorProjectileEffectComponent : UBaseProjectileEffectComponent {
	struct FMulticastInlineDelegate OnSpawnActor; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnSpawnActorFailed; // 0x108(0x10)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollision; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct AActor* ActorSpawned; // 0x120(0x08)

	struct FTransform GetSpawnTransform(); // Function ShooterGame.SpawnActorProjectileEffectComponent.GetSpawnTransform // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0x3beec60
};

// Class ShooterGame.SpawnActorStateComponent
// Size: 0x3a0 (Inherited: 0x2e0)
struct USpawnActorStateComponent : UScriptStateComponent {
	struct FMulticastInlineDelegate OnSetSpawnVariables; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnSpawnActor; // 0x2f0(0x10)
	struct TArray<struct FSpawnActorInfo> SpawnedActors; // 0x300(0x10)
	enum class ESpawnActorCollisionHandlingMethod SpawnMethod; // 0x310(0x01)
	bool bWaitForClientSpawn; // 0x311(0x01)
	char pad_312[0x6]; // 0x312(0x06)
	struct AActor* SpawnedActorType; // 0x318(0x08)
	bool bCosmeticActor; // 0x320(0x01)
	bool bPossessablePawn; // 0x321(0x01)
	bool bWantsToReportNoiseEvent; // 0x322(0x01)
	char pad_323[0x5]; // 0x323(0x05)
	struct FNoiseEventData NoiseEventData; // 0x328(0x38)
	char pad_360[0x40]; // 0x360(0x40)

	void MulticastConfirmActorSpawned(bool bValidActor, struct AActor* SpawnedActor); // Function ShooterGame.SpawnActorStateComponent.MulticastConfirmActorSpawned // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3beedd0
	bool CanSpawn(); // Function ShooterGame.SpawnActorStateComponent.CanSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bee170
};

// Class ShooterGame.SpawnerVisibilityComponent
// Size: 0x1a0 (Inherited: 0x188)
struct USpawnerVisibilityComponent : UGameObjectVisibilityComponent {
	struct TArray<enum class EAresTeamRole> TeamsWithVisibility; // 0x188(0x10)
	float PromixitySightMaxDistance; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)

	void OnStateChange(); // Function ShooterGame.SpawnerVisibilityComponent.OnStateChange // (Final|Native|Public|BlueprintCallable) // @ game+0x3bef3b0
};

// Class ShooterGame.SpawnPointGeneratorComponent
// Size: 0xf8 (Inherited: 0xe8)
struct USpawnPointGeneratorComponent : UActorComponent {
	struct FMulticastInlineDelegate OnSpawnPointsGenerated; // 0xe8(0x10)

	struct TArray<struct AShooterTeamStart*> GetGeneratedSpawnPoints(); // Function ShooterGame.SpawnPointGeneratorComponent.GetGeneratedSpawnPoints // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.SpawnPointPlayerSpawner
// Size: 0x30 (Inherited: 0x30)
struct USpawnPointPlayerSpawner : UPlayerSpawner {

	struct USpawnPointPlayerSpawner* CreateSpawnPointSpawner(); // Function ShooterGame.SpawnPointPlayerSpawner.CreateSpawnPointSpawner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3bee780
};

// Class ShooterGame.SpawnPointScorerComponent
// Size: 0x1b0 (Inherited: 0xe8)
struct USpawnPointScorerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnSpawnPointDataInitialized; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnSpawnPointUsed; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnSpawnPointUpdated; // 0x108(0x10)
	bool bEnableBackgroundScoring; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float FFACharacterLookAheadTimeSeconds; // 0x11c(0x04)
	float TwoTeamCharacterLookAheadTimeSeconds; // 0x120(0x04)
	float FFASpawnPointLookAheadTimeSeconds; // 0x124(0x04)
	float TwoTeamSpawnPointLookAheadTimeSeconds; // 0x128(0x04)
	float SpawnPointLookAheadBoxEnabledMultiplier; // 0x12c(0x04)
	int32_t DesiredNumZeroVisibilitySpawnPoints; // 0x130(0x04)
	float MinDynamicAdjustmentMultiplier; // 0x134(0x04)
	float MaxDynamicAdjustmentMultiplier; // 0x138(0x04)
	float DynamicAdjustmentIncrementAmount; // 0x13c(0x04)
	int32_t NumSpawnPointsToReservePerAdditionalDeadCharacter; // 0x140(0x04)
	float InvalidationDistance; // 0x144(0x04)
	float DefaultCharacterEyeHeight; // 0x148(0x04)
	float DefaultCharacterRunSpeed; // 0x14c(0x04)
	float DefaultCharacterJumpSpeed; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct TArray<struct AShooterCharacter*> RegisteredShooterCharacters; // 0x158(0x10)
	struct TArray<struct FSpawnPointData> SpawnPoints; // 0x168(0x10)
	struct TArray<int32_t> InitialSpawnPointIndices; // 0x178(0x10)
	struct TArray<enum class EAresTeamRole> RegisteredTeamRoles; // 0x188(0x10)
	char pad_198[0x18]; // 0x198(0x18)

	void UpdateTeamList(); // Function ShooterGame.SpawnPointScorerComponent.UpdateTeamList // (Final|Native|Private) // @ game+0x2024060
	void SetSpawnPointScoringPaused(bool Paused); // Function ShooterGame.SpawnPointScorerComponent.SetSpawnPointScoringPaused // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bef730
	void SetSpawnPointScore(int32_t SpawnPointIndex, enum class EAresTeamRole TeamRole, float NewScore); // Function ShooterGame.SpawnPointScorerComponent.SetSpawnPointScore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bef610
	void ResetSpawnPointScoringData(); // Function ShooterGame.SpawnPointScorerComponent.ResetSpawnPointScoringData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bef3d0
	void OnSpawnPointsGenerated(struct TArray<struct AShooterTeamStart*>& GeneratedSpawnPoints); // Function ShooterGame.SpawnPointScorerComponent.OnSpawnPointsGenerated // (Final|Native|Private|HasOutParms) // @ game+0x393f840
	float GetSpawnPointScore(int32_t SpawnPointIndex, enum class EAresTeamRole TeamRole); // Function ShooterGame.SpawnPointScorerComponent.GetSpawnPointScore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3beeac0
	struct TArray<struct FSpawnPointData> GetSpawnPoints(); // Function ShooterGame.SpawnPointScorerComponent.GetSpawnPoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3beeb90
	struct TArray<struct FSpawnPointData> GetSpawnPointData(); // Function ShooterGame.SpawnPointScorerComponent.GetSpawnPointData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3beea00
	float GetLookAheadDynamicAdjustmentMultiplier(); // Function ShooterGame.SpawnPointScorerComponent.GetLookAheadDynamicAdjustmentMultiplier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be87d0
	struct TArray<int32_t> GetInitialSpawnPointIndices(); // Function ShooterGame.SpawnPointScorerComponent.GetInitialSpawnPointIndices // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bee9d0
	struct TArray<struct FSpawnPointData> GetFilteredSpawnPoints(struct AShooterPlayerState* PlayerState, struct AShooterTeamStart* LastSpawnPoint, bool bOnlyAllowAlliedSpawns, bool bPreferNonRepeatSpawns, bool bPreferNonBlockedSpawns); // Function ShooterGame.SpawnPointScorerComponent.GetFilteredSpawnPoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3bee7b0
	struct TMap<enum class EAresTeamRole, float> CalculateSpawnPointScore(struct FSpawnPointData& SpawnPointData, struct TArray<enum class EAresTeamRole>& TeamRoles); // Function ShooterGame.SpawnPointScorerComponent.CalculateSpawnPointScore // (BlueprintAuthorityOnly|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x40572e0
};

// Class ShooterGame.SpawnPointScorerDebugComponent
// Size: 0x108 (Inherited: 0xe8)
struct USpawnPointScorerDebugComponent : UActorComponent {
	struct TArray<struct FSpawnPointDebugData> SpawnPointDebugData; // 0xe8(0x10)
	int32_t LastUsedSpawnPointDebugDataIndex; // 0xf8(0x04)
	int32_t LastUpdatedSpawnPointDebugDataIndex; // 0xfc(0x04)
	float LookAheadDynamicAdjustmentMultiplier; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void PauseSpawnPointScoringFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.SpawnPointScorerDebugComponent.PauseSpawnPointScoringFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void OnSpawnPointUsed(struct FSpawnPointData& SpawnPointData, enum class EAresTeamRole TeamRole); // Function ShooterGame.SpawnPointScorerDebugComponent.OnSpawnPointUsed // (Final|Native|Private|HasOutParms) // @ game+0x3bef1f0
	void OnSpawnPointUpdated(struct FSpawnPointData& SpawnPointData); // Function ShooterGame.SpawnPointScorerDebugComponent.OnSpawnPointUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3bef080
	void MulticastSpawnPointDebugData(struct TArray<struct FSpawnPointDebugData> ServerSpawnPointDebugData, int32_t ServerLastUsedSpawnPointDebugDataIndex, int32_t ServerLastUpdatedSpawnPointDebugDataIndex, float ServerLookAheadDynamicAdjustmentMultiplier); // Function ShooterGame.SpawnPointScorerDebugComponent.MulticastSpawnPointDebugData // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x3beeeb0
	void FakeSpawnInPointFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.SpawnPointScorerDebugComponent.FakeSpawnInPointFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
};

// Class ShooterGame.SpectateInOrderActionComponent
// Size: 0x130 (Inherited: 0x108)
struct USpectateInOrderActionComponent : USpectateActionComponent {
	char pad_108[0x20]; // 0x108(0x20)
	struct UInputComponent* AltInputComponent; // 0x128(0x08)

	void ServerSpectateInOrder(enum class EViewTargetSearchDirection Direction, bool bFromPlayerInput, int32_t AckIndex); // Function ShooterGame.SpectateInOrderActionComponent.ServerSpectateInOrder // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3bf9cc0
	void RequestSpectatePrev(); // Function ShooterGame.SpectateInOrderActionComponent.RequestSpectatePrev // (Final|Native|Private) // @ game+0x3bf9ca0
	void RequestSpectateNext(); // Function ShooterGame.SpectateInOrderActionComponent.RequestSpectateNext // (Final|Native|Private) // @ game+0x3bf9bf0
	void HandleStrafeBindingsChanged(struct UActionBindSet* ActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.SpectateInOrderActionComponent.HandleStrafeBindingsChanged // (Final|Native|Private) // @ game+0x3bf9710
	void EnableAltControls(); // Function ShooterGame.SpectateInOrderActionComponent.EnableAltControls // (Final|Native|Private|BlueprintCallable) // @ game+0x3bf8f80
	void DisableAltControls(); // Function ShooterGame.SpectateInOrderActionComponent.DisableAltControls // (Final|Native|Private|BlueprintCallable) // @ game+0x3bf8f60
};

// Class ShooterGame.SpectateSpecificActionComponent
// Size: 0x140 (Inherited: 0x108)
struct USpectateSpecificActionComponent : USpectateActionComponent {
	char pad_108[0x38]; // 0x108(0x38)

	void ServerSpectatePlayer(struct AShooterPlayerState* Target, int32_t AckIndex); // Function ShooterGame.SpectateSpecificActionComponent.ServerSpectatePlayer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3bf9de0
	void RequestSpectatePlayer(uint16_t PlayerIndex); // Function ShooterGame.SpectateSpecificActionComponent.RequestSpectatePlayer // (Final|Native|Private) // @ game+0x3bf9c10
	struct FText GetActionNameToSpectate(struct AShooterCharacter* ViewedCharacter); // Function ShooterGame.SpectateSpecificActionComponent.GetActionNameToSpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf8fa0
};

// Class ShooterGame.SpectatorWidgetBaseNative
// Size: 0x300 (Inherited: 0x2d8)
struct USpectatorWidgetBaseNative : UCoordinatedHUDElement {
	struct UImage* CharacterPortrait; // 0x2d8(0x08)
	struct UImage* ObjectiveIcon; // 0x2e0(0x08)
	struct UImage* objectiveIconbg; // 0x2e8(0x08)
	struct UTextBlock* PlayerName; // 0x2f0(0x08)
	struct UImage* teamBackground; // 0x2f8(0x08)
};

// Class ShooterGame.SpikeDefusalPowderedToast
// Size: 0xa8 (Inherited: 0xa8)
struct USpikeDefusalPowderedToast : UBasePowderedToast {
};

// Class ShooterGame.SplineMovementComponent
// Size: 0x178 (Inherited: 0x128)
struct USplineMovementComponent : UMovementComponent {
	struct USplineComponent* SplineComponent; // 0x128(0x08)
	struct TArray<struct FVector> Trajectory; // 0x130(0x10)
	float SpeedAlongSpline; // 0x140(0x04)
	enum class ESplineMovementSpeedUnit SpeedUnit; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	float ClientPosition; // 0x148(0x04)
	float ServerPosition; // 0x14c(0x04)
	float ClientMovementTime; // 0x150(0x04)
	float ServerMovementTime; // 0x154(0x04)
	bool bClientReceivedNewServerMovementTime; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	float ServerTeleportTime; // 0x15c(0x04)
	struct FMulticastInlineDelegate AuthOnSplineEndReached; // 0x160(0x10)
	int32_t LastGoodIndex; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)

	void TickClientMovement(float DeltaTime); // Function ShooterGame.SplineMovementComponent.TickClientMovement // (Final|Native|Protected) // @ game+0x3bfa0e0
	void SetPositionOnSpline(float SplineInputKey); // Function ShooterGame.SplineMovementComponent.SetPositionOnSpline // (Final|Native|Protected) // @ game+0x3bf9f50
	void OnRep_Trajectory(); // Function ShooterGame.SplineMovementComponent.OnRep_Trajectory // (Final|Native|Protected) // @ game+0x3bf9a90
	void OnRep_ServerMovementTime(float OldServerMovementTime); // Function ShooterGame.SplineMovementComponent.OnRep_ServerMovementTime // (Final|Native|Protected) // @ game+0x3bf9a10
	void InitializeSplineComponent(); // Function ShooterGame.SplineMovementComponent.InitializeSplineComponent // (Final|Native|Protected) // @ game+0x3bf9890
	float GetPositionAlongSpline(); // Function ShooterGame.SplineMovementComponent.GetPositionAlongSpline // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3bf9350
	int32_t GetNumPoints(); // Function ShooterGame.SplineMovementComponent.GetNumPoints // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3940430
	void AuthSetSpeedAlongSpline(float SpeedAlongSpline, enum class ESplineMovementSpeedUnit NewSpeedUnit); // Function ShooterGame.SplineMovementComponent.AuthSetSpeedAlongSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x3bf8e90
	void AuthSetPositionOnSpline(float NewPosition); // Function ShooterGame.SplineMovementComponent.AuthSetPositionOnSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthAddPoints(struct TArray<struct FVector>& Positions); // Function ShooterGame.SplineMovementComponent.AuthAddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x393f840
	void AuthAddPoint(struct FVector Position); // Function ShooterGame.SplineMovementComponent.AuthAddPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x372c930
	void AdvanceSimulation(float DeltaTime); // Function ShooterGame.SplineMovementComponent.AdvanceSimulation // (Final|Native|Protected) // @ game+0x3bf8e10
};

// Class ShooterGame.SplitBodyRotationBaseComponent
// Size: 0x168 (Inherited: 0xe8)
struct USplitBodyRotationBaseComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float TurnRateScale; // 0xf0(0x04)
	float TurnRateScaleBlendOut; // 0xf4(0x04)
	float TurnRateScaleSpecialTurnState; // 0xf8(0x04)
	float TurnAtAngle; // 0xfc(0x04)
	float MaxTurnAtAngle; // 0x100(0x04)
	float UpdateTurnAngleMinPercent; // 0x104(0x04)
	float UpdateTurnAngleMaxPercent; // 0x108(0x04)
	float StationaryRecenterTime; // 0x10c(0x04)
	float StationaryRecenterMinimumAngle; // 0x110(0x04)
	bool bEnableSpecialTurnState; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float SpecialTurnStateDelayTime; // 0x118(0x04)
	float SpecialTurnStateDeltaYawTriggerValue; // 0x11c(0x04)
	float SpecialTurnStateAlphaBlendTriggerValue; // 0x120(0x04)
	char pad_124[0x14]; // 0x124(0x14)
	float LowerBodyTurnAngle; // 0x138(0x04)
	float LowerBodyAlphaBlend; // 0x13c(0x04)
	char pad_140[0x28]; // 0x140(0x28)
};

// Class ShooterGame.SplitBodyRotationComponent
// Size: 0x168 (Inherited: 0x168)
struct USplitBodyRotationComponent : USplitBodyRotationBaseComponent {
};

// Class ShooterGame.SplitBodyRotationGroundComponent
// Size: 0x168 (Inherited: 0x168)
struct USplitBodyRotationGroundComponent : USplitBodyRotationBaseComponent {
};

// Class ShooterGame.SplitBodyRotationRopeComponent
// Size: 0x168 (Inherited: 0x168)
struct USplitBodyRotationRopeComponent : USplitBodyRotationBaseComponent {
};

// Class ShooterGame.SprayUIData
// Size: 0x90 (Inherited: 0x90)
struct USprayUIData : UBaseContentUIData {
};

// Class ShooterGame.SprayDataAsset
// Size: 0xc8 (Inherited: 0x50)
struct USprayDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> Theme; // 0x80(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Levels; // 0xb0(0x10)
	enum class EAresSprayCategory Category; // 0xc0(0x01)
	bool bIsNullSpray; // 0xc1(0x01)
	char pad_C2[0x6]; // 0xc2(0x06)

	struct USprayLevelDataAsset* GetSprayLevel(int32_t LevelNumber); // Function ShooterGame.SprayDataAsset.GetSprayLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf93b0
};

// Class ShooterGame.SprayEquipSlotUIData
// Size: 0x90 (Inherited: 0x90)
struct USprayEquipSlotUIData : UBaseContentUIData {
};

// Class ShooterGame.SprayEquipSlotDataAsset
// Size: 0x88 (Inherited: 0x50)
struct USprayEquipSlotDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	int32_t SprayCategoriesAllowed; // 0x80(0x04)
	int32_t SlotOrder; // 0x84(0x04)

	bool IsSprayCategoryAllowed(enum class EAresSprayCategory Category); // Function ShooterGame.SprayEquipSlotDataAsset.IsSprayCategoryAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf98b0
};

// Class ShooterGame.SprayLevelDataAsset
// Size: 0xe8 (Inherited: 0x50)
struct USprayLevelDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> SprayData; // 0x80(0x30)
	struct TSoftClassPtr<UObject> Spray; // 0xb0(0x30)
	int32_t SprayLevel; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	struct USprayDataAsset* GetSpray(); // Function ShooterGame.SprayLevelDataAsset.GetSpray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9380
};

// Class ShooterGame.SprayLevelUIData
// Size: 0x90 (Inherited: 0x90)
struct USprayLevelUIData : UBaseContentUIData {
};

// Class ShooterGame.SprayLoadoutComponent
// Size: 0x128 (Inherited: 0xe8)
struct USprayLoadoutComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRepLoadoutDelegate; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnSprayFiredSuccess; // 0xf8(0x10)
	struct TArray<struct AAresSpray*> SprayLoadoutV2; // 0x108(0x10)
	struct TArray<struct FGuid> SprayLoadoutLevelIDs; // 0x118(0x10)

	void OnRep_SprayLoadoutLevelIDs(); // Function ShooterGame.SprayLoadoutComponent.OnRep_SprayLoadoutLevelIDs // (Final|Native|Private) // @ game+0x37e69c0
	void OnRep_SprayFiredSuccess(); // Function ShooterGame.SprayLoadoutComponent.OnRep_SprayFiredSuccess // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x36355e0
	struct TArray<struct USprayLevelDataAsset*> GetSprayLoadoutLevelAssets(); // Function ShooterGame.SprayLoadoutComponent.GetSprayLoadoutLevelAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x3bf95a0
	struct USprayLevelDataAsset* GetSprayLevelDataAssetAtIndex(int32_t SlotIndex); // Function ShooterGame.SprayLoadoutComponent.GetSprayLevelDataAssetAtIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3bf9500
	struct USprayLevelDataAsset* GetSprayLevelDataAsset(struct FGuid& LevelID); // Function ShooterGame.SprayLoadoutComponent.GetSprayLevelDataAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3bf9450
};

// Class ShooterGame.StabilityComponent
// Size: 0x1f88 (Inherited: 0xe8)
struct UStabilityComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float InProgressCrouchPenalty; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FRuntimeFloatCurve LandingPenaltyCurve; // 0xf8(0x88)
	bool bRecoveryEnabled; // 0x180(0x01)
	char pad_181[0x7]; // 0x181(0x07)
	struct FStabilityVariable Error; // 0x188(0x7c8)
	struct FFixedRateDecayForStability MovementDecayRate; // 0x950(0xa0)
	struct FFixedRateDecayForStability PitchRecoilStabilityDecayRate; // 0x9f0(0xa0)
	struct FFixedRateDecayForStability YawRecoilStabilityDecayRate; // 0xa90(0xa0)
	struct FStabilityVariable PitchRecoil; // 0xb30(0x7c8)
	struct FStabilityVariable YawRecoil; // 0x12f8(0x7c8)
	float DefaultErrorPower; // 0x1ac0(0x04)
	float ErrorPowers[0x6]; // 0x1ac4(0x18)
	enum class EStabilityInterpolationType StabilityIncreaseInterpolationType; // 0x1adc(0x01)
	enum class EStabilityInterpolationType StabilityRecoveryInterpolationType; // 0x1add(0x01)
	char pad_1ADE[0x2]; // 0x1ade(0x02)
	struct FRuntimeFloatCurve RecoveryTimeCurve; // 0x1ae0(0x88)
	struct FYawDirectionManipulator YawDirectionManipulator; // 0x1b68(0x2c)
	float GunRecoveryTimeRemainingInSeconds; // 0x1b94(0x04)
	float GunRecoveryTimeInSeconds; // 0x1b98(0x04)
	float TapEfficiency; // 0x1b9c(0x04)
	float InstabilityAccrualBank; // 0x1ba0(0x04)
	float InstabilityDeductionPerShot; // 0x1ba4(0x04)
	struct FStabilityInterpolation StabilityInterpolation; // 0x1ba8(0x64)
	struct FStabilityInterpolationVariable YawSwitchMultiplierInterpVariable; // 0x1c0c(0x14)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x1c20(0x08)
	float ScopedStabilityMultiplier; // 0x1c28(0x04)
	float WalkingDelayTime; // 0x1c2c(0x04)
	float RunningTimeToTriggerWalkingDelay; // 0x1c30(0x04)
	char pad_1C34[0x20]; // 0x1c34(0x20)
	float MinTaggingOverrideSpeedPercent; // 0x1c54(0x04)
	struct FRuntimeFloatCurve MultiProjectileOffsetMultiplierCurves[0x6]; // 0x1c58(0x330)

	void UpdateStabilityMultiplier(enum class EStabilityType Type, float NewMultiplier); // Function ShooterGame.StabilityComponent.UpdateStabilityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x3bfa160
	void SetScopedStabilityMultiplier(float NewScopedStabilityMultiplier); // Function ShooterGame.StabilityComponent.SetScopedStabilityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x3bfa060
	void SetRecoveryExternalCurve(struct UCurveFloat* NewCurve); // Function ShooterGame.StabilityComponent.SetRecoveryExternalCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x3bf9fd0
	void SetErrorExternalCurve(struct UCurveFloat* NewCurve); // Function ShooterGame.StabilityComponent.SetErrorExternalCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x3bf9ec0
	void OverrideErrorCurve(struct FRuntimeFloatCurve NewCurve); // Function ShooterGame.StabilityComponent.OverrideErrorCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x3bf9ab0
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.StabilityComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x3bf9940
	float GetZoomAlpha(); // Function ShooterGame.StabilityComponent.GetZoomAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf96e0
	float GetYawRecoil(); // Function ShooterGame.StabilityComponent.GetYawRecoil // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf96b0
	float GetTotalErrorPercent(); // Function ShooterGame.StabilityComponent.GetTotalErrorPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9680
	float GetTotalError(); // Function ShooterGame.StabilityComponent.GetTotalError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9650
	float GetStabilityIndex(); // Function ShooterGame.StabilityComponent.GetStabilityIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9620
	float GetPitchRecoil(); // Function ShooterGame.StabilityComponent.GetPitchRecoil // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9320
	float GetMovementErrorPercent(); // Function ShooterGame.StabilityComponent.GetMovementErrorPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf92f0
	float GetMovementError(); // Function ShooterGame.StabilityComponent.GetMovementError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf92c0
	float GetFiringErrorPercent(); // Function ShooterGame.StabilityComponent.GetFiringErrorPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9290
	float GetFiringError(); // Function ShooterGame.StabilityComponent.GetFiringError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf9260
	float GetExampleFiringErrorValue(bool bUseADS); // Function ShooterGame.StabilityComponent.GetExampleFiringErrorValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bf91c0
	struct FRuntimeFloatCurve GetErrorCurve(); // Function ShooterGame.StabilityComponent.GetErrorCurve // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bf90b0
};

// Class ShooterGame.StabilityVisualizationComponent
// Size: 0x3d0 (Inherited: 0xe8)
struct UStabilityVisualizationComponent : UActorComponent {
	struct FCameraTuning CameraTuning; // 0xe8(0x250)
	struct UStabilityComponent* ActiveStabilityComponent; // 0x338(0x08)
	struct FRuntimeFloatCurve PitchToCrosshairAlphaCurve; // 0x340(0x88)
	bool bUseMultiProjectileMultiplierAsMovementError; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)

	void SetStabilityComponent(struct UStabilityComponent* StabilityComponentToVisualize); // Function ShooterGame.StabilityVisualizationComponent.SetStabilityComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x38fef60
	bool IsAdsAnimationEnabled(); // Function ShooterGame.StabilityVisualizationComponent.IsAdsAnimationEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bfffe0
	float GetYawRecoilFollowCameraValue(); // Function ShooterGame.StabilityVisualizationComponent.GetYawRecoilFollowCameraValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffdd0
	float GetYawRecoilFiringOffsetFromCamera(); // Function ShooterGame.StabilityVisualizationComponent.GetYawRecoilFiringOffsetFromCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffda0
	struct UStabilityComponent* GetStabilityComponent(); // Function ShooterGame.StabilityVisualizationComponent.GetStabilityComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffd70
	float GetPitchRecoilFollowCameraValue(); // Function ShooterGame.StabilityVisualizationComponent.GetPitchRecoilFollowCameraValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffd40
	float GetPitchRecoilFiringOffsetFromCamera(); // Function ShooterGame.StabilityVisualizationComponent.GetPitchRecoilFiringOffsetFromCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffd10
	float GetAdsForwardOffset(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsForwardOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffa30
	float GetAdsCameraShakeTranslationPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraShakeTranslationPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bffa00
	float GetAdsCameraShakeRotationPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraShakeRotationPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bff9d0
	float GetAdsCameraPopYawPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraPopYawPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bff9a0
	float GetAdsCameraPopPitchPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraPopPitchPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bff970
	bool DoesAdsCrosshairFollowRecoil(); // Function ShooterGame.StabilityVisualizationComponent.DoesAdsCrosshairFollowRecoil // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bff910
};

// Class ShooterGame.StabilityVisualizationManagerComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UStabilityVisualizationManagerComponent : UActorComponent {
	struct UStabilityVisualizationComponent* ActiveStabilityVisualizationComponent; // 0xe8(0x08)

	void SetActiveStabilityVisualizationComponent(struct UStabilityVisualizationComponent* StabilityVisualizationComponent); // Function ShooterGame.StabilityVisualizationManagerComponent.SetActiveStabilityVisualizationComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c000f0
	struct UStabilityVisualizationComponent* GetActiveStabilityVisualizationComponent(); // Function ShooterGame.StabilityVisualizationManagerComponent.GetActiveStabilityVisualizationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3bff940
};

// Class ShooterGame.StandardAresStringListSetting
// Size: 0x88 (Inherited: 0x30)
struct UStandardAresStringListSetting : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UArrayListModel* StringListModel; // 0x38(0x08)
	char pad_40[0x48]; // 0x40(0x48)

	void HandleStringSettingChanged(enum class EAresStringSettingName InSettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.StandardAresStringListSetting.HandleStringSettingChanged // (Final|Native|Private) // @ game+0x3bffe00
};

// Class ShooterGame.StandUpAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UStandUpAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.StandUpAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UStandUpAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.StateMachineDebugComponent
// Size: 0x150 (Inherited: 0xe8)
struct UStateMachineDebugComponent : UActorComponent {
	struct UEquippableStateMachineComponent* WatchedStateMachine; // 0xe8(0x08)
	struct AShooterCharacter* OwningShooterCharacter; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
	int32_t MaxHistoryLength; // 0x100(0x04)
	char pad_104[0x4c]; // 0x104(0x4c)

	void ServerStopWatchingStateMachine(); // Function ShooterGame.StateMachineDebugComponent.ServerStopWatchingStateMachine // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x3654e70
	void ServerStartWatchingStateMachine(struct UEquippableStateMachineComponent* StateMachineToWatch); // Function ShooterGame.StateMachineDebugComponent.ServerStartWatchingStateMachine // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x36f5610
	void OnStateChanged(struct UStateComponent* OldState, struct UStateComponent* NewState); // Function ShooterGame.StateMachineDebugComponent.OnStateChanged // (Final|Native|Protected) // @ game+0x3669300
	void OnServerCorrection(struct UEquippableStateMachineComponent* StateMachine); // Function ShooterGame.StateMachineDebugComponent.OnServerCorrection // (Final|Native|Protected) // @ game+0x3634e00
	void ClientAddServerHistoryEntry(struct FStateMachineDebugHistoryEntry Entry); // Function ShooterGame.StateMachineDebugComponent.ClientAddServerHistoryEntry // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x3bff780
};

// Class ShooterGame.TransformTransitionContext
// Size: 0x60 (Inherited: 0x30)
struct UTransformTransitionContext : UStateTransitionContext {
	struct FTransform Transform; // 0x30(0x30)

	void SetTransform(struct FTransform NewTransform); // Function ShooterGame.TransformTransitionContext.SetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c00210
};

// Class ShooterGame.ActorListTransitionContext
// Size: 0x40 (Inherited: 0x30)
struct UActorListTransitionContext : UStateTransitionContext {
	struct TArray<struct AActor*> Actors; // 0x30(0x10)

	bool GetFirstActorTransform(struct FTransform& OutTransform); // Function ShooterGame.ActorListTransitionContext.GetFirstActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3bffbd0
	struct AActor* GetFirstActor(struct AActor* NewActor); // Function ShooterGame.ActorListTransitionContext.GetFirstActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3bffb20
	void AddActor(struct AActor* NewActor); // Function ShooterGame.ActorListTransitionContext.AddActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3bff660
};

// Class ShooterGame.StaticCrosshairHudElement
// Size: 0x2c8 (Inherited: 0x178)
struct UStaticCrosshairHudElement : UBaseCrosshairHudElement {
	char pad_178[0x10]; // 0x178(0x10)
	struct UBaseCrosshairHudElement* BaseCrosshairToRender; // 0x188(0x08)
	char pad_190[0x138]; // 0x190(0x138)
};

// Class ShooterGame.StaticCrosshairPreviewWidget
// Size: 0x300 (Inherited: 0x2e8)
struct UStaticCrosshairPreviewWidget : UCrosshairPreviewWidgetBase {
	struct FString CrosshairSettingsString; // 0x2e8(0x10)
	struct UBaseCrosshairHudElement* BaseCrosshair; // 0x2f8(0x08)
};

// Class ShooterGame.StaticGenericConfirmationModalViewModel
// Size: 0x128 (Inherited: 0x128)
struct UStaticGenericConfirmationModalViewModel : UGenericConfirmationModalViewModel {
};

// Class ShooterGame.StealthComponent
// Size: 0x288 (Inherited: 0xe8)
struct UStealthComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float StealthRange; // 0xf0(0x04)
	float RevealTime; // 0xf4(0x04)
	float HideTime; // 0xf8(0x04)
	bool bInitialStealthState; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	struct AEffectContainer* StealthVisualizerEffect; // 0x100(0x08)
	struct AEffectContainer* WhileVisibleEffect; // 0x108(0x08)
	struct AEffectContainer* RevealedEffect; // 0x110(0x08)
	struct AEffectContainer* StartHideTimeEffect; // 0x118(0x08)
	struct AEffectContainer* HiddenEffect; // 0x120(0x08)
	struct FMulticastInlineDelegate OnRevealedFromStealth; // 0x128(0x10)
	struct FMulticastInlineDelegate OnHiddenByStealth; // 0x138(0x10)
	struct FMulticastInlineDelegate OnStartHide; // 0x148(0x10)
	struct FMulticastInlineDelegate OnStealthActiveChanged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnSubscribedStealthUpdate; // 0x168(0x10)
	struct FMulticastInlineDelegate OnViewerLeaveStealthRange; // 0x178(0x10)
	struct FMulticastInlineDelegate OnViewerEnterStealthRange; // 0x188(0x10)
	char pad_198[0x80]; // 0x198(0x80)
	bool bStealthIsActive; // 0x218(0x01)
	char pad_219[0x7]; // 0x219(0x07)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FRevealInfo> RevealHistory; // 0x220(0x50)
	struct UPrimitiveComponent* OverlapTestComponent; // 0x270(0x08)
	struct UPrimitiveComponent* PendingOverlapTestComponent; // 0x278(0x08)
	struct UStealthComponent* SubscribedToComponent; // 0x280(0x08)

	void SubscribedStealthUpdate(struct UStealthComponent* OtherComponent, bool bInRange); // Function ShooterGame.StealthComponent.SubscribedStealthUpdate // (Final|Native|Private) // @ game+0x3c098e0
	void SubscribedStealthActiveChanged(struct UStealthComponent* OtherComponent); // Function ShooterGame.StealthComponent.SubscribedStealthActiveChanged // (Final|Native|Private) // @ game+0x3c09850
	void StartOverlapRevealComponent(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function ShooterGame.StealthComponent.StartOverlapRevealComponent // (Final|Native|Private|HasOutParms) // @ game+0x3c086e0
	void SetStealthedForSnapping(bool Val); // Function ShooterGame.StealthComponent.SetStealthedForSnapping // (Final|Native|Public|BlueprintCallable) // @ game+0x3635160
	void SetRevealOverlapComponent(struct UPrimitiveComponent* OverlapComponent); // Function ShooterGame.StealthComponent.SetRevealOverlapComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c08620
	void PerspectiveChanged(struct AShooterCharacter* Character); // Function ShooterGame.StealthComponent.PerspectiveChanged // (Final|Native|Private) // @ game+0x3c08290
	void OnStealthAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.StealthComponent.OnStealthAttributeChanged // (Final|Native|Private|HasOutParms) // @ game+0x3c080d0
	void OnRep_SubscribedToComponent(struct UStealthComponent* PrevComponent); // Function ShooterGame.StealthComponent.OnRep_SubscribedToComponent // (Final|Native|Private) // @ game+0x3c08040
	void OnRep_StealthIsActive(); // Function ShooterGame.StealthComponent.OnRep_StealthIsActive // (Final|Native|Private) // @ game+0x3c08020
	bool IsStealthedForActor(struct AActor* Actor, bool ShouldUpdateStealthVisibility); // Function ShooterGame.StealthComponent.IsStealthedForActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3c07e00
	bool GetStealthedForSnapping(); // Function ShooterGame.StealthComponent.GetStealthedForSnapping // (Final|Native|Public|BlueprintCallable) // @ game+0x36a05b0
	void BeginRevealOverlaps(); // Function ShooterGame.StealthComponent.BeginRevealOverlaps // (Final|Native|Private) // @ game+0x3c061f0
	void AuthSubscribeToOtherComponent(struct UStealthComponent* OtherComponent); // Function ShooterGame.StealthComponent.AuthSubscribeToOtherComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3634e00
	void AuthSetStealthIsActive(bool NewStealth); // Function ShooterGame.StealthComponent.AuthSetStealthIsActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3635160
};

// Class ShooterGame.StopLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UStopLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.StopUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UStopUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.StorefrontItemUIData
// Size: 0x108 (Inherited: 0x90)
struct UStorefrontItemUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	struct FText CustomDisplayNameSubtext; // 0xa8(0x18)
	struct UTexture* DisplayIcon2; // 0xc0(0x08)
	struct UTexture* VerticalPromoImage; // 0xc8(0x08)
	bool UseAdditionalContext; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct FText PromoExtraDescription; // 0xd8(0x18)
	struct FText BundleExtraDescription; // 0xf0(0x18)
};

// Class ShooterGame.StorefrontItemDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UStorefrontItemDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.StoreManager
// Size: 0x5d0 (Inherited: 0x80)
struct UStoreManager : UInitSystem {
	struct FMulticastInlineDelegate OnIsBodegaEnabledChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsBonusShopActiveChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnIsEligibleForJuiceChanged; // 0xa0(0x10)
	char pad_B0[0x30]; // 0xb0(0x30)
	struct FMulticastInlineDelegate OnPlayerStoreError; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnWalletUpdated; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnWalletOfTypeUpdated; // 0x100(0x10)
	char pad_110[0x18]; // 0x110(0x18)
	struct FMulticastInlineDelegate OnOrderSuccess; // 0x128(0x10)
	struct FMulticastInlineDelegate OnOrderError; // 0x138(0x10)
	char pad_148[0x10]; // 0x148(0x10)
	struct FMulticastInlineDelegate OnAccessoryStoreEnabledChanged; // 0x158(0x10)
	char pad_168[0x70]; // 0x168(0x70)
	struct FGetWalletResponse Wallet; // 0x1d8(0xa0)
	struct FGetWalletResponse JuiceWallet; // 0x278(0xa0)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x318(0x08)
	struct UStoreService* StoreService; // 0x320(0x08)
	struct URSOManager* RSOManager; // 0x328(0x08)
	struct URMSManager* RMSManager; // 0x330(0x08)
	struct UContentIndex* ContentIndex; // 0x338(0x08)
	struct UConfigManager* ConfigManager; // 0x340(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x348(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x350(0x08)
	struct UContentManager* ContentManager; // 0x358(0x08)
	struct UPlatformOffersManager* PlatformOffersManager; // 0x360(0x08)
	struct UStorefrontModelV2* PlayerStorefrontV2; // 0x368(0x08)
	struct UBodegaModel* BodegaModel; // 0x370(0x08)
	struct TMap<struct FGuid, struct UStoreOffer*> OffersByID; // 0x378(0x50)
	struct TMap<struct FGuid, struct UStoreOffer*> OffersByItemID; // 0x3c8(0x50)
	struct TMap<struct FGuid, struct FStorefrontBundleItem> BundleItemsByItemID; // 0x418(0x50)
	struct TMap<struct FGuid, struct FStorefrontBundleItemOffer> BundleItemOffersByItemOfferID; // 0x468(0x50)
	struct TArray<struct UUpgradeCurrencyOffer*> UpgradeCurrencyOffers; // 0x4b8(0x10)
	struct TArray<struct UPlatformOfferDTO*> PlatformOffers; // 0x4c8(0x10)
	struct TMap<enum class EAresContentType, struct FEntitlementTypeInfo> EntitlementTypeInfos; // 0x4d8(0x50)
	struct TSet<struct FGuid> EquippableSkinIDs; // 0x528(0x50)
	struct TMap<struct FGuid, enum class EPluginStorefrontType> PluginStorefrontIDToType; // 0x578(0x50)
	char pad_5C8[0x8]; // 0x5c8(0x08)

	bool TryUpdatingEntitlementTypeInfoFromResponse(enum class EAresContentType ContentType, struct FGetEntitlementsResponse EntitlementResponse); // Function ShooterGame.StoreManager.TryUpdatingEntitlementTypeInfoFromResponse // (Final|Native|Private) // @ game+0x3c099b0
	bool SubmitOrder(struct FGuid& XID, struct FGuid& OfferId, struct FGuid& CurrencyID, int32_t PaymentAmount, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitOrder // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c095b0
	bool SubmitOpenJuiceBox(struct FGuid& XID, struct FGuid& JuiceBoxID, int32_t OpenQuantity, int32_t ExpectedInInventory, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitOpenJuiceBox // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c09330
	bool SubmitJuiceCraftOrder(struct FGuid& XID, enum class EJuiceOrderRequestType JuiceOrderType, struct TMap<struct FGuid, int32_t> ExpectedCosts, struct FItemProgressionDTO ExpectedProgression, struct TArray<struct FEntitlementReward> ExpectedEntitlementRewards, struct TArray<struct FWalletReward> ExpectedWalletRewards, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitJuiceCraftOrder // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3c08df0
	bool SubmitBundleOrder(struct FGuid& XID, struct FGuid& BundleID, struct TMap<struct FGuid, int32_t> ExpectedCosts, struct TArray<struct FEntitlementReward> ExpectedEntitlementRewards, struct TArray<struct FWalletReward> ExpectedWalletRewards, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitBundleOrder // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3c08900
	bool ShouldUseCachedStorefront(); // Function ShooterGame.StoreManager.ShouldUseCachedStorefront // (Final|Native|Public) // @ game+0x3c086b0
	void RevealNightMarketOffers(struct TArray<struct FGuid>& RevealedOfferIDs); // Function ShooterGame.StoreManager.RevealNightMarketOffers // (Final|Native|Public|HasOutParms) // @ game+0x3c08570
	void RefreshWalletByType(enum class EWalletType TypeOfWallet); // Function ShooterGame.StoreManager.RefreshWalletByType // (Final|Native|Public|BlueprintCallable) // @ game+0x3c084f0
	void RefreshWallet(); // Function ShooterGame.StoreManager.RefreshWallet // (Final|Native|Public|BlueprintCallable) // @ game+0x3c084d0
	void RefreshLoyaltyRewardEntitlements(); // Function ShooterGame.StoreManager.RefreshLoyaltyRewardEntitlements // (Final|Native|Public) // @ game+0x3c084b0
	void RefreshEntitlements(); // Function ShooterGame.StoreManager.RefreshEntitlements // (Final|Native|Public|BlueprintCallable) // @ game+0x3c08490
	bool PollOrderCompletion(struct FGuid& OrderID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.PollOrderCompletion // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c08320
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.StoreManager.OnBugCommand // (Final|Native|Private) // @ game+0x3c07ed0
	bool IsOfferCostValid(struct UStoreOffer* Offer); // Function ShooterGame.StoreManager.IsOfferCostValid // (Final|Native|Private) // @ game+0x3c07d60
	bool IsJuiceCurrency(struct FGuid& CurrencyID); // Function ShooterGame.StoreManager.IsJuiceCurrency // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07cb0
	bool IsInitialized(); // Function ShooterGame.StoreManager.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07c80
	bool IsEligibleForJuice(); // Function ShooterGame.StoreManager.IsEligibleForJuice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07c60
	bool IsDoughEnabled(); // Function ShooterGame.StoreManager.IsDoughEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c07c30
	bool IsDoughConfirmationEnabled(); // Function ShooterGame.StoreManager.IsDoughConfirmationEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07c00
	bool IsCostValid(struct TMap<struct FGuid, int32_t> Cost); // Function ShooterGame.StoreManager.IsCostValid // (Final|Native|Private) // @ game+0x3c07a80
	bool IsBonusShopActive(); // Function ShooterGame.StoreManager.IsBonusShopActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07a60
	bool IsBodegaEnabled(); // Function ShooterGame.StoreManager.IsBodegaEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07a30
	bool IsAccessoryStoreEnabled(); // Function ShooterGame.StoreManager.IsAccessoryStoreEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c07a00
	bool HasCurrencyCap(struct FGuid& CurrencyID); // Function ShooterGame.StoreManager.HasCurrencyCap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c07950
	void HandleUpdatedStorefrontV3(struct FGetStorefrontResponseV3& GetStorefrontResponse); // Function ShooterGame.StoreManager.HandleUpdatedStorefrontV3 // (Final|Native|Public|HasOutParms) // @ game+0x3c07490
	struct FGetWalletResponse GetWallet(); // Function ShooterGame.StoreManager.GetWallet // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c073e0
	struct FGuid GetUpgradeTokenUUID(); // Function ShooterGame.StoreManager.GetUpgradeTokenUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c073a0
	struct TArray<struct UUpgradeCurrencyOffer*> GetUpgradeCurrencyOffers(); // Function ShooterGame.StoreManager.GetUpgradeCurrencyOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c072c0
	struct FGuid GetSubCurrencyIDPaid(); // Function ShooterGame.StoreManager.GetSubCurrencyIDPaid // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07290
	struct FGuid GetSubCurrencyIDGranted(); // Function ShooterGame.StoreManager.GetSubCurrencyIDGranted // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c07260
	struct UStoreManager* GetStoreManager(struct UObject* WorldContextObject); // Function ShooterGame.StoreManager.GetStoreManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c071d0
	struct URewardModel* GetRewardModelForOfferDTO(struct UOfferDTO* Offer); // Function ShooterGame.StoreManager.GetRewardModelForOfferDTO // (Final|Native|Private) // @ game+0x3c07130
	struct URewardModel* GetRewardModelForOffer(struct UStoreOffer* Offer); // Function ShooterGame.StoreManager.GetRewardModelForOffer // (Final|Native|Private) // @ game+0x3c07090
	struct FGuid GetRecruitmentTokenUUID(); // Function ShooterGame.StoreManager.GetRecruitmentTokenUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c07050
	struct TArray<struct UPlatformOfferDTO*> GetPlatformOffers(); // Function ShooterGame.StoreManager.GetPlatformOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c06f80
	bool GetOrder(struct FGuid& OrderID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.GetOrder // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c06e10
	struct UStoreOffer* GetOfferByInventoryItemDataAsset(struct UAresBasePrimaryDataAsset* ItemAsset); // Function ShooterGame.StoreManager.GetOfferByInventoryItemDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c06d70
	int32_t GetJuiceVariantCost(); // Function ShooterGame.StoreManager.GetJuiceVariantCost // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c06d50
	struct FGuid GetJuiceMaxEnergyUUID(); // Function ShooterGame.StoreManager.GetJuiceMaxEnergyUUID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c06d10
	int32_t GetJuiceLevelCost(); // Function ShooterGame.StoreManager.GetJuiceLevelCost // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c06cf0
	struct FGuid GetJuiceEnergyUUID(); // Function ShooterGame.StoreManager.GetJuiceEnergyUUID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c06cb0
	struct TArray<struct FGuid> GetJuiceBoxUUIDs(); // Function ShooterGame.StoreManager.GetJuiceBoxUUIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c06c20
	struct FGuid GetDoughUUID(); // Function ShooterGame.StoreManager.GetDoughUUID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c06be0
	int32_t GetCurrencyLimit(struct FGuid& CurrencyID, struct FGuid& SubCurrencyID); // Function ShooterGame.StoreManager.GetCurrencyLimit // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c06ad0
	int32_t GetCurrencyBalance(struct FGuid& CurrencyID); // Function ShooterGame.StoreManager.GetCurrencyBalance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c06a20
	struct FStorefrontBundleItemOffer GetBundleItemOfferByBundleItemOfferID(struct FGuid& ItemId); // Function ShooterGame.StoreManager.GetBundleItemOfferByBundleItemOfferID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c068d0
	struct FStorefrontBundleItem GetBundleItemByInventoryItemID(struct FGuid& ItemId); // Function ShooterGame.StoreManager.GetBundleItemByInventoryItemID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c067f0
	struct UBodegaModel* GetBodega(); // Function ShooterGame.StoreManager.GetBodega // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c067d0
	struct FGuid GetAresPointsUUID(); // Function ShooterGame.StoreManager.GetAresPointsUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3c06790
	int32_t GetAresPointsBalance(); // Function ShooterGame.StoreManager.GetAresPointsBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c06760
	void FinalizeInit(enum class EPlatformInitErrorReason ErrorReason); // Function ShooterGame.StoreManager.FinalizeInit // (Final|Native|Private) // @ game+0x3c066e0
	void FetchStoreForPlayer(); // Function ShooterGame.StoreManager.FetchStoreForPlayer // (Final|Native|Private) // @ game+0x3c066c0
	void FetchOffersAndStoreForPlayer(); // Function ShooterGame.StoreManager.FetchOffersAndStoreForPlayer // (Final|Native|Public) // @ game+0x3c066a0
	void CreateStoreOfferFromSuboffer(struct FPluginStoreSubOffer& SubOffer); // Function ShooterGame.StoreManager.CreateStoreOfferFromSuboffer // (Final|Native|Public|HasOutParms) // @ game+0x3c06490
	void CreateRewardFromSuboffer(struct FPluginStoreSubOffer& SubOffer, struct TArray<struct FStoreOfferReward>& Rewards); // Function ShooterGame.StoreManager.CreateRewardFromSuboffer // (Final|Native|Public|HasOutParms) // @ game+0x3c06210
	bool AreTermsAndConditionsRequired(); // Function ShooterGame.StoreManager.AreTermsAndConditionsRequired // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c061c0
};

// Class ShooterGame.StoreOffer
// Size: 0xb0 (Inherited: 0x30)
struct UStoreOffer : UObject {
	struct FGuid OfferId; // 0x30(0x10)
	bool IsDirectPurchase; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct FStoreOfferReward> Rewards; // 0x48(0x10)
	struct TMap<struct FGuid, int32_t> Cost; // 0x58(0x50)
	struct FDateTime StartDate; // 0xa8(0x08)
};

// Class ShooterGame.CostDTO
// Size: 0x50 (Inherited: 0x30)
struct UCostDTO : UObject {
	struct FGuid CurrencyID; // 0x30(0x10)
	int32_t BaseCost; // 0x40(0x04)
	int32_t DiscountedCost; // 0x44(0x04)
	int32_t DiscountPercent; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class ShooterGame.OfferDetail
// Size: 0xb8 (Inherited: 0x30)
struct UOfferDetail : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct TMap<struct FGuid, struct UCostDTO*> Cost; // 0x40(0x50)
	bool IsDirectPurchase; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct TArray<struct FStoreOfferReward> Rewards; // 0x98(0x10)
	struct FDateTime StartDate; // 0xa8(0x08)
	struct UBaseInventoryModel* InventoryModel; // 0xb0(0x08)
};

// Class ShooterGame.OfferDTO
// Size: 0x58 (Inherited: 0x30)
struct UOfferDTO : UObject {
	struct FMulticastInlineDelegate OnCostChanged; // 0x30(0x10)
	struct UOfferDetail* OfferDetail; // 0x40(0x08)
	struct TArray<struct UOfferDTO*> SubOffers; // 0x48(0x10)

	void RecalculateCost(); // Function ShooterGame.OfferDTO.RecalculateCost // (Final|Native|Public) // @ game+0x3c15680
};

// Class ShooterGame.RotatingOfferDTO
// Size: 0x58 (Inherited: 0x58)
struct URotatingOfferDTO : UOfferDTO {
};

// Class ShooterGame.AccessoryStoreOfferViewModel
// Size: 0x70 (Inherited: 0x58)
struct UAccessoryStoreOfferViewModel : UOfferDTO {
	struct FGuid ContractID; // 0x58(0x10)
	struct UStoreOffer* Offer; // 0x68(0x08)
};

// Class ShooterGame.BonusStoreOfferViewModel
// Size: 0xe0 (Inherited: 0x58)
struct UBonusStoreOfferViewModel : UOfferDTO {
	struct FGuid BonusOfferID; // 0x58(0x10)
	struct UStoreOffer* Offer; // 0x68(0x08)
	int32_t DiscountPercent; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct TMap<struct FGuid, int32_t> DiscountedCost; // 0x78(0x50)
	struct FString DiscountPercentDescription; // 0xc8(0x10)
	bool IsSeen; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class ShooterGame.UpgradeCurrencyOffer
// Size: 0x90 (Inherited: 0x58)
struct UUpgradeCurrencyOffer : UOfferDTO {
	struct UCurrencyDataAsset* PurchaseCurrency; // 0x58(0x08)
	int32_t Cost; // 0x60(0x04)
	struct FGuid OfferId; // 0x64(0x10)
	char pad_74[0x4]; // 0x74(0x04)
	struct UStorefrontItemDataAsset* StorefrontItem; // 0x78(0x08)
	float DiscountPercent; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct UStoreOffer* Offer; // 0x88(0x08)
};

// Class ShooterGame.BodegaOfferModel
// Size: 0xd0 (Inherited: 0x58)
struct UBodegaOfferModel : UOfferDTO {
	struct TArray<struct UStoreOffer*> StoreOffers; // 0x58(0x10)
	struct FGuid CharacterID; // 0x68(0x10)
	struct UCharacterDataAsset* CharacterDataAsset; // 0x78(0x08)
	struct TMap<struct FGuid, struct UCurrencyDataAsset*> CurrencyDataAssets; // 0x80(0x50)
};

// Class ShooterGame.BodegaModel
// Size: 0x50 (Inherited: 0x30)
struct UBodegaModel : UObject {
	struct FGuid FeaturedCharacterID; // 0x30(0x10)
	struct TArray<struct UBodegaOfferModel*> BodegaOffers; // 0x40(0x10)
};

// Class ShooterGame.ContractLevelOfferDTO
// Size: 0x60 (Inherited: 0x58)
struct UContractLevelOfferDTO : UOfferDTO {
	int32_t ToLevel; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class ShooterGame.ContractUpgradeOfferDTO
// Size: 0x58 (Inherited: 0x58)
struct UContractUpgradeOfferDTO : UOfferDTO {
};

// Class ShooterGame.ItemLevelOfferDTO
// Size: 0x60 (Inherited: 0x58)
struct UItemLevelOfferDTO : UOfferDTO {
	int32_t ToLevel; // 0x58(0x04)
	int32_t CurrentLevel; // 0x5c(0x04)
};

// Class ShooterGame.SidegradeOfferDTO
// Size: 0x78 (Inherited: 0x58)
struct USidegradeOfferDTO : UOfferDTO {
	struct FGuid SidegradeOptionID; // 0x58(0x10)
	struct FGuid SidegradeID; // 0x68(0x10)
};

// Class ShooterGame.PlatformOfferDTO
// Size: 0xe0 (Inherited: 0x58)
struct UPlatformOfferDTO : UOfferDTO {
	struct FString Platform; // 0x58(0x10)
	struct FString SKUID; // 0x68(0x10)
	struct FString Description; // 0x78(0x10)
	struct UStorefrontItemDataAsset* StorefrontItem; // 0x88(0x08)
	struct FPlatformOfferPrice OriginalPrice; // 0x90(0x28)
	struct FPlatformOfferPrice CurrentPrice; // 0xb8(0x28)
};

// Class ShooterGame.StorefrontModelV2
// Size: 0x128 (Inherited: 0x30)
struct UStorefrontModelV2 : UObject {
	struct UBundleViewModel* FeaturedBundle; // 0x30(0x08)
	struct TArray<struct UBundleViewModel*> FeaturedBundles; // 0x38(0x10)
	struct FDateTime FeaturedExpirationTime; // 0x48(0x08)
	struct FDateTime ExpirationTime; // 0x50(0x08)
	struct TArray<struct UStoreOffer*> SingleItemOffers; // 0x58(0x10)
	struct TArray<struct URotatingOfferDTO*> PersonalizedOfferDetails; // 0x68(0x10)
	struct TArray<struct UBonusStoreOfferViewModel*> BonusStoreOffers; // 0x78(0x10)
	struct TArray<struct UAccessoryStoreOfferViewModel*> AccessoryStoreOffers; // 0x88(0x10)
	struct TArray<struct UJuiceBoxOfferModel*> JuiceBoxOffers; // 0x98(0x10)
	struct FDateTime BonusStoreExpirationTime; // 0xa8(0x08)
	struct FDateTime BonusStoreStartTime; // 0xb0(0x08)
	struct FDateTime AccessoryStoreExpirationTime; // 0xb8(0x08)
	struct FGuid AccessoryStorefrontID; // 0xc0(0x10)
	struct TMap<enum class EPluginStorefrontType, struct FPluginStorefrontBundleModels> PluginStorefrontBundles; // 0xd0(0x50)
	struct FDateTime TimeOfNextStoreRefresh; // 0x120(0x08)
};

// Class ShooterGame.PluginStorefrontBundleModel
// Size: 0x108 (Inherited: 0x30)
struct UPluginStorefrontBundleModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct UStorefrontItemDataAsset* PluginStorefrontItemDataAsset; // 0x40(0x08)
	struct UCurrencyDataAsset* PluginBundlePurchaseCurrencyDataAsset; // 0x48(0x08)
	struct TArray<struct FPluginStoreSubOffer> PluginBundleSubOffers; // 0x50(0x10)
	struct TMap<struct FGuid, int32_t> PluginBundleTotalBaseCost; // 0x60(0x50)
	struct TMap<struct FGuid, int32_t> PluginBundleTotalDiscountedCost; // 0xb0(0x50)
	float PluginBundleTotalDiscountPercent; // 0x100(0x04)
	bool WholesaleOnly; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
};

// Class ShooterGame.StorefrontBundleModel
// Size: 0x128 (Inherited: 0x30)
struct UStorefrontBundleModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct UStorefrontItemDataAsset* StorefrontItemDataAsset; // 0x40(0x08)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x48(0x08)
	struct TArray<struct FStorefrontBundleItem> BundleItems; // 0x50(0x10)
	struct TArray<struct FStorefrontBundleItemOffer> BundleItemOffers; // 0x60(0x10)
	struct TMap<struct FGuid, int32_t> BundleTotalBaseCost; // 0x70(0x50)
	struct TMap<struct FGuid, int32_t> BundleTotalDiscountedCost; // 0xc0(0x50)
	float BundleTotalDiscountPercent; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct FDateTime BundleExpirationTime; // 0x118(0x08)
	bool WholesaleOnly; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
};

// Class ShooterGame.JuiceBoxOfferModel
// Size: 0x98 (Inherited: 0x58)
struct UJuiceBoxOfferModel : UOfferDTO {
	struct UStoreOffer* StoreOffer; // 0x58(0x08)
	struct FGuid JuiceBoxOfferID; // 0x60(0x10)
	struct UStorefrontItemDataAsset* StorefrontItemDataAsset; // 0x70(0x08)
	struct UJuiceBoxDataAsset* JuiceBoxDataAsset; // 0x78(0x08)
	int32_t Amount; // 0x80(0x04)
	int32_t BonusAmount; // 0x84(0x04)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x88(0x08)
	int32_t PurchaseCost; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class ShooterGame.StoreOfferViewModelBase
// Size: 0x48 (Inherited: 0x48)
struct UStoreOfferViewModelBase : UAresViewModelBase {
};

// Class ShooterGame.StoreService
// Size: 0x38 (Inherited: 0x30)
struct UStoreService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.StoreUITelemetryManager
// Size: 0x68 (Inherited: 0x30)
struct UStoreUITelemetryManager : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct URSOManager* RSOManager; // 0x40(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x48(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x50(0x08)
	struct UConfigManager* ConfigManager; // 0x58(0x08)
	struct UStoreManager* StoreManager; // 0x60(0x08)

	void SendStoreInteractionEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType, enum class EEventType EventType); // Function ShooterGame.StoreUITelemetryManager.SendStoreInteractionEvent // (Final|Native|Private|HasDefaults) // @ game+0x3c1d910
	void SendRevealOfferEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendRevealOfferEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d7d0
	void SendPurchaseStartEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseStartEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d690
	void SendPurchaseConfirmEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseConfirmEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d550
	void SendPurchaseCompleteEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseCompleteEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d410
	void SendPurchaseCancelEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseCancelEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d2d0
	void SendInspectItemLevelsEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendInspectItemLevelsEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d190
	void SendInspectItemEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendInspectItemEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1d050
	void SendInspectItemChromaEvent(struct FGuid OfferId, struct FGuid ItemId, struct FGuid ChromaID, enum class EPurchaseSource PurchaseSource); // Function ShooterGame.StoreUITelemetryManager.SendInspectItemChromaEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1cec0
	struct UStoreUITelemetryManager* Make(struct URSOManager* RSOManager, struct UPlatformSessionManager* SessionManager, struct UTelemetryManager* TelemetryManager, struct UConfigManager* ConfigManager, struct UStoreManager* StoreManager); // Function ShooterGame.StoreUITelemetryManager.Make // (Final|Native|Static|Public) // @ game+0x3c1c740
	struct FString GetTelemetryTargetForPurchaseSource(enum class EPurchaseSource PurchaseSource); // Function ShooterGame.StoreUITelemetryManager.GetTelemetryTargetForPurchaseSource // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c1c040
	struct UStoreUITelemetryManager* GetStoreUITelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.StoreUITelemetryManager.GetStoreUITelemetryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c1bfb0
	enum class EOfferType GetOfferTypeForPurchaseSource(enum class EPurchaseSource PurchaseSource); // Function ShooterGame.StoreUITelemetryManager.GetOfferTypeForPurchaseSource // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c1bcc0
	struct FString GetNameForOfferType(enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.GetNameForOfferType // (Final|Native|Static|Private) // @ game+0x3c1bc20
	struct FString GetNameForEventType(enum class EEventType EventType); // Function ShooterGame.StoreUITelemetryManager.GetNameForEventType // (Final|Native|Static|Private) // @ game+0x3c1bb80
	struct UStoreUITelemetryManager* GET(struct UWorld* FromWorld); // Function ShooterGame.StoreUITelemetryManager.GET // (Final|Native|Static|Public) // @ game+0x3c1b650
};

// Class ShooterGame.StoreViewControllerV2
// Size: 0x168 (Inherited: 0x30)
struct UStoreViewControllerV2 : UObject {
	struct FMulticastInlineDelegate OnStorefrontNeedsRefresh; // 0x30(0x10)
	struct FMulticastInlineDelegate OnBonusStoreEnabledUpdated; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOpenJuiceBoxOrderSubmitted; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOpenJuiceBoxOrderComplete; // 0x60(0x10)
	struct FMulticastInlineDelegate OnOpenJuiceBoxOrderError; // 0x70(0x10)
	struct FMulticastInlineDelegate OnGetOpenJuiceBoxRewardsComplete; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGetOpenJuiceBoxRewardsError; // 0x90(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxAnimationCompleted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxAnimationCanceled; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnStorePopupOpened; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnStorePopupClosed; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnJuiceRewardsClosed; // 0xe0(0x10)
	struct UStoreViewModelV2* ViewModel; // 0xf0(0x08)
	char pad_F8[0x30]; // 0xf8(0x30)
	struct UConfigManager* ConfigManager; // 0x128(0x08)
	struct UStoreManager* StoreManager; // 0x130(0x08)
	struct UInventoryManager* InventoryManager; // 0x138(0x08)
	struct UPlatformSessionManager* PlatformSessionManager; // 0x140(0x08)
	char pad_148[0x11]; // 0x148(0x11)
	bool IsNightMarketRevealInitialized; // 0x159(0x01)
	char pad_15A[0x6]; // 0x15a(0x06)
	struct UDeferredOperation* RevealNightMarketOffersOperation; // 0x160(0x08)

	void UpdatePersistNightMarketOfferState(); // Function ShooterGame.StoreViewControllerV2.UpdatePersistNightMarketOfferState // (Final|Native|Private) // @ game+0x3c1e750
	void UpdateBonusStoreStatus(); // Function ShooterGame.StoreViewControllerV2.UpdateBonusStoreStatus // (Final|Native|Public) // @ game+0x3c1e730
	bool ShouldUseMultipleBundleTimers(); // Function ShooterGame.StoreViewControllerV2.ShouldUseMultipleBundleTimers // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1e700
	bool ShouldUseCachedStoreViewModel(); // Function ShooterGame.StoreViewControllerV2.ShouldUseCachedStoreViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1e6d0
	void ScheduleRevealNightMarketOffers(); // Function ShooterGame.StoreViewControllerV2.ScheduleRevealNightMarketOffers // (Final|Native|Public) // @ game+0x3c1cea0
	void RevealNightMarketOffers(); // Function ShooterGame.StoreViewControllerV2.RevealNightMarketOffers // (Final|Native|Private) // @ game+0x3c1ce80
	void OpenJuiceBox(struct FGuid& JuiceBoxID, int32_t OpenQuantity); // Function ShooterGame.StoreViewControllerV2.OpenJuiceBox // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c1cd90
	void OnRetrieveOpenJuiceBoxOrderErrorInternal(); // Function ShooterGame.StoreViewControllerV2.OnRetrieveOpenJuiceBoxOrderErrorInternal // (Final|Native|Protected) // @ game+0x3a1fcf0
	void OnOpenJuiceBoxSubmittedInternal(struct FOrderResponse& OrderResponse); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxSubmittedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3c1cbe0
	void OnOpenJuiceBoxSubmitErrorInternal(); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxSubmitErrorInternal // (Final|Native|Protected) // @ game+0x3c1cbc0
	void OnOpenJuiceBoxOrderRetrievedInternal(struct FOrderResponse& OrderResponse); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxOrderRetrievedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3c1ca10
	void OnOpenJuiceBoxOrderFailedInternal(struct FGuid& FailedOrderID); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxOrderFailedInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3c1c970
	void OnOpenJuiceBoxCompleteInternal(struct FGuid& CompletedOpenOrderID); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxCompleteInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3c1c8d0
	void JuiceBoxAnimationComplete(enum class EJuiceBoxAnimation JuiceBoxAnimation); // Function ShooterGame.StoreViewControllerV2.JuiceBoxAnimationComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1c360
	void JuiceBoxAnimationCanceled(enum class EJuiceBoxAnimation JuiceBoxAnimation); // Function ShooterGame.StoreViewControllerV2.JuiceBoxAnimationCanceled // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1c360
	void Init(); // Function ShooterGame.StoreViewControllerV2.Init // (Final|Native|Public) // @ game+0x3c1c280
	void HandleStorefrontTimerComplete(); // Function ShooterGame.StoreViewControllerV2.HandleStorefrontTimerComplete // (Final|Native|Public) // @ game+0x3c1b630
	void HandleRevealNightMarketOffersError(struct FAmbassadorError& AmbassadorError); // Function ShooterGame.StoreViewControllerV2.HandleRevealNightMarketOffersError // (Final|Native|Private|HasOutParms) // @ game+0x3c1c1a0
	void HandlePlayerStoreChangedV2(struct UStorefrontModelV2* UpdatedStore); // Function ShooterGame.StoreViewControllerV2.HandlePlayerStoreChangedV2 // (Final|Native|Public) // @ game+0x3c1c110
	void FetchOffersAndStoreForPlayer(); // Function ShooterGame.StoreViewControllerV2.FetchOffersAndStoreForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1b630
	void CallStorePopupOpened(); // Function ShooterGame.StoreViewControllerV2.CallStorePopupOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1b610
	void CallStorePopupClosed(); // Function ShooterGame.StoreViewControllerV2.CallStorePopupClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1b5f0
	void CallJuiceRewardsClosed(); // Function ShooterGame.StoreViewControllerV2.CallJuiceRewardsClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1b5d0
};

// Class ShooterGame.BundleItemViewModel
// Size: 0x98 (Inherited: 0x58)
struct UBundleItemViewModel : UOfferDTO {
	int32_t BasePrice; // 0x58(0x04)
	float DiscountPercent; // 0x5c(0x04)
	int32_t DiscountedPrice; // 0x60(0x04)
	enum class ESpecialItemStatus SpecialItemStatus; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	struct UStoreOffer* StoreOffer; // 0x68(0x08)
	struct UBaseInventoryModel* InventoryModel; // 0x70(0x08)
	struct FGuid RewardItemID; // 0x78(0x10)
	struct FGuid RewardItemTypeID; // 0x88(0x10)
};

// Class ShooterGame.BundleViewModel
// Size: 0xa8 (Inherited: 0x58)
struct UBundleViewModel : UOfferDTO {
	struct FGuid ID; // 0x58(0x10)
	struct UStorefrontItemDataAsset* StorefrontItemDataAsset; // 0x68(0x08)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x70(0x08)
	int32_t TotalBaseCost; // 0x78(0x04)
	int32_t TotalDiscountedCost; // 0x7c(0x04)
	float TotalDiscountPercent; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct TArray<struct UBundleItemViewModel*> ItemViewModels; // 0x88(0x10)
	struct FDateTime BundleExpirationTime; // 0x98(0x08)
	bool IsValid; // 0xa0(0x01)
	bool WholesaleOnly; // 0xa1(0x01)
	char pad_A2[0x6]; // 0xa2(0x06)

	struct UBundleViewModel* Make(struct UStorefrontItemDataAsset* StorefrontItemDataAsset, struct FGuid ID, struct UCurrencyDataAsset* PurchaseCurrencyDataAsset, int32_t TotalBaseCost, int32_t TotalDiscountedCost, float TotalDiscountPercent, bool IsValid, struct TArray<struct UBundleItemViewModel*> ItemViewModels, struct FDateTime BundleExpirationTime, bool WholesaleOnly); // Function ShooterGame.BundleViewModel.Make // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1c3e0
	bool IsEqual(struct UBundleViewModel* OtherBundleModel); // Function ShooterGame.BundleViewModel.IsEqual // (Final|Native|Public) // @ game+0x3c1c2a0
};

// Class ShooterGame.OpenJuiceViewModel
// Size: 0x50 (Inherited: 0x30)
struct UOpenJuiceViewModel : UObject {
	struct FGuid OpenJuiceBoxOrderID; // 0x30(0x10)
	struct TArray<struct URewardModel*> OpenJuiceBoxRewards; // 0x40(0x10)
};

// Class ShooterGame.StoreViewModelV2
// Size: 0x210 (Inherited: 0x30)
struct UStoreViewModelV2 : UObject {
	struct FMulticastInlineDelegate OnPersonalizedOffersChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPersonalizedOfferDTOsChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnBonusStoreOffersChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnAccessoryStoreOffersChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnPlatformOffersChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxOffersChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnFeaturedThemeChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnFeaturedBundle; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnFeaturedBundles; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnEsportsBundles; // 0xc0(0x10)
	char pad_D0[0x18]; // 0xd0(0x18)
	struct FMulticastInlineDelegate OnBonusOfferIsSeenChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnExpirationTimeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnFeaturedExpirationTimeChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnBonusStoreExpirationTimeChanged; // 0x118(0x10)
	struct FMulticastInlineDelegate OnAccessoryStoreExpirationTimeChanged; // 0x128(0x10)
	struct FMulticastInlineDelegate OnBonusStoreStartTimeChanged; // 0x138(0x10)
	struct UThemeDataAsset* FeaturedTheme; // 0x148(0x08)
	struct FDateTime ExpirationTime; // 0x150(0x08)
	struct FDateTime FeaturedExpirationTime; // 0x158(0x08)
	struct FDateTime BonusStoreExpirationTime; // 0x160(0x08)
	struct FDateTime AccessoryStoreExpirationTime; // 0x168(0x08)
	struct FDateTime BonusStoreStartTime; // 0x170(0x08)
	struct TArray<struct UStoreOffer*> PersonalizedOffers; // 0x178(0x10)
	struct TArray<struct URotatingOfferDTO*> PersonalizedOfferDTOs; // 0x188(0x10)
	struct TArray<struct UAccessoryStoreOfferViewModel*> AccessoryOffers; // 0x198(0x10)
	struct TArray<struct UBonusStoreOfferViewModel*> BonusStoreOffers; // 0x1a8(0x10)
	struct TArray<struct UPlatformOfferDTO*> PlatformOffers; // 0x1b8(0x10)
	struct TArray<struct UJuiceBoxOfferModel*> JuiceBoxOffers; // 0x1c8(0x10)
	struct UBundleViewModel* FeaturedThemeBundleViewModel; // 0x1d8(0x08)
	struct TArray<struct UBundleViewModel*> FeaturedThemeBundleViewModels; // 0x1e0(0x10)
	struct TArray<struct UBundleViewModel*> EsportsBundleViewModels; // 0x1f0(0x10)
	struct UOpenJuiceViewModel* OpenJuiceViewModel; // 0x200(0x08)
	char pad_208[0x8]; // 0x208(0x08)

	bool ShouldShowBonusStore(); // Function ShooterGame.StoreViewModelV2.ShouldShowBonusStore // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1e6b0
	void SetPlatformOffers(struct TArray<struct UPlatformOfferDTO*>& NewPlatformOffers); // Function ShooterGame.StoreViewModelV2.SetPlatformOffers // (Final|Native|Public|HasOutParms) // @ game+0x3c1e600
	void SetPersonalizedOffers(struct TArray<struct UStoreOffer*>& NewPersonalizedOffers); // Function ShooterGame.StoreViewModelV2.SetPersonalizedOffers // (Final|Native|Public|HasOutParms) // @ game+0x3c1e550
	void SetPersonalizedOfferDTOs(struct TArray<struct URotatingOfferDTO*>& NewPersonalizedOffers); // Function ShooterGame.StoreViewModelV2.SetPersonalizedOfferDTOs // (Final|Native|Public|HasOutParms) // @ game+0x3c1e4a0
	void SetOpenJuiceViewModel(struct UOpenJuiceViewModel* NewOpenJuiceViewModel); // Function ShooterGame.StoreViewModelV2.SetOpenJuiceViewModel // (Final|Native|Public) // @ game+0x3c1e410
	void SetJuiceBoxOffers(struct TArray<struct UJuiceBoxOfferModel*>& NewJuiceBoxOffers); // Function ShooterGame.StoreViewModelV2.SetJuiceBoxOffers // (Final|Native|Public|HasOutParms) // @ game+0x3c1e360
	void SetIsPopulated(bool NewIsPopulated); // Function ShooterGame.StoreViewModelV2.SetIsPopulated // (Final|Native|Public) // @ game+0x3c1e2d0
	void SetIsBonusStoreEnabled(bool BonusStoreEnabled); // Function ShooterGame.StoreViewModelV2.SetIsBonusStoreEnabled // (Final|Native|Public) // @ game+0x3c1e240
	void SetIsBonusShopSeen(bool IsSeen); // Function ShooterGame.StoreViewModelV2.SetIsBonusShopSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1e1b0
	void SetFeaturedThemeBundles(struct TArray<struct UBundleViewModel*>& NewBundleModels); // Function ShooterGame.StoreViewModelV2.SetFeaturedThemeBundles // (Final|Native|Public|HasOutParms) // @ game+0x3c1e100
	void SetFeaturedThemeBundle(struct UBundleViewModel* NewBundleModel); // Function ShooterGame.StoreViewModelV2.SetFeaturedThemeBundle // (Final|Native|Public) // @ game+0x3c1e070
	void SetFeaturedTheme(struct UThemeDataAsset* NewFeaturedTheme); // Function ShooterGame.StoreViewModelV2.SetFeaturedTheme // (Final|Native|Public) // @ game+0x3c1dfe0
	void SetFeaturedExpirationTime(struct FDateTime NewFeaturedExpirationTime); // Function ShooterGame.StoreViewModelV2.SetFeaturedExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3c1df60
	void SetExpirationTime(struct FDateTime ExpirationTime); // Function ShooterGame.StoreViewModelV2.SetExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3c1dee0
	void SetEsportsBundles(struct TArray<struct UBundleViewModel*>& NewBundleModels); // Function ShooterGame.StoreViewModelV2.SetEsportsBundles // (Final|Native|Public|HasOutParms) // @ game+0x3c1de30
	void SetBonusStoreStartTime(struct FDateTime NewBonusStoreStartTime); // Function ShooterGame.StoreViewModelV2.SetBonusStoreStartTime // (Final|Native|Public|HasDefaults) // @ game+0x3c1ddb0
	void SetBonusStoreOffers(struct TArray<struct UBonusStoreOfferViewModel*>& NewBonusStoreOffers); // Function ShooterGame.StoreViewModelV2.SetBonusStoreOffers // (Final|Native|Public|HasOutParms) // @ game+0x3c1dd00
	void SetBonusStoreOfferIsSeen(struct FGuid BonusStoreOfferID, bool IsSeen); // Function ShooterGame.StoreViewModelV2.SetBonusStoreOfferIsSeen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c1dc20
	void SetBonusStoreExpirationTime(struct FDateTime NewBonusStoreExpirationTime); // Function ShooterGame.StoreViewModelV2.SetBonusStoreExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3c1dba0
	void SetAccessoryStoreExpirationTime(struct FDateTime NewAccessoryStoreExpirationTime); // Function ShooterGame.StoreViewModelV2.SetAccessoryStoreExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3c1db20
	void SetAccessoryOffers(struct TArray<struct UAccessoryStoreOfferViewModel*>& NewAccessoryOffers); // Function ShooterGame.StoreViewModelV2.SetAccessoryOffers // (Final|Native|Public|HasOutParms) // @ game+0x3c1da70
	bool IsPopulated(); // Function ShooterGame.StoreViewModelV2.IsPopulated // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c1c340
	struct TArray<struct UPlatformOfferDTO*> GetPlatformOffers(); // Function ShooterGame.StoreViewModelV2.GetPlatformOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1bee0
	struct TArray<struct UStoreOffer*> GetPersonalizedOffers(); // Function ShooterGame.StoreViewModelV2.GetPersonalizedOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1be10
	struct TArray<struct URotatingOfferDTO*> GetPersonalizedOfferDTOs(); // Function ShooterGame.StoreViewModelV2.GetPersonalizedOfferDTOs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1bd40
	struct UOpenJuiceViewModel* GetOpenJuiceViewModel(); // Function ShooterGame.StoreViewModelV2.GetOpenJuiceViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be7f50
	struct FDateTime GetOffersExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetOffersExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x38fe770
	struct TArray<struct UJuiceBoxOfferModel*> GetJuiceBoxOffers(); // Function ShooterGame.StoreViewModelV2.GetJuiceBoxOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1bab0
	bool GetIsBonusShopSeen(); // Function ShooterGame.StoreViewModelV2.GetIsBonusShopSeen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1ba90
	struct FDateTime GetFeaturedThemeExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetFeaturedThemeExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x38699f0
	struct TArray<struct UBundleViewModel*> GetFeaturedThemeBundles(); // Function ShooterGame.StoreViewModelV2.GetFeaturedThemeBundles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1b9c0
	struct UBundleViewModel* GetFeaturedThemeBundle(); // Function ShooterGame.StoreViewModelV2.GetFeaturedThemeBundle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26277d0
	struct TArray<struct UBundleViewModel*> GetEsportsBundles(); // Function ShooterGame.StoreViewModelV2.GetEsportsBundles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1b8f0
	struct FDateTime GetBonusStoreStartTime(); // Function ShooterGame.StoreViewModelV2.GetBonusStoreStartTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1b8d0
	struct TArray<struct UBonusStoreOfferViewModel*> GetBonusStoreOffers(); // Function ShooterGame.StoreViewModelV2.GetBonusStoreOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1b800
	struct FDateTime GetBonusStoreExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetBonusStoreExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3856ff0
	bool GetAllBonusOffersSeen(); // Function ShooterGame.StoreViewModelV2.GetAllBonusOffersSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x3c1b7d0
	struct FDateTime GetAccessoryStoreExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetAccessoryStoreExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1b7b0
	struct TArray<struct UAccessoryStoreOfferViewModel*> GetAccessoryOffers(); // Function ShooterGame.StoreViewModelV2.GetAccessoryOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c1b6e0
};

// Class ShooterGame.StrategicOutcomesComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UStrategicOutcomesComponent : UActorComponent {
	struct TArray<struct FStrategicOutcomeOfRound> RoundOutcomes; // 0xe8(0x10)

	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.StrategicOutcomesComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x3c27950
};

// Class ShooterGame.StreamedVideoUIData
// Size: 0x90 (Inherited: 0x90)
struct UStreamedVideoUIData : UBaseContentUIData {
};

// Class ShooterGame.StreamedVideoDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UStreamedVideoDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TArray<struct FStreamedVideoFile> Files; // 0x80(0x10)

	bool GetPath(struct UObject* WorldContextObject, struct FString& OutPath, struct FString Culture, enum class EStreamedVideoQuality DesiredQuality); // Function ShooterGame.StreamedVideoDataAsset.GetPath // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c26be0
};

// Class ShooterGame.SubDataBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct USubDataBlueprintLibrary : UBlueprintFunctionLibrary {

	void TryGetSubDataPure(int32_t Data, int32_t& SubData, bool& Succeeded); // Function ShooterGame.SubDataBlueprintLibrary.TryGetSubDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x34b5bf0
	void TryGetSubData(int32_t Data, int32_t& SubData, enum class ESubDataBlueprintLibrary_CastResult& Result); // Function ShooterGame.SubDataBlueprintLibrary.TryGetSubData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x34b5ae0
};

// Class ShooterGame.SubDataContainer
// Size: 0x30 (Inherited: 0x30)
struct USubDataContainer : UInterface {
};

// Class ShooterGame.SubDataWrapper
// Size: 0x78 (Inherited: 0x30)
struct USubDataWrapper : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FWildcard Data; // 0x38(0x40)
};

// Class ShooterGame.SubRangeListModel
// Size: 0x68 (Inherited: 0x68)
struct USubRangeListModel : USubRangeListModelBase {

	void SetSubRange(struct FIndexRange NewValue); // Function ShooterGame.SubRangeListModel.SetSubRange // (Final|Native|Public|BlueprintCallable) // @ game+0x3c27e90
	void SetListModelAndSubRange(struct TScriptInterface<IOrderedListModel> NewModel, struct FIndexRange& NewSubRange); // Function ShooterGame.SubRangeListModel.SetListModelAndSubRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c27d80
	struct USubRangeListModel* Make(struct TScriptInterface<IOrderedListModel> ListModel, struct FIndexRange SubRange, struct UObject* Outer); // Function ShooterGame.SubRangeListModel.Make // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c273a0
};

// Class ShooterGame.SubscriptionUIData
// Size: 0xa8 (Inherited: 0x90)
struct USubscriptionUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.SubscriptionDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct USubscriptionDataAsset : UAresBasePrimaryDataAsset {
	int32_t XPBoostAmount; // 0x50(0x04)
	enum class EXPBoostType XPBoostType; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	struct TSoftClassPtr<UObject> UIData; // 0x58(0x30)
	struct FGuid EntitlementTypeID; // 0x88(0x10)
	struct FGuid AuthoringSubscriptionID; // 0x98(0x10)
	int32_t DisplayPriority; // 0xa8(0x04)
	bool bBenefitsAuthoredInEditor; // 0xac(0x01)
	bool bUnlocksAllAgents; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)
	struct TArray<struct UEditableRewardCharacter*> AgentBenefits; // 0xb0(0x10)

	bool GetUnlocksAllAgents(); // Function ShooterGame.SubscriptionDataAsset.GetUnlocksAllAgents // (Final|Native|Public) // @ game+0x3c27380
	bool GetAuthoredInEditor(); // Function ShooterGame.SubscriptionDataAsset.GetAuthoredInEditor // (Final|Native|Public) // @ game+0x3c266a0
	struct TArray<struct UEditableRewardCharacter*> GetAgentBenefits(); // Function ShooterGame.SubscriptionDataAsset.GetAgentBenefits // (Final|Native|Public) // @ game+0x3c265d0
};

// Class ShooterGame.LoadoutPipsContainerWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct ULoadoutPipsContainerWidget : UShopItemCategoryContainer {
	struct UImage* hover; // 0x2c8(0x08)
	struct UHorizontalBox* itemContainer; // 0x2d0(0x08)
};

// Class ShooterGame.SyncedTimerComponent
// Size: 0x118 (Inherited: 0xe8)
struct USyncedTimerComponent : UActorComponent {
	bool bStartWithTimerEnabled; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float TimerDuration; // 0xec(0x04)
	struct FMulticastInlineDelegate OnTimerExpired; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnTimerStarted; // 0x100(0x10)
	float NetExpireTime; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)

	void MulticastSetNetExpireTime(float NewNetExpireTime); // Function ShooterGame.SyncedTimerComponent.MulticastSetNetExpireTime // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3687f00
	float GetTimeRemaining(); // Function ShooterGame.SyncedTimerComponent.GetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c27350
	void AuthStartTimer(); // Function ShooterGame.SyncedTimerComponent.AuthStartTimer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
};

// Class ShooterGame.SyncStateMachineStateComponent
// Size: 0x3f0 (Inherited: 0x3d0)
struct USyncStateMachineStateComponent : URespondToEventStateComponent {
	bool bMustBeInState; // 0x3d0(0x01)
	bool bMustObserveTransition; // 0x3d1(0x01)
	char pad_3D2[0x6]; // 0x3d2(0x06)
	struct TArray<struct UStateComponent*> TriggeringStates; // 0x3d8(0x10)
	bool bHasEverFailedStateCondition; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)

	void SetSyncState(struct UStateComponent* SyncState); // Function ShooterGame.SyncStateMachineStateComponent.SetSyncState // (Final|Native|Public|BlueprintCallable) // @ game+0x3c27f20
	bool MeetsStateCondition(); // Function ShooterGame.SyncStateMachineStateComponent.MeetsStateCondition // (Final|Native|Private) // @ game+0x3c27790
};

// Class ShooterGame.TaggingComponent
// Size: 0x128 (Inherited: 0xf8)
struct UTaggingComponent : UBaseProjectileEffectComponent {
	char pad_F8[0x8]; // 0xf8(0x08)
	int32_t TaggingLevel; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct UForceModule* ShortRangeTagModule; // 0x108(0x08)
	float LongRangeDistanceThresold; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct UForceModule* LongRangeTagModule; // 0x118(0x08)
	struct UForceModule* WallPenTagModule; // 0x120(0x08)
};

// Class ShooterGame.TaggingLevelComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UTaggingLevelComponent : UActorComponent {
	int32_t TaggingLevel; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)

	void SetTaggingLevel(int32_t NewTaggingLevel); // Function ShooterGame.TaggingLevelComponent.SetTaggingLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3c27fb0
	int32_t GetTaggingLevel(); // Function ShooterGame.TaggingLevelComponent.GetTaggingLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c27290
};

// Class ShooterGame.TeamRoleComponent
// Size: 0x100 (Inherited: 0xf8)
struct UTeamRoleComponent : UBaseTeamComponent {
	enum class EAresTeamRole TeamRole; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OnRep_RoleChanged(); // Function ShooterGame.TeamRoleComponent.OnRep_RoleChanged // (Final|Native|Protected) // @ game+0x37e69c0
};

// Class ShooterGame.TelemetryDebugComponent
// Size: 0x30 (Inherited: 0x30)
struct UTelemetryDebugComponent : UObject {
};

// Class ShooterGame.TelemetryManager
// Size: 0x100 (Inherited: 0x80)
struct UTelemetryManager : UInitSystem {
	char pad_80[0x1]; // 0x80(0x01)
	bool bIsLoadTest; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct URSOManager* RSOManager; // 0x88(0x08)
	char pad_90[0x50]; // 0x90(0x50)
	struct UTelemetryDebugComponent* TelemetryDebugComponent; // 0xe0(0x08)
	bool bIsCombatReportCollapsed; // 0xe8(0x01)
	char pad_E9[0x17]; // 0xe9(0x17)

	bool TryGetPlayerInfoSubject(struct AAresPlayerStateBase* PlayerState, struct FString& OutSubject); // Function ShooterGame.TelemetryManager.TryGetPlayerInfoSubject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c28060
	void SetGameUIFlag(enum class EGameUIFlag Flag, bool bEnabled); // Function ShooterGame.TelemetryManager.SetGameUIFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x3c27b10
	void SetGameplayFlag(enum class EGameplayFlag Flag, bool bEnabled); // Function ShooterGame.TelemetryManager.SetGameplayFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x3c27be0
	void OnRoundEnd(struct UWorld* World, struct FString MatchID, int32_t RoundNumberEnding); // Function ShooterGame.TelemetryManager.OnRoundEnd // (Final|Native|Public) // @ game+0x3c279e0
	void OnMatchEnd(struct UWorld* World, struct FString MatchID); // Function ShooterGame.TelemetryManager.OnMatchEnd // (Final|Native|Public) // @ game+0x3c27860
	void OnInRound(); // Function ShooterGame.TelemetryManager.OnInRound // (Final|Native|Public) // @ game+0x3c27840
	void OnGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.TelemetryManager.OnGameFlowStateChanged // (Final|Native|Public) // @ game+0x3c277c0
	struct UTelemetryManager* GetTelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.TelemetryManager.GetTelemetryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c272c0
	struct FGameEventRoundInfo GetRoundInfo(struct AShooterGameState* GameState); // Function ShooterGame.TelemetryManager.GetRoundInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c27190
	struct FGameEventPlayerInfo GetPlayerInfoManual(struct FString ActorName); // Function ShooterGame.TelemetryManager.GetPlayerInfoManual // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c27070
	struct FGameEventPlayerInfo GetPlayerInfo(struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.TelemetryManager.GetPlayerInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c26f60
	struct FTelemetryPlatformInfo GetPlatformInfo(); // Function ShooterGame.TelemetryManager.GetPlatformInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c26e90
	struct FTelemetryPlatformDetails GetPlatformDetails(); // Function ShooterGame.TelemetryManager.GetPlatformDetails // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c26dc0
	struct FGameEventMatchInfo GetMatchInfo(struct AShooterGameMode* GameMode); // Function ShooterGame.TelemetryManager.GetMatchInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c26ad0
	struct FString GetMatchID(struct AShooterGameMode* GameMode); // Function ShooterGame.TelemetryManager.GetMatchID // (Final|Native|Static|Public) // @ game+0x3c26a00
	int64_t GetGameId(struct AShooterGameMode* GameMode); // Function ShooterGame.TelemetryManager.GetGameId // (Final|Native|Static|Public) // @ game+0x3c26970
	struct FGameEventCharacterState GetCharacterState(struct AShooterCharacter* Character); // Function ShooterGame.TelemetryManager.GetCharacterState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c26750
	struct FGameEventHpState GetCharacterHpState(struct AShooterCharacter* Character); // Function ShooterGame.TelemetryManager.GetCharacterHpState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c266c0
};

// Class ShooterGame.TelemetrySampler
// Size: 0xa0 (Inherited: 0x80)
struct UTelemetrySampler : UInitSystem {
	bool bIsServerTelemetrySampled; // 0x80(0x01)
	bool bIsDetailedClientTelemetrySampled; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x98(0x08)

	bool ShouldSampleServerTelemetry(); // Function ShooterGame.TelemetrySampler.ShouldSampleServerTelemetry // (Final|Native|Public|Const) // @ game+0x3c28040
	bool ShouldSampleDetailedClientTelemetry(); // Function ShooterGame.TelemetrySampler.ShouldSampleDetailedClientTelemetry // (Final|Native|Public|Const) // @ game+0x263c7a0
	void SetIsServerTelemetrySampled(struct FString MatchID); // Function ShooterGame.TelemetrySampler.SetIsServerTelemetrySampled // (Final|Native|Public) // @ game+0x3c27cd0
	void SetIsClientTelemetrySampled(); // Function ShooterGame.TelemetrySampler.SetIsClientTelemetrySampled // (Final|Native|Private) // @ game+0x3c27cb0
	struct FString CreateSamplingLogMessage(struct FString ID, struct FString IDType, bool WasSampled); // Function ShooterGame.TelemetrySampler.CreateSamplingLogMessage // (Final|Native|Private) // @ game+0x3c26420
};

// Class ShooterGame.TeleportLocationCheckStateComponent
// Size: 0x340 (Inherited: 0x2e0)
struct UTeleportLocationCheckStateComponent : UScriptStateComponent {
	struct TArray<struct FTeleportLocationCheckRing> LocationRings; // 0x2e0(0x10)
	float MaxDistanceToFloor; // 0x2f0(0x04)
	float NavMeshCastThickness; // 0x2f4(0x04)
	bool bRunOnClient; // 0x2f8(0x01)
	char pad_2F9[0x47]; // 0x2f9(0x47)
};

// Class ShooterGame.TeleportStateComponent
// Size: 0x328 (Inherited: 0x2e0)
struct UTeleportStateComponent : UScriptStateComponent {
	bool bSetControlRotation; // 0x2e0(0x01)
	bool bClearRewindHistory; // 0x2e1(0x01)
	bool bCancelMomentum; // 0x2e2(0x01)
	bool bReportsNoiseAtTeleportSource; // 0x2e3(0x01)
	bool bReportsNoiseAtTeleportDestination; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct FNoiseEventData NoiseEventData; // 0x2e8(0x38)
	char pad_320[0x8]; // 0x320(0x08)
};

// Class ShooterGame.TestAccountsManager
// Size: 0x48 (Inherited: 0x30)
struct UTestAccountsManager : UObject {
	struct TArray<struct FGeneratedAccount> GeneratedAccounts; // 0x30(0x10)
	struct UTestAccountsService* AccountsService; // 0x40(0x08)
};

// Class ShooterGame.TestAccountsService
// Size: 0x30 (Inherited: 0x30)
struct UTestAccountsService : UObject {
};

// Class ShooterGame.TestAresHudElement
// Size: 0x1a8 (Inherited: 0x58)
struct UTestAresHudElement : UAresHudElement {
	char pad_58[0x8]; // 0x58(0x08)
	float TextStateDuration[0x3]; // 0x60(0x0c)
	float TextGrowSize; // 0x6c(0x04)
	struct FVector2D TextPos; // 0x70(0x08)
	enum class EAresDrawOrigin TextDrawOrigin; // 0x78(0x01)
	enum class EAresHudTextExtentsMode TextExtentsMode; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	struct FVector2D TextBaseScale; // 0x7c(0x08)
	struct FLinearColor TextColorMask; // 0x84(0x10)
	char pad_94[0x4]; // 0x94(0x04)
	struct FAresHudFontParams FontParams; // 0x98(0x70)
	struct TArray<struct UTexture*> ImagesToCycle; // 0x108(0x10)
	float ImageCycleTime; // 0x118(0x04)
	struct FVector2D ImagePos; // 0x11c(0x08)
	enum class EAresDrawOrigin ImageDrawOrigin; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct FVector2D ImageScale; // 0x128(0x08)
	struct FLinearColor ImageColorMask; // 0x130(0x10)
	struct FAresHudImageParams ImageParams; // 0x140(0x10)
	struct UMaterialInterface* Material; // 0x150(0x08)
	struct FName MaterialParameterName; // 0x158(0x0c)
	float MaterialRampUpAndDownTime; // 0x164(0x04)
	struct UMaterialInstanceDynamic* MaterialInstanceDynamic; // 0x168(0x08)
	struct FVector2D MaterialPos; // 0x170(0x08)
	enum class EAresDrawOrigin MaterialDrawOrigin; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	struct FVector2D MaterialExtents; // 0x17c(0x08)
	struct FVector2D MaterialUvCoordinateStartPosition; // 0x184(0x08)
	struct FVector2D MaterialUvCoordinateEndPosition; // 0x18c(0x08)
	float MaterialRotation; // 0x194(0x04)
	struct FVector2D MaterialPivotPoint; // 0x198(0x08)
	struct FVector2D MaterialScale; // 0x1a0(0x08)
};

// Class ShooterGame.TestViewModel
// Size: 0xe8 (Inherited: 0x48)
struct UTestViewModel : UAresViewModelBase {
	struct FMulticastInlineDelegate OnTestNameChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnTestStringChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnTestTimeChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnTestTextureObjectChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnTestSkinHandleClassChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnTestIntChanged; // 0x98(0x10)
	struct FName TestName; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FString TestString; // 0xb8(0x10)
	struct FTimespan TestTime; // 0xc8(0x08)
	struct UTexture* TestTextureObject; // 0xd0(0x08)
	struct UEquippableSkinHandle* TestSkinHandleClass; // 0xd8(0x08)
	int32_t TestInt; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	void SetTestTime(struct FTimespan NewTestTime); // Function ShooterGame.TestViewModel.SetTestTime // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x3c2d480
	void SetTestTextureObject(struct UTexture* NewTestTextureObject); // Function ShooterGame.TestViewModel.SetTestTextureObject // (Final|Native|Protected|BlueprintCallable) // @ game+0x3c2d3f0
	void SetTestString(struct FString NewTestString); // Function ShooterGame.TestViewModel.SetTestString // (Final|Native|Protected|BlueprintCallable) // @ game+0x3c2d2f0
	void SetTestSkinHandleClass(struct UEquippableSkinHandle* NewTestSkinHandleClass); // Function ShooterGame.TestViewModel.SetTestSkinHandleClass // (Final|Native|Protected|BlueprintCallable) // @ game+0x3c2d260
	void SetTestName(struct FName NewTestName); // Function ShooterGame.TestViewModel.SetTestName // (Final|Native|Protected|BlueprintCallable) // @ game+0x3c2d1c0
	void SetTestInt(int32_t NewTestInt); // Function ShooterGame.TestViewModel.SetTestInt // (Final|Native|Protected|BlueprintCallable) // @ game+0x3c2d130
	struct FTimespan GetTestTime(); // Function ShooterGame.TestViewModel.GetTestTime // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x380c7a0
	struct UTexture* GetTestTextureObject(); // Function ShooterGame.TestViewModel.GetTestTextureObject // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3c2ce50
	struct FString GetTestString(); // Function ShooterGame.TestViewModel.GetTestString // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3af5af0
	struct UEquippableSkinHandle* GetTestSkinHandleClass(); // Function ShooterGame.TestViewModel.GetTestSkinHandleClass // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3a74620
	struct FName GetTestName(); // Function ShooterGame.TestViewModel.GetTestName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3c2ce20
	int32_t GetTestInt(); // Function ShooterGame.TestViewModel.GetTestInt // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3c2ce00
};

// Class ShooterGame.UnifiedChatMessageWrapper
// Size: 0x108 (Inherited: 0x30)
struct UUnifiedChatMessageWrapper : UObject {
	struct FUnifiedChatMessage Message; // 0x30(0xd8)
};

// Class ShooterGame.TextChatConversation
// Size: 0x30 (Inherited: 0x30)
struct UTextChatConversation : UInterface {

	void UnbindOnOtherUserInfoChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.UnbindOnOtherUserInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x39f0c90
	void UnbindOnNumUnreadMessagesChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.UnbindOnNumUnreadMessagesChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c2d500
	void SetDraftTextInfo(struct FTextChatDraftTextInfo NewValue); // Function ShooterGame.TextChatConversation.SetDraftTextInfo // (Native|Public|BlueprintCallable) // @ game+0x3c2d030
	bool SendMessage(struct FText& Message); // Function ShooterGame.TextChatConversation.SendMessage // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c2cf30
	void RemoveChatMessageObserver(struct UObject* Observer); // Function ShooterGame.TextChatConversation.RemoveChatMessageObserver // (Native|Public|BlueprintCallable) // @ game+0x3c2cea0
	void MarkConversationReadToLatest(); // Function ShooterGame.TextChatConversation.MarkConversationReadToLatest // (Native|Public|BlueprintCallable) // @ game+0x3c2ce70
	struct TScriptInterface<IProgressModel> GetPersistentChatHistoryProgressModel(); // Function ShooterGame.TextChatConversation.GetPersistentChatHistoryProgressModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c2cdb0
	struct FMUCParticipant GetOtherUserInfo(); // Function ShooterGame.TextChatConversation.GetOtherUserInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c2cc40
	int32_t GetNumUnreadMessages(); // Function ShooterGame.TextChatConversation.GetNumUnreadMessages // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c2cc00
	struct FTextChatDraftTextInfo GetDraftTextInfo(); // Function ShooterGame.TextChatConversation.GetDraftTextInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c2cb50
	enum class EChatRoomType GetConversationType(); // Function ShooterGame.TextChatConversation.GetConversationType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3950f90
	struct TScriptInterface<IOrderedListModel> GetChatHistoryModel(); // Function ShooterGame.TextChatConversation.GetChatHistoryModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c2cb00
	void BindOnOtherUserInfoChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.BindOnOtherUserInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x398f450
	void BindOnNumUnreadMessagesChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.BindOnNumUnreadMessagesChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c2ca40
	void AddChatMessageObserver(struct UObject* Observer); // Function ShooterGame.TextChatConversation.AddChatMessageObserver // (Native|Public|BlueprintCallable) // @ game+0x3c2c9b0
};

// Class ShooterGame.TextChatManagerV2
// Size: 0x170 (Inherited: 0x80)
struct UTextChatManagerV2 : UInitSystem {
	struct FMulticastInlineDelegate OnRoomListChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnChatFilterUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnGlobalUnreadMessageCountUpdated; // 0xa0(0x10)
	struct FMUCInfos MUCInfos; // 0xb0(0x10)
	struct TArray<struct UTextChatRoomV2*> RegisteredRooms_Backing; // 0xc0(0x10)
	char pad_D0[0x28]; // 0xd0(0x28)
	struct UTextChatService* ChatService; // 0xf8(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x100(0x08)
	struct URSOManager* RSOManager; // 0x108(0x08)
	char pad_110[0x8]; // 0x110(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x118(0x08)
	struct UTextChatRoomV2* ActiveConversation; // 0x120(0x08)
	char pad_128[0x48]; // 0x128(0x48)

	void SetUpSubscriptions(); // Function ShooterGame.TextChatManagerV2.SetUpSubscriptions // (Final|Native|Private) // @ game+0x3c35c20
	void SetChatFiltered(bool IsChatFiltered); // Function ShooterGame.TextChatManagerV2.SetChatFiltered // (Final|Native|Public|BlueprintCallable) // @ game+0x3c35b90
	void HandleSessionUnloaded(); // Function ShooterGame.TextChatManagerV2.HandleSessionUnloaded // (Final|Native|Private) // @ game+0x3c35140
	struct UTextChatManagerV2* GetTextChatManager(struct UObject* WorldContextObject); // Function ShooterGame.TextChatManagerV2.GetTextChatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c35000
	struct TScriptInterface<IOrderedListModel> GetRegisteredRoomsModel(); // Function ShooterGame.TextChatManagerV2.GetRegisteredRoomsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34f50
	struct TArray<struct UTextChatRoomV2*> GetRegisteredRooms(); // Function ShooterGame.TextChatManagerV2.GetRegisteredRooms // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34ed0
	enum class ETextChatInitializationState GetInitializationState(); // Function ShooterGame.TextChatManagerV2.GetInitializationState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c34ad0
	int32_t GetGlobalUnreadMessageCount(); // Function ShooterGame.TextChatManagerV2.GetGlobalUnreadMessageCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8560
	bool GetChatFiltered(); // Function ShooterGame.TextChatManagerV2.GetChatFiltered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34a40
};

// Class ShooterGame.TextChatPanelViewController
// Size: 0x50 (Inherited: 0x30)
struct UTextChatPanelViewController : UObject {
	struct FMulticastInlineDelegate OnActiveTextChatConversationChanged; // 0x30(0x10)
	struct TScriptInterface<ITextChatConversation> ActiveTextChatConversation; // 0x40(0x10)

	void SetActiveTextChatConversation(struct TScriptInterface<ITextChatConversation> NewValue); // Function ShooterGame.TextChatPanelViewController.SetActiveTextChatConversation // (Final|Native|Public|BlueprintCallable) // @ game+0x3c35af0
	struct TScriptInterface<ITextChatConversation> GetActiveTextChatConversation(); // Function ShooterGame.TextChatPanelViewController.GetActiveTextChatConversation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34a10
};

// Class ShooterGame.TextChatRoomV2
// Size: 0x1a0 (Inherited: 0x30)
struct UTextChatRoomV2 : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnParticipantChange; // 0x38(0x10)
	struct FMulticastInlineDelegate OnDisconnected; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
	struct FString RoomID; // 0x68(0x10)
	bool bIsRestricted; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct UTextChatService* ChatService; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)
	struct TArray<struct FMUCParticipant> Participants; // 0x98(0x10)
	struct TArray<struct UUnifiedChatMessageWrapper*> Messages_Backing; // 0xa8(0x10)
	char pad_B8[0x28]; // 0xb8(0x28)
	struct UManualNumericProgressModel* HistoryLoadProgressModel; // 0xe0(0x08)
	struct FTextChatDraftTextInfo DraftInfo; // 0xe8(0x18)
	struct FMUCParticipant OtherUserInfo; // 0x100(0x60)
	char pad_160[0x40]; // 0x160(0x40)

	void TextChatUnmuteUser(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.TextChatRoomV2.TextChatUnmuteUser // (Final|Native|Public|BlueprintCallable) // @ game+0x3c35e60
	void TextChatMuteUserFromReportModal(struct FString Subject); // Function ShooterGame.TextChatRoomV2.TextChatMuteUserFromReportModal // (Final|Native|Public|BlueprintCallable) // @ game+0x3c35db0
	void TextChatMuteUser(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.TextChatRoomV2.TextChatMuteUser // (Final|Native|Public|BlueprintCallable) // @ game+0x3c35c40
	bool IsRestricted(); // Function ShooterGame.TextChatRoomV2.IsRestricted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3aae360
	enum class ETextChatRoomType GetRoomType(); // Function ShooterGame.TextChatRoomV2.GetRoomType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be8fc0
	struct FString GetRoomId(); // Function ShooterGame.TextChatRoomV2.GetRoomId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34f90
	struct TArray<struct FMUCParticipant> GetParticipants(); // Function ShooterGame.TextChatRoomV2.GetParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34e60
	struct FText GetParticipantName(struct FString Pid); // Function ShooterGame.TextChatRoomV2.GetParticipantName // (Final|Native|Public|BlueprintCallable) // @ game+0x3c34cf0
	bool GetParticipant(struct FString Subject, struct FMUCParticipant& OutParticipant); // Function ShooterGame.TextChatRoomV2.GetParticipant // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c34b30
	enum class ETextChatRoomConnectionState GetConnectionState(); // Function ShooterGame.TextChatRoomV2.GetConnectionState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c34a60
	bool ConnectionWasInitiated(); // Function ShooterGame.TextChatRoomV2.ConnectionWasInitiated // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c349e0
	bool ConnectionWasConfirmed(); // Function ShooterGame.TextChatRoomV2.ConnectionWasConfirmed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c349b0
};

// Class ShooterGame.TextChatService
// Size: 0x230 (Inherited: 0x30)
struct UTextChatService : UObject {
	char pad_30[0x1e0]; // 0x30(0x1e0)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x210(0x08)
	int64_t StartupTime; // 0x218(0x08)
	char pad_220[0x10]; // 0x220(0x10)
};

// Class ShooterGame.ThemeUIData
// Size: 0x98 (Inherited: 0x90)
struct UThemeUIData : UBaseContentUIData {
	struct UTexture* StoreFeaturedImage; // 0x90(0x08)
};

// Class ShooterGame.ThemeFeaturesDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UThemeFeaturesDataAsset : UAresBasePrimaryDataAsset {
	struct FDateTime ReleaseDate; // 0x50(0x08)
	enum class EThematicCategory ThematicCategory; // 0x58(0x01)
	bool Promo; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct TSoftClassPtr<UObject> Theme; // 0x60(0x30)
};

// Class ShooterGame.ThemeDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UThemeDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.ThreadedChatManager
// Size: 0x1b0 (Inherited: 0x80)
struct UThreadedChatManager : UInitSystem {
	struct FMulticastInlineDelegate OnMessagesAdded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnRoomsUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInGameMessageSent; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnInitiateWhisperMessageToPlayer; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnMessageBodyUpdated; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMessageDropped; // 0xd0(0x10)
	struct UTextChatService* ChatService; // 0xe0(0x08)
	struct TArray<struct FUnifiedChatMessage> Messages; // 0xe8(0x10)
	struct TSet<struct FString> KnownMessageIds; // 0xf8(0x50)
	struct UTextChatRoomV2* PartyRoom; // 0x148(0x08)
	struct UTextChatRoomV2* PregameRoom; // 0x150(0x08)
	struct UTextChatRoomV2* AllRoom; // 0x158(0x08)
	struct UTextChatRoomV2* TeamRoom; // 0x160(0x08)
	struct UPartyManager* PartyManager; // 0x168(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x170(0x08)
	struct UPregameManager* PregameManager; // 0x178(0x08)
	struct UWhisperChatManager* WhisperChatManager; // 0x180(0x08)
	struct UMutedPatternsManager* MutedPatternsManager; // 0x188(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x190(0x08)
	struct UEmojiMapping* EmojiMapping; // 0x198(0x08)
	struct URSOManager* RSOManager; // 0x1a0(0x08)
	char pad_1A8[0x8]; // 0x1a8(0x08)

	void SendChatMessageV2(enum class EChatRoomType RoomType, struct FText Message); // Function ShooterGame.ThreadedChatManager.SendChatMessageV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x3c359b0
	void OnTextChatMuted(bool IsMuted); // Function ShooterGame.ThreadedChatManager.OnTextChatMuted // (Final|Native|Private) // @ game+0x3c35920
	void NewMessagesArrived(struct FMUCMessages& AddedMessages); // Function ShooterGame.ThreadedChatManager.NewMessagesArrived // (Final|Native|Private|HasOutParms) // @ game+0x3c35720
	void MessagesDeleted(struct FMUCMessages& DeletedMessages); // Function ShooterGame.ThreadedChatManager.MessagesDeleted // (Final|Native|Private|HasOutParms) // @ game+0x3c35520
	void MarkNotificationsShown(struct TSet<struct FString>& MessageIds); // Function ShooterGame.ThreadedChatManager.MarkNotificationsShown // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c35400
	void MarkConversationsRead(struct TSet<struct FString>& Conversations); // Function ShooterGame.ThreadedChatManager.MarkConversationsRead // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c352e0
	void InitiateWhisperMessageToSubject(struct FString Subject); // Function ShooterGame.ThreadedChatManager.InitiateWhisperMessageToSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3c351e0
	void HandleWhisperError(enum class EMessageSendErrorType ErrorType); // Function ShooterGame.ThreadedChatManager.HandleWhisperError // (Final|Native|Private) // @ game+0x3c35160
	void HandleRoomsUpdated(); // Function ShooterGame.ThreadedChatManager.HandleRoomsUpdated // (Final|Native|Private) // @ game+0x3c35120
	struct UThreadedChatManager* GetThreadedChatManager(struct UObject* WorldContextObject); // Function ShooterGame.ThreadedChatManager.GetThreadedChatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c35090
	struct UTextChatRoomV2* GetTeamRoom(); // Function ShooterGame.ThreadedChatManager.GetTeamRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34fd0
	struct UTextChatRoomV2* GetPregameRoom(); // Function ShooterGame.ThreadedChatManager.GetPregameRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34ea0
	struct UTextChatRoomV2* GetPartyRoom(); // Function ShooterGame.ThreadedChatManager.GetPartyRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x365dff0
	struct TArray<struct FUnifiedChatMessage> GetMessages(); // Function ShooterGame.ThreadedChatManager.GetMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34af0
	struct FName GetCurrentPlayerTeam(); // Function ShooterGame.ThreadedChatManager.GetCurrentPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34a90
	struct UTextChatRoomV2* GetAllRoom(); // Function ShooterGame.ThreadedChatManager.GetAllRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x364e270
};

// Class ShooterGame.TimeGameStateComponent
// Size: 0x1d0 (Inherited: 0x170)
struct UTimeGameStateComponent : UBaseGameStateComponent {
	struct FMulticastInlineDelegate OnTimeChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnPhaseEndedEarly; // 0x180(0x10)
	struct UBaseGameStateComponent* NextGameState; // 0x190(0x08)
	float StateLengthSeconds; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct FTimerHandle StateTransitionTimerHandle; // 0x1a0(0x08)
	struct TArray<struct FTimedEvent> StateEvents; // 0x1a8(0x10)
	struct TArray<struct FTimedEvent> PendingStateEvents; // 0x1b8(0x10)
	bool bIsTimeGameStatePausedForMatchTimer; // 0x1c8(0x01)
	bool bIsTimeGameStateLocallyPaused; // 0x1c9(0x01)
	bool bIsTimerExpired; // 0x1ca(0x01)
	char pad_1CB[0x5]; // 0x1cb(0x05)

	void UpdatePauseState(); // Function ShooterGame.TimeGameStateComponent.UpdatePauseState // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fdc0
	void UnqueueEvent(struct FDelegate& DelegateToRemove); // Function ShooterGame.TimeGameStateComponent.UnqueueEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c3fd00
	void Unpause(); // Function ShooterGame.TimeGameStateComponent.Unpause // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fce0
	void TimerExpired(); // Function ShooterGame.TimeGameStateComponent.TimerExpired // (Final|Native|Protected) // @ game+0x3c3fcc0
	void SetStateLength(float Length); // Function ShooterGame.TimeGameStateComponent.SetStateLength // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fa60
	void SetNextState(struct UBaseGameStateComponent* NextState); // Function ShooterGame.TimeGameStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f9d0
	void SetNewTimeoutTime(float NewTimeOutTime); // Function ShooterGame.TimeGameStateComponent.SetNewTimeoutTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f950
	void QueueEvent(enum class EAresTimerDirection TimeDirectionSetting, float TimeOffset, struct FDelegate& DelegateToCall); // Function ShooterGame.TimeGameStateComponent.QueueEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c3f7e0
	void Pause(); // Function ShooterGame.TimeGameStateComponent.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f7c0
	bool IsPaused(); // Function ShooterGame.TimeGameStateComponent.IsPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f790
	void GoToStateAndSkipTimedEvents(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.TimeGameStateComponent.GoToStateAndSkipTimedEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f6a0
	float GetStateLength(); // Function ShooterGame.TimeGameStateComponent.GetStateLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3be87d0
	float GetRemainingTime(); // Function ShooterGame.TimeGameStateComponent.GetRemainingTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f200
	float GetPhaseRemainingTime(); // Function ShooterGame.TimeGameStateComponent.GetPhaseRemainingTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f1c0
};

// Class ShooterGame.Tip
// Size: 0x468 (Inherited: 0x3d8)
struct ATip : AActor {
	struct FTipInfo TipInfo; // 0x3d8(0x88)
	int32_t ResolveCount; // 0x460(0x04)
	enum class ETipState TipState; // 0x464(0x01)
	char pad_465[0x3]; // 0x465(0x03)
};

// Class ShooterGame.TotemUIData
// Size: 0xb8 (Inherited: 0x90)
struct UTotemUIData : UBaseContentUIData {
	bool UseModelViewerOverrides; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FVector CameraPosition; // 0x94(0x0c)
	float DefaultFOV; // 0xa0(0x04)
	float MaxFOV; // 0xa4(0x04)
	float MinFOV; // 0xa8(0x04)
	struct FVector PivotPoint; // 0xac(0x0c)
};

// Class ShooterGame.TotemDataAsset
// Size: 0x120 (Inherited: 0x50)
struct UTotemDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> Totem; // 0x58(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x88(0x30)
	struct TSoftClassPtr<UObject> ContentTier; // 0xb8(0x30)
	struct TSoftObjectPtr<UTexture2D> Wallpaper; // 0xe8(0x30)
	bool UseHighestOwnedLevelNameAsDisplayName; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	uint32_t PreloadOnAppStartupPlatforms; // 0x11c(0x04)
};

// Class ShooterGame.TouchInputDebugWidget
// Size: 0x328 (Inherited: 0x2c8)
struct UTouchInputDebugWidget : UUserWidget {
	char pad_2C8[0x60]; // 0x2c8(0x60)
};

// Class ShooterGame.TournamentModel
// Size: 0x90 (Inherited: 0x30)
struct UTournamentModel : UObject {
	struct FMulticastInlineDelegate OnIsLoadedChanged; // 0x30(0x10)
	struct FString ID; // 0x40(0x10)
	struct FString Name; // 0x50(0x10)
	enum class ETournamentType Type; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	int32_t TournamentSize; // 0x64(0x04)
	struct TArray<struct UTournamentMatchupModel*> Matchups; // 0x68(0x10)
	struct TArray<struct UTournamentParticipantModel*> TournamentParticipants; // 0x78(0x10)
	bool bIsLoaded; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)

	bool IsLoaded(); // Function ShooterGame.TournamentModel.IsLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a948a0
	struct TMap<struct FString, struct UTournamentMatchupModel*> GetUpperBracketMatchups(); // Function ShooterGame.TournamentModel.GetUpperBracketMatchups // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f5b0
	enum class ETournamentType GetTournamentType(); // Function ShooterGame.TournamentModel.GetTournamentType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36e17a0
	int32_t GetTournamentSize(); // Function ShooterGame.TournamentModel.GetTournamentSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386b020
	struct TMap<struct FString, struct UTournamentParticipantModel*> GetTournamentParticipants(); // Function ShooterGame.TournamentModel.GetTournamentParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f4c0
	struct FString GetName(); // Function ShooterGame.TournamentModel.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bbb0
	struct TMap<struct FString, struct UTournamentMatchupModel*> GetMatchups(); // Function ShooterGame.TournamentModel.GetMatchups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f010
	struct TMap<struct FString, struct UTournamentMatchupModel*> GetLowerBracketMatchups(); // Function ShooterGame.TournamentModel.GetLowerBracketMatchups // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3ef20
	struct UTournamentMatchupModel* GetLatestMatchupModel(struct FString RosterID); // Function ShooterGame.TournamentModel.GetLatestMatchupModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c3ee20
	struct FString GetID(); // Function ShooterGame.TournamentModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cd90
};

// Class ShooterGame.TournamentMatchupModel
// Size: 0x68 (Inherited: 0x30)
struct UTournamentMatchupModel : UObject {
	struct FString MatchupID; // 0x30(0x10)
	int32_t RoundNumber; // 0x40(0x04)
	enum class EMatchupBracketType BracketType; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	int32_t MatchupNumber; // 0x48(0x04)
	bool Complete; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int64_t ScheduledStartDateInEpochSeconds; // 0x50(0x08)
	struct TArray<struct UMatchupParticipantModel*> Participants; // 0x58(0x10)

	struct FDateTime GetScheduledStartDateTime(); // Function ShooterGame.TournamentMatchupModel.GetScheduledStartDateTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f240
	int32_t GetRoundNumber(); // Function ShooterGame.TournamentMatchupModel.GetRoundNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2a5c560
	struct TArray<struct UMatchupParticipantModel*> GetParticipants(); // Function ShooterGame.TournamentMatchupModel.GetParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f100
	int32_t GetMatchupNumber(); // Function ShooterGame.TournamentMatchupModel.GetMatchupNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2556800
	struct FString GetMatchupID(); // Function ShooterGame.TournamentMatchupModel.GetMatchupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bd10
	bool GetIsComplete(); // Function ShooterGame.TournamentMatchupModel.GetIsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3ee00
	enum class EMatchupBracketType GetBracketType(); // Function ShooterGame.TournamentMatchupModel.GetBracketType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3ede0
};

// Class ShooterGame.MatchupParticipantModel
// Size: 0xd0 (Inherited: 0x30)
struct UMatchupParticipantModel : UObject {
	struct FString ParticipantID; // 0x30(0x10)
	bool IsBye; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	int64_t Points; // 0x48(0x08)
	int64_t Seed; // 0x50(0x08)
	struct FString Name; // 0x58(0x10)
	struct FString Tag; // 0x68(0x10)
	int32_t Score; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	int64_t PreviousMatchupNumber; // 0x80(0x08)
	enum class EMatchupParticipantOutcome Outcome; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FPremierRosterCustomization Customization; // 0x90(0x40)

	bool HasScores(); // Function ShooterGame.MatchupParticipantModel.HasScores // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c3f770
};

// Class ShooterGame.TournamentParticipantModel
// Size: 0x50 (Inherited: 0x30)
struct UTournamentParticipantModel : UObject {
	struct FString ParticipantID; // 0x30(0x10)
	struct FString CurrentMatchupID; // 0x40(0x10)

	struct FString GetParticipantID(); // Function ShooterGame.TournamentParticipantModel.GetParticipantID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391bd10
	struct FString GetCurrentMatchupID(); // Function ShooterGame.TournamentParticipantModel.GetCurrentMatchupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391cd90
};

// Class ShooterGame.TournamentsManager
// Size: 0x118 (Inherited: 0x30)
struct UTournamentsManager : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct URSOManager* RSOManager; // 0x60(0x08)
	struct URMSManager* RMSManager; // 0x68(0x08)
	struct UTournamentsService* TournamentsService; // 0x70(0x08)
	char pad_78[0xa0]; // 0x78(0xa0)

	void GetTournamentMatchupResults(struct FString TournamentID, struct FString MatchupID, enum class EMatchupNextSteps& WinnersNextSteps, enum class EMatchupNextSteps& LosersNextSteps); // Function ShooterGame.TournamentsManager.GetTournamentMatchupResults // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c3f310
	struct UTournamentsManager* GET(struct UWorld* FromWorld); // Function ShooterGame.TournamentsManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c3ed50
	void AddTournamentOverview(struct FTournamentOverview& TournamentOverview); // Function ShooterGame.TournamentsManager.AddTournamentOverview // (Final|Native|Private|HasOutParms) // @ game+0x3c3eb50
};

// Class ShooterGame.TournamentsScreenV1
// Size: 0x2e0 (Inherited: 0x2c8)
struct UTournamentsScreenV1 : UUserWidget {
	struct UTournamentViewController* TournamentViewController; // 0x2c8(0x08)
	struct FString TournamentID; // 0x2d0(0x10)

	void SubscribeToCurrentTournament(); // Function ShooterGame.TournamentsScreenV1.SubscribeToCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fca0
	void SetTournamentId(struct FString NewValue); // Function ShooterGame.TournamentsScreenV1.SetTournamentId // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3fbf0
	void RefreshCurrentTournament(); // Function ShooterGame.TournamentsScreenV1.RefreshCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3c3f930
};

// Class ShooterGame.TournamentsService
// Size: 0x38 (Inherited: 0x30)
struct UTournamentsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.TournamentsTeamIconUIData
// Size: 0x90 (Inherited: 0x90)
struct UTournamentsTeamIconUIData : UBaseContentUIData {
};

// Class ShooterGame.TournamentsTeamIconDataAsset
// Size: 0x98 (Inherited: 0x50)
struct UTournamentsTeamIconDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct FString IconName; // 0x80(0x10)
	struct UDataTable* ColorDataTable; // 0x90(0x08)
};

// Class ShooterGame.TournamentViewController
// Size: 0x90 (Inherited: 0x30)
struct UTournamentViewController : UObject {
	struct FMulticastInlineDelegate OnTournamentsModelUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMatchupStartTimeUpdated; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTournamentsMatchupScoresUpdated; // 0x50(0x10)
	struct UTournamentModel* TournamentsModel; // 0x60(0x08)
	struct UTournamentsManager* TournamentsManager; // 0x68(0x08)
	bool IsSubscribed; // 0x70(0x01)
	char pad_71[0x1f]; // 0x71(0x1f)

	void UnsubscribeFromCurrentTournament(); // Function ShooterGame.TournamentViewController.UnsubscribeFromCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3c477d0
	void SubscribeToRosterMatchupUpdates(struct FString RosterID); // Function ShooterGame.TournamentViewController.SubscribeToRosterMatchupUpdates // (Final|Native|Public|BlueprintCallable) // @ game+0x3c47720
	void SubscribeToCurrentTournament(); // Function ShooterGame.TournamentViewController.SubscribeToCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3c47700
	void SetTournamentId(struct FString NewTournamentID); // Function ShooterGame.TournamentViewController.SetTournamentId // (Final|Native|Public|BlueprintCallable) // @ game+0x3c47650
	void RefreshCurrentTournament(); // Function ShooterGame.TournamentViewController.RefreshCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3c47630
	void HandleUpdatesToRosterMatchup(); // Function ShooterGame.TournamentViewController.HandleUpdatesToRosterMatchup // (Final|Native|Private) // @ game+0x3c47430
	void HandleTournamentsUpdated(struct FTournamentOverview& UpdatedTournamentOverview); // Function ShooterGame.TournamentViewController.HandleTournamentsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3c47230
	void HandleTournamentMatchupScoreUpdated(struct FString UpdatedTournamentID, struct FString UpdatedTournamentMatchupID, struct FTournamentMatchupScores& UpdatedTournamentMatchupScores); // Function ShooterGame.TournamentViewController.HandleTournamentMatchupScoreUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3c47050
	void HandleMatchupScheduledStartTimeUpdated(int64_t& ScheduledStartTime); // Function ShooterGame.TournamentViewController.HandleMatchupScheduledStartTimeUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3c46fc0
	struct UTournamentModel* GetTournamentModel(); // Function ShooterGame.TournamentViewController.GetTournamentModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3a7d6e0
};

// Class ShooterGame.TracerManagerComponent
// Size: 0x140 (Inherited: 0x140)
struct UTracerManagerComponent : UPureEffectManagerComponent {

	struct UTracerManagerComponent* GET(struct UObject* WorldContextObject); // Function ShooterGame.TracerManagerComponent.GET // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c46a70
};

// Class ShooterGame.TracerProjectileEffectComponent
// Size: 0x170 (Inherited: 0xf8)
struct UTracerProjectileEffectComponent : UBaseProjectileEffectComponent {
	struct FTracerEffects TracerEffects[0x2]; // 0xf8(0x10)
	struct FName StartBoneName; // 0x108(0x0c)
	bool bEnabled; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	struct FEffectData TracerEffectData; // 0x118(0x58)

	void OnStop(); // Function ShooterGame.TracerProjectileEffectComponent.OnStop // (Final|Native|Private) // @ game+0x3c47580
};

// Class ShooterGame.TrainingModule
// Size: 0x488 (Inherited: 0x3d8)
struct ATrainingModule : AInfo {
	struct FMulticastInlineDelegate OnTrainingModuleCompleted; // 0x3d8(0x10)
	struct AActor* FinishLocationActor; // 0x3e8(0x08)
	struct TMap<struct FName, struct FMissionsMapEntry> MissionsMap; // 0x3f0(0x50)
	struct UMissionGameStateComponent* CurrentMission; // 0x440(0x08)
	struct TSoftObjectPtr<ALevelStreamer> FinishedModuleLevelStreamer; // 0x448(0x30)
	struct UBaseGameStateComponent* EntryState; // 0x478(0x08)
	struct UBaseGameStateComponent* ExitState; // 0x480(0x08)

	void OnMissionActivated(struct UMissionGameStateComponent* MissionStateComponent, struct AMission* Mission); // Function ShooterGame.TrainingModule.OnMissionActivated // (Final|Native|Private) // @ game+0x3c474b0
	struct UMissionGameStateComponent* GetMissionStateComponent(struct FName MissionMapKey); // Function ShooterGame.TrainingModule.GetMissionStateComponent // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x3c46c30
	void CleanUpTrainingModuleStateMachine(); // Function ShooterGame.TrainingModule.CleanUpTrainingModuleStateMachine // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2024060
	void BuildTrainingModuleStateMachine(struct UBaseGameStateComponent* StartingState, struct UBaseGameStateComponent* EndingState, struct AShooterGameMode* GameMode); // Function ShooterGame.TrainingModule.BuildTrainingModuleStateMachine // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3c46960
};

// Class ShooterGame.TrainingModuleGameStateComponent
// Size: 0x198 (Inherited: 0x170)
struct UTrainingModuleGameStateComponent : UBaseGameStateComponent {
	struct FMulticastInlineDelegate OnTrainingModuleAttached; // 0x170(0x10)
	struct TArray<struct ATrainingModule*> TrainingModuleClasses; // 0x180(0x10)
	struct ATrainingModule* TrainingModule; // 0x190(0x08)
};

// Class ShooterGame.TransformRewinderComponent
// Size: 0x170 (Inherited: 0x100)
struct UTransformRewinderComponent : USnapshotRewinderComponent {
	struct TArray<struct FTransformSnapshot> Snapshots; // 0x100(0x10)
	char pad_110[0x60]; // 0x110(0x60)

	void OnTeleported(struct AShooterCharacter* Character); // Function ShooterGame.TransformRewinderComponent.OnTeleported // (Final|Native|Protected) // @ game+0x3c475a0
};

// Class ShooterGame.TransitionGameFlowState
// Size: 0xb0 (Inherited: 0x88)
struct UTransitionGameFlowState : UGameFlowState {
	char pad_88[0x28]; // 0x88(0x28)
};

// Class ShooterGame.TransitionManagerWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UTransitionManagerWidget : UCrossWorldUserWidget {
	bool bTransitionIsActive; // 0x2c8(0x01)
	bool bTransitionIsEnding; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct UPanelWidget* ContainerWidget; // 0x2d0(0x08)
	struct USimpleLifecycleWidget* CurrentTransitionWidget; // 0x2d8(0x08)

	void HandleWidgetAddedToContainerWidget(struct USimpleLifecycleWidget* TransitionWidget, struct UPanelSlot* LayoutSlot); // Function ShooterGame.TransitionManagerWidget.HandleWidgetAddedToContainerWidget // (Event|Public|BlueprintEvent) // @ game+0x40572e0
	void HandleEndTransitionCompleted(); // Function ShooterGame.TransitionManagerWidget.HandleEndTransitionCompleted // (Final|Native|Private) // @ game+0x3c46f80
};

// Class ShooterGame.TransitionModelManager
// Size: 0xb0 (Inherited: 0x30)
struct UTransitionModelManager : UObject {
	struct FString CurrentMatchID; // 0x30(0x10)
	struct FString LastMatchID; // 0x40(0x10)
	struct UTransitionToPregameModel* TransitionToPregameModel; // 0x50(0x08)
	struct UTransitionToInGameModel* TransitionToInGameModel; // 0x58(0x08)
	struct UTransitionToMainMenuModel* TransitionToMainMenuModel; // 0x60(0x08)
	struct UContentIndex* ContentIndex; // 0x68(0x08)
	struct UPartyManager* PartyManager; // 0x70(0x08)
	struct UPregameManager* PregameManager; // 0x78(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x80(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xa8(0x08)

	void UpdateModels(); // Function ShooterGame.TransitionModelManager.UpdateModels // (Final|Native|Private) // @ game+0x3c477f0
	void HandleMainMenu(); // Function ShooterGame.TransitionModelManager.HandleMainMenu // (Final|Native|Private) // @ game+0x3c46fa0
	struct UTransitionToPregameModel* GetTransitionToPregameModel(); // Function ShooterGame.TransitionModelManager.GetTransitionToPregameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d660
	struct UTransitionToMainMenuModel* GetTransitionToMainMenuModel(); // Function ShooterGame.TransitionModelManager.GetTransitionToMainMenuModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a7d6e0
	struct UTransitionToInGameModel* GetTransitionToInGameModel(); // Function ShooterGame.TransitionModelManager.GetTransitionToInGameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x386ac50
};

// Class ShooterGame.TransitionScreenModel
// Size: 0x48 (Inherited: 0x30)
struct UTransitionScreenModel : UObject {
	struct FMulticastInlineDelegate OnCurrentStateChanged; // 0x30(0x10)
	enum class ETransitionScreenState CurrentState; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	enum class ETransitionScreenState GetCurrentState(); // Function ShooterGame.TransitionScreenModel.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37ba510
};

// Class ShooterGame.TransitionToInGameModel
// Size: 0xe0 (Inherited: 0x48)
struct UTransitionToInGameModel : UTransitionScreenModel {
	struct UMapDataAsset* Map; // 0x48(0x08)
	struct UGameModeDataAsset* Mode; // 0x50(0x08)
	struct FString QueueID; // 0x58(0x10)
	struct FName AllyTeamID; // 0x68(0x0c)
	char pad_74[0x4]; // 0x74(0x04)
	struct TMap<struct FName, struct FLoadingScreenTeam> Teams; // 0x78(0x50)
	bool IsCustomGame; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct FString GamePodID; // 0xd0(0x10)

	bool IsSinglePlayerMatch(); // Function ShooterGame.TransitionToInGameModel.IsSinglePlayerMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c47480
	struct FString GetQueueID(); // Function ShooterGame.TransitionToInGameModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46d10
	struct UGameModeDataAsset* GetMode(); // Function ShooterGame.TransitionToInGameModel.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46ce0
	struct UMapDataAsset* GetMap(); // Function ShooterGame.TransitionToInGameModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6710
	bool GetIsCustomGame(); // Function ShooterGame.TransitionToInGameModel.GetIsCustomGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x220e3e0
	struct FString GetGamePodId(); // Function ShooterGame.TransitionToInGameModel.GetGamePodId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46c00
	struct FLoadingScreenTeam GetEnemyTeam(); // Function ShooterGame.TransitionToInGameModel.GetEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46b80
	struct FLoadingScreenTeam GetAllyTeam(); // Function ShooterGame.TransitionToInGameModel.GetAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46b00
};

// Class ShooterGame.TransitionToInGameStateV2
// Size: 0xd0 (Inherited: 0xb0)
struct UTransitionToInGameStateV2 : UTransitionGameFlowState {
	struct UCoreGameManager* CoreGameManager; // 0xb0(0x08)
	struct UPingManager* PingManager; // 0xb8(0x08)
	char pad_C0[0x10]; // 0xc0(0x10)
};

// Class ShooterGame.TransitionToMainMenuModel
// Size: 0x50 (Inherited: 0x48)
struct UTransitionToMainMenuModel : UTransitionScreenModel {
	struct UTransitionToPregameModel* TransitionToPregameModel; // 0x48(0x08)

	bool HasTransitionToPregameModel(); // Function ShooterGame.TransitionToMainMenuModel.HasTransitionToPregameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c47450
	struct UTransitionToPregameModel* GetTransitionToPregameModel(); // Function ShooterGame.TransitionToMainMenuModel.GetTransitionToPregameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38573f0
};

// Class ShooterGame.TransitionToMainMenuStateV2
// Size: 0xb0 (Inherited: 0xb0)
struct UTransitionToMainMenuStateV2 : UTransitionGameFlowState {
};

// Class ShooterGame.TransitionToPlatformFaultedStateV2
// Size: 0xb0 (Inherited: 0xb0)
struct UTransitionToPlatformFaultedStateV2 : UTransitionGameFlowState {
};

// Class ShooterGame.TransitionToPregameModel
// Size: 0x178 (Inherited: 0x48)
struct UTransitionToPregameModel : UTransitionScreenModel {
	struct UMapDataAsset* Map; // 0x48(0x08)
	struct UGameModeDataAsset* Mode; // 0x50(0x08)
	enum class EAresTeam Team; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FName TeamID; // 0x5c(0x0c)
	struct FString QueueID; // 0x68(0x10)
	struct FString TournamentID; // 0x78(0x10)
	struct FTournamentMetadata TournamentMetadata; // 0x88(0x80)
	struct FTournamentRosterMetadata RosterMetadata; // 0x108(0x70)

	struct FTournamentRosterMetadata GetTournamentRosterMetadata(); // Function ShooterGame.TransitionToPregameModel.GetTournamentRosterMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46f50
	struct FTournamentMetadata GetTournamentMetadata(); // Function ShooterGame.TransitionToPregameModel.GetTournamentMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46ee0
	struct FName GetTeamID(); // Function ShooterGame.TransitionToPregameModel.GetTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46eb0
	enum class EAresTeam GetTeam(); // Function ShooterGame.TransitionToPregameModel.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x37933b0
	struct FString GetQueueID(); // Function ShooterGame.TransitionToPregameModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46de0
	struct UGameModeDataAsset* GetMode(); // Function ShooterGame.TransitionToPregameModel.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c46ce0
	struct UMapDataAsset* GetMap(); // Function ShooterGame.TransitionToPregameModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d6710
};

// Class ShooterGame.TransitionToPregameStateV2
// Size: 0xb8 (Inherited: 0xb0)
struct UTransitionToPregameStateV2 : UTransitionGameFlowState {
	struct UPregameManager* PregameManager; // 0xb0(0x08)
};

// Class ShooterGame.TravelManager
// Size: 0xa8 (Inherited: 0x30)
struct UTravelManager : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	bool bInitialized; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float TimeWaitedToTravel; // 0x4c(0x04)
	struct FName TravelInProgressDestination; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct URSOManager* RSOManager; // 0x60(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x68(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x98(0x08)
	struct UMapLoadModel* MapLoadModel; // 0xa0(0x08)

	void TravelCompleted(); // Function ShooterGame.TravelManager.TravelCompleted // (Final|Native|Private) // @ game+0x3c4e560
	bool Tick(float DeltaTime); // Function ShooterGame.TravelManager.Tick // (Final|Native|Private) // @ game+0x3c4e4d0
	bool IsTravelInProgress(); // Function ShooterGame.TravelManager.IsTravelInProgress // (Final|Native|Private|Const) // @ game+0x3c4d030
	void HandleTravelFailure(struct UWorld* World, enum class ETravelFailure FailureType, struct FString Message); // Function ShooterGame.TravelManager.HandleTravelFailure // (Final|Native|Private) // @ game+0x3c4cf00
	void HandleNetworkFailure(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkFailure FailureType, struct FString Message); // Function ShooterGame.TravelManager.HandleNetworkFailure // (Final|Native|Private) // @ game+0x3c4cd80
	struct UTravelManager* GetTravelManager(struct UObject* WorldContextObject); // Function ShooterGame.TravelManager.GetTravelManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4cc30
};

// Class ShooterGame.TurnLeftLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UTurnLeftLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.TurnRightLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UTurnRightLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.TutorialManager
// Size: 0x70 (Inherited: 0x30)
struct UTutorialManager : UObject {
	struct UAresSettingsManager* AresSettingsManager; // 0x30(0x08)
	struct URoamingSettingsManager* RoamingSettingsManager; // 0x38(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x40(0x08)
	struct UPartyManager* PartyManager; // 0x48(0x08)
	struct UStoreManager* StoreManager; // 0x50(0x08)
	struct UContractsViewController* ContractsViewController; // 0x58(0x08)
	struct UInventoryManager* InventoryManager; // 0x60(0x08)
	struct UConfigManager* ConfigManager; // 0x68(0x08)

	bool ShouldShowWelcomeScreen(); // Function ShooterGame.TutorialManager.ShouldShowWelcomeScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e4a0
	bool ShouldShowUPWTutorial(); // Function ShooterGame.TutorialManager.ShouldShowUPWTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e470
	bool ShouldShowTournamentsScreen(); // Function ShooterGame.TutorialManager.ShouldShowTournamentsScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e440
	bool ShouldShowSettingsTutorial(); // Function ShooterGame.TutorialManager.ShouldShowSettingsTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e410
	bool ShouldShowPlayButtonTutorial(); // Function ShooterGame.TutorialManager.ShouldShowPlayButtonTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e3e0
	bool ShouldShowPhotoSensitivityWarning(); // Function ShooterGame.TutorialManager.ShouldShowPhotoSensitivityWarning // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e3b0
	bool ShouldShowNPEContractTutorial(); // Function ShooterGame.TutorialManager.ShouldShowNPEContractTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e350
	bool ShouldShowNewPlayerSettings(); // Function ShooterGame.TutorialManager.ShouldShowNewPlayerSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e380
	bool ShouldShowMenuTutorial(); // Function ShooterGame.TutorialManager.ShouldShowMenuTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e320
	bool ShouldShowCodeOfConduct(); // Function ShooterGame.TutorialManager.ShouldShowCodeOfConduct // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e2f0
	bool ShouldShowBotsMatchPromptScreen(); // Function ShooterGame.TutorialManager.ShouldShowBotsMatchPromptScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e2c0
	bool ShouldShowActivateContractTutorial(); // Function ShooterGame.TutorialManager.ShouldShowActivateContractTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4e290
	void HandleCurrentMatchUpdated(); // Function ShooterGame.TutorialManager.HandleCurrentMatchUpdated // (Final|Native|Protected) // @ game+0x3c4ccc0
	void DismissWelcomeScreen(); // Function ShooterGame.TutorialManager.DismissWelcomeScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c790
	void DismissUPWTutorial(); // Function ShooterGame.TutorialManager.DismissUPWTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c770
	void DismissTournamentsScreen(); // Function ShooterGame.TutorialManager.DismissTournamentsScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c750
	void DismissSettingsTutorial(); // Function ShooterGame.TutorialManager.DismissSettingsTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c730
	void DismissPlayButtonTutorial(); // Function ShooterGame.TutorialManager.DismissPlayButtonTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c710
	void DismissPhotoSensitivityWarning(); // Function ShooterGame.TutorialManager.DismissPhotoSensitivityWarning // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c6f0
	void DismissNPEContractTutorial(); // Function ShooterGame.TutorialManager.DismissNPEContractTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c6b0
	void DismissNewPlayerSettings(); // Function ShooterGame.TutorialManager.DismissNewPlayerSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c6d0
	void DismissMenuTutorial(); // Function ShooterGame.TutorialManager.DismissMenuTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c690
	void DismissBotsMatchPromptScreen(); // Function ShooterGame.TutorialManager.DismissBotsMatchPromptScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c670
	void AcceptCodeOfConduct(); // Function ShooterGame.TutorialManager.AcceptCodeOfConduct // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4c650
};

// Class ShooterGame.MainMenuAutomationBase
// Size: 0x38 (Inherited: 0x30)
struct UMainMenuAutomationBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	void WaitForMenuScreenByType(struct UUserWidget* Type, float MaxWaitSeconds, struct UUserWidget*& Result, struct FLatentActionInfo LatentInfo); // Function ShooterGame.MainMenuAutomationBase.WaitForMenuScreenByType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4e580
	void WaitForMainMenuParentWidget(struct UMainMenuParentWidget* MainMenuClass, float MaxWaitSeconds, struct UMainMenuParentWidget*& OutMainMenu, struct FLatentActionInfo LatentInfo); // Function ShooterGame.MainMenuAutomationBase.WaitForMainMenuParentWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4e580
	void GetMenuScreenByType(struct UUserWidget*& OutWidget, struct UUserWidget* WidgetClass); // Function ShooterGame.MainMenuAutomationBase.GetMenuScreenByType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4c960
	void GetMainMenuParentWidget(struct UMainMenuParentWidget* MainMenuClass, struct UMainMenuParentWidget*& OutMainMenu); // Function ShooterGame.MainMenuAutomationBase.GetMainMenuParentWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4c880
};

// Class ShooterGame.HUDAutomationBase
// Size: 0x38 (Inherited: 0x30)
struct UHUDAutomationBase : UObject {
	struct AHUD* HUD; // 0x30(0x08)
};

// Class ShooterGame.PlayerUIAutomationBase
// Size: 0x40 (Inherited: 0x30)
struct UPlayerUIAutomationBase : UObject {
	struct UMainMenuAutomationBase* MainMenuAutomation; // 0x30(0x08)
	struct UHUDAutomationBase* HUDAutomation; // 0x38(0x08)
};

// Class ShooterGame.UINavigationManager
// Size: 0x70 (Inherited: 0x30)
struct UUINavigationManager : UObject {
	struct UUINavigationModel* UINavigationModel; // 0x30(0x08)
	struct TArray<struct FUINavigationRequest> PendingNavigationRequests; // 0x38(0x10)
	struct TArray<struct FUIModalRequest> PendingModalRequests; // 0x48(0x10)
	char pad_58[0x18]; // 0x58(0x18)

	void SetModalsAreAllowed(bool bInModalsAllowed); // Function ShooterGame.UINavigationManager.SetModalsAreAllowed // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4def0
	void Reset(); // Function ShooterGame.UINavigationManager.Reset // (Final|Native|Private) // @ game+0x3c4dad0
	void RemoveModal(struct FGuid& InModalID); // Function ShooterGame.UINavigationManager.RemoveModal // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4da30
	struct FGuid QueueModal(struct FString InScreenUrl, struct UModalInfoBase* InModalInfo); // Function ShooterGame.UINavigationManager.QueueModal // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c4d7c0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.UINavigationManager.OnBugCommand // (Final|Native|Private) // @ game+0x3c4d670
	void NavigateUp(int32_t NumScreensToPop); // Function ShooterGame.UINavigationManager.NavigateUp // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4d5e0
	void NavigateToRelativeUrl(struct FString InUrlString, struct TMap<struct FName, struct FWildcard>& InParameters, bool bPreserveBackHistory); // Function ShooterGame.UINavigationManager.NavigateToRelativeUrl // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4d3d0
	void NavigateToNavigationIndex(int32_t NavigationBarIndex, int32_t NavigationIndex); // Function ShooterGame.UINavigationManager.NavigateToNavigationIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4d300
	void NavigateToAbsoluteUrl(struct FString InUrlString, struct TMap<struct FName, struct FWildcard>& InParameters, bool bPreserveBackHistory); // Function ShooterGame.UINavigationManager.NavigateToAbsoluteUrl // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4d0f0
	void NavigateBack(int32_t NumBack); // Function ShooterGame.UINavigationManager.NavigateBack // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4d060
	void HandleModalClosed(struct FGuid& ModalID); // Function ShooterGame.UINavigationManager.HandleModalClosed // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x3c4cce0
	struct UUINavigationModel* GetUINavigationModel(); // Function ShooterGame.UINavigationManager.GetUINavigationModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3860c60
	bool GetParameterByName(struct FName InParameter, struct FWildcard& OutParameter); // Function ShooterGame.UINavigationManager.GetParameterByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4cae0
};

// Class ShooterGame.UINavigationModel
// Size: 0x178 (Inherited: 0x30)
struct UUINavigationModel : UObject {
	struct FMulticastInlineDelegate OnMenuUrlChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnNavigationBarChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnNavigationBarIndexChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnWidgetVisibilityOptionsChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnBackgroundImageChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnBackgroundVideoChanged; // 0x80(0x10)
	char pad_90[0xe8]; // 0x90(0xe8)

	void SetWidgetVisibilityOptions(struct FShellWidgetVisibilityOptions& InOptions); // Function ShooterGame.UINavigationModel.SetWidgetVisibilityOptions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4e1f0
	void SetNavigationData(struct FName& InLandingScreen, struct TArray<struct FName>& InChildScreens, int32_t InNavigationBarIndex, struct TArray<struct FRGICommonNavBarDetails>& InNavigationDetails, int32_t InNavigationSubScreenIndex); // Function ShooterGame.UINavigationModel.SetNavigationData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4df80
	void SetCurrentUrl(struct FAresMenuUrl& InUrl); // Function ShooterGame.UINavigationModel.SetCurrentUrl // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4ddb0
	void SetBackgroundVideoParams(struct FMenuStackMediaSourceParams& InParams); // Function ShooterGame.UINavigationModel.SetBackgroundVideoParams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c4dcf0
	void SetBackgroundImage(struct TSoftObjectPtr<UTexture2D> InImage); // Function ShooterGame.UINavigationModel.SetBackgroundImage // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4dbc0
	void ResetNavigationData(int32_t NavigationBarIndex, bool bBroadcastChanges); // Function ShooterGame.UINavigationModel.ResetNavigationData // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4daf0
	struct FShellWidgetVisibilityOptions GetWidgetVisibilityOptions(); // Function ShooterGame.UINavigationModel.GetWidgetVisibilityOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386ac70
	struct TArray<struct FRGICommonNavBarDetails> GetNavigationData(int32_t InNavigationBarIndex); // Function ShooterGame.UINavigationModel.GetNavigationData // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4ca30
	struct FString GetCurrentUrlsAsString(); // Function ShooterGame.UINavigationModel.GetCurrentUrlsAsString // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c4c800
	struct FAresMenuUrl GetCurrentUrl(); // Function ShooterGame.UINavigationModel.GetCurrentUrl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4c7b0
};

// Class ShooterGame.UISettings
// Size: 0x110 (Inherited: 0x30)
struct UUISettings : UObject {
	struct FSoftClassPath EmojiMappingClass; // 0x30(0x20)
	struct FSoftClassPath TransitionManagerWidgetClass; // 0x50(0x20)
	struct FSoftClassPath DefaultTransitionWidgetClass; // 0x70(0x20)
	struct FSoftClassPath TransitionToPregameWidgetClass; // 0x90(0x20)
	struct FSoftClassPath TransitionToInGameWidgetClass; // 0xb0(0x20)
	struct FSoftClassPath TransitionToMainMenuWidgetClass; // 0xd0(0x20)
	struct FSoftClassPath PregameToInGameTransitionWidgetClass; // 0xf0(0x20)
};

// Class ShooterGame.UITelemetryManager
// Size: 0x98 (Inherited: 0x80)
struct UUITelemetryManager : UInitSystem {
	struct URSOManager* RSOManager; // 0x80(0x08)
	struct UTelemetrySampler* TelemetrySampler; // 0x88(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x90(0x08)

	void RecordUIAction(struct UObject* WorldContextObject, enum class EUIActionType ActionType, struct FString ActionTarget); // Function ShooterGame.UITelemetryManager.RecordUIAction // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4d8c0
};

// Class ShooterGame.TelemetryButton
// Size: 0x4b0 (Inherited: 0x498)
struct UTelemetryButton : UButton {
	bool bSendTelemetry; // 0x498(0x01)
	char pad_499[0x7]; // 0x499(0x07)
	struct FString ActionTarget; // 0x4a0(0x10)
};

// Class ShooterGame.LineOfSightTrackerComponent
// Size: 0x150 (Inherited: 0xe8)
struct ULineOfSightTrackerComponent : UActorComponent {
	float AlwaysInSightMaxDistanceSqr; // 0xe8(0x04)
	float MaxAngleAperture; // 0xec(0x04)
	struct TSet<struct AShooterPlayerState*> EnemiesInSight; // 0xf0(0x50)
	struct UFogOfWarManagerComponent* FogOfWarManager; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
};

// Class ShooterGame.ModalNotificationWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UModalNotificationWidget : UDesignableUserWidget {

	void SetNotificationConfig(struct UGenericNotification* ModalNotification); // Function ShooterGame.ModalNotificationWidget.SetNotificationConfig // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3656780
};

// Class ShooterGame.UnequipStateComponent
// Size: 0x2e8 (Inherited: 0x2e0)
struct UUnequipStateComponent : UScriptStateComponent {
	enum class EEquipSpeed EquipSpeed; // 0x2e0(0x01)
	bool bIgnorePlayerSettingsAndReequipMostRecent; // 0x2e1(0x01)
	char pad_2E2[0x6]; // 0x2e2(0x06)
};

// Class ShooterGame.UniformGridListSlot
// Size: 0x68 (Inherited: 0x40)
struct UUniformGridListSlot : UOrderedListSimpleWidgetContainerSlot {
	enum class EHorizontalAlignment HorizontalAlignment; // 0x40(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	int32_t Row; // 0x44(0x04)
	int32_t Column; // 0x48(0x04)
	char pad_4C[0x1c]; // 0x4c(0x1c)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.UniformGridListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3c5a0d0
	void SetRow(int32_t InRow); // Function ShooterGame.UniformGridListSlot.SetRow // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59fb0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.UniformGridListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59c10
	void SetColumn(int32_t InColumn); // Function ShooterGame.UniformGridListSlot.SetColumn // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59b80
};

// Class ShooterGame.UniformGridPanelList
// Size: 0x2c0 (Inherited: 0x298)
struct UUniformGridPanelList : UOrderedListSimpleWidgetContainerBase {
	struct FMargin SlotPadding; // 0x298(0x10)
	float MinDesiredSlotWidth; // 0x2a8(0x04)
	float MinDesiredSlotHeight; // 0x2ac(0x04)
	char pad_2B0[0x10]; // 0x2b0(0x10)

	void SetSlotPadding(struct FMargin InSlotPadding); // Function ShooterGame.UniformGridPanelList.SetSlotPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x3c5a040
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth); // Function ShooterGame.UniformGridPanelList.SetMinDesiredSlotWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59f30
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight); // Function ShooterGame.UniformGridPanelList.SetMinDesiredSlotHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59eb0
};

// Class ShooterGame.UniformGridSlotConfigurer
// Size: 0x58 (Inherited: 0x50)
struct UUniformGridSlotConfigurer : UListEntrySlotConfigurerBase {
	enum class EHorizontalAlignment HorizontalAlignment; // 0x50(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x51(0x01)
	enum class EGridAxis2D MajorAxis; // 0x52(0x01)
	char pad_53[0x1]; // 0x53(0x01)
	int32_t MaxMinorItemCount; // 0x54(0x04)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.UniformGridSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3c5a150
	void SetMaxMinorItemCount(int32_t InMaxMinorItemCount); // Function ShooterGame.UniformGridSlotConfigurer.SetMaxMinorItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59e20
	void SetMajorAxis(enum class EGridAxis2D InMajorAxis); // Function ShooterGame.UniformGridSlotConfigurer.SetMajorAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59da0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.UniformGridSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59c90
};

// Class ShooterGame.UnorderedMapModel
// Size: 0x30 (Inherited: 0x30)
struct UUnorderedMapModel : UInterface {

	void UnbindOnChange(struct FDelegate& Delegate); // Function ShooterGame.UnorderedMapModel.UnbindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378ca00
	int32_t GetNum(); // Function ShooterGame.UnorderedMapModel.GetNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39f70d0
	void BindOnChange(struct FDelegate& Delegate); // Function ShooterGame.UnorderedMapModel.BindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x378dcb0
};

// Class ShooterGame.UnorderedMapModelBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UUnorderedMapModelBlueprintLibrary : UBlueprintFunctionLibrary {

	struct TArray<struct FWildcard> GetReplacedItemValues(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetReplacedItemValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58d30
	struct TMap<struct FWildcard, struct FWildcard> GetReplacedItems(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetReplacedItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58e30
	struct TArray<struct FWildcard> GetReplacedItemKeys(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetReplacedItemKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58c30
	struct TArray<struct FWildcard> GetRemovedKeys(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetRemovedKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58b30
	void GetKeys(struct TArray<struct FWildcard>& Keys, struct TScriptInterface<IUnorderedMapModel> Target); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58890
	bool GetItemByKey(int32_t& Value, struct TScriptInterface<IUnorderedMapModel> Target, int32_t& Key); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetItemByKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3611830
	struct TArray<struct FWildcard> GetAddedItemValues(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetAddedItemValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58590
	struct TMap<struct FWildcard, struct FWildcard> GetAddedItems(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetAddedItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58690
	struct TArray<struct FWildcard> GetAddedItemKeys(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetAddedItemKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c58490
};

// Class ShooterGame.UrlParser
// Size: 0x30 (Inherited: 0x30)
struct UUrlParser : UBlueprintFunctionLibrary {

	struct FString GetQueryParameter(struct FString URL, struct FString ParameterName); // Function ShooterGame.UrlParser.GetQueryParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c58a00
};

// Class ShooterGame.UsableCollisionVolume
// Size: 0x570 (Inherited: 0x570)
struct UUsableCollisionVolume : USphereComponent {
};

// Class ShooterGame.UsableComponent
// Size: 0x4d0 (Inherited: 0xe8)
struct UUsableComponent : UActorComponent {
	enum class EUsablePriority UsePriority; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float ScoringBonus; // 0xec(0x04)
	bool bAllowMultipleUsers; // 0xf0(0x01)
	bool bCanBeSpedUp; // 0xf1(0x01)
	bool bDistanceLimitedUsable; // 0xf2(0x01)
	char pad_F3[0x1]; // 0xf3(0x01)
	float UseDistance; // 0xf4(0x04)
	bool bMustBeFullyInside; // 0xf8(0x01)
	bool bRequireLineOfSight; // 0xf9(0x01)
	enum class ECollisionChannel LineOfSightChannel; // 0xfa(0x01)
	bool bUseComplexForLineOfSight; // 0xfb(0x01)
	bool bClampCameraWhileUsing; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float PitchClampWhileUsing; // 0x100(0x04)
	float YawClampWhileUsing; // 0x104(0x04)
	float AdditionalScoringAngle; // 0x108(0x04)
	float AdditionalScoringYaw; // 0x10c(0x04)
	float AdditionalScoringPitch; // 0x110(0x04)
	float TouchAdditionalScoringYaw; // 0x114(0x04)
	float TouchAdditionalScoringPitch; // 0x118(0x04)
	bool bReportNoiseEventOnStart; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct FNoiseEventData NoiseEventDataStart; // 0x120(0x38)
	bool bReportNoiseEventOnSuccess; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct FNoiseEventData NoiseEventDataSuccess; // 0x160(0x38)
	struct FString UseMessage; // 0x198(0x10)
	struct FString UseMessage2; // 0x1a8(0x10)
	struct FText UseMessageText; // 0x1b8(0x18)
	struct FText UseMessage2Text; // 0x1d0(0x18)
	struct FColor UseMessage2Color; // 0x1e8(0x04)
	char pad_1EC[0x4]; // 0x1ec(0x04)
	struct FString UsingMessage; // 0x1f0(0x10)
	struct FText UsingMessageText; // 0x200(0x18)
	float UsingMessageScale; // 0x218(0x04)
	char pad_21C[0x4]; // 0x21c(0x04)
	struct FText CannotUseMessageText; // 0x220(0x18)
	struct FCanvasIcon UseIcon; // 0x238(0x18)
	struct FCanvasIcon UsingIcon; // 0x250(0x18)
	float UseIconScale; // 0x268(0x04)
	bool bConsumesInteraction; // 0x26c(0x01)
	enum class EUseKeyType UseKey; // 0x26d(0x01)
	char pad_26E[0x2]; // 0x26e(0x02)
	struct UAresGameplayBuff* CharacterUsingBuff; // 0x270(0x08)
	struct AAresEquippable* EquippableToSwitchTo; // 0x278(0x08)
	struct AEffectContainer* EquippableEquippedEffect; // 0x280(0x08)
	float EquippableCompleteTime; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct AEffectContainer* EquippableCompleteEffect; // 0x290(0x08)
	float EquippableCancelTime; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct AEffectContainer* EquippableCancelEffect; // 0x2a0(0x08)
	enum class EEquipSpeed EquippableUnequipSpeed; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
	struct FGameplayAttribute PreventUsingAttribute; // 0x2b0(0x38)
	struct FMulticastInlineDelegate OnCanUse; // 0x2e8(0x10)
	bool bCanUseResult; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct FMulticastInlineDelegate OnCanSelect; // 0x300(0x10)
	bool bCanSelectResult; // 0x310(0x01)
	char pad_311[0x3]; // 0x311(0x03)
	float GetUseTimeResult; // 0x314(0x04)
	struct FMulticastInlineDelegate OnUseRejected; // 0x318(0x10)
	struct FMulticastInlineDelegate OnUseStarted; // 0x328(0x10)
	struct FMulticastInlineDelegate OnUseSuccessful; // 0x338(0x10)
	struct FMulticastInlineDelegate OnUseCanceled; // 0x348(0x10)
	struct FMulticastInlineDelegate OnGetUseTime; // 0x358(0x10)
	struct FMulticastInlineDelegate OnBecomeLocalTargettedUsable; // 0x368(0x10)
	struct FMulticastInlineDelegate OnStopBeingLocalTargettedUsable; // 0x378(0x10)
	struct FMulticastInlineDelegate OnUsabilityUpdated; // 0x388(0x10)
	struct FMulticastInlineDelegate OnTextUpdated; // 0x398(0x10)
	bool bAreaInteraction; // 0x3a8(0x01)
	char pad_3A9[0x7]; // 0x3a9(0x07)
	struct AActor* UsableScoringActor; // 0x3b0(0x08)
	struct TArray<struct UPrimitiveComponent*> CollisionVolumes; // 0x3b8(0x10)
	float UseTime; // 0x3c8(0x04)
	bool bInsideCanUse; // 0x3cc(0x01)
	bool bIsUsable; // 0x3cd(0x01)
	bool bAllowClientPrediction; // 0x3ce(0x01)
	bool bInsideCanSelect; // 0x3cf(0x01)
	bool bIsSelectable; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	float HighestProgress; // 0x3d4(0x04)
	bool bIsContinuous; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct TArray<struct UInteractableUserComponent*> OverlappingCharacters; // 0x3e0(0x10)
	struct TArray<struct UInteractableUserComponent*> NotifiedCharacters; // 0x3f0(0x10)
	struct TMap<struct UInteractableUserComponent*, float> AuthUsingCharactersUseTime; // 0x400(0x50)
	struct TMap<struct UInteractableUserComponent*, struct FActiveGameplayEffectHandle> UsingBuffMap; // 0x450(0x50)
	char pad_4A0[0x10]; // 0x4a0(0x10)
	struct TArray<struct FAuthUsableUser> AuthUsingCharacters; // 0x4b0(0x10)
	char pad_4C0[0x10]; // 0x4c0(0x10)

	void UsingCharactersRemove(struct UInteractableUserComponent* Character); // Function ShooterGame.UsableComponent.UsingCharactersRemove // (Final|Native|Private) // @ game+0x3c5a510
	void UsingCharactersAdd(struct UInteractableUserComponent* Character); // Function ShooterGame.UsableComponent.UsingCharactersAdd // (Final|Native|Private) // @ game+0x3c5a480
	void UseStart(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.UseStart // (Final|Native|Public) // @ game+0x3c5a3f0
	void UseInstant(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.UseInstant // (Final|Native|Public) // @ game+0x3c5a360
	void UseComplete(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.UseComplete // (Final|Native|Public) // @ game+0x3c5a2d0
	void UseCancel(struct UInteractableUserComponent* User, enum class EUsableCancelReason CancelReason); // Function ShooterGame.UsableComponent.UseCancel // (Final|Native|Public) // @ game+0x3c5a200
	bool TickShouldBeEnabled(); // Function ShooterGame.UsableComponent.TickShouldBeEnabled // (Final|Native|Private) // @ game+0x3c5a1d0
	void SetIsUsable(bool bNewIsUsable); // Function ShooterGame.UsableComponent.SetIsUsable // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59d10
	void ReplaceUsableVolumes(struct TArray<struct UPrimitiveComponent*>& NewVolumes); // Function ShooterGame.UsableComponent.ReplaceUsableVolumes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c59ad0
	void RejectUse(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.RejectUse // (Final|Native|Public) // @ game+0x3c59a40
	void OverrideUseTime(struct UInteractableUserComponent* User, float NewUseTime); // Function ShooterGame.UsableComponent.OverrideUseTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3c59970
	void OnShooterCharacterDied(struct AShooterCharacter* Character, struct UDamageResponse* Response); // Function ShooterGame.UsableComponent.OnShooterCharacterDied // (Final|Native|Public) // @ game+0x3c597d0
	void OnRep_UsingCharacters(); // Function ShooterGame.UsableComponent.OnRep_UsingCharacters // (Final|Native|Public) // @ game+0x3c597b0
	void OnComponentDestroyed(bool bDestroyingHierarchy); // Function ShooterGame.UsableComponent.OnComponentDestroyed // (Final|Native|Private) // @ game+0x3c59680
	void OnCollisionVolumeBeingDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.UsableComponent.OnCollisionVolumeBeingDestroyed // (Final|Native|Public) // @ game+0x3c595f0
	void OnCharacterSpawn(struct APawn* Pawn); // Function ShooterGame.UsableComponent.OnCharacterSpawn // (Final|Native|Private) // @ game+0x3c59560
	void OnActorEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function ShooterGame.UsableComponent.OnActorEndOverlap // (Final|Native|Public) // @ game+0x3c59400
	void OnActorBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function ShooterGame.UsableComponent.OnActorBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x3c591e0
	bool IsInUse(); // Function ShooterGame.UsableComponent.IsInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c591b0
	bool IsCharacterUsing(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.IsCharacterUsing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c59110
	bool IsCharacterFullyInside(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.UsableComponent.IsCharacterFullyInside // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c59070
	struct AActor* GetWorldObjectForScoring(); // Function ShooterGame.UsableComponent.GetWorldObjectForScoring // (Final|Native|Public|Const) // @ game+0x3c59040
	float GetUseTime(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.GetUseTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3c58fa0
	float GetHighestProgress(); // Function ShooterGame.UsableComponent.GetHighestProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c58860
	struct UInteractableUserComponent* GetCharacterWithMostUseProgress(); // Function ShooterGame.UsableComponent.GetCharacterWithMostUseProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x288a7f0
	float GetAdditionalScoringYaw(); // Function ShooterGame.UsableComponent.GetAdditionalScoringYaw // (Final|Native|Public) // @ game+0x3c58830
	float GetAdditionalScoringPitch(); // Function ShooterGame.UsableComponent.GetAdditionalScoringPitch // (Final|Native|Public) // @ game+0x3c58800
	void EnableTickIfNeeded(); // Function ShooterGame.UsableComponent.EnableTickIfNeeded // (Final|Native|Private) // @ game+0x3c58470
	bool CanUse(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.CanUse // (Final|Native|Public|BlueprintCallable) // @ game+0x3c583b0
	bool CanSelect(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.CanSelect // (Final|Native|Public|BlueprintCallable) // @ game+0x3c58310
	void CallTextUpdated(); // Function ShooterGame.UsableComponent.CallTextUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x3c582d0
	void AuthSetUseTime(float NewUseTime); // Function ShooterGame.UsableComponent.AuthSetUseTime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x36a0b30
	void AuthOverrideUseTime(struct UInteractableUserComponent* User, float NewUseTime); // Function ShooterGame.UsableComponent.AuthOverrideUseTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3898c70
	float AuthGetCharacterUseTime(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.AuthGetCharacterUseTime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c58230
};

// Class ShooterGame.UserAction
// Size: 0x30 (Inherited: 0x30)
struct UUserAction : UInterface {

	void UnbindOnActionStateChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.UnbindOnActionStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c615e0
	void UnbindOnActionDisplayInfoChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.UnbindOnActionDisplayInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x398f450
	enum class EUserActionTriggerResponse Trigger(struct FWildcard& Data); // Function ShooterGame.UserAction.Trigger // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c614f0
	enum class EUserActionState GetActionState(); // Function ShooterGame.UserAction.GetActionState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60ab0
	struct FUserActionDisplayInfo GetActionDisplayInfo(); // Function ShooterGame.UserAction.GetActionDisplayInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c609d0
	void BindOnActionStateChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.BindOnActionStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3a9ffd0
	void BindOnActionDisplayInfoChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.BindOnActionDisplayInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x378ca00
};

// Class ShooterGame.UserActionTarget
// Size: 0x30 (Inherited: 0x30)
struct UUserActionTarget : UInterface {

	void SetUserAction(struct TScriptInterface<IUserAction>& NewValue); // Function ShooterGame.UserActionTarget.SetUserAction // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3c61450
};

// Class ShooterGame.UserInfoNotificationManager
// Size: 0x90 (Inherited: 0x80)
struct UUserInfoNotificationManager : UInitSystem {
	struct UNotificationManager* NotificationManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)

	void HandleVoiceChatMutedChanged(bool NewValue); // Function ShooterGame.UserInfoNotificationManager.HandleVoiceChatMutedChanged // (Final|Native|Private) // @ game+0x3c60dd0
	void HandleTextChatMutedChanged(bool NewValue); // Function ShooterGame.UserInfoNotificationManager.HandleTextChatMutedChanged // (Final|Native|Private) // @ game+0x3c60d20
};

// Class ShooterGame.UserObservableWidget
// Size: 0x30 (Inherited: 0x30)
struct UUserObservableWidget : UInterface {

	void SetObservedByUser(bool bNewValue); // Function ShooterGame.UserObservableWidget.SetObservedByUser // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x37b0560
};

// Class ShooterGame.ValueDisagreementTimer
// Size: 0xb0 (Inherited: 0x30)
struct UValueDisagreementTimer : UObject {
	bool bIsEnabled; // 0x30(0x01)
	char pad_31[0x67]; // 0x31(0x67)
	float ValueUnchangedTimeDuration; // 0x98(0x04)
	bool bValueChangedSinceLastTick; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	float ConsiderStablePingTimeMultiplier; // 0xa0(0x04)
	float ConsiderStableBufferTimeDurationMilliseconds; // 0xa4(0x04)
	float ConsiderStableMaxWaitTimeDurationMilliseconds; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)

	void OnOwnerClientRoleChanged(struct AActor* Owner, enum class ENetRole NewRole); // Function ShooterGame.ValueDisagreementTimer.OnOwnerClientRoleChanged // (Final|Native|Private) // @ game+0x3c61150
};

// Class ShooterGame.VanguardManager
// Size: 0xf0 (Inherited: 0x80)
struct UVanguardManager : UInitSystem {
	struct URMSManager* RMSManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct FString CurrentMatchID; // 0xa8(0x10)
	struct FString VanguardServer; // 0xb8(0x10)
	char pad_C8[0xc]; // 0xc8(0x0c)
	bool bUseVanguardMessageClient; // 0xd4(0x01)
	char pad_D5[0x1b]; // 0xd5(0x1b)

	void HandleCurrentMatchUpdated(); // Function ShooterGame.VanguardManager.HandleCurrentMatchUpdated // (Final|Native|Public) // @ game+0x3c60d00
};

// Class ShooterGame.VerticalBoxList
// Size: 0x2a8 (Inherited: 0x298)
struct UVerticalBoxList : UOrderedListSimpleWidgetContainerBase {
	char pad_298[0x10]; // 0x298(0x10)
};

// Class ShooterGame.VerticalBoxListSlot
// Size: 0x68 (Inherited: 0x40)
struct UVerticalBoxListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	struct FSlateChildSize Size; // 0x50(0x08)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x58(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x59(0x01)
	char pad_5A[0xe]; // 0x5a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.VerticalBoxListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3958df0
	void SetSize(struct FSlateChildSize InSize); // Function ShooterGame.VerticalBoxListSlot.SetSize // (Final|Native|Public|BlueprintCallable) // @ game+0x3958d60
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.VerticalBoxListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x3958cd0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.VerticalBoxListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3958c50
};

// Class ShooterGame.ViewerFogOfWarComponent
// Size: 0x118 (Inherited: 0xe8)
struct UViewerFogOfWarComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct UBaseTeamComponent* CachedTeamComponent; // 0x100(0x08)
	struct UFogOfWarComponent* CachedFirstPersonComponent; // 0x108(0x08)
	char pad_110[0x1]; // 0x110(0x01)
	bool bAllActorsAreRelevant; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)

	void OnViewTargetChanged(struct AActor* NewViewTarget); // Function ShooterGame.ViewerFogOfWarComponent.OnViewTargetChanged // (Final|Native|Public) // @ game+0x3634e00
	void OnTeamChanged(); // Function ShooterGame.ViewerFogOfWarComponent.OnTeamChanged // (Final|Native|Public) // @ game+0x2024060
	void OnPlayerViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ViewerFogOfWarComponent.OnPlayerViewTargetModeChanged // (Final|Native|Public|HasOutParms) // @ game+0x3c61220
};

// Class ShooterGame.ViewTargetComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UViewTargetComponent : UActorComponent {
	struct FMulticastInlineDelegate OnInfoReplicated; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnModeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnTargetReplicated; // 0x108(0x10)
	struct FMulticastInlineDelegate OnPreApplyPendingTarget; // 0x118(0x10)
	char pad_128[0x40]; // 0x128(0x40)
	struct FMulticastInlineDelegate OnViewedPlayspacesChanged; // 0x168(0x10)
	bool bTickModeEnabled; // 0x178(0x01)
	bool bRequestedViewTargetUpdate; // 0x179(0x01)
	bool bHasViewTargetBeenCameraReady; // 0x17a(0x01)
	char pad_17B[0x1]; // 0x17b(0x01)
	enum class EAresPlayerViewTargetMode DefaultMode; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	struct FViewTargetInfo ViewTargetInfo; // 0x180(0x10)
	struct AActor* LocalPlayerViewTarget; // 0x190(0x08)
	struct AActor* LastTargetBeforeFreeCam; // 0x198(0x08)
	struct UPlayspaceComponent* CachedViewTargetPlayspace; // 0x1a0(0x08)

	void SetDefaultMode(enum class EAresPlayerViewTargetMode Mode); // Function ShooterGame.ViewTargetComponent.SetDefaultMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3c613d0
	void OnViewTargetPlayspaceChanged(struct UPlayspaceComponent* PlayspaceComponent); // Function ShooterGame.ViewTargetComponent.OnViewTargetPlayspaceChanged // (Final|Native|Private) // @ game+0x3c61340
	void OnRep_ViewTargetInfo(struct FViewTargetInfo PreviousViewTargetInfo); // Function ShooterGame.ViewTargetComponent.OnRep_ViewTargetInfo // (Final|Native|Private) // @ game+0x3c612b0
	bool IsViewingLocal(struct AShooterPlayerState* InPlayerState); // Function ShooterGame.ViewTargetComponent.IsViewingLocal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c610b0
	bool IsSpectating(struct AActor* InActor); // Function ShooterGame.ViewTargetComponent.IsSpectating // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c61010
	bool IsInSpectatorMode(); // Function ShooterGame.ViewTargetComponent.IsInSpectatorMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60fe0
	bool IsInPlayerSpectatingMode(); // Function ShooterGame.ViewTargetComponent.IsInPlayerSpectatingMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60fb0
	void HandleViewedPlayspacesChanged(); // Function ShooterGame.ViewTargetComponent.HandleViewedPlayspacesChanged // (Final|Native|Private) // @ game+0x3c60db0
	void HandleOnCharacterRespawned(struct AShooterCharacter* SpawnedCharacter); // Function ShooterGame.ViewTargetComponent.HandleOnCharacterRespawned // (Final|Native|Private) // @ game+0x3634e00
	struct AShooterCharacter* GetTargetCharacter(); // Function ShooterGame.ViewTargetComponent.GetTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60c40
	struct AShooterCharacter* GetSpectatedSpawnedCharacter(); // Function ShooterGame.ViewTargetComponent.GetSpectatedSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60c10
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.ViewTargetComponent.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60be0
	struct FViewTargetInfo GetInfo(); // Function ShooterGame.ViewTargetComponent.GetInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60b20
	enum class EAresPlayerViewTargetMode GetDefaultMode(); // Function ShooterGame.ViewTargetComponent.GetDefaultMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60af0
	void AuthSetMode(enum class EAresPlayerViewTargetMode NewMode); // Function ShooterGame.ViewTargetComponent.AuthSetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3c608b0
};

// Class ShooterGame.VNGManager
// Size: 0xa8 (Inherited: 0x80)
struct UVNGManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UVNGService* VNGService; // 0x90(0x08)
	struct FString WebURL; // 0x98(0x10)

	struct UVNGManager* GetVNGManager(struct UObject* WorldContextObject); // Function ShooterGame.VNGManager.GetVNGManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c60c70
	struct FString GetEditVNGDataURL(); // Function ShooterGame.VNGManager.GetEditVNGDataURL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x378cc80
};

// Class ShooterGame.VNGService
// Size: 0x38 (Inherited: 0x30)
struct UVNGService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.VoiceSessionParticipantModelInterfaceBase
// Size: 0xa8 (Inherited: 0x30)
struct UVoiceSessionParticipantModelInterfaceBase : UObject {
	char pad_30[0x78]; // 0x30(0x78)
};

// Class ShooterGame.VoiceSessionParticipantModel
// Size: 0x140 (Inherited: 0xa8)
struct UVoiceSessionParticipantModel : UVoiceSessionParticipantModelInterfaceBase {
	struct FMulticastInlineDelegate OnIsMutedChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnIsRestrictedChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnIsSpeakingChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnIsPTTPressedChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnVolumeChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnEnergyChanged; // 0xf8(0x10)
	char pad_108[0x38]; // 0x108(0x38)

	bool IsSpeaking(); // Function ShooterGame.VoiceSessionParticipantModel.IsSpeaking // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c673f0
	bool IsRestricted(); // Function ShooterGame.VoiceSessionParticipantModel.IsRestricted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c67390
	bool IsPTTPressed(); // Function ShooterGame.VoiceSessionParticipantModel.IsPTTPressed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c67330
	bool IsMuted(); // Function ShooterGame.VoiceSessionParticipantModel.IsMuted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x36b0100
	int32_t GetVolume(); // Function ShooterGame.VoiceSessionParticipantModel.GetVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a85500
	struct FString GetSubject(); // Function ShooterGame.VoiceSessionParticipantModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911e80
	enum class EVoiceSessionType GetSessionType(); // Function ShooterGame.VoiceSessionParticipantModel.GetSessionType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391ead0
	struct FPlatformPlayerSubject GetPlayerSubject(); // Function ShooterGame.VoiceSessionParticipantModel.GetPlayerSubject // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3911e80
	int32_t GetEnergy(); // Function ShooterGame.VoiceSessionParticipantModel.GetEnergy // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3a34120
	struct FString GetDisplayName(); // Function ShooterGame.VoiceSessionParticipantModel.GetDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c66870
};

// Class ShooterGame.VoiceModel
// Size: 0xf8 (Inherited: 0x30)
struct UVoiceModel : UObject {
	struct FMulticastInlineDelegate OnSessionParticipantAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnSessionParticipantRemoved; // 0x40(0x10)
	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> TeamSessionParticipants; // 0x50(0x50)
	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> PartySessionParticipants; // 0xa0(0x50)
	char pad_F0[0x8]; // 0xf0(0x08)

	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> GetTeamSessionParticipants(); // Function ShooterGame.VoiceModel.GetTeamSessionParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c66c40
	struct UVoiceSessionParticipantModel* GetSessionParticipantForType(enum class EVoiceSessionType SessionType, struct FString Subject); // Function ShooterGame.VoiceModel.GetSessionParticipantForType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c66b00
	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> GetPartySessionParticipants(); // Function ShooterGame.VoiceModel.GetPartySessionParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c66a40
};

// Class ShooterGame.VoicePreferencesManager
// Size: 0x50 (Inherited: 0x30)
struct UVoicePreferencesManager : UObject {
	struct URNetVoiceManager* RNetVoiceManager; // 0x30(0x08)
	struct UVoiceModel* VoiceModel; // 0x38(0x08)
	struct UPartyModel* PartyModel; // 0x40(0x08)
	struct UVoicePreferencesModel* VoicePreferencesModel; // 0x48(0x08)

	void ReconcilePartyMemberPreferenceWithParticipant(struct UPartyMemberVoicePreference* MemberPreference, struct UVoiceSessionParticipantModel* ParticipantModel); // Function ShooterGame.VoicePreferencesManager.ReconcilePartyMemberPreferenceWithParticipant // (Final|Native|Private) // @ game+0x3c67aa0
	void HandleSessionParticipantAdded(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.VoicePreferencesManager.HandleSessionParticipantAdded // (Final|Native|Private) // @ game+0x3c66ee0
	struct UPartyMemberVoicePreference* GetOrCreatePartyMemberVoicePreference(struct FString Subject); // Function ShooterGame.VoicePreferencesManager.GetOrCreatePartyMemberVoicePreference // (Final|Native|Private) // @ game+0x3c66980
};

// Class ShooterGame.PartyMemberVoicePreference
// Size: 0x68 (Inherited: 0x30)
struct UPartyMemberVoicePreference : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct FString Subject; // 0x50(0x10)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class ShooterGame.VoicePreferencesModel
// Size: 0xa0 (Inherited: 0x30)
struct UVoicePreferencesModel : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct TMap<struct FString, struct UPartyMemberVoicePreference*> PartyMemberPreferences; // 0x50(0x50)
};

// Class ShooterGame.VoiceRoomManager
// Size: 0xc0 (Inherited: 0x80)
struct UVoiceRoomManager : UInitSystem {
	struct URNetVoiceManager* RNetVoiceManager; // 0x80(0x08)
	struct UPartyManager* PartyManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct UPregameManager* PregameManager; // 0x98(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0xa0(0x08)
	struct UAresSettingsManager* SettingsManager; // 0xa8(0x08)
	struct UContentIndexManager* ContentIndexManager; // 0xb0(0x08)
	struct UContentIndex* ContentIndex; // 0xb8(0x08)

	void UpdateVoiceRoom(); // Function ShooterGame.VoiceRoomManager.UpdateVoiceRoom // (Final|Native|Private) // @ game+0x3c68570
	void OnCustomPartyVoiceEnableChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.VoiceRoomManager.OnCustomPartyVoiceEnableChanged // (Final|Native|Private) // @ game+0x3c676c0
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.VoiceRoomManager.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x3c66d40
	struct UVoiceRoomManager* GetVoiceRoomManager(struct UObject* WorldContextObject); // Function ShooterGame.VoiceRoomManager.GetVoiceRoomManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c66c70
};

// Class ShooterGame.VoiceSessionParticipantModelInterface
// Size: 0x30 (Inherited: 0x30)
struct UVoiceSessionParticipantModelInterface : UInterface {

	void UnbindOnVolumeChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnVolumeChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c684b0
	void UnbindOnIsSpeakingChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsSpeakingChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c683f0
	void UnbindOnIsRestrictedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsRestrictedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c68330
	void UnbindOnIsPTTPressedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsPTTPressedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c68270
	void UnbindOnIsMutedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsMutedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c681b0
	void UnbindOnIsInRoomChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsInRoomChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3a9ffd0
	void UnbindOnEnergyChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnEnergyChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c680f0
	bool IsSpeaking(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsSpeaking // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c673b0
	bool IsRestricted(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsRestricted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c67350
	bool IsPTTPressed(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsPTTPressed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c672f0
	bool IsMuted(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsMuted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c672b0
	bool IsInRoom(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsInRoom // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3966800
	int32_t GetVolume(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c66d00
	enum class EVoiceSessionType GetSessionType(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetSessionType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c66c00
	struct FPlatformPlayerSubject GetPlayerSubject(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetPlayerSubject // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c66a70
	int32_t GetEnergy(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetEnergy // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c66940
	void BindOnVolumeChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnVolumeChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c66610
	void BindOnIsSpeakingChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsSpeakingChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c2d500
	void BindOnIsRestrictedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsRestrictedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c66550
	void BindOnIsPTTPressedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsPTTPressedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c66490
	void BindOnIsMutedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsMutedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c663d0
	void BindOnIsInRoomChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsInRoomChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x39f0c90
	void BindOnEnergyChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnEnergyChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3c66310
};

// Class ShooterGame.VoiceSessionParticipantModelWrapperBase
// Size: 0xb8 (Inherited: 0xa8)
struct UVoiceSessionParticipantModelWrapperBase : UVoiceSessionParticipantModelInterfaceBase {
	struct TScriptInterface<IVoiceSessionParticipantModelInterface> WrappedModel; // 0xa8(0x10)

	void HandleVolumeChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleVolumeChanged // (Native|Protected) // @ game+0x2627d60
	void HandleIsSpeakingChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsSpeakingChanged // (Native|Protected) // @ game+0x3c66e50
	void HandleIsRestrictedChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsRestrictedChanged // (Native|Protected) // @ game+0x381e9a0
	void HandleIsPTTPressedChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsPTTPressedChanged // (Native|Protected) // @ game+0x2627c40
	void HandleIsMutedChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsMutedChanged // (Native|Protected) // @ game+0x3c66dc0
	void HandleIsInRoomChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsInRoomChanged // (Native|Protected) // @ game+0x378d1f0
	void HandleEnergyChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleEnergyChanged // (Native|Protected) // @ game+0x2627df0
};

// Class ShooterGame.VoiceSessionParticipantModelSelector
// Size: 0xe8 (Inherited: 0xb8)
struct UVoiceSessionParticipantModelSelector : UVoiceSessionParticipantModelWrapperBase {
	struct UVoiceModel* VoiceModel; // 0xb8(0x08)
	char pad_C0[0x28]; // 0xc0(0x28)

	void SetVoiceModel(struct UVoiceModel* NewValue); // Function ShooterGame.VoiceSessionParticipantModelSelector.SetVoiceModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67e50
	void SetSubject(struct FPlatformPlayerSubject NewValue); // Function ShooterGame.VoiceSessionParticipantModelSelector.SetSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67d50
	void SetSessionType(enum class EVoiceSessionType NewValue); // Function ShooterGame.VoiceSessionParticipantModelSelector.SetSessionType // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67cd0
	struct UVoiceSessionParticipantModelSelector* MakeStandard(enum class EVoiceSessionType VoiceSessionType, struct UObject* WorldContextObject, struct UObject* Outer); // Function ShooterGame.VoiceSessionParticipantModelSelector.MakeStandard // (Final|Native|Static|Private|BlueprintCallable) // @ game+0x3c67530
	struct UVoiceSessionParticipantModelSelector* Make(enum class EVoiceSessionType VoiceSessionType, struct UVoiceModel* VoiceModel, struct UObject* Outer); // Function ShooterGame.VoiceSessionParticipantModelSelector.Make // (Final|Native|Static|Private|BlueprintCallable) // @ game+0x3c67430
	void HandleVoiceSessionParticipantRemoved(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.VoiceSessionParticipantModelSelector.HandleVoiceSessionParticipantRemoved // (Final|Native|Private) // @ game+0x3c67220
	void HandleVoiceSessionParticipantAdded(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.VoiceSessionParticipantModelSelector.HandleVoiceSessionParticipantAdded // (Final|Native|Private) // @ game+0x3c67190
};

// Class ShooterGame.VoiceViewController
// Size: 0xd0 (Inherited: 0x80)
struct UVoiceViewController : UInitSystem {
	struct URNetVoiceManager* RNetVoiceManager; // 0x80(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x88(0x08)
	struct UVoicePreferencesManager* VoicePreferencesManager; // 0x90(0x08)
	struct UVoiceModel* VoiceModel; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	char pad_A8[0x28]; // 0xa8(0x28)

	void ToggleMuteForSubject(struct FPlatformPlayerSubject& Subject); // Function ShooterGame.VoiceViewController.ToggleMuteForSubject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c68040
	void ToggleMuteForParticipant(struct UVoiceSessionParticipantModel* Participant); // Function ShooterGame.VoiceViewController.ToggleMuteForParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67fb0
	void SetVolumeForParticipant(struct UVoiceSessionParticipantModel* Participant, int32_t Volume); // Function ShooterGame.VoiceViewController.SetVolumeForParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67ee0
	void SetMuteForSelf(bool bIsMuted); // Function ShooterGame.VoiceViewController.SetMuteForSelf // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67c40
	void SetMuteForParticipant(struct UVoiceSessionParticipantModel* Participant, bool bIsMuted); // Function ShooterGame.VoiceViewController.SetMuteForParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67b70
	void PreventPTTActivationsByTagAndSessionType(struct FString Tag, enum class EVoiceSessionType SessionType); // Function ShooterGame.VoiceViewController.PreventPTTActivationsByTagAndSessionType // (Final|Native|Public|BlueprintCallable) // @ game+0x3c679b0
	void PreventPTTActivationsByTag(struct FString Tag); // Function ShooterGame.VoiceViewController.PreventPTTActivationsByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67900
	void OnPartyPTTEnabledChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.VoiceViewController.OnPartyPTTEnabledChanged // (Final|Native|Private) // @ game+0x3c677e0
	void MuteParticipantFromReportModal(struct UVoiceSessionParticipantModel* Participant); // Function ShooterGame.VoiceViewController.MuteParticipantFromReportModal // (Final|Native|Public|BlueprintCallable) // @ game+0x3c67630
	void HandleVoiceParticipantUpdated(enum class EVoiceSessionType SessionType, struct FVoiceSessionParticipant& Participant); // Function ShooterGame.VoiceViewController.HandleVoiceParticipantUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3c67080
	void HandleVoiceParticipantRemoved(enum class EVoiceSessionType SessionType, struct FVoiceSessionParticipant& Participant); // Function ShooterGame.VoiceViewController.HandleVoiceParticipantRemoved // (Final|Native|Private|HasOutParms) // @ game+0x3c66f70
	struct UVoiceModel* GetVoiceModel(); // Function ShooterGame.VoiceViewController.GetVoiceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x391c120
	void CancelPreventPTTActivationsByTagAndSessionType(struct FString Tag, enum class EVoiceSessionType SessionType); // Function ShooterGame.VoiceViewController.CancelPreventPTTActivationsByTagAndSessionType // (Final|Native|Public|BlueprintCallable) // @ game+0x3c66780
	void CancelPreventPTTActivationsByTag(struct FString Tag); // Function ShooterGame.VoiceViewController.CancelPreventPTTActivationsByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3c666d0
};

// Class ShooterGame.VoteControllerComponent
// Size: 0x1c0 (Inherited: 0xe8)
struct UVoteControllerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnDebugQueueVoteCalled; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnDebugParticipateVoteCalled; // 0x100(0x10)
	struct FMulticastInlineDelegate OnActiveVoteUpdated; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLocallySelectedOptionUpdated; // 0x120(0x10)
	float VoteQueueRateLimit; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UGameplayVoteOptionComponent* LocallySelectedOption; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)
	struct UVoteManagerComponent* AuthVoteManagerComponent; // 0x148(0x08)
	struct AGameplayVote* ActiveVote; // 0x150(0x08)
	enum class EVoteState CachedActiveVoteState; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct UNotificationManager* NotificationManager; // 0x160(0x08)
	char pad_168[0x58]; // 0x168(0x58)

	void ShowNotification(struct FText& Text); // Function ShooterGame.VoteControllerComponent.ShowNotification // (Final|Native|Private|HasOutParms|Const) // @ game+0x3c6f220
	void SetLocallySelectedOption(struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.VoteControllerComponent.SetLocallySelectedOption // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6f100
	void ServerMakeQueueVoteRequest(struct TSoftClassPtr<UObject> VoteType); // Function ShooterGame.VoteControllerComponent.ServerMakeQueueVoteRequest // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x3c6f040
	void ServerMakeParticipateVoteRequest(struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.VoteControllerComponent.ServerMakeParticipateVoteRequest // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x28c8460
	void OnRep_LocallySelectedOption(); // Function ShooterGame.VoteControllerComponent.OnRep_LocallySelectedOption // (Final|Native|Private) // @ game+0x3c6f000
	void OnRep_ActiveVote(); // Function ShooterGame.VoteControllerComponent.OnRep_ActiveVote // (Final|Native|Private) // @ game+0x3c6efe0
	void OnAllowedVoteTypesReplicated(); // Function ShooterGame.VoteControllerComponent.OnAllowedVoteTypesReplicated // (Final|Native|Private) // @ game+0x3c6efa0
	bool HasValidLocallySelectedOption(); // Function ShooterGame.VoteControllerComponent.HasValidLocallySelectedOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6ef40
	void HandlePlayerVoteInput(int32_t OptionIndex); // Function ShooterGame.VoteControllerComponent.HandlePlayerVoteInput // (Final|Native|Private) // @ game+0x3c6ee20
	void HandleActiveVoteStatusChanged(struct AGameplayVote* Vote, enum class EVoteState NewState); // Function ShooterGame.VoteControllerComponent.HandleActiveVoteStatusChanged // (Final|Native|Private) // @ game+0x3c6ecd0
	struct UGameplayVoteOptionComponent* GetLocallySelectedOption(); // Function ShooterGame.VoteControllerComponent.GetLocallySelectedOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x39d61f0
	struct AGameplayVote* GetActiveVote(); // Function ShooterGame.VoteControllerComponent.GetActiveVote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c34ea0
	void DebugAttemptQueueExampleVoteNonStaticFunc(); // Function ShooterGame.VoteControllerComponent.DebugAttemptQueueExampleVoteNonStaticFunc // (Final|Native|Public) // @ game+0x3c6e620
	void DebugAttemptQueueExampleVoteFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.VoteControllerComponent.DebugAttemptQueueExampleVoteFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void DebugAttemptDoVoteNonStaticFunc(int32_t Index, struct UWorld* World); // Function ShooterGame.VoteControllerComponent.DebugAttemptDoVoteNonStaticFunc // (Final|Native|Public) // @ game+0x3c6e550
	void DebugAttemptDoVoteFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.VoteControllerComponent.DebugAttemptDoVoteFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x372e9f0
	void ClientShowNotification(struct FText Text); // Function ShooterGame.VoteControllerComponent.ClientShowNotification // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|Const) // @ game+0x3c6e470
	void AuthSetActiveVote(struct AGameplayVote* NewVote); // Function ShooterGame.VoteControllerComponent.AuthSetActiveVote // (Final|Native|Public) // @ game+0x3634e00
	void AttemptQueueVote(struct TSoftClassPtr<UObject>& VoteType, bool bShouldRateLimit); // Function ShooterGame.VoteControllerComponent.AttemptQueueVote // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c6e180
	void AttemptParticipateVote(struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.VoteControllerComponent.AttemptParticipateVote // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6e0f0
};

// Class ShooterGame.VoteManagerComponent
// Size: 0x138 (Inherited: 0xe8)
struct UVoteManagerComponent : UActorComponent {
	struct TArray<struct AGameplayVote*> AllowedVoteTypes; // 0xe8(0x10)
	struct UServerVoteTelemetryComponent* ServerVoteTelemetryComponent; // 0xf8(0x08)
	char pad_100[0x8]; // 0x100(0x08)
	struct FVoteQueue VoteQueue; // 0x108(0x18)
	struct TArray<struct FVoteRecord> PreviousVotes; // 0x120(0x10)
	char pad_130[0x8]; // 0x130(0x08)

	struct AGameplayVote* SpawnVote(struct AGameplayVote* VoteType, struct AShooterPlayerState* Requester); // Function ShooterGame.VoteManagerComponent.SpawnVote // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6f300
	void HandleGamePhase(enum class EAresGamePhase NewPhase); // Function ShooterGame.VoteManagerComponent.HandleGamePhase // (Final|Native|Private) // @ game+0x3c6eda0
	int32_t GetStartRoundForVote(struct AGameplayVote* Vote); // Function ShooterGame.VoteManagerComponent.GetStartRoundForVote // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c6ea00
	struct TArray<struct FVoteRecord> GetPreviousVotes(); // Function ShooterGame.VoteManagerComponent.GetPreviousVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6e970
	int32_t GetNumPreviousVotes(struct AShooterPlayerState* Requester, struct AGameplayVote* VoteType); // Function ShooterGame.VoteManagerComponent.GetNumPreviousVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6e870
	struct TArray<struct AGameplayVote*> GetAllowedVoteTypes(); // Function ShooterGame.VoteManagerComponent.GetAllowedVoteTypes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x38dc160
	void AuthCancelActiveVotesOfType(struct AGameplayVote* VoteType); // Function ShooterGame.VoteManagerComponent.AuthCancelActiveVotesOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6e390
	void AttemptStartNewVote(); // Function ShooterGame.VoteManagerComponent.AttemptStartNewVote // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6e370
	enum class EAttemptQueueVoteResult AttemptQueueVote(struct AShooterPlayerState* Requester, struct AGameplayVote* Vote); // Function ShooterGame.VoteManagerComponent.AttemptQueueVote // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6e2a0
	bool AttemptCastVote(struct AShooterPlayerState* Player, struct AShooterGameState* State, struct UGameplayVoteOptionComponent* VotedOption); // Function ShooterGame.VoteManagerComponent.AttemptCastVote // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6dfe0
};

// Class ShooterGame.WaitForEquipStateComponent
// Size: 0x2e8 (Inherited: 0x2e0)
struct UWaitForEquipStateComponent : UScriptStateComponent {
	bool bTriggersAbilityExecution; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
};

// Class ShooterGame.WaitForProgressModelCompleted_AsyncAction
// Size: 0x58 (Inherited: 0x38)
struct UWaitForProgressModelCompleted_AsyncAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x38(0x10)
	struct TScriptInterface<IProgressModel> ProgressModel; // 0x48(0x10)

	struct UWaitForProgressModelCompleted_AsyncAction* WaitForSingleProgressCompleted(struct TScriptInterface<IProgressModel>& Target); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.WaitForSingleProgressCompleted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c6f480
	struct UWaitForProgressModelCompleted_AsyncAction* WaitForMultipleProgressCompleted(struct TArray<struct TScriptInterface<IProgressModel>>& Targets); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.WaitForMultipleProgressCompleted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c6f3d0
	void HandleProgressStateChanged(struct UObject* Source); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.HandleProgressStateChanged // (Final|Native|Private) // @ game+0x3c6eeb0
	void Cancel(); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.Cancel // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6e450
};

// Class ShooterGame.WaitForResourcesStateComponent
// Size: 0x2e0 (Inherited: 0x2e0)
struct UWaitForResourcesStateComponent : UScriptStateComponent {
};

// Class ShooterGame.WaitForUsingUsableStateComponent
// Size: 0x2e8 (Inherited: 0x2e0)
struct UWaitForUsingUsableStateComponent : UScriptStateComponent {
	struct UUsableComponent* EquipRequestingComponent; // 0x2e0(0x08)
};

// Class ShooterGame.WalkAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UWalkAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.WalkAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UWalkAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.WallMesh
// Size: 0x6b0 (Inherited: 0x600)
struct UWallMesh : UProceduralMeshComponent {
	float WallHeight; // 0x5f8(0x04)
	float MaxWallHeightOffset; // 0x5fc(0x04)
	float MaxAnchorSeparation; // 0x600(0x04)
	float WallEndPadding; // 0x604(0x04)
	float WallBottomOffset; // 0x608(0x04)
	float ClientTargetEdgeLength; // 0x60c(0x04)
	int32_t ClientNumSubdivisions; // 0x610(0x04)
	bool bClientGenerateCollision; // 0x614(0x01)
	bool bServerGenerateCollision; // 0x615(0x01)
	float MaskedSideOffset; // 0x618(0x04)
	float MaskedTopOffset; // 0x61c(0x04)
	char pad_626[0x7a]; // 0x626(0x7a)
	struct FMulticastInlineDelegate OnWallMeshGenerated; // 0x6a0(0x10)

	struct FVector WallSectionStartLocation(int32_t Section); // Function ShooterGame.WallMesh.WallSectionStartLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c6f5d0
	struct FVector WallSectionEndLocation(int32_t Section); // Function ShooterGame.WallMesh.WallSectionEndLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c6f520
	bool MeshBuilt(); // Function ShooterGame.WallMesh.MeshBuilt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6ef70
	struct FVector2D DistanceToWall(struct FVector& Position, float OpenStartTime, float OpenDistancePerSecond, float PointDuration, struct FVector2D MaxThresholds, float AdditionalHalfHeight); // Function ShooterGame.WallMesh.DistanceToWall // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c6e640
	void BeginBuildingMesh(); // Function ShooterGame.WallMesh.BeginBuildingMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6e420
	void AddWallAnchor(struct FVector& AnchorLocation, struct FVector& AnchorTangent); // Function ShooterGame.WallMesh.AddWallAnchor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c6df00
};

// Class ShooterGame.WallPenetrationComponent
// Size: 0x178 (Inherited: 0xf8)
struct UWallPenetrationComponent : UProjectileCollisionResponseComponent {
	float StoppingDistanceMultiplier; // 0xf8(0x04)
	float PenetrationPowerMultiplier; // 0xfc(0x04)
	bool bApplyPostPenetrationAirDropoff; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	float PostPenetrationAirDropoffDistance; // 0x104(0x04)
	struct FImpactEffects ImpactEffects[0x2]; // 0x108(0x50)
	char pad_158[0x2]; // 0x158(0x02)
	bool bImpactEffectsEnabled; // 0x15a(0x01)
	char pad_15B[0x1d]; // 0x15b(0x1d)

	void SetPostPenetrationAirDropoff(bool bEnablePostPenetrationAirDropoff); // Function ShooterGame.WallPenetrationComponent.SetPostPenetrationAirDropoff // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6f190
	void OnStop(); // Function ShooterGame.WallPenetrationComponent.OnStop // (Final|Native|Public) // @ game+0x3c6f020
	void OnMaximumRangeReached(); // Function ShooterGame.WallPenetrationComponent.OnMaximumRangeReached // (Final|Native|Public) // @ game+0x3c6efc0
	bool GetPostPenetrationAirDropoff(); // Function ShooterGame.WallPenetrationComponent.GetPostPenetrationAirDropoff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6e940
};

// Class ShooterGame.WallPenetrationDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UWallPenetrationDamageQuery : UInterface {

	bool IsWallPenetration(); // Function ShooterGame.WallPenetrationDamageQuery.IsWallPenetration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3950f90
};

// Class ShooterGame.WallPenetrationTargetingStateComponent
// Size: 0x5c0 (Inherited: 0x4b8)
struct UWallPenetrationTargetingStateComponent : ULineTargetingStateComponent {
	float WallAngle; // 0x4b8(0x04)
	bool bUseAimVector; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	float MaximumPenetrationDepth; // 0x4c0(0x04)
	float MaximumAirGap; // 0x4c4(0x04)
	float EncroachRadius; // 0x4c8(0x04)
	float EncroachOffset; // 0x4cc(0x04)
	enum class ECollisionChannel EncroachChannel; // 0x4d0(0x01)
	char pad_4D1[0x7]; // 0x4d1(0x07)
	struct FClassInclusionExclusionFilter EncroachFilter; // 0x4d8(0x50)
	char pad_528[0x98]; // 0x528(0x98)

	void GetWallPointsValid(bool& Entrance, bool& Exit); // Function ShooterGame.WallPenetrationTargetingStateComponent.GetWallPointsValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6eb20
	struct FHitResult GetWallExitResult(); // Function ShooterGame.WallPenetrationTargetingStateComponent.GetWallExitResult // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6eaa0
};

// Class ShooterGame.WeaponModificationComponent
// Size: 0x178 (Inherited: 0xe8)
struct UWeaponModificationComponent : UEquippableModificationComponent {
	struct FSoftObjectPath WeaponModificationsDataTable; // 0xe8(0x20)
	struct FSoftObjectPath DevOnlyWeaponModificationsDataTable; // 0x108(0x20)
	struct TMap<struct UObject*, struct FEquippableInfo> GunModifiers; // 0x128(0x50)

	struct TMap<struct UObject*, struct FEquippableInfo> GetWeaponModificationsMap(); // Function ShooterGame.WeaponModificationComponent.GetWeaponModificationsMap // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6ec00
};

// Class ShooterGame.WhileDisarmedStateComponent
// Size: 0x2e0 (Inherited: 0x2e0)
struct UWhileDisarmedStateComponent : UScriptStateComponent {
};

// Class ShooterGame.WhileUsingUsableStateComponent
// Size: 0x358 (Inherited: 0x2e0)
struct UWhileUsingUsableStateComponent : UScriptStateComponent {
	struct UStateComponent* CancelState; // 0x2e0(0x08)
	struct FScriptStateEffectInfo CancelEffectInfo; // 0x2e8(0x38)
	struct FScriptStateEffectInfo CompleteEffectInfo; // 0x320(0x38)

	void SetCancelState(struct UStateComponent* State); // Function ShooterGame.WhileUsingUsableStateComponent.SetCancelState // (Final|Native|Public|BlueprintCallable) // @ game+0x3ac5360
};

// Class ShooterGame.WhisperChatManager
// Size: 0x1a8 (Inherited: 0x80)
struct UWhisperChatManager : UInitSystem {
	struct FMulticastInlineDelegate OnWhisperEnabledUpdated; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0xa0(0x08)
	struct UFriendsModel* FriendsModel; // 0xa8(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0xb0(0x08)
	struct TMap<struct FString, struct UTextChatRoomV2*> Rooms; // 0xb8(0x50)
	struct TMap<struct FString, struct FDateTime> RecentSentWhispersTimes; // 0x108(0x50)
	struct TMap<struct FString, struct FDateTime> RecentReceivedWhispersTimes; // 0x158(0x50)

	void UpdateDependencyBindings(bool Enabled); // Function ShooterGame.WhisperChatManager.UpdateDependencyBindings // (Final|Native|Private) // @ game+0x3c77870
	void HandleRoomListChanged(); // Function ShooterGame.WhisperChatManager.HandleRoomListChanged // (Final|Native|Private) // @ game+0x3c770e0
	struct UWhisperChatManager* GetWhisperChatManager(struct UObject* WorldContextObject); // Function ShooterGame.WhisperChatManager.GetWhisperChatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c76d60
	struct UTextChatRoomV2* GetRoomByDisplayName(struct FString DisplayName); // Function ShooterGame.WhisperChatManager.GetRoomByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x3c76c70
	struct TArray<struct FString> GetActiveWhisperTargets(); // Function ShooterGame.WhisperChatManager.GetActiveWhisperTargets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c76930
	struct TArray<struct FString> GetActiveWhisperSenders(); // Function ShooterGame.WhisperChatManager.GetActiveWhisperSenders // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c768b0
};

// Class ShooterGame.WidgetAnimationConductorNode
// Size: 0xf8 (Inherited: 0xa8)
struct UWidgetAnimationConductorNode : UAnimationConductorNodeBase {
	struct UUserWidget* Widget; // 0xa8(0x08)
	struct UWidgetAnimation* Animation; // 0xb0(0x08)
	struct FWidgetAnimationSettings Settings; // 0xb8(0x18)
	struct FName CueScopeName; // 0xd0(0x0c)
	bool bAllowUnscopedCues; // 0xdc(0x01)
	char pad_DD[0x3]; // 0xdd(0x03)
	struct UUMGSequencePlayer* SequencePlayer; // 0xe0(0x08)
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UObject* CueSource; // 0xf0(0x08)

	void HandleCueSourceScopedCue(struct UObject* Source, struct FScopedAnimationCueSource_ScopedCueEventData EventData); // Function ShooterGame.WidgetAnimationConductorNode.HandleCueSourceScopedCue // (Final|Native|Private) // @ game+0x3c76ed0
	void HandleCueSourceCue(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.WidgetAnimationConductorNode.HandleCueSourceCue // (Final|Native|Private) // @ game+0x3c76df0
	struct UWidgetAnimationConductorNode* Create(struct UObject* Outer, struct UWidgetAnimation* Animation, struct FWidgetAnimationSettings& Settings, struct FName CueScopeName, bool bAllowUnscopedCues, struct UUserWidget* Widget); // Function ShooterGame.WidgetAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c763b0
};

// Class ShooterGame.UIAutomationHelpers
// Size: 0x30 (Inherited: 0x30)
struct UUIAutomationHelpers : UObject {

	void WaitForWidgetByType(struct UObject* WorldContextObject, struct UUserWidget* Type, float MaxWaitSeconds, struct UUserWidget*& FoundWidget, struct FLatentActionInfo LatentInfo); // Function ShooterGame.UIAutomationHelpers.WaitForWidgetByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c77b20
	void WaitForWidgetByTag(struct UObject* WorldContextObject, struct FName& Tag, struct UUserWidget* Type, float MaxWaitSeconds, struct UUserWidget*& FoundWidget, struct FLatentActionInfo LatentInfo); // Function ShooterGame.UIAutomationHelpers.WaitForWidgetByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c77900
	void GetFirstWidgetByType(struct UObject* WorldContextObject, struct UUserWidget*& FoundWidget, struct UUserWidget* WidgetType); // Function ShooterGame.UIAutomationHelpers.GetFirstWidgetByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c76b50
	void GetFirstWidgetByTag(struct UObject* WorldContextObject, struct UUserWidget*& FoundWidget, struct UUserWidget* WidgetType, struct FName& Tag); // Function ShooterGame.UIAutomationHelpers.GetFirstWidgetByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c769e0
};

// Class ShooterGame.WidgetAutomationExtensions
// Size: 0x30 (Inherited: 0x30)
struct UWidgetAutomationExtensions : UObject {

	void SetText(struct UWidget* Widget, struct FText& Text, float MaxWaitSeconds, float DelayAfterAction, struct FLatentActionInfo LatentInfo); // Function ShooterGame.WidgetAutomationExtensions.SetText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c774b0
	void Click(struct UWidget* Widget, float MaxWaitSeconds, float DelayAfterAction, struct FLatentActionInfo LatentInfo); // Function ShooterGame.WidgetAutomationExtensions.Click // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c76250
};

// Class ShooterGame.WidgetLayoutManager
// Size: 0x60 (Inherited: 0x30)
struct UWidgetLayoutManager : UObject {
	struct FMulticastInlineDelegate OnWidgetSelectionChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPresetIndexChanged; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct UCustomWidgetLayoutData* CustomLayoutData; // 0x58(0x08)

	void SetSelectedWidget(struct UAresTouchWidget* InSelectedWidget); // Function ShooterGame.WidgetLayoutManager.SetSelectedWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3c77420
	void SetCurrentPlayerPreset(enum class EWidgetLayoutPresetType InPreset); // Function ShooterGame.WidgetLayoutManager.SetCurrentPlayerPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x3c77320
	void HandlePresetIndexSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.WidgetLayoutManager.HandlePresetIndexSettingChanged // (Final|Native|Protected) // @ game+0x3c76fd0
	struct UAresTouchWidget* GetSelectedWidget(); // Function ShooterGame.WidgetLayoutManager.GetSelectedWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c76d30
	struct UCustomWidgetLayoutData* GetCustomLayoutData(); // Function ShooterGame.WidgetLayoutManager.GetCustomLayoutData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x386ac50
	enum class EWidgetLayoutPresetType GetCurrentPreset(); // Function ShooterGame.WidgetLayoutManager.GetCurrentPreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c769b0
	struct UWidgetLayoutManager* GET(struct UObject* WorldContextObject); // Function ShooterGame.WidgetLayoutManager.GET // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c76820
};

// Class ShooterGame.WidgetPoolComponent
// Size: 0x138 (Inherited: 0xe8)
struct UWidgetPoolComponent : UActorComponent {
	struct TMap<struct UUserWidget*, struct FWidgetPool> WidgetPoolsByClass; // 0xe8(0x50)

	struct UUserWidget* TakePooledWidget(struct UObject* WorldContext, struct UUserWidget* WidgetClass); // Function ShooterGame.WidgetPoolComponent.TakePooledWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c777a0
	struct UUserWidget* TakeOrCreatePooledWidget(struct UObject* WorldContext, struct UUserWidget* WidgetClass); // Function ShooterGame.WidgetPoolComponent.TakeOrCreatePooledWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c776d0
	void ReturnWidgetToPool(struct UObject* WorldContext, struct UUserWidget* Widget); // Function ShooterGame.WidgetPoolComponent.ReturnWidgetToPool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c77260
};

// Class ShooterGame.WildcardBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UWildcardBlueprintLibrary : UBlueprintFunctionLibrary {

	void TryBreakWildcardPure(struct FWildcard& Wildcard, int32_t& Value, bool& Succeeded); // Function ShooterGame.WildcardBlueprintLibrary.TryBreakWildcardPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x362f440
	void TryBreakWildcard(struct FWildcard& Wildcard, int32_t& Value, enum class EWildcardBlueprintLibrary_CastResult& Result); // Function ShooterGame.WildcardBlueprintLibrary.TryBreakWildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x362f2c0
	bool NotEqual_Wildcard(struct FWildcard& ValueA, struct FWildcard& ValueB); // Function ShooterGame.WildcardBlueprintLibrary.NotEqual_Wildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c77100
	void MakeWildcard(int32_t& Value, struct FWildcard& Wildcard); // Function ShooterGame.WildcardBlueprintLibrary.MakeWildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x362f1c0
	bool Equal_Wildcard(struct FWildcard& ValueA, struct FWildcard& ValueB); // Function ShooterGame.WildcardBlueprintLibrary.Equal_Wildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c766c0
	struct FWildcard EmptyWildcard(); // Function ShooterGame.WildcardBlueprintLibrary.EmptyWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c765d0
};

// Class ShooterGame.WrapBoxList
// Size: 0x2b8 (Inherited: 0x298)
struct UWrapBoxList : UOrderedListSimpleWidgetContainerBase {
	struct FVector2D InnerSlotPadding; // 0x298(0x08)
	float WrapWidth; // 0x2a0(0x04)
	bool bExplicitWrapWidth; // 0x2a4(0x01)
	char pad_2A5[0x13]; // 0x2a5(0x13)

	void SetInnerSlotPadding(struct FVector2D InPadding); // Function ShooterGame.WrapBoxList.SetInnerSlotPadding // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c773a0
};

// Class ShooterGame.WrapBoxListSlot
// Size: 0x68 (Inherited: 0x40)
struct UWrapBoxListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	bool bFillEmptySpace; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float FillSpanWhenLessThan; // 0x54(0x04)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x58(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x59(0x01)
	char pad_5A[0xe]; // 0x5a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.WrapBoxListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7ec20
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.WrapBoxListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e9b0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.WrapBoxListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e890
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan); // Function ShooterGame.WrapBoxListSlot.SetFillSpanWhenLessThan // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e690
	void SetFillEmptySpace(bool InbFillEmptySpace); // Function ShooterGame.WrapBoxListSlot.SetFillEmptySpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e570
};

// Class ShooterGame.WrapBoxSlotConfigurer
// Size: 0x70 (Inherited: 0x50)
struct UWrapBoxSlotConfigurer : UListEntrySlotConfigurerBase {
	struct FMargin Padding; // 0x50(0x10)
	bool bFillEmptySpace; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float FillSpanWhenLessThan; // 0x64(0x04)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x68(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.WrapBoxSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6f10
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.WrapBoxSlotConfigurer.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6cd0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.WrapBoxSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x37e6c30
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan); // Function ShooterGame.WrapBoxSlotConfigurer.SetFillSpanWhenLessThan // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e710
	void SetFillEmptySpace(bool bInFillEmptySpace); // Function ShooterGame.WrapBoxSlotConfigurer.SetFillEmptySpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e600
};

// Class ShooterGame.WrapperUserAction
// Size: 0x70 (Inherited: 0x58)
struct UWrapperUserAction : UUserActionBase {
	char pad_58[0x8]; // 0x58(0x08)
	struct TScriptInterface<IUserAction> UserAction; // 0x60(0x10)

	void HandleActionStateChanged(struct UObject* Source); // Function ShooterGame.WrapperUserAction.HandleActionStateChanged // (Native|Protected) // @ game+0x381e9a0
	void HandleActionDisplayInfoChanged(struct UObject* Source); // Function ShooterGame.WrapperUserAction.HandleActionDisplayInfoChanged // (Native|Protected) // @ game+0x3c66e50
	struct TScriptInterface<IUserAction> GetUserAction(); // Function ShooterGame.WrapperUserAction.GetUserAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7dd80
};

// Class ShooterGame.XRayTarget
// Size: 0x3f0 (Inherited: 0x3d8)
struct AXRayTarget : AActor {
	struct URoundPersistenceComponent* Persistence; // 0x3d8(0x08)
	struct USceneComponent* SceneRoot; // 0x3e0(0x08)
	float Radius; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
};

// Class ShooterGame.ZoomFovComponent
// Size: 0x528 (Inherited: 0x528)
struct UZoomFovComponent : UZoomComponent {
};

// Class ShooterGame.ZoomManagerComponent
// Size: 0x118 (Inherited: 0xe8)
struct UZoomManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UZoomComponent* ZoomComponent; // 0xf0(0x08)
	struct FZoomTransitionSettings ZoomTransitionSettings; // 0xf8(0x14)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct AShooterCharacter* CurrentOwningCharacter; // 0x110(0x08)

	void UpdateAttributeBinding(struct AActor* NewOwner); // Function ShooterGame.ZoomManagerComponent.UpdateAttributeBinding // (Final|Native|Private) // @ game+0x3c7f0f0
	void UnZoom(struct AAresEquippable* Equippable, float TimeDuration); // Function ShooterGame.ZoomManagerComponent.UnZoom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c7f030
	void SetZoomComponent(struct UZoomComponent* ZoomComponent); // Function ShooterGame.ZoomManagerComponent.SetZoomComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7eca0
	void OnZoomDisabledChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ZoomManagerComponent.OnZoomDisabledChanged // (Final|Native|Private|HasOutParms) // @ game+0x3c7e2c0
	void OnOwningEquippableUnequipped(); // Function ShooterGame.ZoomManagerComponent.OnOwningEquippableUnequipped // (Final|Native|Private) // @ game+0x3c7e260
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.ZoomManagerComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x3c7e190
	struct UZoomComponent* GetZoomComponent(); // Function ShooterGame.ZoomManagerComponent.GetZoomComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7ddc0
};

// Class ShooterGame.ZoomMultiplierComponent
// Size: 0x530 (Inherited: 0x528)
struct UZoomMultiplierComponent : UZoomComponent {
	enum class EZoomMultiplierType ZoomMultiplierType; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)

	enum class EZoomMultiplierType GetZoomMultiplierType(); // Function ShooterGame.ZoomMultiplierComponent.GetZoomMultiplierType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7fdd0
};

